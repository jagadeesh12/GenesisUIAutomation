package com.dw.automation.pages.impl;

import static com.dw.automation.pages.base.PageFactory.getFactory;
import static com.scholastic.torque.common.AssertUtils.assertDisplayed;

import java.awt.AWTException;
import java.io.IOException;
import java.text.DecimalFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import org.apache.commons.configuration.Configuration;
import org.hamcrest.Matchers;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;
import com.dw.automation.beans.ProductInfoBean;
import com.dw.automation.pages.ICartPage;
import com.dw.automation.pages.ICheckoutPage;
import com.dw.automation.pages.ICheckoutPage_2;
import com.dw.automation.pages.ILoginPage;
import com.dw.automation.pages.IReviewOrderPage;
import com.dw.automation.pages.IStudentFlyerOrdersPage;
import com.dw.automation.pages.IStudentOnlineOrdersPage;
import com.dw.automation.pages.impl.CheckoutPage.ConfirmAndSubmitOrder;
import com.dw.automation.pages.impl.CheckoutPage.RewardsAndCoupons;
import com.dw.automation.pages.impl.CheckoutPage.ShippingAndPayment;
import com.dw.automation.sections.ICouponSection;
import com.dw.automation.sections.IProductOrderSummarySection;
import com.dw.automation.sections.IProductOrderTableSection;
import com.dw.automation.sections.base.SectionFactory;
import com.dw.automation.support.ConstantUtils;
import com.dw.automation.support.PauseUtil;
import com.dw.automation.support.SCHUtils;
import com.scholastic.torque.common.AssertUtils;
import com.scholastic.torque.common.BaseTestPage;
import com.scholastic.torque.common.LocatorUtils;
import com.scholastic.torque.common.TestBaseProvider;
import com.scholastic.torque.common.TestPage;
import com.scholastic.torque.common.WaitUtils;
import cucumber.api.java.en.And;
import cucumber.api.java.en.Then;
import cucumber.api.java.en.When;

public class StudentFlyerOrdersPage extends BaseTestPage<TestPage>
		implements IStudentFlyerOrdersPage, IReviewOrderPage {
	LoginPage loginPage = new LoginPage();
	ShippingAndPayment shippingAndPaymentPage = getFactory().getICheckoutPage().getShippingAndPaymentSection();

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.btn.StudentNameclose")
	private WebElement btnStudentNameclose;

	@FindBy(locator = "dw.teacher.home.enterorder.yourclassroomorder.lbl.TeacherCatalogue")
	private WebElement lblTeacherCatalogues;

	@FindBy(locator = "dw.teacher.home.enterorder.yourclassroomorder.lbl.TeacherCatalogue.lnk.MonthGrde")
	private WebElement lnkMonthGrade;

	@FindBy(locator = "dw.teacher.home.enterorder.yourclassroomorder.lbl.TeacherCatalogue.lnk.SecondMonthGrde")
	private WebElement lnkSecondMonthGrade;

	@FindBy(locator = "dw.teacher.home.enterorder.yourclassroomorder.lbl.TeacherCatalogue.lnk.SecondMonthGrde")
	private List<WebElement> chklnkSecondMonthGrade;

	@FindBy(locator = "dw.teacher.home.enterorder.yourclassroomorder.lbl.Catalogue.FirstCatalogue")
	private WebElement imgFirstCatalogue;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.lbl.title")
	private WebElement lblTitle;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.lnk.learnmore")
	private WebElement lnkLearnMore;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.txt.Readonly.studentname")
	private WebElement txtReadOnlyStudentName;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.txt.studentname")
	private WebElement txtStudentName;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.txt.itemnumber")
	private WebElement txtItemQty;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.btn.add")
	private WebElement btnAdd;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.btn.saved")
	private WebElement btnSaved;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.lnk.applycoupon")
	private WebElement lnkApplyCoupon;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.applycoupon.txt.studentname")
	private WebElement txtCouponsStudentName;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.applycoupon.txt.couponnumber")
	private WebElement txtCouponNumber;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.btn.applycoupon")
	private WebElement btnApplyCoupons;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.btn.reviewcart")
	private WebElement btnReviewCart;

	@FindBy(locator = "dw.product.studentordertable.cmp")
	private WebElement cmpStudentOrderTable;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.roster.drp.studentname")
	private WebElement drpRosterStudentName;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.drp.autosuggestions")
	private List<WebElement> drpAutosuggestions;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.roster.lst.studentnamelist")
	private List<WebElement> lstRosterStudentName;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.roster.scrollbar.studentname")
	private WebElement scrollbarRosterStudentName;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.roster.lbl.studentboldletterorname")
	private WebElement lblStudentBoldLetterOrName;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.lnk.revieworder")
	private WebElement lnkReviewOrder;

	@FindBy(locator = "dw.reviewcartpage.miniPDP")
	private WebElement miniPDPDisplay_reviewCartpage;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.lbl.studentname")
	private WebElement lblStudentName;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.roster.lst.studentnamelist")
	private List<WebElement> lstStudentName;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.ordertable.column.lbl.item")
	private WebElement lblItemSFOOrderTable;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.ordertable.column.lbl.title")
	private WebElement lblTitleSFOOrderTable;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.ordertable.column.lbl.studentname")
	private WebElement lblStudentNameSFOOrderTable;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.ordertable.column.lbl.flyer")
	private WebElement lblFlyerSFOOrderTable;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.ordertable.column.lbl.price")
	private WebElement lblPriceSFOOrderTable;

	@FindBy(locator = "dw.studentflyerorder.Confirm.submit.TGAT.coupon.info.section")
	private WebElement TGAT_coupon_info_section;

	@FindBy(locator = "dw.studentflyerorder.CSR.Order.Type.Phone.Order")
	private WebElement CSR_Order_Type_Phone_Order;

	@FindBy(locator = "dw.studentflyerorder.CSR.Order.Type.Mail.Order")
	private WebElement CSR_Order_Type_Mail_Order;

	@FindBy(locator = "dw.studentflyerorder.CSR.Order.Type.Fax.Order")
	private WebElement CSR_Order_Type_Fax_Order;

	@FindBy(locator = "dw.studentflyerorder.callOut.CancelOrder")
	private WebElement callOut_CancelOrder;

	@FindBy(locator = "dw.studentflyerorder.Btn.Continue.To.Verify.Account")
	private WebElement Btn_Continue_To_Verify_Account;

	@FindBy(locator = "dw.studentflyerorder.fld.Ac.Num.LocateAccountPage")
	private WebElement fld_Ac_Num_LocateAccountPage;

	@FindBy(locator = "dw.studentflyerorder.dropdown.select.Search.By.LocateAccountPage")
	private WebElement dropdown_select_Search_By_LocateAccountPage;

	@FindBy(locator = "dw.studentflyerorder.option.TeacherName.SearchBy.LocateAccountPage")
	private WebElement option_TeacherName_SearchBy_LocateAccountPage;

	@FindBy(locator = "dw.studentflyerorder.option.SchoolAddr.SearchBy.LocateAccountPage")
	private WebElement option_SchoolAddr_SearchBy_LocateAccountPage;

	@FindBy(locator = "dw.studentflyerorder.fld.SchoolName.LocateAccountPage")
	private WebElement fld_SchoolName_LocateAccountPage;

	@FindBy(locator = "dw.studentflyerorder.hyperlink.Cancel.Order.Payment.Page")
	private WebElement hyperlink_Cancel_Order_Payment_Page;

	@FindBy(locator = "dw.studentflyerorder.fld.fName.SearchBy.LocateAccountPage")
	private WebElement fld_fName_SearchBy_LocateAccountPage;

	@FindBy(locator = "dw.studentflyerorder.fld.lName.SearchBy.LocateAccountPage")
	private WebElement fld_lName_SearchBy_LocateAccountPage;

	@FindBy(locator = "dw.studentflyerorder.fld.Country.LocateAccountPage")
	private WebElement fld_Country_LocateAccountPage;

	@FindBy(locator = "dw.studentflyerorder.fld.PostalCode.LocateAccountPage")
	private WebElement fld_PostalCode_LocateAccountPage;

	@FindBy(locator = "dw.studentflyerorder.fld.PostalCode.US.LocateAccountPage")
	private WebElement fld_PostalCode_US_LocateAccountPage;

	@FindBy(locator = "dw.studentflyerorder.popUp.PostalCode.LocateAccountPage")
	private WebElement popUp_PostalCode_LocateAccountPage;

	@FindBy(locator = "dw.studentflyerorder.fld.Province.LocateAccountPage")
	private WebElement fld_Province_LocateAccountPage;

	@FindBy(locator = "dw.studentflyerorder.fld.State.LocateAccountPage")
	private WebElement fld_State_LocateAccountPage;

	@FindBy(locator = "dw.studentflyerorder.fld.State.dropdown.Selection.LocateAccountPage")
	private WebElement fld_State_dropdown_Selection_LocateAccountPage;

	@FindBy(locator = "dw.studentflyerorder.fld.State.dropdown.Selection.Payment.Page")
	private WebElement fld_State_dropdown_Selection_Payment_Page;

	@FindBy(locator = "dw.studentflyerorder.fld.Province.dropdown.Selection.LocateAccountPage")
	private WebElement fld_Province_dropdown_Selection_LocateAccountPage;

	@FindBy(locator = "dw.studentflyerorder.selection.dropDown.SchoolCity.LocateAccountPage")
	private WebElement selection_dropDown_SchoolCity_LocateAccountPage;

	@FindBy(locator = "dw.studentflyerorder.fld.SchoolAdr.results.in.SearchResults.Page")
	private WebElement fld_SchoolAdr_results_in_SearchResults_Page;

	@FindBy(locator = "dw.studentflyerorder.fld.1st.SchoolAdr.results.in.SearchResults.Page")
	private WebElement fld_1st_SchoolAdr_results_in_SearchResults_Page;

	@FindBy(locator = "dw.studentflyerorder.fld.1st.SchoolAddress.results.in.SearchResults.Page")
	private WebElement fld_1st_SchoolAddress_results_in_SearchResults_Page;

	@FindBy(locator = "dw.studentflyerorder.School.Name.in.paragraph.2ndPage.SearchResults.page")
	private WebElement School_Name_in_paragraph_2ndPage_SearchResults_page;

	@FindBy(locator = "dw.studentflyerorder.form.login.LocateAccountPage")
	private WebElement form_login_LocateAccountPage;

	@FindBy(locator = "dw.studentflyerorder.hdr.LocateCustomerAccountBy.LocateAccountPage")
	private WebElement hdr_LocateCustomerAccountBy_LocateAccountPage;

	@FindBy(locator = "dw.studentflyerorder.Btn.Search.LocateAccountPage")
	private WebElement Btn_Search_LocateAccountPage;

	@FindBy(locator = "dw.studentflyerorder.icon.Blue.script.icon.LocateAccount.page")
	private WebElement icon_Blue_script_icon_LocateAccount_page;

	@FindBy(locator = "dw.studentflyerorder.icon.Blue.script.icon.VerifyAccount.page")
	private WebElement icon_Blue_script_icon_VerifyAccount_page;

	@FindBy(locator = "dw.studentflyerorder.icon.Blue.script.icon.SearchResults.page")
	private WebElement icon_Blue_script_icon_SearchResults_page;

	@FindBy(locator = "dw.studentflyerorder.hyperLink.School.not.in.System.SearchResults.page")
	private WebElement hyperLink_School_not_in_System_SearchResults_page;

	@FindBy(locator = "dw.studentflyerorder.Modal.window.LocateAccountPage")
	private WebElement Modal_window_LocateAccountPage;

	@FindBy(locator = "dw.studentflyerorder.Modal.window.VerifyAccountPage")
	private WebElement Modal_window_VerifyAccountPage;

	@FindBy(locator = "dw.studentflyerorder.text.fld.in.SchoolNotInSystem.ModalWindow.SearchResults.Page")
	private WebElement text_fld_in_SchoolNotInSystem_ModalWindow_SearchResults_Page;

	@FindBy(locator = "dw.studentflyerorder.hdr.SearchResults.SearchResultsPage")
	private WebElement hdr_SearchResults_SearchResultsPage;

	@FindBy(locator = "dw.studentflyerorder.Ac.num.in.SearchResults.SearchResultsPage")
	private WebElement Ac_num_in_SearchResults_SearchResultsPage;

	@FindBy(locator = "dw.studentflyerorder.popUp.error.msg.Invalid.Ac.Num.Locate.Page")
	private WebElement popUp_error_msg_Invalid_Ac_Num_Locate_Page;

	@FindBy(locator = "dw.studentflyerorder.Close.btn.Modal.window.LocateAccountPage")
	private WebElement Close_btn_Modal_window_LocateAccountPage;

	@FindBy(locator = "dw.studentflyerorder.Close.btn.Modal.window.VerifyAccountPage")
	private WebElement Close_btn_Modal_window_VerifyAccountPage;

	@FindBy(locator = "dw.studentflyerorder.Close.btn.Modal.window.1st.time.teacher.VerifyAccountPage")
	private WebElement Close_btn_Modal_window_1st_time_teacher_VerifyAccountPage;

	@FindBy(locator = "dw.studentflyerorder.content.text.for.1st.time.teacher.Modal.window.VerifyAccountPage")
	private WebElement content_text_for_1st_time_teacher_Modal_window_VerifyAccountPage;

	@FindBy(locator = "dw.studentflyerorder.hdr.OrderHistory.Status.VerifyAccountPage")
	private WebElement hdr_OrderHistory_Status_VerifyAccountPage;

	@FindBy(locator = "dw.studentflyerorder.fld.Order.Number.VerifyAccountPage")
	private WebElement fld_Order_Number_VerifyAccountPage;

	@FindBy(locator = "dw.studentflyerorder.fld.Order.placed.date.VerifyAccountPage")
	private WebElement fld_Order_placed_date_VerifyAccountPage;

	@FindBy(locator = "dw.studentflyerorder.fld.Order.type.PhoneOrder.in.OrderHistory.VerifyAccountPage")
	private WebElement fld_Order_type_PhoneOrder_in_OrderHistory_VerifyAccountPage;

	@FindBy(locator = "dw.studentflyerorder.fld.Order.type.MailOrder.in.OrderHistory.VerifyAccountPage")
	private WebElement fld_Order_type_MailOrder_in_OrderHistory_VerifyAccountPage;

	@FindBy(locator = "dw.studentflyerorder.fld.Order.type.FaxOrder.in.OrderHistory.VerifyAccountPage")
	private WebElement fld_Order_type_FaxOrder_in_OrderHistory_VerifyAccountPage;

	@FindBy(locator = "dw.studentflyerorder.fld.Order.type.Online.in.OrderHistory.VerifyAccountPage")
	private WebElement fld_Order_type_Online_in_OrderHistory_VerifyAccountPage;

	@FindBy(locator = "dw.studentflyerorder.fld.order.status.Held.By.Accounting.in.OrderHistory.VerifyAccountPage")
	private WebElement fld_order_status_Held_By_Accounting_in_OrderHistory_VerifyAccountPage;

	@FindBy(locator = "dw.studentflyerorder.fld.1st.year.teaching.in.Additional.Info.section.VerifyAccountPage")
	private WebElement fld_1st_year_teaching_in_Additional_Info_section_VerifyAccountPage;

	@FindBy(locator = "dw.studentflyerorder.section.ROLE.in.VerifyAccountPage")
	private WebElement section_ROLE_in_VerifyAccountPage;

	@FindBy(locator = "dw.studentflyerorder.fld.selected.roles.in.ROLE.section.in.VerifyAccountPage")
	private WebElement fld_selected_roles_in_ROLE_section_in_VerifyAccountPage;

	@FindBy(locator = "dw.studentflyerorder.fld.grades.in.ROLE.section.in.VerifyAccountPage")
	private WebElement fld_grades_in_ROLE_section_in_VerifyAccountPage;

	@FindBy(locator = "dw.studentflyerorder.fld1.grade.number.of.students.in.ROLE.section.in.VerifyAccountPage")
	private WebElement fld1_grade_number_of_students_in_ROLE_section_in_VerifyAccountPage;

	@FindBy(locator = "dw.studentflyerorder.fld2.grade.number.of.students.in.ROLE.section.in.VerifyAccountPage")
	private WebElement fld2_grade_number_of_students_in_ROLE_section_in_VerifyAccountPage;

	@FindBy(locator = "dw.studentflyerorder.section.SCHOOL.in.VerifyAccountPage")
	private WebElement section_SCHOOL_in_VerifyAccountPage;

	@FindBy(locator = "dw.studentflyerorder.fld.SchoolName.in.SCHOOL.section.in.VerifyAccountPage")
	private WebElement fld_SchoolName_in_SCHOOL_section_in_VerifyAccountPage;

	@FindBy(locator = "dw.studentflyerorder.fld.SchoolAdr1.in.SCHOOL.section.in.VerifyAccountPage")
	private WebElement fld_SchoolAdr1_in_SCHOOL_section_in_VerifyAccountPage;

	@FindBy(locator = "dw.studentflyerorder.fld.SchoolAdr2.in.SCHOOL.section.in.VerifyAccountPage")
	private WebElement fld_SchoolAdr2_in_SCHOOL_section_in_VerifyAccountPage;

	@FindBy(locator = "dw.studentflyerorder.fld.City.in.SCHOOL.section.in.VerifyAccountPage")
	private WebElement fld_City_in_SCHOOL_section_in_VerifyAccountPage;

	@FindBy(locator = "dw.studentflyerorder.fld.Province.in.SCHOOL.section.in.VerifyAccountPage")
	private WebElement fld_Province_in_SCHOOL_section_in_VerifyAccountPage;

	@FindBy(locator = "dw.studentflyerorder.fld.Country.in.SCHOOL.section.in.VerifyAccountPage")
	private WebElement fld_Country_in_SCHOOL_section_in_VerifyAccountPage;

	@FindBy(locator = "dw.studentflyerorder.fld.PostalCode.in.SCHOOL.section.in.VerifyAccountPage")
	private WebElement fld_PostalCode_in_SCHOOL_section_in_VerifyAccountPage;

	@FindBy(locator = "dw.studentflyerorder.fld.ZipCode.in.SCHOOL.section.in.VerifyAccountPage")
	private WebElement fld_ZipCode_in_SCHOOL_section_in_VerifyAccountPage;

	@FindBy(locator = "dw.studentflyerorder.fld.PhoneNumber.in.SCHOOL.section.in.VerifyAccountPage")
	private WebElement fld_PhoneNumber_in_SCHOOL_section_in_VerifyAccountPage;

	@FindBy(locator = "dw.studentflyerorder.section.Customer.Account.Hold.Status.Payment.page")
	private WebElement section_Customer_Account_Hold_Status_Payment_page;

	@FindBy(locator = "dw.studentflyerorder.hdr.Customer.Account.Hold.Status.Payment.page")
	private WebElement hdr_Customer_Account_Hold_Status_Payment_page;

	@FindBy(locator = "dw.studentflyerorder.radio.btn1.Customer.Account.Hold.Status.Payment.page")
	private WebElement radio_btn1_Customer_Account_Hold_Status_Payment_page;

	@FindBy(locator = "dw.studentflyerorder.radio.btn2.Customer.Account.Hold.Status.Payment.page")
	private WebElement radio_btn2_Customer_Account_Hold_Status_Payment_page;

	@FindBy(locator = "dw.studentflyerorder.selection.Province.alternateShipping.fld.Payment.page")
	private WebElement selection_Province_alternateShipping_fld_Payment_page;

	@FindBy(locator = "dw.studentflyerorder.selection.Province.BillingInfo.fld.Payment.page")
	private WebElement selection_Province_BillingInfo_fld_Payment_page;

	@FindBy(locator = "dw.studentflyerorder.tab.Payment.in.hdr.section")
	private WebElement tab_Payment_in_hdr_section;

	@FindBy(locator = "dw.studentflyerorder.list.Province.alternateShipping.fld.Payment.page")
	private List<WebElement> list_Province_alternateShipping_fld_Payment_page;

	@FindBy(locator = "dw.studentflyerorder.list.Province.BillingInfo.fld.Payment.page")
	private List<WebElement> list_Province_BillingInfo_fld_Payment_page;

	@FindBy(locator = "dw.studentflyerorder.list.State.US.Locate.Account.page")
	private List<WebElement> list_State_US_Locate_Account_page;

	@FindBy(locator = "dw.studentflyerorder.list.State.US.Payment.page")
	private List<WebElement> list_State_US_Payment_page;

	@FindBy(locator = "dw.studentflyerorder.list.Province.Canada.Locate.Account.page")
	private List<WebElement> list_Province_Canada_Locate_Account_page;

	@FindBy(locator = "dw.studentflyerorder.list.CreditCard.Payment.page")
	private List<WebElement> list_CreditCard_Payment_page;

	@FindBy(locator = "dw.studentflyerorder.list.Teacher.Lname.Search.results.Locate.page")
	private List<WebElement> list_Teacher_Lname_Search_results_Locate_page;

	@FindBy(locator = "dw.studentflyerorder.list.Teacher.Fname.Search.results.Locate.page")
	private List<WebElement> list_Teacher_Fname_Search_results_Locate_page;

	@FindBy(locator = "dw.studentflyerorder.list.SchoolName.Search.results.Locate.page")
	private List<WebElement> list_SchoolName_Search_results_Locate_page;

	@FindBy(locator = "dw.studentflyerorder.hyperLink.Start.New.Search.SearchResults")
	private WebElement hyperLink_Start_New_Search_SearchResults;

	@FindBy(locator = "dw.studentflyerorder.hyperLink.Back.To.School.Listing.SearchResults")
	private WebElement hyperLink_Back_To_School_Listing_SearchResults;

	@FindBy(locator = "dw.studentflyerorder.fld.Search.results.by.School.Address")
	private WebElement fld_Search_results_by_School_Address;

	@FindBy(locator = "dw.checkout.shippingandpayment.payment.select.AddaNewCard")
	private WebElement option_select_A_New_Card;

	@FindBy(locator = "dw.studentflyerorder.hdr.Locate.Account.Locate.Page")
	private WebElement hdr_Locate_Account_Locate_Page;

	@FindBy(locator = "dw.studentflyerorder.hdr.Verify.Account.Verify.Page")
	private WebElement hdr_Verify_Account_Verify_Page;

	@FindBy(locator = "dw.studentflyerorder.modal.window.1st.time.teacher.VerifyAccount.page")
	private WebElement modal_window_1st_time_teacher_VerifyAccount_page;

	@FindBy(locator = "dw.studentflyerorder.fld.Teacher.Name.in.SearchResults")
	private WebElement fld_Teacher_Name_in_SearchResults;

	@FindBy(locator = "dw.studentflyerorder.popUp.btn.Close.Introduction.To.CSR")
	private WebElement popUp_btn_Close_Introduction_To_CSR;

	@FindBy(locator = "dw.studentflyerorder.popUp.btn.Close.Introduction.To.CSR")
	private List<WebElement> list_popUp_btn_Close_Introduction_To_CSR;

	@FindBy(locator = "dw.studentflyerorder.popUp.btn.Close.order.not.meet.min.order")
	private WebElement popUp_btn_Close_order_not_meet_min_order;

	@FindBy(locator = "dw.studentflyerorder.Btn.Continue.To.Order.Entry")
	private WebElement Btn_Continue_To_Order_Entry;

	@FindBy(locator = "dw.studentflyerorder.lbl.locateaccount.Locate.Account")
	private WebElement lbl_locateaccount_locate_account;

	@FindBy(locator = "dw.studentflyerorder.tab.ORDER.ENTRY")
	private WebElement tab_ORDER_ENTRY;

	@FindBy(locator = "dw.studentflyerorder.tab.REVIEW.CART")
	private WebElement tab_REVIEW_CART;

	@FindBy(locator = "dw.studentflyerorder.tab.SHIPPING.PAYMENT")
	private WebElement tab_SHIPPING_PAYMENT;

	@FindBy(locator = "dw.studentflyerorder.tab.CONFIRM.and.SUBMIT")
	private WebElement tab_CONFIRM_and_SUBMIT;

	@FindBy(locator = "dw.studentflyerorder.tab.LOCATE.ACCOUNT")
	private WebElement tab_LOCATE_ACCOUNT;

	@FindBy(locator = "dw.studentflyerorder.tab.VERIFY.ACCOUNT")
	private WebElement tab_VERIFY_ACCOUNT;

	@FindBy(locator = "dw.studentflyerorder.tab.REWARDS.AND.COUPONS")
	private WebElement tab_REWARDS_AND_COUPONS;

	@FindBy(locator = "dw.studentflyerorder.Num.REVIEW.CART.StepHeader")
	private WebElement Num_REVIEW_CART_StepHeader;

	@FindBy(locator = "dw.studentflyerorder.Num.LOCATE.ACCOUNT.StepHeader")
	private WebElement Num_LOCATE_ACCOUNT_StepHeader;

	@FindBy(locator = "dw.studentflyerorder.Num.VERIFY.ACCOUNT.StepHeader")
	private WebElement Num_VERIFY_ACCOUNT_StepHeader;

	@FindBy(locator = "dw.studentflyerorder.Num.REWARDS.AND.COUPONS.StepHeader")
	private WebElement Num_REWARDS_AND_COUPONS_StepHeader;

	@FindBy(locator = "dw.studentflyerorder.Num.PAYMENT.StepHeader")
	private WebElement Num_PAYMENT_StepHeader;

	@FindBy(locator = "dw.studentflyerorder.Num.CONFIRM.and.SUBMIT.StepHeader")
	private WebElement Num_CONFIRM_and_SUBMIT_StepHeader;

	@FindBy(locator = "dw.studentflyerorder.CSR.hdr.Coupons.And.Rewards")
	private WebElement CSR_hdr_Coupons_And_Rewards;

	@FindBy(locator = "dw.studentflyerorder.CSR.hdr.Payment")
	private WebElement CSR_hdr_Payment;

	@FindBy(locator = "dw.studentflyerorder.CSR.hdr.ConfirmSubmit")
	private WebElement CSR_hdr_ConfirmSubmit;

	@FindBy(locator = "dw.studentflyerorder.Num.REDEMPTIONS.REWARDS.StepHeader")
	private WebElement Num_REDEMPTIONS_REWARDS_StepHeader;

	@FindBy(locator = "dw.studentflyerorder.txt.Enter.New.Order.OrderEntryPage")
	private WebElement txt_Enter_New_Order_OrderEntryPage;

	@FindBy(locator = "dw.studentflyerorder.hdr.ReviewYourCart.ReviewCartPage")
	private WebElement hdr_ReviewYourCart_in_ReviewCartPage;

	@FindBy(locator = "dw.studentflyerorder.blue.strip.in.OrderEntryPage")
	private WebElement blue_strip_in_OrderEntryPage;

	@FindBy(locator = "dw.studentflyerorder.fld.Student.name.SFO")
	private WebElement fld_Student_name_SFO;
	
	@FindBy(locator = "dw.studentflyerorder.fld.SFO.page.FreePick.item1")
	private WebElement fld_SFO_page_FreePick_item1;
	
	@FindBy(locator = "dw.studentflyerorder.fld.Qty.YTO.item1.ReviewCart.page")
	private WebElement fld_Qty_YTO_item1_ReviewCart_page;

	@FindBy(locator = "dw.studentflyerorder.fld.Student.Item.SFO")
	private WebElement fld_Student_Item_SFO;

	@FindBy(locator = "dw.studentflyerorder.fld.Student.Item.QTY")
	private WebElement fld_Student_Item_QTY;
	
	@FindBy(locator = "dw.studentflyerorder.btn.Continue.checkout.ReviewCart_page")
	private List<WebElement> size_btn_Continue_checkout_ReviewCart_page;

	@FindBy(locator = "dw.studentflyerorder.btn.Continue.checkout.ReviewCart_page")
	private WebElement btn_Continue_checkout_ReviewCart_page;

	@FindBy(locator = "dw.studentflyerorder.btn.Proceed.to.checkout.Promotion.popup")
	private WebElement btn_Proceed_to_checkout_Promotion_popup;

	@FindBy(locator = "dw.studentflyerorder.btn.ADD.SFO")
	private WebElement btn_ADD_SFO;

    @FindBy(locator = "dw.rewardspage.link.returntoshop")
    private WebElement link_ReturnToShop;

    @FindBy(locator = "dw.rewardspage.link.editcart")
    private WebElement thelinkEditCart;



	@FindBy(locator = "dw.studentflyerorder.link.Apply.FreePick.coupon.SFO.section")
	private WebElement link_Apply_FreePick_coupon_SFO_section;

	@FindBy(locator = "dw.studentflyerorder.fld.Student.name.FreePick.popup.SFO")
	private WebElement fld_Student_name_FreePick_popup_SFO;

	@FindBy(locator = "dw.studentflyerorder.fld.Coupon.FreePick.popup.SFO")
	private WebElement fld_Coupon_FreePick_popup_SFO;

	@FindBy(locator = "dw.studentflyerorder.btn_APPLY.FreePick.popup.SFO")
	private WebElement btn_APPLY_FreePick_popup_SFO;

	@FindBy(locator = "dw.studentflyerorder.fld.Search.FreePick.popup.SFO")
	private WebElement fld_Search_FreePick_popup_SFO;

	@FindBy(locator = "dw.studentflyerorder.icon.Search.FreePick.popup.SFO")
	private WebElement icon_Search_FreePick_popup_SFO;

	@FindBy(locator = "dw.studentflyerorder.first.item.in.FreePick.popup.item.list.SFO")
	private WebElement first_item_in_FreePick_popup_item_list_SFO;
	
	@FindBy(locator = "dw.studentflyerorder.second.item.in.FreePick.popup.item.list.SFO")
	private WebElement second_item_in_FreePick_popup_item_list_SFO;

	@FindBy(locator = "dw.studentflyerorder.btn.CONFIRM.APPLY.FreePick.popup.SFO")
	private WebElement btn_CONFIRM_APPLY_FreePick_popup_SFO;

	@FindBy(locator = "dw.studentflyerorder.btn.ReviewCart.SFO.page")
	private WebElement btn_ReviewCart_SFO_page;

	@FindBy(locator = "dw.section.SFO.ReviewCart.page")
	private WebElement section_SFO_ReviewCart_page;

	@FindBy(locator = "dw.section.YTO.ReviewCart.page")
	private WebElement section_YTO_ReviewCart_page;

	@FindBy(locator = "dw.section.TE.ReviewCart.page")
	private WebElement section_TE_ReviewCart_page;

	@FindBy(locator = "dw.group.by.Student.name.SFO.section.ReviewCart.page")
	private List<WebElement> group_by_Student_name_SFO_section_ReviewCart_page;

	@FindBy(locator = "dw.item1.price.YTO.section.ReviewCart.page")
	private WebElement item1_price_YTO_section_ReviewCart_page;

	@FindBy(locator = "dw.item2.price.YTO.section.ReviewCart.page")
	private WebElement item2_price_YTO_section_ReviewCart_page;

	@FindBy(locator = "dw.item1.QTY.YTO.section.ReviewCart.page")
	private WebElement item1_QTY_YTO_section_ReviewCart_page;

	@FindBy(locator = "dw.item2.QTY.YTO.section.ReviewCart.page")
	private WebElement item2_QTY_YTO_section_ReviewCart_page;

	@FindBy(locator = "dw.YTO.section.subtotal.ReviewCart.page")
	private WebElement YTO_section_subtotal_ReviewCart_page;

	@FindBy(locator = "dw.GST.val.YTO.section.ReviewCart.page")
	private WebElement GST_val_YTO_section_ReviewCart_page;

	@FindBy(locator = "dw.PST.val.YTO.section.ReviewCart.page")
	private WebElement PST_val_YTO_section_ReviewCart_page;

	@FindBy(locator = "dw.QST.val.YTO.section.ReviewCart.page")
	private WebElement QST_val_YTO_section_ReviewCart_page;

	@FindBy(locator = "dw.HST.val.YTO.section.ReviewCart.page")
	private WebElement HST_val_YTO_section_ReviewCart_page;

	@FindBy(locator = "dw.YTO.section.Total.ReviewCart.page")
	private WebElement YTO_section_Total_ReviewCart_page;

	@FindBy(locator = "dw.item1.price.TE.section.ReviewCart.page")
	private WebElement item1_price_TE_section_ReviewCart_page;

	@FindBy(locator = "dw.item2.price.TE.section.ReviewCart.page")
	private WebElement item2_price_TE_section_ReviewCart_page;

	@FindBy(locator = "dw.item1.QTY.TE.section.ReviewCart.page")
	private WebElement item1_QTY_TE_section_ReviewCart_page;

	@FindBy(locator = "dw.item2.QTY.TE.section.ReviewCart.page")
	private WebElement item2_QTY_TE_section_ReviewCart_page;

	@FindBy(locator = "dw.TE.section.subtotal.ReviewCart.page")
	private WebElement TE_section_subtotal_ReviewCart_page;

	@FindBy(locator = "dw.GST.val.TE.section.ReviewCart.page")
	private WebElement GST_val_TE_section_ReviewCart_page;

	@FindBy(locator = "dw.PST.val.TE.section.ReviewCart.page")
	private WebElement PST_val_TE_section_ReviewCart_page;

	@FindBy(locator = "dw.QST.val.TE.section.ReviewCart.page")
	private WebElement QST_val_TE_section_ReviewCart_page;

	@FindBy(locator = "dw.HST.val.TE.section.ReviewCart.page")
	private WebElement HST_val_TE_section_ReviewCart_page;

	@FindBy(locator = "dw.TE.section.Total.ReviewCart.page")
	private WebElement TE_section_Total_ReviewCart_page;

	@FindBy(locator = "dw.name1.SFO.section.ReviewCart.page")
	private WebElement name1_SFO_section_ReviewCart_page;

	@FindBy(locator = "dw.name2.SFO.section.ReviewCart.page")
	private WebElement name2_SFO_section_ReviewCart_page;

	@FindBy(locator = "dw.btn.ADD.TO.CART.search.results.page")
	private WebElement btn_ADD_TO_CART_search_results_page;

	@FindBy(locator = "dw.btn.Continue.Shopping.in.popup.search.results.page")
	private WebElement btn_Continue_Shopping_in_popup_search_results_page;

	@FindBy(locator = "dw.btn.mini.ReviewCart")
	private WebElement btn_mini_ReviewCart;

	@FindBy(locator = "dw.studentflyerorder.popup.OrderEntryScript.OrderEntryPage")
	private WebElement popup_OrderEntryScript_OrderEntryPage;

	@FindBy(locator = "dw.studentflyerorder.btn.close.popup.OrderEntryScript.OrderEntryPage")
	private WebElement btn_close_popup_OrderEntryScript_OrderEntryPage;

	@FindBy(locator = "dw.studentflyerorder.txt.Teacher.Order.OrderEntryPage")
	private WebElement txt_Teacher_Order_OrderEntryPage;

	@FindBy(locator = "dw.studentflyerorder.section.Teacher.Order.OrderEntryPage")
	private WebElement section_Teacher_Order_OrderEntryPage;

	@FindBy(locator = "dw.studentflyerorder.section.Teacher.and.Student.Order.OrderEntryPage")
	private WebElement section_Teacher_and_Student_Order_OrderEntryPage;

	@FindBy(locator = "dw.studentflyerorder.btn.ProceedToCheckout.OrderEntryPage")
	private WebElement btn_ProceedToCheckout_OrderEntryPage;

	@FindBy(locator = "dw.studentflyerorder.btn.ProceedToCheckout.RewardsCoupons.popup")
	private WebElement btn_ProceedToCheckout_RewardsCoupons_popup;

	@FindBy(locator = "dw.reviewcart.active.RewardsAndCoupons")
	private WebElement Tab_RewardsAndCouponsActive;

	@FindBy(locator = "dw.studentflyerorder.btn.ContinueCheckout.RewardsPage")
	private WebElement btn_ContinueCheckout_RewardsPage;

	@FindBy(locator = "dw.studentflyerorder.btn.ContinueCheckout.ShippingRewardsPage")
	private WebElement btn_ContinueCheckout_ShippingRewardsPage;

	@FindBy(locator = "dw.studentflyerorder.section.Alternate.ship.ShippingRewardsPage")
	private WebElement section_Alternate_ship_ShippingRewardsPage;

	@FindBy(locator = "dw.studentflyerorder.fld.first.SavedCard.in.list.PaymentPage")
	private WebElement fld_first_SavedCard_in_list_PaymentPage;

	@FindBy(locator = "dw.studentflyerorder.selected.SavedCard.name.in.section.PaymentPage")
	private WebElement selected_SavedCard_name_in_section_PaymentPage;

	@FindBy(locator = "dw.studentflyerorder.layer.One.in.OrderEntryPage")
	private WebElement layer_One_in_OrderEntryPage;

	@FindBy(locator = "dw.studentflyerorder.fld1.FlyerCode.in.OrderEntryPage")
	private WebElement fld1_FlyerCode_in_OrderEntryPage;

	@FindBy(locator = "dw.studentflyerorder.fld2.FlyerCode.in.OrderEntryPage")
	private WebElement fld2_FlyerCode_in_OrderEntryPage;

	@FindBy(locator = "dw.studentflyerorder.fld3.FlyerCode.in.OrderEntryPage")
	private WebElement fld3_FlyerCode_in_OrderEntryPage;

	@FindBy(locator = "dw.studentflyerorder.popUp.ErrorMsg.in.OrderEntryPage")
	private WebElement popUp_ErrorMsg_in_OrderEntryPage;

	@FindBy(locator = "dw.studentflyerorder.link.CancelOrder.AllPages")
	private WebElement link_CancelOrder_AllPages;

	@FindBy(locator = "dw.studentflyerorder.btn.YES.CancelOrder.AllPages")
	private WebElement btn_YES_CancelOrder_AllPages;

	@FindBy(locator = "dw.studentflyerorder.btn.NO.CancelOrder.AllPages")
	private WebElement btn_NO_CancelOrder_AllPages;

	@FindBy(locator = "dw.studentflyerorder.popUp.window.Order.Cancellation.SourcePage")
	private WebElement popUp_window_Order_Cancellation_SourcePage;

	@FindBy(locator = "dw.studentflyerorder.paragraph.Order.Cancellation.window")
	private WebElement paragraph_Order_Cancellation_window;

	@FindBy(locator = "dw.studentflyerorder.btn.RESET.OrderEntry.page")
	private WebElement btn_RESET_OrderEntry_page;

	@FindBy(locator = "dw.studentflyerorder.callout.confirmation.RESET.OrderEntry.page")
	private WebElement callout_confirmation_RESET_OrderEntry_page;

	@FindBy(locator = "dw.studentflyerorder.text.callout.confirmation.RESET.OrderEntry.page")
	private WebElement text_callout_confirmation_RESET_OrderEntry_page;

	@FindBy(locator = "dw.studentflyerorder.btn.YES.callout.confirmation.RESET.OrderEntry.page")
	private WebElement btn_YES_callout_confirmation_RESET_OrderEntry_page;

	@FindBy(locator = "dw.studentflyerorder.btn.NO.callout.confirmation.RESET.OrderEntry.page")
	private WebElement btn_NO_callout_confirmation_RESET_OrderEntry_page;

	@FindBy(locator = "dw.studentflyerorder.btn.close.Order.Cancellation.modal.window")
	private WebElement btn_close_Order_Cancellation_modal_window;

	@FindBy(locator = "dw.studentflyerorder.popUp.FlyOut.for.BonusBank")
	private WebElement popUp_FlyOut_for_BonusBank;

	@FindBy(locator = "dw.studentflyerorder.popUp.ErrorMsg.for.Invalid.Items.OrderEntryPage")
	private WebElement popUp_ErrorMsg_for_Invalid_Items_OrderEntryPage;

	@FindBy(locator = "dw.studentflyerorder.modal.window.Invalid.item.1.OrderEntryPage")
	private WebElement modal_window_Invalid_item_1_OrderEntryPage;

	@FindBy(locator = "dw.studentflyerorder.modal.window.Invalid.item.2.OrderEntryPage")
	private WebElement modal_window_Invalid_item_2_OrderEntryPage;

	@FindBy(locator = "dw.studentflyerorder.modal.window.Invalid.item.3.OrderEntryPage")
	private WebElement modal_window_Invalid_item_3_OrderEntryPage;

	@FindBy(locator = "dw.studentflyerorder.modal.window.Invalid.items.OrderEntryPage")
	private List<WebElement> modal_window_Invalid_items_OrderEntryPage;

	@FindBy(locator = "dw.studentflyerorder.btn.Continue.popUp.ErrorMsg.for.Invalid.Items")
	private WebElement btn_Continue_popUp_ErrorMsg_for_Invalid_Items;

	@FindBy(locator = "dw.studentflyerorder.CSR.hdr.ReviewCart.Page")
	private WebElement CSR_hdr_ReviewCart_Page;

	@FindBy(locator = "dw.studentflyerorder.CSR.hdr.Enter.New.Order.Page")
	private WebElement CSR_hdr_Enter_New_Order_Page;

	@FindBy(locator = "dw.studentflyerorder.item1.TeacherCat.items.ReviewCart.page")
	private WebElement item1_TeacherCat_items_ReviewCart_page;

	@FindBy(locator = "dw.studentflyerorder.items.TeacherCatalogues.ReviewCart.page")
	private List<WebElement> items_TeacherCatalogues_ReviewCart_page;

	@FindBy(locator = "dw.studentflyerorder.items.duplicateItemNo")
	private List<WebElement> invalidItem_popUp;

	@FindBy(locator = "dw.studentflyerorder.btn.OK.popUp.ErrorMsg.for.Invalid.Items")
	private WebElement btn_OK_popUp_ErrorMsg_for_Invalid_Items;

	@FindBy(locator = "dw.studentflyerorder.btn.Cancel.popUp.ErrorMsg.for.Invalid.Items")
	private WebElement btn_Cancel_popUp_ErrorMsg_for_Invalid_Items;

	@FindBy(locator = "dw.studentflyerorder.ItemList.in.popUp.for.Invalid.Item1")
	private WebElement ItemList_in_popUp_for_Invalid_Item1;

	@FindBy(locator = "dw.studentflyerorder.ItemList.in.popUp.for.Invalid.Item2")
	private WebElement ItemList_in_popUp_for_Invalid_Item2;

	@FindBy(locator = "dw.studentflyerorder.fld.FullName.in.Container1.OrderEntryPage")
	private WebElement fld_FullName_in_Container1_OrderEntryPage;

	@FindBy(locator = "dw.studentflyerorder.fld.School.Info1.in.Container2.CustProfile")
	private WebElement fld_School_Info1_in_Container2_CustProfile;

	@FindBy(locator = "dw.studentflyerorder.fld.School.Info2.in.Container2.CustProfile")
	private WebElement fld_School_Info2_in_Container2_CustProfile;

	@FindBy(locator = "dw.studentflyerorder.fld.School.Info3.in.Container2.CustProfile")
	private WebElement fld_School_Info3_in_Container2_CustProfile;

	@FindBy(locator = "dw.studentflyerorder.fld.School.Info4.in.Container2.CustProfile")
	private WebElement fld_School_Info4_in_Container2_CustProfile;

	@FindBy(locator = "dw.studentflyerorder.fld.ac.num.in.Container3.CustProfile")
	private WebElement fld_ac_num_in_Container3_CustProfile;

	@FindBy(locator = "dw.studentflyerorder.fld.CAC.info.in.Container3.CustProfile")
	private WebElement fld_CAC_info_in_Container3_CustProfile;

	@FindBy(locator = "dw.studentflyerorder.fld.status.of.Teacher.Container2.CustProfile")
	private WebElement fld_status_of_Teacher_Container2_CustProfile;

	@FindBy(locator = "dw.studentflyerorder.fld.status.of.Teacher.Container3.CustProfile")
	private WebElement fld_status_of_Teacher_Container3_CustProfile;

	@FindBy(locator = "dw.studentflyerorder.lbl.BonusPoints.Container4.CustProfile")
	private WebElement lbl_BonusPoints_Container4_CustProfile;

	@FindBy(locator = "dw.studentflyerorder.fld.BonusPoints.amt.Container4.CustProfile")
	private WebElement fld_BonusPoints_amt_Container4_CustProfile;

	@FindBy(locator = "dw.studentflyerorder.popUp.for.3digits.inQty.fld")
	private WebElement popUp_for_3digits_inQty_fld;

	@FindBy(locator = "dw.studentflyerorder.btn.YES.in.popUp.for.3digits.inQty.fld")
	private WebElement btn_YES_in_popUp_for_3digits_inQty_fld;

	@FindBy(locator = "dw.studentflyerorder.btn.NO.in.popUp.for.3digits.inQty.fld")
	private WebElement btn_NO_in_popUp_for_3digits_inQty_fld;

	@FindBy(locator = "dw.studentflyerorder.Item.Num.field.in.OrderEntryPage")
	private WebElement Item_Num_field_in_OrderEntryPage;

	@FindBy(locator = "dw.studentflyerorder.Item.Num.field.in.OrderEntryPage2")
	private WebElement Item_Num_field_in_OrderEntryPage2;

	@FindBy(locator = "dw.studentflyerorder.Paid.QTY.field.in.OrderEntryPage")
	private WebElement Paid_QTY_field_in_OrderEntryPage;

	@FindBy(locator = "dw.studentflyerorder.Paid.QTY.field.in.OrderEntryPage2")
	private WebElement Paid_QTY_field_in_OrderEntryPage2;

	@FindBy(locator = "dw.studentflyerorder.frm2.Item.Num.field1.in.OrderEntryPage")
	private WebElement frm2_Item_Num_field1_in_OrderEntryPage;

	@FindBy(locator = "dw.studentflyerorder.frm2.Item.Num.field2.in.OrderEntryPage")
	private WebElement frm2_Item_Num_field2_in_OrderEntryPage;

	@FindBy(locator = "dw.studentflyerorder.frm2.Paid.QTY.field1.in.OrderEntryPage")
	private WebElement frm2_Paid_QTY_field1_in_OrderEntryPage;

	@FindBy(locator = "dw.studentflyerorder.frm2.Paid.QTY.field2.in.OrderEntryPage")
	private WebElement frm2_Paid_QTY_field2_in_OrderEntryPage;

	@FindBy(locator = "dw.studentflyerorder.Item.Num.field2.in.OrderEntryPage")
	private WebElement Item_Num_field2_in_OrderEntryPage;

	@FindBy(locator = "dw.studentflyerorder.Item.Num.field2.in.OrderEntryPage2")
	private WebElement Item_Num_field2_in_OrderEntryPage2;

	@FindBy(locator = "dw.studentflyerorder.Paid.QTY.field2.in.OrderEntryPage")
	private WebElement Paid_QTY_field2_in_OrderEntryPage;

	@FindBy(locator = "dw.studentflyerorder.Paid.QTY.field2.in.OrderEntryPage2")
	private WebElement Paid_QTY_field2_in_OrderEntryPage2;

	@FindBy(locator = "dw.studentflyerorder.Item.Num.field3.in.OrderEntryPage")
	private WebElement Item_Num_field3_in_OrderEntryPage;

	@FindBy(locator = "dw.studentflyerorder.Paid.QTY.field3.in.OrderEntryPage")
	private WebElement Paid_QTY_field3_in_OrderEntryPage;

	@FindBy(locator = "dw.studentflyerorder.Item.Num.field4.in.OrderEntryPage")
	private WebElement Item_Num_field4_in_OrderEntryPage;

	@FindBy(locator = "dw.studentflyerorder.Paid.QTY.field4.in.OrderEntryPage")
	private WebElement Paid_QTY_field4_in_OrderEntryPage;

	@FindBy(locator = "dw.studentflyerorder.Item.Num.field.Student.in.OrderEntryPage")
	private WebElement Item_Num_field_Student_in_OrderEntryPage;

	@FindBy(locator = "dw.studentflyerorder.Paid.QTY.field.Student.in.OrderEntryPage")
	private WebElement Paid_QTY_field_Student_in_OrderEntryPage;

	@FindBy(locator = "dw.studentflyerorder.Item.Num.field2.Student.in.OrderEntryPage")
	private WebElement Item_Num_field2_Student_in_OrderEntryPage;

	@FindBy(locator = "dw.studentflyerorder.Paid.QTY.field2.Student.in.OrderEntryPage")
	private WebElement Paid_QTY_field2_Student_in_OrderEntryPage;

	@FindBy(locator = "dw.studentflyerorder.Item.Num.field3.Student.in.OrderEntryPage")
	private WebElement Item_Num_field3_Student_in_OrderEntryPage;

	@FindBy(locator = "dw.studentflyerorder.Paid.QTY.field3.Student.in.OrderEntryPage")
	private WebElement Paid_QTY_field3_Student_in_OrderEntryPage;

	@FindBy(locator = "dw.studentflyerorder.btn.Minus.YTO.section.ReviewCartPage")
	private WebElement btn_Minus_YTO_section_ReviewCartPage;

	@FindBy(locator = "dw.studentflyerorder.items.YTO.ReviewCartPage.CSR")
	private WebElement items_YTO_ReviewCartPage_CSR;

	@FindBy(locator = "dw.studentflyerorder.items.YTO.ReviewCartPage.CSR")
	private List<WebElement> items_YTO_ReviewCartPage_CSR_list;

	@FindBy(locator = "dw.studentflyerorder.tab.Student.Orders.OrderEntryPage")
	private WebElement tab_Student_Orders_OrderEntryPage;

	@FindBy(locator = "dw.studentflyerorder.table.YTO.items.ReviewCartPage")
	private WebElement table_YTO_items_ReviewCartPage;

	@FindBy(locator = "dw.studentflyerorder.hdr.section.StudentClubs.ReviewCart")
	private WebElement hdr_section_StudentClubs_ReviewCartPage;

	@FindBy(locator = "dw.studentflyerorder.hdr.section.TeacherCatalogues.ReviewCart")
	private WebElement hdr_section_TeacherCatalogues_ReviewCartPage;

	@FindBy(locator = "dw.studentflyerorder.btn.Plus.YTO.section.ReviewCartPage")
	private WebElement btn_Plus_YTO_section_ReviewCartPage;

	@FindBy(locator = "dw.studentflyerorder.header.ITEM.YTO.CSR.ReviewCartPage")
	private WebElement header_ITEM_YTO_CSR_ReviewCartPage;

	@FindBy(locator = "dw.studentflyerorder.fld1.Item.num.YTO.CSR.ReviewCartPage")
	private WebElement fld1_Item_num_YTO_CSR_ReviewCartPage;

	@FindBy(locator = "dw.studentflyerorder.fld1.Title.YTO.CSR.ReviewCartPage")
	private WebElement fld1_Title_YTO_CSR_ReviewCartPage;

	@FindBy(locator = "dw.studentflyerorder.fld1.Flyer.YTO.CSR.ReviewCartPage")
	private WebElement fld1_Flyer_YTO_CSR_ReviewCartPage;

	@FindBy(locator = "dw.studentflyerorder.fld1.Price.YTO.CSR.ReviewCartPage")
	private WebElement fld1_Price_YTO_CSR_ReviewCartPage;

	@FindBy(locator = "dw.studentflyerorder.fld1.Qty.YTO.CSR.ReviewCartPage")
	private WebElement fld1_Qty_YTO_CSR_ReviewCartPage;

	@FindBy(locator = "dw.studentflyerorder.List.all.YTO.items.CSR.ReviewCartPage")
	private List<WebElement> List_all_YTO_items_CSR_ReviewCartPage;

	@FindBy(locator = "dw.studentflyerorder.header.TITLE.YTO.CSR.ReviewCartPage")
	private WebElement header_TITLE_YTO_CSR_ReviewCartPage;

	@FindBy(locator = "dw.studentflyerorder.header.FLYER.YTO.CSR.ReviewCartPage")
	private WebElement header_FLYER_YTO_CSR_ReviewCartPage;

	@FindBy(locator = "dw.studentflyerorder.header.PRICE.YTO.CSR.ReviewCartPage")
	private WebElement header_PRICE_YTO_CSR_ReviewCartPage;

	@FindBy(locator = "dw.studentflyerorder.header.QTY.YTO.CSR.ReviewCartPage")
	private WebElement header_QTY_YTO_CSR_ReviewCartPage;

	@FindBy(locator = "dw.studentflyerorder.items.Entry.fields.in.OrderEntryPage.form")
	private WebElement items_Entry_fields_in_OrderEntryPage_form;

	@FindBy(locator = "dw.studentflyerorder.Form.expansion.buttons.in.three.forms.in.OrderEntryPage")
	private WebElement Form_expansion_buttons_in_three_forms_in_OrderEntryPage;

	@FindBy(locator = "dw.studentflyerorder.Form.expansion.button.first.form.in.OrderEntryPage")
	private WebElement Form_expansion_button_first_form_in_OrderEntryPage;

	@FindBy(locator = "dw.studentflyerorder.Last.textbox.in.OrderEntryPage")
	private WebElement Last_textbox_in_OrderEntryPage;

	@FindBy(locator = "dw.studentflyerorder.label.FLYER.CODE.field.in.OrderEntryPage")
	private WebElement label_FLYER_CODE_field_in_OrderEntryPage;

	@FindBy(locator = "dw.studentflyerorder.label.ITEM.header.in.OrderEntryPage")
	private WebElement label_ITEM_header_in_OrderEntryPage;

	@FindBy(locator = "dw.studentflyerorder.label.PAID.QTY.header.in.OrderEntryPage")
	private WebElement label_PAID_QTY_header_in_OrderEntryPage;

	@FindBy(locator = "dw.studentflyerorder.label.BONUS.QTY.header.in.OrderEntryPage")
	private WebElement label_BONUS_QTY_header_in_OrderEntryPage;

	@FindBy(locator = "csr.enterneworder.item")
	private WebElement gettextboxitemEnter;

	@FindBy(locator = "csr.enterneworder2.item")
	private WebElement gettextboxitemEnter2;

	@FindBy(locator = "csr.enterneworder3.item")
	private WebElement gettextboxitemEnter3;

	@FindBy(locator = "csr.enterneworder.paidQty")
	private WebElement gettextboxqtyEnter;

	@FindBy(locator = "csr.enterneworder.proceedchekout")
	private WebElement getbuttonProceedcheckout;

	@FindBy(locator = "dw.studentflyerorder.layer.Two.in.OrderEntryPage")
	private WebElement layer_Two_in_OrderEntryPage;

	@FindBy(locator = "dw.studentflyerorder.StudentsOrders.tab.in.OrderEntryPage")
	private WebElement StudentsOrders_tab_in_OrderEntryPage;

	@FindBy(locator = "dw.studentflyerorder.Bonus.QTY.text.boxes.in.OrderEntryPage")
	private WebElement Bonus_QTY_text_boxes_in_OrderEntryPage;

	@FindBy(locator = "dw.studentflyerorder.TeacherOrders.tab.in.OrderEntryPage")
	private WebElement TeacherOrders_tab_in_OrderEntryPage;

	@FindBy(locator = "dw.studentflyerorder.tabs.in.firstlayer.in.OrderEntryPage")
	private List<WebElement> tabs_in_firstlayer_in_OrderEntryPage;

	@FindBy(locator = "dw.studentflyerorder.Rows.default.in.Item.Entry.Form.in.OrderEntryPage")
	private List<WebElement> Rows_default_in_Item_Entry_Form_in_OrderEntryPage;

	@FindBy(locator = "dw.studentflyerorder.TextBoxes.Row.default.inForm1.Item.Entry.Form.in.OrderEntryPage")
	private List<WebElement> TextBoxes_Row_default_inForm1_Item_Entry_Form_in_OrderEntryPage;

	@FindBy(locator = "dw.studentflyerorder.TextBoxes.Row.default.inForm2.Item.Entry.Form.in.OrderEntryPage")
	private List<WebElement> TextBoxes_Row_default_inForm2_Item_Entry_Form_in_OrderEntryPage;

	@FindBy(locator = "dw.studentflyerorder.TextBoxes.Row.default.inForm3.Item.Entry.Form.in.OrderEntryPage")
	private List<WebElement> TextBoxes_Row_default_inForm3_Item_Entry_Form_in_OrderEntryPage;

	@FindBy(locator = "dw.studentflyerorder.Form.expansion.buttons.count.in.three.forms.in.OrderEntryPage")
	private List<WebElement> Form_expansion_buttons_count_in_three_forms_in_OrderEntryPage;

	@FindBy(locator = "dw.studentflyerorder.forms.default.in.secondLayer.in.OrderEntryPage")
	private List<WebElement> forms_default_in_secondLayer_in_OrderEntryPage;

	@FindBy(locator = "dw.studentflyerorder.rows.additional.in.secondLayer.in.OrderEntryPage")
	private List<WebElement> rows_additional_in_secondLayer_in_OrderEntryPage;

	@FindBy(locator = "dw.teacherhome.enterorder.revieworder.lbl.price")
	private WebElement revieworderpricelabel;

	@FindBy(locator = "dw.teacherhome.enterorder.studentflyerorder.ordertable")
	private List<WebElement> teacherFlyerOrderTable;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.grade.elf")
	private WebElement grade_Elf;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.grade.Seesaw")
	private WebElement grade_Seesaw;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.grade.Seesaw")
	private List<WebElement> sizegrade_Seesaw;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.grade.Arrow")
	private WebElement grade_Arrow;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.grade.UpMiddleSchool")
	private WebElement grade_UpMiddleSchool;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.grade.TeacherCatalogues")
	private WebElement grade_TeacherCatalogues;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.select.student1")
	private WebElement field_student1;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.Loader.invisibilty")
	private WebElement Loader_invisibilty;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.price.item1")
	private WebElement cart_item1_price;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.price.item2")
	private WebElement cart_item2_price;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.header.YourClassRoomOrder.YTO")
	private WebElement header_YourClassRoomOrder_YTO;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.header.BooksResources")
	private WebElement header_BooksResources;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.header.TeachersDesk")
	private WebElement header_TeachersDesk;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.container.AllFlyers")
	private List<WebElement> container_AllFlyers;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.price.subTotal.StudentClub")
	private WebElement subTotal_StudentClubs;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.qty.total.StudentClub")
	private WebElement qty_StudentClubs;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.price.item3")
	private WebElement cart_item3_price;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.price.item4")
	private WebElement cart_item4_price;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.qty.item1")
	private WebElement cart_qty_item1;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.fld.Search.home")
	private WebElement fld_Search_home;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.button.search.homePage")
	private WebElement button_search_homePage;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.first.item.in.Flyer")
	private WebElement first_item_in_Flyer;

	@FindBy(locator = "dw.sfopage.quectionmark.link")
	private WebElement in_sfopage_link_forstundentname;

	@FindBy(locator = "dw.sfopage.popupmessage.studentname")
	private List<WebElement> sfo_message_infopopup_studentName;
	
	@FindBy(locator = "dw.sfopage.popupmessage.studentname")
	private WebElement popup_sfo_message_infopopup_studentName;

	@FindBy(locator = "dw.sfopage.popupmessage.studentname.mssgText")
	private List<WebElement> sfo_message_infopopup_studentName_textcontant;

	@FindBy(locator = "dw.sfopage.popupmessage.studentname.link")
	private List<WebElement> link_inmessage_popup_studentname;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.SeeFullDetails.for.item")
	private WebElement SeeFullDetails_for_item;

	@FindBy(locator = "dw.teacher.home.enter.Orders.ReviewCart.Page")
	private WebElement enter_Orders_ReviewCart_Page;

	@FindBy(locator = "dw.teacher.home.shop.Books.Resources.ReviewCart.Page")
	private WebElement shop_Books_Resources_ReviewCart_Page;

	@FindBy(locator = "dw.teacher.home.page.shop.books.Flyers")
	private WebElement page_shop_books_Flyers;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.delete.item1.reviewcart")
	private WebElement delete_item1_reviewcart;

	@FindBy(locator = "dw.studentflyerorder.fld.error.msg.coupon.invalid.at.this.time")
	private WebElement fld_error_msg_coupon_invalid_at_this_time;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.delete.item2.reviewcart")
	private WebElement delete_item2_reviewcart;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.delete.item3.reviewcart")
	private WebElement delete_item3_reviewcart;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.YES.to.delete.item1.reviewcart")
	private WebElement YES_to_delete_item1_reviewcart;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.YES.to.delete.item2.reviewcart")
	private WebElement YES_to_delete_item2_reviewcart;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.YES.to.delete.item3.reviewcart")
	private WebElement YES_to_delete_item3_reviewcart;
	
	@FindBy(locator = "dw.teachers.home.myaccount.enter.classRoomOrder")
	private WebElement Enter_ClassRoom_Order;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.NO.to.delete.item1.reviewcart")
	private WebElement NO_to_delete_item1_reviewcart;
	
	@FindBy(locator = "dw.studentflyerorder.icon.HOME.Parent.site")
	private WebElement icon_HOME_Parent_site;
	
	@FindBy(locator = "dw.studentflyerorder.fld.Applied.SFO.coupon.SFO.section")
	private WebElement fld_Applied_SFO_coupon_SFO_section;
	
	@FindBy(locator = "dw.studentflyerorder.fld.Applied.SFO.coupon.SFO.section")
	private List<WebElement> lst_fld_Applied_SFO_coupon_SFO_section;
	
	@FindBy(locator = "dw.studentflyerorder.btn.close.SFO.coupon.SFO.section")
	private WebElement btn_close_SFO_coupon_SFO_section;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.item1.price.SubmitPage")
	private WebElement item1_price_SubmitPage;

	@FindBy(locator = "dw.teacher.item1.price.SFO.table1.ReviewCart.Page")
	private WebElement item1_price_SFO_table1_ReviewCart_Page;

	@FindBy(locator = "dw.teacher.item2.price.SFO.table1.ReviewCart.Page")
	private WebElement item2_price_SFO_table1_ReviewCart_Page;

	@FindBy(locator = "dw.teacher.item1.QTY.SFO.table1.ReviewCart.Page")
	private WebElement item1_QTY_SFO_table1_ReviewCart_Page;

	@FindBy(locator = "dw.teacher.item2.QTY.SFO.table1.ReviewCart.Page")
	private WebElement item2_QTY_SFO_table1_ReviewCart_Page;

	@FindBy(locator = "dw.teacher.item1.price.SFO.table2.ReviewCart.Page")
	private WebElement item1_price_SFO_table2_ReviewCart_Page;

	@FindBy(locator = "dw.teacher.item2.price.SFO.table2.ReviewCart.Page")
	private WebElement item2_price_SFO_table2_ReviewCart_Page;

	@FindBy(locator = "dw.teacher.item1.QTY.SFO.table2.ReviewCart.Page")
	private WebElement item1_QTY_SFO_table2_ReviewCart_Page;

	@FindBy(locator = "dw.teacher.item2.QTY.SFO.table2.ReviewCart.Page")
	private WebElement item2_QTY_SFO_table2_ReviewCart_Page;

	@FindBy(locator = "dw.teacher.SFO.subtotal.table1.ReviewCart.page")
	private WebElement SFO_subtotal_table1_ReviewCart_page;

	@FindBy(locator = "dw.teacher.SFO.subtotal.table2.ReviewCart.page")
	private WebElement SFO_subtotal_table2_ReviewCart_page;

	@FindBy(locator = "dw.teacher.SFO.total.table1.ReviewCart.page")
	private WebElement SFO_total_table1_ReviewCart_page;

	@FindBy(locator = "dw.teacher.SFO.total.table2.ReviewCart.page")
	private WebElement SFO_total_table2_ReviewCart_page;

	@FindBy(locator = "dw.teacher.GST.table1.SFO.ReviewCart.page")
	private WebElement GST_table1_SFO_ReviewCart_page;

	@FindBy(locator = "dw.teacher.PST.table1.SFO.ReviewCart.page")
	private WebElement PST_table1_SFO_ReviewCart_page;

	@FindBy(locator = "dw.teacher.QST.table1.SFO.ReviewCart.page")
	private WebElement QST_table1_SFO_ReviewCart_page;

	@FindBy(locator = "dw.teacher.HST.table1.SFO.ReviewCart.page")
	private WebElement HST_table1_SFO_ReviewCart_page;

	@FindBy(locator = "dw.teacher.GST.table2.SFO.ReviewCart.page")
	private WebElement GST_table2_SFO_ReviewCart_page;

	@FindBy(locator = "dw.teacher.PST.table2.SFO.ReviewCart.page")
	private WebElement PST_table2_SFO_ReviewCart_page;

	@FindBy(locator = "dw.teacher.QST.table2.SFO.ReviewCart.page")
	private WebElement QST_table2_SFO_ReviewCart_page;

	@FindBy(locator = "dw.teacher.HST.table2.SFO.ReviewCart.page")
	private WebElement HST_table2_SFO_ReviewCart_page;

	@FindBy(locator = "dw.teacher.SFO.TOTAL.ReviewCart.page")
	private WebElement SFO_TOTAL_ReviewCart_page;

	@FindBy(locator = "dw.teacher.CART.TOTAL.ReviewCart.page")
	private WebElement CART_TOTAL_ReviewCart_page;

	@FindBy(locator = "dw.fld.YOU.ARE.EARNING.REWARDS.ON.ReviewCart.page")
	private WebElement fld_YOU_ARE_EARNING_REWARDS_ON_ReviewCart_page;

	@FindBy(locator = "dw.fld.val.YOU.ARE.EARNING.REWARDS.ON.ReviewCart.page")
	private WebElement fld_val_YOU_ARE_EARNING_REWARDS_ON_ReviewCart_page;

	@FindBy(locator = "dw.teacher.studentflyerorder.CSR.txt.popup.to.delete.the.item.ReviewCartPage")
	private WebElement CSR_txt_popup_to_delete_the_item_ReviewCartPage;

	@FindBy(locator = "dw.teacher.studentflyerorder.CSR.btn.YES.to.delete.item1.ReviewCartPage")
	private WebElement CSR_btn_YES_to_delete_item1_ReviewCartPage;

	@FindBy(locator = "dw.teacher.studentflyerorder.CSR.btn.NO.in.popup.to.delete.the.item1.ReviewCartPage")
	private WebElement CSR_btn_NO_in_popup_to_delete_the_item1_ReviewCartPage;

	@FindBy(locator = "dw.studentflyerorder.checkout.ConfirmSubmit.Addr.fld.School.Shipping")
	private WebElement Addr_fld_School_Shipping_ConfirmSubmit;

	@FindBy(locator = "dw.studentflyerorder.checkout.ConfirmSubmit.header.Shipping.Addr")
	private WebElement header_Shipping_Addr_ConfirmSubmit;

	@FindBy(locator = "dw.studentflyerorder.checkout.ConfirmSubmit.TEXT.Alternate.Shipping.Address")
	private WebElement TEXT_Alternate_Shipping_Address;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.item2.price.SubmitPage")
	private WebElement item2_price_SubmitPage;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.item3.price.SubmitPage")
	private WebElement item3_price_SubmitPage;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.item1.qty.SubmitPage")
	private WebElement item1_qty_SubmitPage;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.msg.order.reference.Page")
	private WebElement msg_order_reference;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.item2.qty.SubmitPage")
	private WebElement item2_qty_SubmitPage;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.item3.qty.SubmitPage")
	private WebElement item3_qty_SubmitPage;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.price.Total.StudentClub.SubmitPage")
	private WebElement Total_StudentClubs_SubmitPage;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.price.Total.TeaherCat.SubmitPage")
	private WebElement Total_TeacherCatalogues_SubmitPage;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.price.Total.StudentClub.SubmitPage_all")
	private WebElement Total_StudentClubs_SubmitPage_For_all_Items;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.price.Total.TeaherCat.SubmitPage_all")
	private WebElement Total_TeacherCatalogues_SubmitPage_For_all_Items;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.price.Total.Shipping.SubmitPage")
	private WebElement Total_Shipping_SubmitPage;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.price.subTotal.Shipping.SubmitPage")
	private WebElement subTotal_Shipping_SubmitPage;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.price.subTotal.Shipping.SubmitPage1")
	private WebElement subTotal_Shipping_SubmitPage1;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.price.subTotal.PaidShipping.SubmitPage")
	private WebElement subTotal_PaidShipping_SubmitPage;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.price.subTotal.Shipping.SubmitPage")
	private List<WebElement> chksubTotal_Shipping_SubmitPage;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.price.GST.Shipping.SubmitPage")
	private WebElement amount_GST_Shipping_SubmitPage;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.price.PST.Shipping.SubmitPage")
	private WebElement amount_PST_Shipping_SubmitPage;

	@FindBy(locator = "dw.teacher.home.enterorder.GST.StudentClubsSubTotal")
	private WebElement GST_Student_Clubs_Subtotal;
	@FindBy(locator = "dw.teacher.home.enterorder.HST.StudentClubsSubTotal")
	private WebElement HST_Student_Clubs_Subtotal;

	/*
	 * @FindBy(locator =
	 * "dw.teacher.home.enterorder.HST.TeacherCataloguesSubTotal") private
	 * WebElement HST_Teacher_Catalogues_Subtotal;
	 */

	@FindBy(locator = "dw.teacher.home.enterorder.HST_Teacher_Subtotal")
	private WebElement HST_Teacher_Subtotal;

	@FindBy(locator = "dw.teacher.home.enterorder.PST.StudentClubsSubTotal")
	private WebElement PST_Student_Clubs_Subtotal;
	@FindBy(locator = "dw.teacher.home.enterorder.QST.StudentClubsSubTotal")
	private WebElement QST_Student_Clubs_Subtotal;

	@FindBy(locator = "dw.teacher.home.enterorder.QST.TeacherCataloguesSubtotal")
	private WebElement QST_Teacher_Catalogues_Subtotal;
	@FindBy(locator = "dw.teacher.home.enterorder.GST.TeacherCataloguesSubtotal")
	private WebElement GST_Teacher_Catalogues_Subtotal;
	@FindBy(locator = "dw.teacher.home.enterorder.PST.TeacherCataloguesSubtotal")
	private WebElement PST_Teacher_Catalogues_Subtotal;
	@FindBy(locator = "dw.teacher.home.enterorder.amt.StudentClubsTotal")
	private WebElement Student_Clubs_Total;
	@FindBy(locator = "dw.teacher.home.enterorder.amt.TeacherCataloguesTotal")
	private WebElement Teacher_Catalogues_Total;
	@FindBy(locator = "dw.teacher.home.enterorder.amt.TotalAmountOwing")
	private WebElement Total_Amount_Owing;

	@FindBy(locator = "dw.studentflyerorder.txt.TotalAmtOwing.ReviewCartPage")
	private WebElement label_Total_Amount_Owing_ReviewCartPage;

	@FindBy(locator = "dw.studentflyerorder.section.Total.Items.ReviewCartPage")
	private WebElement section_Total_Items_ReviewCartPage;

	@FindBy(locator = "dw.studentflyerorder.hyperLink.BackToShop.ReviewCartPage")
	private WebElement hyperLink_BackToShop_ReviewCartPage;

	@FindBy(locator = "dw.studentflyerorder.Blue.script.icon.ReviewCartPage")
	private WebElement Blue_script_icon_ReviewCartPage;

	@FindBy(locator = "dw.studentflyerorder.Blue.script.icon.RedemptionsRewards.Page")
	private WebElement Blue_script_icon_RedemptionsRewards_Page;

	@FindBy(locator = "dw.studentflyerorder.Blue.script.icon.Payment.Page")
	private WebElement Blue_script_icon_Payment_Page;

	@FindBy(locator = "dw.studentflyerorder.Blue.script.icon.ConfirmSubmit.Page")
	private WebElement Blue_script_icon_ConfirmSubmit_Page;

	@FindBy(locator = "dw.studentflyerorder.PO.Number.text.box.PaymentPage")
	private WebElement PO_Number_text_box_PaymentPage;

	@FindBy(locator = "dw.studentflyerorder.popup.PO.Number.text.box.PaymentPage")
	private WebElement popup_PO_Number_text_box_PaymentPage;

	@FindBy(locator = "dw.studentflyerorder.popup.Board.SchoolNum.text.box.PaymentPage")
	private WebElement popup_Board_SchoolNum_text_box_PaymentPage;
	
	@FindBy(locator = "dw.studentflyerorder.error.msg.Board.SchoolNum.text.box.PaymentPage")
	private WebElement error_msg_Board_SchoolNum_text_box_PaymentPage;

	@FindBy(locator = "dw.studentflyerorder.fld.1st.item.title.ReviewCart.Page")
	private WebElement fld_1st_item_title_ReviewCart_Page;

	@FindBy(locator = "dw.studentflyerorder.CallOut.msg.box.on.Item.Title.ReviewCart.page")
	private WebElement CallOut_msg_box_on_Item_Title_ReviewCart_page;

	@FindBy(locator = "dw.studentflyerorder.CallOut.box.item.title.ReviewCart.page")
	private WebElement CallOut_box_item_title_ReviewCart_page;

	@FindBy(locator = "dw.studentflyerorder.CallOut.box.item.price.ReviewCart.page")
	private WebElement CallOut_box_item_price_ReviewCart_page;

	@FindBy(locator = "dw.studentflyerorder.CallOut.box.GST.val.ReviewCart.page")
	private WebElement CallOut_box_GST_val_ReviewCart_page;

	@FindBy(locator = "dw.studentflyerorder.CallOut.box.PST.val.ReviewCart.page")
	private WebElement CallOut_box_PST_val_ReviewCart_page;

	@FindBy(locator = "dw.studentflyerorder.CallOut.box.QST.val.ReviewCart.page")
	private WebElement CallOut_box_QST_val_ReviewCart_page;

	@FindBy(locator = "dw.studentflyerorder.CallOut.box.HST.val.ReviewCart.page")
	private WebElement CallOut_box_HST_val_ReviewCart_page;

	@FindBy(locator = "dw.studentflyerorder.CallOut.box.Total.val.two.taxes.ReviewCart.page")
	private WebElement CallOut_box_Total_val_two_taxes_ReviewCart_page;

	@FindBy(locator = "dw.studentflyerorder.CallOut.box.Total.val.one.tax.ReviewCart.page")
	private WebElement CallOut_box_Total_val_one_tax_ReviewCart_page;

	@FindBy(locator = "dw.studentflyerorder.fld.Board.SchoolNum.text.box.PaymentPage")
	private WebElement fld_Board_SchoolNum_text_box_PaymentPage;

	@FindBy(locator = "dw.studentflyerorder.popUp.PO.Num.fld.PaymentPage")
	private WebElement popUp_PO_Num_fld_PaymentPage;

	@FindBy(locator = "dw.studentflyerorder.CSR.table.StudentClubs.items")
	private WebElement CSR_table_StudentClubs_items;

	@FindBy(locator = "dw.studentflyerorder.CSR.table.StudentClubs.items")
	private List<WebElement> CSR_table_StudentClubs_items_list;

	@FindBy(locator = "dw.studentflyerorder.section.mailing.address.PaymentPage")
	private WebElement section_mailing_address_PaymentPage;

	@FindBy(locator = "dw.studentflyerorder.modal.window.ConfirmYourOrder.ReviewCartPage")
	private WebElement modal_window_ConfirmYourOrder_ReviewCartPage;

	@FindBy(locator = "dw.studentflyerorder.modal.window.WHAT.RedemptionsRewards.Page")
	private WebElement modal_window_WHAT_RedemptionsRewards_Page;

	@FindBy(locator = "dw.studentflyerorder.modal.window.Shipping.Payment.Page")
	private WebElement modal_window_Shipping_Payment_Page;

	@FindBy(locator = "dw.studentflyerorder.modal_window_ConfirmSubmit_Page")
	private WebElement modal_window_ConfirmSubmit_Page;

	@FindBy(locator = "dw.studentflyerorder.btn.close.in.modal.window.ConfirmYourOrder.ReviewCartPage")
	private WebElement btn_close_in_modal_window_ConfirmYourOrder_ReviewCartPage;

	@FindBy(locator = "dw.studentflyerorder.btn.close.in.modal.window.WHAT.RedemptionsRewards.Page")
	private WebElement btn_close_in_modal_window_WHAT_RedemptionsRewards_Page;

	@FindBy(locator = "dw.studentflyerorder.btn.close.in.modal.window.Payment.Page")
	private WebElement btn_close_in_modal_window_Payment_Page;

	@FindBy(locator = "dw.studentflyerorder.btn.close.in.modal.window.ConfirmSubmit.Page")
	private WebElement btn_close_in_modal_window_ConfirmSubmit_Page;

	@FindBy(locator = "dw.teacher.home.enterorder.amt.TotalAmountOwing.SubmitPage")
	private WebElement Total_Amount_Owing_submitPage;

	@FindBy(locator = "dw.teacher.home.enterorder.Amt.paid.by.cheques.submitPage")
	private WebElement Amt_paid_by_cheques_submitPage;

	@FindBy(locator = "dw.teacher.home.enterorder.Amt.paid.by.creditCard.submitPage")
	private WebElement Amt_paid_by_creditCard_submitPage;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.price.subTotal.TeacherCatalogues")
	private WebElement SubTotal_TeacherCatalogues;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.price.subTotal.TeacherCataloguesOnly")
	private WebElement SubTotal_TeacherCataloguesOnly;

	@FindBy(locator = "dw.teacher.home.enterorder.CSR.studentflyerorder.price.subTotal.TeacherCatalogues")
	private WebElement SubTotal_TeacherCatalogues_CSR;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.tab.grade.second")
	private WebElement tab_grade_second;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.tab_month_June")
	private WebElement tab_month_June;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.tab_month_June1")
	private WebElement tab_month_June1;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.qty.item2")
	private WebElement cart_qty_item2;
	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.qty.item3")
	private WebElement cart_qty_item3;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.qty.item4")
	private WebElement cart_qty_item4;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.select.Clearance_Flyers")
	private WebElement Clearance_Flyers;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.select.Classroom_Reward_Catalogues")
	private WebElement Classroom_Reward_Catalogues;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.select.student2")
	private WebElement field_student2;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.select.student3")
	private WebElement field_student3;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.select.student4")
	private WebElement field_student4;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.select.student5")
	private WebElement field_student5;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.select.arrow")
	private WebElement select_arrow;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.student1.qty")
	private WebElement field_qty1;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.student2.qty")
	private WebElement field_qty2;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.student3.qty")
	private WebElement field_qty3;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.student4.qty")
	private WebElement field_qty4;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.student5.qty")
	private WebElement field_qty5;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.reviewCart.field.student1")
	private WebElement reviewCart_field_student1;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.reviewCart.field.student2")
	private WebElement reviewCart_field_student2;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.reviewCart.field.student3")
	private WebElement reviewCart_field_student3;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.click.ouside")
	private WebElement click_outside;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.click.ouside.InReviewCartPage")
	private WebElement click_outside_in_ReviewCartPage;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.fld.studentZoomField")
	private WebElement studentZoomField;

	@FindBy(locator = "dw.teacher.studentflyerorder.btn_Home_Order_ref_Page")
	private WebElement btn_Home_Order_ref_Page;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.reviewCart.fld.studentZoomField")
	private WebElement studentZoomField_in_reviewCart;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.reviewCart.fld.flyer")
	private WebElement lblflyerreviewcart;

	@FindBy(locator = "dw.csr.studentflyerorder.tabs.progresssection")
	private WebElement lnkorderentryaddaflyer;

	@FindBy(locator = "couponpage.button.backtoshop")
	private WebElement btn_CouponPage_backtoshop;

	@FindBy(locator = "dw.reviewcart.updateqty")
	private WebElement inputItem1QTY;

	@FindBy(locator = "dw.enterOrder.SFO.link")
	private List<WebElement> linkSFO;
	
	
	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.delete.item.reviewcart.list")
	private List<WebElement> deleteitemreviewcartlist;
	
	@FindBy(locator = "dw.teachers.home.tab.SFO")
	private WebElement tab_SFO;

	@FindBy(locator = "dw.enterOrder.SFO.link.displayed")
	private WebElement linkfromwebSFO;

	@FindBy(locator = "dw.enterOrder.YTO.link")
	private List<WebElement> linkYTO;

	@FindBy(locator = "dw.enterOrder.YTOpage.title")
	private WebElement sfopageTitle;

	@FindBy(locator = "dw.sfo_page_button_Add")
	private WebElement sfo_page_button_Add;

	@FindBy(locator = "dw.sfo_page_invalidItemNo_error")
	private WebElement sfo_invalidItemNo_error;

	@FindBy(locator = "dw.sfo_page_invalidStudentName_error")
	private WebElement sfo_invliadStudentName_error;

	@FindBy(locator = "dw.sfocouponmodal_labelstudentName")
	private List<WebElement> sfocouponmodal_labelstudentName;

	@FindBy(locator = "dw.sfocoupon_labelcoupon")
	private List<WebElement> sfocoupon_labelcoupon;

	@FindBy(locator = "dw.sfocoupon_buttonApply")
	private List<WebElement> sfocoupon_buttonApply;

	@FindBy(locator = "dw.sfocoupon_sname.text")
	private WebElement text_sfocoupon_sname_text;

	@FindBy(locator = "dw.sfocoupon_sname.input.box")
	private WebElement inputbox_sfocoupon_sname;

	@FindBy(locator = "dw.sfocoupon_couponCode.input.box")
	private WebElement inputbox_sfocoupon_couponCode;

	@FindBy(locator = "dw.sfocoupon_couponfield.text")
	private WebElement text_sfocoupon_couponfield_text;

	@FindBy(locator = "dw.sfocoupon_modal_applybutton")
	private WebElement get_sfomodal_applybutton_state;

    @FindBy(locator = "dw.sfocoupon_modal_errorMsg")
    private WebElement  sfocouponmodalerrorMsg;

	@FindBy(locator = "dw.sfopage.sfocoupon.redeemed")
	private List<WebElement> sfocoupon_redeemed_sfopage;

	@FindBy(locator = "dw.teacher.sfoPage.sfoText_UnderTitle")
	private WebElement sfoPage_TextDisplay;

	@FindBy(locator = "dw.sfocouponmodal.studentname.errormessage")
	private WebElement appgetsfo_studentname_errorMsg;

	@FindBy(locator = "dw.sfocouponmodal.invalidCouponcode.errormessage")
	private WebElement appgetsfomodal_couponCodeInvalid_errorMsg;
	
	@FindBy(locator = "dw.studentflyerorder.fld.SOO.notification.ReviewCart")
	private WebElement fld_SOO_notification_ReviewCart;
	
	@FindBy(locator = "dw.studentflyerorder.chkBox.SOO.items.ReviewCart")
	private WebElement chkBox_SOO_items_ReviewCart;
	
	@FindBy(locator = "dw.studentflyerorder.chkBox.selection.status.SOO.items.ReviewCart")
	private WebElement chkBox_selection_status_SOO_items_ReviewCart;
	
	@FindBy(locator = "dw.studentflyerorder.section.SOO.items.list.ReviewCart")
	private WebElement section_SOO_items_list_ReviewCart;

	@FindBy(locator = "dw.sfopage.addeditem.grid")
	private List<WebElement> sfo_addedItem_grid;

	@FindBy(locator = "dw.teacher.sfopage.sfotable.Display")
	private WebElement sfohometable;

	@FindBy(locator = "dw.teacher.reviewcart.studentname")
	private WebElement reviewcartstudentname;
	
	@FindBy(locator = "dw.teacher.yto.itemnumber.header")
	private WebElement ytotableitemnumberheader;
	
	@FindBy(locator = "dw.studentflyerorder.itemquantity.field.size")
	private List<WebElement> sizesfoitemquantities;
	
	@FindBy(locator = "dw.studentflyerorder.freepick.itemquantity.field.size")
	private List<WebElement> sizesfofreepickitemquantities;
	
	@FindBy(locator = "dw.studentflyerorder.freepick.item.remove")
	private WebElement removesfofreepickitem;
	
	@FindBy(locator = "dw.studentflyerorder.yto.itemquantity.field.size")
	private List<WebElement> sizeytoitemquantities;
	
	@FindBy(locator = "dw.studentflyerorder.te.itemquantity.field.size")
	private List<WebElement> sizeteitemquantities;
	
	public List<WebElement> sizeteitemquantities(){
		return sizeteitemquantities;
	}
	
	public List<WebElement> sizesfoitemquantities(){
		return sizesfoitemquantities;
	}
	
	public WebElement removesfofreepickitem(){
		return removesfofreepickitem;
	}
	
	public List<WebElement> sizesfofreepickitemquantities(){
		return sizesfofreepickitemquantities;
	}
	
	public List<WebElement> sizeytoitemquantities(){
		return sizeytoitemquantities;
	}
	
	public WebElement getytotableitemnumberheader(){
		return ytotableitemnumberheader;
	}
	
	public WebElement getreviewcartstudentname(){
		return reviewcartstudentname;
	}
	public List<WebElement> getDrpAutosuggestions() {
		return drpAutosuggestions;
	}

	public List<WebElement> get_sfo_addedItem_grid() {
		return sfo_addedItem_grid;
	}

	public WebElement getinputItem1QTY() {
		return inputItem1QTY;
	}

	public WebElement getbtn_CouponPage_backtoshop() {
		return btn_CouponPage_backtoshop;
	}

	public WebElement getlnkorderentryaddaflyer() {
		return lnkorderentryaddaflyer;
	}

	public WebElement studentZoomField() {
		return studentZoomField;
	}

	public WebElement studentZoomField_in_reviewCart() {
		return studentZoomField_in_reviewCart;
	}

	public WebElement getlblflyerreviewcart() {
		return lblflyerreviewcart;
	}

	public WebElement grade_Elf() {
		return grade_Elf;
	}

	public WebElement grade_Seesaw() {
		return grade_Seesaw;
	}

	public List<WebElement> sizegrade_Seesaw() {
		return sizegrade_Seesaw;
	}

	public WebElement grade_Arrow() {
		return grade_Arrow;
	}

	public WebElement SubTotal_TeacherCatalogues() {
		return SubTotal_TeacherCatalogues;
	}

	public WebElement SubTotal_TeacherCataloguesOnly() {
		return SubTotal_TeacherCataloguesOnly;
	}

	public WebElement SubTotal_TeacherCatalogues_CSR() {
		return SubTotal_TeacherCatalogues_CSR;
	}

	public WebElement tab_grade_second() {
		return tab_grade_second;
	}

	public WebElement tab_month_June() {
		return tab_month_June;
	}

	public WebElement tab_month_June1() {
		return tab_month_June1;
	}

	public WebElement grade_UpMiddleSchool() {
		return grade_UpMiddleSchool;
	}

	public WebElement btn_Home_Order_ref_Page() {
		return btn_Home_Order_ref_Page;
	}

	public WebElement cart_qty_item1() {
		return cart_qty_item1;
	}

	public WebElement fld_Search_home() {
		return fld_Search_home;
	}

	public WebElement button_search_homePage() {
		return button_search_homePage;
	}

	public WebElement first_item_in_Flyer() {
		return first_item_in_Flyer;
	}

	public WebElement get_sfopage_link_aboutenterstudentname() {
		return in_sfopage_link_forstundentname;
	}

	public List<WebElement> get_sfo_message_infopopup_studentName() {
		return sfo_message_infopopup_studentName;
	}
	
	public WebElement popup_sfo_message_infopopup_studentName() {
		return popup_sfo_message_infopopup_studentName;
	}

	public List<WebElement> get_sfo_message_infopopup_studentName_textcontant() {
		return sfo_message_infopopup_studentName_textcontant;
	}

	public List<WebElement> get_link_inmessage_popup_studentname() {
		return link_inmessage_popup_studentname;
	}

	public WebElement SeeFullDetails_for_item() {
		return SeeFullDetails_for_item;
	}

	public WebElement enter_Orders_ReviewCart_Page() {
		return enter_Orders_ReviewCart_Page;
	}

	public List<WebElement> getlinkSFO() {
		return linkSFO;
	}
	
	public WebElement tab_SFO() {
		return tab_SFO;
	}

	public WebElement getlinkfromwebSFO() {
		return linkfromwebSFO;
	}

	public List<WebElement> getlinkYTO() {
		return linkYTO;
	}

	public WebElement sfopageTitle() {
		return sfopageTitle;
	}

	public List<WebElement> getsfocouponmodal_labelstudentName() {
		return sfocouponmodal_labelstudentName;
	}

	public List<WebElement> getsfocoupon_labelcoupon() {
		return sfocoupon_labelcoupon;
	}

	public List<WebElement> getsfocoupon_buttonApply() {
		return sfocoupon_buttonApply;
	}

	public WebElement appgettext_sfocoupon_sname_text() {
		return text_sfocoupon_sname_text;
	}

	public WebElement getinputbox_sfocoupon_sname() {
		return inputbox_sfocoupon_sname;
	}

	public WebElement appgettext_sfocoupon_couponfield_text() {
		return text_sfocoupon_couponfield_text;
	}

	public WebElement getinputbox_sfocoupon_couponCode() {
		return inputbox_sfocoupon_couponCode;
	}

	public WebElement appget_sfomodal_applybutton_state() {
		return get_sfomodal_applybutton_state;
	}

    public WebElement getsfocouponmodalerrorMsg() {
        return sfocouponmodalerrorMsg;
    }


    public List<WebElement> get_sfocoupon_redeemed_sfopage() {
		return sfocoupon_redeemed_sfopage;
	}

	public WebElement shop_Books_Resources_ReviewCart_Page() {
		return shop_Books_Resources_ReviewCart_Page;
	}

	public WebElement appgetsfo_sname_errorMsg() {
		return appgetsfo_studentname_errorMsg;
	}

	public WebElement appget_sfomodal_couponcode_errorMsg() {
		return appgetsfomodal_couponCodeInvalid_errorMsg;
	}
	
	public WebElement fld_SOO_notification_ReviewCart() {
		return fld_SOO_notification_ReviewCart;
	}
	
	public WebElement chkBox_SOO_items_ReviewCart() {
		return chkBox_SOO_items_ReviewCart;
	}
	
	public WebElement chkBox_selection_status_SOO_items_ReviewCart() {
		return chkBox_selection_status_SOO_items_ReviewCart;
	}
	
	public WebElement section_SOO_items_list_ReviewCart() {
		return section_SOO_items_list_ReviewCart;
	}

	public WebElement page_shop_books_Flyers() {
		return page_shop_books_Flyers;
	}

	public WebElement delete_item1_reviewcart() {
		return delete_item1_reviewcart;
	}

	public WebElement fld_error_msg_coupon_invalid_at_this_time() {
		return fld_error_msg_coupon_invalid_at_this_time;
	}

	public WebElement delete_item2_reviewcart() {
		return delete_item2_reviewcart;
	}

	public WebElement delete_item3_reviewcart() {
		return delete_item3_reviewcart;
	}

	public WebElement YES_to_delete_item1_reviewcart() {
		return YES_to_delete_item1_reviewcart;
	}

	public WebElement YES_to_delete_item2_reviewcart() {
		return YES_to_delete_item2_reviewcart;
	}

	public WebElement YES_to_delete_item3_reviewcart() {
		return YES_to_delete_item3_reviewcart;
	}
	
	public WebElement Enter_ClassRoom_Order() {
		return Enter_ClassRoom_Order;
	}

	public WebElement NO_to_delete_item1_reviewcart() {
		return NO_to_delete_item1_reviewcart;
	}
	
	public WebElement icon_HOME_Parent_site() {
		return icon_HOME_Parent_site;
	}
	
	public WebElement fld_Applied_SFO_coupon_SFO_section() {
		return fld_Applied_SFO_coupon_SFO_section;
	}
	
	public List<WebElement> lst_fld_Applied_SFO_coupon_SFO_section() {
		return lst_fld_Applied_SFO_coupon_SFO_section;
	}
	
	public WebElement btn_close_SFO_coupon_SFO_section() {
		return btn_close_SFO_coupon_SFO_section;
	}

	public WebElement item1_price_SubmitPage() {
		return item1_price_SubmitPage;
	}

	public WebElement item1_price_SFO_table1_ReviewCart_Page() {
		return item1_price_SFO_table1_ReviewCart_Page;
	}

	public WebElement item2_price_SFO_table1_ReviewCart_Page() {
		return item2_price_SFO_table1_ReviewCart_Page;
	}

	public WebElement item1_QTY_SFO_table1_ReviewCart_Page() {
		return item1_QTY_SFO_table1_ReviewCart_Page;
	}

	public WebElement item2_QTY_SFO_table1_ReviewCart_Page() {
		return item2_QTY_SFO_table1_ReviewCart_Page;
	}

	public WebElement item1_price_SFO_table2_ReviewCart_Page() {
		return item1_price_SFO_table2_ReviewCart_Page;
	}

	public WebElement item2_price_SFO_table2_ReviewCart_Page() {
		return item2_price_SFO_table2_ReviewCart_Page;
	}

	public WebElement item1_QTY_SFO_table2_ReviewCart_Page() {
		return item1_QTY_SFO_table2_ReviewCart_Page;
	}

	public WebElement item2_QTY_SFO_table2_ReviewCart_Page() {
		return item2_QTY_SFO_table2_ReviewCart_Page;
	}

	public WebElement SFO_subtotal_table1_ReviewCart_page() {
		return SFO_subtotal_table1_ReviewCart_page;
	}

	public WebElement SFO_subtotal_table2_ReviewCart_page() {
		return SFO_subtotal_table2_ReviewCart_page;
	}

	public WebElement SFO_total_table1_ReviewCart_page() {
		return SFO_total_table1_ReviewCart_page;
	}

	public WebElement SFO_total_table2_ReviewCart_page() {
		return SFO_total_table2_ReviewCart_page;
	}

	public WebElement GST_table1_SFO_ReviewCart_page() {
		return GST_table1_SFO_ReviewCart_page;
	}

	public WebElement PST_table1_SFO_ReviewCart_page() {
		return PST_table1_SFO_ReviewCart_page;
	}

	public WebElement QST_table1_SFO_ReviewCart_page() {
		return QST_table1_SFO_ReviewCart_page;
	}

	public WebElement HST_table1_SFO_ReviewCart_page() {
		return HST_table1_SFO_ReviewCart_page;
	}

	public WebElement GST_table2_SFO_ReviewCart_page() {
		return GST_table2_SFO_ReviewCart_page;
	}

	public WebElement PST_table2_SFO_ReviewCart_page() {
		return PST_table2_SFO_ReviewCart_page;
	}

	public WebElement QST_table2_SFO_ReviewCart_page() {
		return QST_table2_SFO_ReviewCart_page;
	}

	public WebElement HST_table2_SFO_ReviewCart_page() {
		return HST_table2_SFO_ReviewCart_page;
	}

	public WebElement SFO_TOTAL_ReviewCart_page() {
		return SFO_TOTAL_ReviewCart_page;
	}

	public WebElement CART_TOTAL_ReviewCart_page() {
		return CART_TOTAL_ReviewCart_page;
	}

	public WebElement fld_YOU_ARE_EARNING_REWARDS_ON_ReviewCart_page() {
		return fld_YOU_ARE_EARNING_REWARDS_ON_ReviewCart_page;
	}

	public WebElement fld_val_YOU_ARE_EARNING_REWARDS_ON_ReviewCart_page() {
		return fld_val_YOU_ARE_EARNING_REWARDS_ON_ReviewCart_page;
	}

	public WebElement CSR_txt_popup_to_delete_the_item_ReviewCartPage() {
		return CSR_txt_popup_to_delete_the_item_ReviewCartPage;
	}

	public WebElement CSR_btn_YES_to_delete_item1_ReviewCartPage() {
		return CSR_btn_YES_to_delete_item1_ReviewCartPage;
	}

	public WebElement CSR_btn_NO_in_popup_to_delete_the_item1_ReviewCartPage() {
		return CSR_btn_NO_in_popup_to_delete_the_item1_ReviewCartPage;
	}

	public WebElement Addr_fld_School_Shipping_ConfirmSubmit() {
		return Addr_fld_School_Shipping_ConfirmSubmit;
	}

	public WebElement header_Shipping_Addr_ConfirmSubmit() {
		return header_Shipping_Addr_ConfirmSubmit;
	}

	public WebElement TEXT_Alternate_Shipping_Address() {
		return TEXT_Alternate_Shipping_Address;
	}

	public WebElement item2_price_SubmitPage() {
		return item2_price_SubmitPage;
	}

	public WebElement item3_price_SubmitPage() {
		return item3_price_SubmitPage;
	}

	public WebElement item1_qty_SubmitPage() {
		return item1_qty_SubmitPage;
	}

	public WebElement msg_order_reference() {
		return msg_order_reference;
	}

	public WebElement item2_qty_SubmitPage() {
		return item2_qty_SubmitPage;
	}

	public WebElement item3_qty_SubmitPage() {
		return item3_qty_SubmitPage;
	}

	public WebElement Total_StudentClubs_SubmitPage() {
		return Total_StudentClubs_SubmitPage;
	}

	public WebElement Total_TeacherCatalogues_SubmitPage() {
		return Total_TeacherCatalogues_SubmitPage;
	}

	public WebElement Total_StudentClubs_SubmitPage_For_all_Items() {
		return Total_StudentClubs_SubmitPage_For_all_Items;
	}

	public WebElement Total_TeacherCatalogues_SubmitPage_For_all_Items() {
		return Total_TeacherCatalogues_SubmitPage_For_all_Items;
	}

	public WebElement Total_Shipping_SubmitPage() {
		return Total_Shipping_SubmitPage;
	}

	public WebElement subTotal_Shipping_SubmitPage() {
		return subTotal_Shipping_SubmitPage;
	}

	public WebElement subTotal_Shipping_SubmitPage1() {
		return subTotal_Shipping_SubmitPage1;
	}

	public WebElement subTotal_PaidShipping_SubmitPage() {
		return subTotal_PaidShipping_SubmitPage;
	}

	public List<WebElement> chksubTotal_Shipping_SubmitPage() {
		return chksubTotal_Shipping_SubmitPage;
	}

	public WebElement amount_GST_Shipping_SubmitPage() {
		return amount_GST_Shipping_SubmitPage;
	}

	public WebElement amount_PST_Shipping_SubmitPage() {
		return amount_PST_Shipping_SubmitPage;
	}

	public WebElement GST_Student_Clubs_Subtotal() {
		return GST_Student_Clubs_Subtotal;
	}

	public WebElement HST_Student_Clubs_Subtotal() {
		return HST_Student_Clubs_Subtotal;
	}

	public WebElement HST_Teacher_Subtotal() {
		return HST_Teacher_Subtotal;
	}

	public WebElement PST_Student_Clubs_Subtotal() {
		return PST_Student_Clubs_Subtotal;
	}

	public WebElement QST_Student_Clubs_Subtotal() {
		return QST_Student_Clubs_Subtotal;
	}

	public WebElement QST_Teacher_Catalogues_Subtotal() {
		return QST_Teacher_Catalogues_Subtotal;
	}

	public WebElement GST_Teacher_Catalogues_Subtotal() {
		return GST_Teacher_Catalogues_Subtotal;
	}

	public WebElement PST_Teacher_Catalogues_Subtotal() {
		return PST_Teacher_Catalogues_Subtotal;
	}

	public WebElement Student_Clubs_Total() {
		return Student_Clubs_Total;
	}

	public WebElement Teacher_Catalogues_Total() {
		return Teacher_Catalogues_Total;
	}

	public WebElement Total_Amount_Owing() {
		return Total_Amount_Owing;
	}

	public WebElement label_Total_Amount_Owing_ReviewCartPage() {
		return label_Total_Amount_Owing_ReviewCartPage;
	}

	public WebElement section_Total_Items_ReviewCartPage() {
		return section_Total_Items_ReviewCartPage;
	}

	public WebElement hyperLink_BackToShop_ReviewCartPage() {
		return hyperLink_BackToShop_ReviewCartPage;
	}

	public WebElement Blue_script_icon_ReviewCartPage() {
		return Blue_script_icon_ReviewCartPage;
	}

	public WebElement Blue_script_icon_RedemptionsRewards_Page() {
		return Blue_script_icon_RedemptionsRewards_Page;
	}

	public WebElement Blue_script_icon_Payment_Page() {
		return Blue_script_icon_Payment_Page;
	}

	public WebElement Blue_script_icon_ConfirmSubmit_Page() {
		return Blue_script_icon_ConfirmSubmit_Page;
	}

	public WebElement PO_Number_text_box_PaymentPage() {
		return PO_Number_text_box_PaymentPage;
	}

	public WebElement popup_PO_Number_text_box_PaymentPage() {
		return popup_PO_Number_text_box_PaymentPage;
	}

	public WebElement popup_Board_SchoolNum_text_box_PaymentPage() {
		return popup_Board_SchoolNum_text_box_PaymentPage;
	}
	
	public WebElement error_msg_Board_SchoolNum_text_box_PaymentPage() {
		return error_msg_Board_SchoolNum_text_box_PaymentPage;
	}

	public WebElement fld_1st_item_title_ReviewCart_Page() {
		return fld_1st_item_title_ReviewCart_Page;
	}

	public WebElement CallOut_msg_box_on_Item_Title_ReviewCart_page() {
		return CallOut_msg_box_on_Item_Title_ReviewCart_page;
	}

	public WebElement CallOut_box_item_title_ReviewCart_page() {
		return CallOut_box_item_title_ReviewCart_page;
	}

	public WebElement CallOut_box_item_price_ReviewCart_page() {
		return CallOut_box_item_price_ReviewCart_page;
	}

	public WebElement CallOut_box_GST_val_ReviewCart_page() {
		return CallOut_box_GST_val_ReviewCart_page;
	}

	public WebElement CallOut_box_PST_val_ReviewCart_page() {
		return CallOut_box_PST_val_ReviewCart_page;
	}

	public WebElement CallOut_box_QST_val_ReviewCart_page() {
		return CallOut_box_QST_val_ReviewCart_page;
	}

	public WebElement CallOut_box_HST_val_ReviewCart_page() {
		return CallOut_box_HST_val_ReviewCart_page;
	}

	public WebElement CallOut_box_Total_val_two_taxes_ReviewCart_page() {
		return CallOut_box_Total_val_two_taxes_ReviewCart_page;
	}

	public WebElement CallOut_box_Total_val_one_tax_ReviewCart_page() {
		return CallOut_box_Total_val_one_tax_ReviewCart_page;
	}

	public WebElement fld_Board_SchoolNum_text_box_PaymentPage() {
		return fld_Board_SchoolNum_text_box_PaymentPage;
	}

	public WebElement popUp_PO_Num_fld_PaymentPage() {
		return popUp_PO_Num_fld_PaymentPage;
	}

	public WebElement CSR_table_StudentClubs_items() {
		return CSR_table_StudentClubs_items;
	}

	public List<WebElement> CSR_table_StudentClubs_items_list() {
		return CSR_table_StudentClubs_items_list;
	}

	public WebElement section_mailing_address_PaymentPage() {
		return section_mailing_address_PaymentPage;
	}

	public WebElement modal_window_ConfirmYourOrder_ReviewCartPage() {
		return modal_window_ConfirmYourOrder_ReviewCartPage;
	}

	public WebElement modal_window_WHAT_RedemptionsRewards_Page() {
		return modal_window_WHAT_RedemptionsRewards_Page;
	}

	public WebElement modal_window_Shipping_Payment_Page() {
		return modal_window_Shipping_Payment_Page;
	}

	public WebElement modal_window_ConfirmSubmit_Page() {
		return modal_window_ConfirmSubmit_Page;
	}

	public WebElement btn_close_in_modal_window_ConfirmYourOrder_ReviewCartPage() {
		return btn_close_in_modal_window_ConfirmYourOrder_ReviewCartPage;
	}

	public WebElement btn_close_in_modal_window_WHAT_RedemptionsRewards_Page() {
		return btn_close_in_modal_window_WHAT_RedemptionsRewards_Page;
	}

	public WebElement btn_close_in_modal_window_Payment_Page() {
		return btn_close_in_modal_window_Payment_Page;
	}

	public WebElement btn_close_in_modal_window_ConfirmSubmit_Page() {
		return btn_close_in_modal_window_ConfirmSubmit_Page;
	}

	public WebElement Total_Amount_Owing_submitPage() {
		return Total_Amount_Owing_submitPage;
	}

	public WebElement Amt_paid_by_cheques_submitPage() {
		return Amt_paid_by_cheques_submitPage;
	}

	public WebElement Amt_paid_by_creditCard_submitPage() {
		return Amt_paid_by_creditCard_submitPage;
	}

	public WebElement cart_qty_item2() {
		return cart_qty_item2;
	}

	public WebElement cart_qty_item3() {
		return cart_qty_item3;
	}

	public WebElement cart_qty_item4() {
		return cart_qty_item4;
	}

	public WebElement grade_TeacherCatalogues() {
		return grade_TeacherCatalogues;
	}

	public WebElement field_student1() {
		return field_student1;
	}

	public WebElement Loader_invisibilty() {
		return Loader_invisibilty;
	}

	public WebElement cart_item1_price() {
		return cart_item1_price;
	}

	public WebElement cart_item2_price() {
		return cart_item2_price;
	}

	public WebElement header_YourClassRoomOrder_YTO() {
		return header_YourClassRoomOrder_YTO;
	}

	public WebElement header_BooksResources() {
		return header_BooksResources;
	}

	public WebElement header_TeachersDesk() {
		return header_TeachersDesk;
	}

	public List<WebElement> sizecontainer_AllFlyers() {
		return container_AllFlyers;
	}

	public WebElement subTotal_StudentClubs() {
		return subTotal_StudentClubs;
	}

	public WebElement qty_StudentClubs() {
		return qty_StudentClubs;
	}

	public WebElement cart_item3_price() {
		return cart_item3_price;
	}

	public WebElement cart_item4_price() {
		return cart_item4_price;
	}

	public WebElement Clearance_Flyers() {
		return Clearance_Flyers;
	}

	public WebElement Classroom_Reward_Catalogues() {
		return Classroom_Reward_Catalogues;
	}

	public WebElement field_student2() {
		return field_student2;
	}

	public WebElement field_student3() {
		return field_student3;
	}

	public WebElement field_student4() {
		return field_student4;
	}

	public WebElement field_student5() {
		return field_student5;
	}

	public WebElement select_arrow() {
		return select_arrow;
	}

	public WebElement field_qty1() {
		return field_qty1;
	}

	public WebElement field_qty2() {
		return field_qty2;
	}

	public WebElement field_qty3() {
		return field_qty3;
	}

	public WebElement field_qty5() {
		return field_qty5;
	}

	public WebElement field_qty4() {
		return field_qty4;
	}

	public WebElement reviewCart_field_student1() {
		return reviewCart_field_student1;
	}

	public WebElement reviewCart_field_student2() {
		return reviewCart_field_student2;
	}

	public WebElement reviewCart_field_student3() {
		return reviewCart_field_student3;
	}

	public WebElement click_outside() {
		return click_outside;
	}

	public WebElement click_outside_in_ReviewCartPage() {
		return click_outside_in_ReviewCartPage;
	}

	public List<WebElement> getTeacherFlyerOrderTable() {
		return teacherFlyerOrderTable;
	}

	public WebElement getReviewOrderpagePriceLabel() {
		return revieworderpricelabel;
	}

	public WebElement getBtnSaved() {
		return btnSaved;
	}

	public WebElement getLblPriceSFOOrderTable() {
		return lblPriceSFOOrderTable;
	}

	public WebElement getLblFlyerSFOOrderTable() {
		return lblFlyerSFOOrderTable;
	}

	public WebElement getLblStudentNameSFOOrderTable() {
		return lblStudentNameSFOOrderTable;
	}

	public WebElement getLblItemSFOOrderTable() {
		return lblItemSFOOrderTable;
	}

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.popup.close")
	private WebElement btnPopUpClose;

	public WebElement getBtnPopUpClose() {
		return btnPopUpClose;
	}

	public WebElement TGAT_coupon_info_section() {
		return TGAT_coupon_info_section;
	}

	public WebElement CSR_Order_Type_Phone_Order() {
		return CSR_Order_Type_Phone_Order;
	}

	public WebElement CSR_Order_Type_Mail_Order() {
		return CSR_Order_Type_Mail_Order;
	}

	public WebElement CSR_Order_Type_Fax_Order() {
		return CSR_Order_Type_Fax_Order;
	}

	public WebElement callOut_CancelOrder() {
		return callOut_CancelOrder;
	}

	public WebElement Btn_Continue_To_Verify_Account() {
		return Btn_Continue_To_Verify_Account;
	}

	public WebElement fld_Ac_Num_LocateAccountPage() {
		return fld_Ac_Num_LocateAccountPage;
	}

	public WebElement dropdown_select_Search_By_LocateAccountPage() {
		return dropdown_select_Search_By_LocateAccountPage;
	}

	public WebElement option_TeacherName_SearchBy_LocateAccountPage() {
		return option_TeacherName_SearchBy_LocateAccountPage;
	}

	public WebElement option_SchoolAddr_SearchBy_LocateAccountPage() {
		return option_SchoolAddr_SearchBy_LocateAccountPage;
	}

	public WebElement fld_SchoolName_LocateAccountPage() {
		return fld_SchoolName_LocateAccountPage;
	}

	public WebElement hyperlink_Cancel_Order_Payment_Page() {
		return hyperlink_Cancel_Order_Payment_Page;
	}

	public WebElement fld_fName_SearchBy_LocateAccountPage() {
		return fld_fName_SearchBy_LocateAccountPage;
	}

	public WebElement fld_lName_SearchBy_LocateAccountPage() {
		return fld_lName_SearchBy_LocateAccountPage;
	}

	public WebElement fld_Country_LocateAccountPage() {
		return fld_Country_LocateAccountPage;
	}

	public WebElement fld_PostalCode_LocateAccountPage() {
		return fld_PostalCode_LocateAccountPage;
	}

	public WebElement fld_PostalCode_US_LocateAccountPage() {
		return fld_PostalCode_US_LocateAccountPage;
	}

	public WebElement popUp_PostalCode_LocateAccountPage() {
		return popUp_PostalCode_LocateAccountPage;
	}

	public WebElement fld_Province_LocateAccountPage() {
		return fld_Province_LocateAccountPage;
	}

	public WebElement fld_State_LocateAccountPage() {
		return fld_State_LocateAccountPage;
	}

	public WebElement fld_State_dropdown_Selection_LocateAccountPage() {
		return fld_State_dropdown_Selection_LocateAccountPage;
	}

	public WebElement fld_State_dropdown_Selection_Payment_Page() {
		return fld_State_dropdown_Selection_Payment_Page;
	}

	public WebElement fld_Province_dropdown_Selection_LocateAccountPage() {
		return fld_Province_dropdown_Selection_LocateAccountPage;
	}

	public WebElement selection_dropDown_SchoolCity_LocateAccountPage() {
		return selection_dropDown_SchoolCity_LocateAccountPage;
	}

	public WebElement fld_SchoolAdr_results_in_SearchResults_Page() {
		return fld_SchoolAdr_results_in_SearchResults_Page;
	}

	public WebElement fld_1st_SchoolAdr_results_in_SearchResults_Page() {
		return fld_1st_SchoolAdr_results_in_SearchResults_Page;
	}

	public WebElement fld_1st_SchoolAddress_results_in_SearchResults_Page() {
		return fld_1st_SchoolAddress_results_in_SearchResults_Page;
	}

	public WebElement School_Name_in_paragraph_2ndPage_SearchResults_page() {
		return School_Name_in_paragraph_2ndPage_SearchResults_page;
	}

	public WebElement form_login_LocateAccountPage() {
		return form_login_LocateAccountPage;
	}

	public WebElement hdr_LocateCustomerAccountBy_LocateAccountPage() {
		return hdr_LocateCustomerAccountBy_LocateAccountPage;
	}

	public WebElement Btn_Search_LocateAccountPage() {
		return Btn_Search_LocateAccountPage;
	}

	public WebElement icon_Blue_script_icon_LocateAccount_page() {
		return icon_Blue_script_icon_LocateAccount_page;
	}

	public WebElement icon_Blue_script_icon_VerifyAccount_page() {
		return icon_Blue_script_icon_VerifyAccount_page;
	}

	public WebElement icon_Blue_script_icon_SearchResults_page() {
		return icon_Blue_script_icon_SearchResults_page;
	}

	public WebElement hyperLink_School_not_in_System_SearchResults_page() {
		return hyperLink_School_not_in_System_SearchResults_page;
	}

	public WebElement Modal_window_LocateAccountPage() {
		return Modal_window_LocateAccountPage;
	}

	public WebElement Modal_window_VerifyAccountPage() {
		return Modal_window_VerifyAccountPage;
	}

	public WebElement text_fld_in_SchoolNotInSystem_ModalWindow_SearchResults_Page() {
		return text_fld_in_SchoolNotInSystem_ModalWindow_SearchResults_Page;
	}

	public WebElement hdr_SearchResults_SearchResultsPage() {
		return hdr_SearchResults_SearchResultsPage;
	}

	public WebElement Ac_num_in_SearchResults_SearchResultsPage() {
		return Ac_num_in_SearchResults_SearchResultsPage;
	}

	public WebElement popUp_error_msg_Invalid_Ac_Num_Locate_Page() {
		return popUp_error_msg_Invalid_Ac_Num_Locate_Page;
	}

	public WebElement Close_btn_Modal_window_LocateAccountPage() {
		return Close_btn_Modal_window_LocateAccountPage;
	}

	public WebElement Close_btn_Modal_window_VerifyAccountPage() {
		return Close_btn_Modal_window_VerifyAccountPage;
	}

	public WebElement Close_btn_Modal_window_1st_time_teacher_VerifyAccountPage() {
		return Close_btn_Modal_window_1st_time_teacher_VerifyAccountPage;
	}

	public WebElement content_text_for_1st_time_teacher_Modal_window_VerifyAccountPage() {
		return content_text_for_1st_time_teacher_Modal_window_VerifyAccountPage;
	}

	public WebElement hdr_OrderHistory_Status_VerifyAccountPage() {
		return hdr_OrderHistory_Status_VerifyAccountPage;
	}

	public WebElement fld_Order_Number_VerifyAccountPage() {
		return fld_Order_Number_VerifyAccountPage;
	}

	public WebElement fld_Order_placed_date_VerifyAccountPage() {
		return fld_Order_placed_date_VerifyAccountPage;
	}

	public WebElement fld_Order_type_PhoneOrder_in_OrderHistory_VerifyAccountPage() {
		return fld_Order_type_PhoneOrder_in_OrderHistory_VerifyAccountPage;
	}

	public WebElement fld_Order_type_MailOrder_in_OrderHistory_VerifyAccountPage() {
		return fld_Order_type_MailOrder_in_OrderHistory_VerifyAccountPage;
	}

	public WebElement fld_Order_type_FaxOrder_in_OrderHistory_VerifyAccountPage() {
		return fld_Order_type_FaxOrder_in_OrderHistory_VerifyAccountPage;
	}

	public WebElement fld_Order_type_Online_in_OrderHistory_VerifyAccountPage() {
		return fld_Order_type_Online_in_OrderHistory_VerifyAccountPage;
	}

	public WebElement fld_order_status_Held_By_Accounting_in_OrderHistory_VerifyAccountPage() {
		return fld_order_status_Held_By_Accounting_in_OrderHistory_VerifyAccountPage;
	}

	public WebElement fld_1st_year_teaching_in_Additional_Info_section_VerifyAccountPage() {
		return fld_1st_year_teaching_in_Additional_Info_section_VerifyAccountPage;
	}

	public WebElement section_ROLE_in_VerifyAccountPage() {
		return section_ROLE_in_VerifyAccountPage;
	}

	public WebElement fld_selected_roles_in_ROLE_section_in_VerifyAccountPage() {
		return fld_selected_roles_in_ROLE_section_in_VerifyAccountPage;
	}

	public WebElement fld_grades_in_ROLE_section_in_VerifyAccountPage() {
		return fld_grades_in_ROLE_section_in_VerifyAccountPage;
	}

	public WebElement fld1_grade_number_of_students_in_ROLE_section_in_VerifyAccountPage() {
		return fld1_grade_number_of_students_in_ROLE_section_in_VerifyAccountPage;
	}

	public WebElement fld2_grade_number_of_students_in_ROLE_section_in_VerifyAccountPage() {
		return fld2_grade_number_of_students_in_ROLE_section_in_VerifyAccountPage;
	}

	public WebElement section_SCHOOL_in_VerifyAccountPage() {
		return section_SCHOOL_in_VerifyAccountPage;
	}

	public WebElement fld_SchoolName_in_SCHOOL_section_in_VerifyAccountPage() {
		return fld_SchoolName_in_SCHOOL_section_in_VerifyAccountPage;
	}

	public WebElement fld_SchoolAdr1_in_SCHOOL_section_in_VerifyAccountPage() {
		return fld_SchoolAdr1_in_SCHOOL_section_in_VerifyAccountPage;
	}

	public WebElement fld_SchoolAdr2_in_SCHOOL_section_in_VerifyAccountPage() {
		return fld_SchoolAdr2_in_SCHOOL_section_in_VerifyAccountPage;
	}

	public WebElement fld_City_in_SCHOOL_section_in_VerifyAccountPage() {
		return fld_City_in_SCHOOL_section_in_VerifyAccountPage;
	}

	public WebElement fld_Province_in_SCHOOL_section_in_VerifyAccountPage() {
		return fld_Province_in_SCHOOL_section_in_VerifyAccountPage;
	}

	public WebElement fld_Country_in_SCHOOL_section_in_VerifyAccountPage() {
		return fld_Country_in_SCHOOL_section_in_VerifyAccountPage;
	}

	public WebElement fld_PostalCode_in_SCHOOL_section_in_VerifyAccountPage() {
		return fld_PostalCode_in_SCHOOL_section_in_VerifyAccountPage;
	}

	public WebElement fld_ZipCode_in_SCHOOL_section_in_VerifyAccountPage() {
		return fld_ZipCode_in_SCHOOL_section_in_VerifyAccountPage;
	}

	public WebElement fld_PhoneNumber_in_SCHOOL_section_in_VerifyAccountPage() {
		return fld_PhoneNumber_in_SCHOOL_section_in_VerifyAccountPage;
	}

	public WebElement section_Customer_Account_Hold_Status_Payment_page() {
		return section_Customer_Account_Hold_Status_Payment_page;
	}

	public WebElement hdr_Customer_Account_Hold_Status_Payment_page() {
		return hdr_Customer_Account_Hold_Status_Payment_page;
	}

	public WebElement radio_btn1_Customer_Account_Hold_Status_Payment_page() {
		return radio_btn1_Customer_Account_Hold_Status_Payment_page;
	}

	public WebElement radio_btn2_Customer_Account_Hold_Status_Payment_page() {
		return radio_btn2_Customer_Account_Hold_Status_Payment_page;
	}

	public WebElement selection_Province_alternateShipping_fld_Payment_page() {
		return selection_Province_alternateShipping_fld_Payment_page;
	}

	public WebElement selection_Province_BillingInfo_fld_Payment_page() {
		return selection_Province_BillingInfo_fld_Payment_page;
	}

	public WebElement tab_Payment_in_hdr_section() {
		return tab_Payment_in_hdr_section;
	}

	public List<WebElement> list_Province_alternateShipping_fld_Payment_page() {
		return list_Province_alternateShipping_fld_Payment_page;
	}

	public List<WebElement> list_Province_BillingInfo_fld_Payment_page() {
		return list_Province_BillingInfo_fld_Payment_page;
	}

	public List<WebElement> list_State_US_Locate_Account_page() {
		return list_State_US_Locate_Account_page;
	}

	public List<WebElement> list_State_US_Payment_page() {
		return list_State_US_Payment_page;
	}

	public List<WebElement> list_Province_Canada_Locate_Account_page() {
		return list_Province_Canada_Locate_Account_page;
	}

	public List<WebElement> list_CreditCard_Payment_page() {
		return list_CreditCard_Payment_page;
	}

	public List<WebElement> list_Teacher_Lname_Search_results_Locate_page() {
		return list_Teacher_Lname_Search_results_Locate_page;
	}

	public List<WebElement> list_Teacher_Fname_Search_results_Locate_page() {
		return list_Teacher_Fname_Search_results_Locate_page;
	}

	public List<WebElement> list_SchoolName_Search_results_Locate_page() {
		return list_SchoolName_Search_results_Locate_page;
	}

	public WebElement hyperLink_Start_New_Search_SearchResults() {
		return hyperLink_Start_New_Search_SearchResults;
	}

	public WebElement hyperLink_Back_To_School_Listing_SearchResults() {
		return hyperLink_Back_To_School_Listing_SearchResults;
	}

	public WebElement fld_Search_results_by_School_Address() {
		return fld_Search_results_by_School_Address;
	}

	public WebElement option_select_A_New_Card() {
		return option_select_A_New_Card;
	}

	public WebElement hdr_Locate_Account_Locate_Page() {
		return hdr_Locate_Account_Locate_Page;
	}

	public WebElement hdr_Verify_Account_Verify_Page() {
		return hdr_Verify_Account_Verify_Page;
	}

	public WebElement modal_window_1st_time_teacher_VerifyAccount_page() {
		return modal_window_1st_time_teacher_VerifyAccount_page;
	}

	public WebElement fld_Teacher_Name_in_SearchResults() {
		return fld_Teacher_Name_in_SearchResults;
	}

	public WebElement popUp_btn_Close_Introduction_To_CSR() {
		return popUp_btn_Close_Introduction_To_CSR;
	}

	public List<WebElement> list_popUp_btn_Close_Introduction_To_CSR() {
		return list_popUp_btn_Close_Introduction_To_CSR;
	}

	public WebElement popUp_btn_Close_order_not_meet_min_order() {
		return popUp_btn_Close_order_not_meet_min_order;
	}

	public WebElement Btn_Continue_To_Order_Entry() {
		return Btn_Continue_To_Order_Entry;
	}

	public WebElement getlbl_locateaccount_locate_account() {
		return lbl_locateaccount_locate_account;
	}

	public WebElement tab_ORDER_ENTRY() {
		return tab_ORDER_ENTRY;
	}

	public WebElement tab_REVIEW_CART() {
		return tab_REVIEW_CART;
	}

	public WebElement tab_SHIPPING_PAYMENT() {
		return tab_SHIPPING_PAYMENT;
	}

	public WebElement tab_CONFIRM_and_SUBMIT() {
		return tab_CONFIRM_and_SUBMIT;
	}

	public WebElement tab_LOCATE_ACCOUNT() {
		return tab_LOCATE_ACCOUNT;
	}

	public WebElement fld_Student_name_SFO() {
		return fld_Student_name_SFO;
	}
	
	public WebElement fld_SFO_page_FreePick_item1() {
		return fld_SFO_page_FreePick_item1;
	}
	
	public WebElement fld_Qty_YTO_item1_ReviewCart_page() {
		return fld_Qty_YTO_item1_ReviewCart_page;
	}

	public WebElement fld_Student_Item_SFO() {
		return fld_Student_Item_SFO;
	}

	public WebElement fld_Student_Item_QTY() {
		return fld_Student_Item_QTY;
	}
	
	public List<WebElement> size_btn_Continue_checkout_ReviewCart_page() {
		return size_btn_Continue_checkout_ReviewCart_page;
	}

	public WebElement btn_Continue_checkout_ReviewCart_page() {
		return btn_Continue_checkout_ReviewCart_page;
	}

	public WebElement btn_Proceed_to_checkout_Promotion_popup() {
		return btn_Proceed_to_checkout_Promotion_popup;
	}

	public WebElement btn_ADD_SFO() {
		return btn_ADD_SFO;
	}

    public WebElement getlinkReturntoshop() {
        return link_ReturnToShop;
    }
    public WebElement getthelinkEditCart() {
        return thelinkEditCart;
    }

	public WebElement link_Apply_FreePick_coupon_SFO_section() {
		return link_Apply_FreePick_coupon_SFO_section;
	}

	public WebElement fld_Student_name_FreePick_popup_SFO() {
		return fld_Student_name_FreePick_popup_SFO;
	}

	public WebElement fld_Coupon_FreePick_popup_SFO() {
		return fld_Coupon_FreePick_popup_SFO;
	}

	public WebElement btn_APPLY_FreePick_popup_SFO() {
		return btn_APPLY_FreePick_popup_SFO;
	}

	public WebElement fld_Search_FreePick_popup_SFO() {
		return fld_Search_FreePick_popup_SFO;
	}

	public WebElement icon_Search_FreePick_popup_SFO() {
		return icon_Search_FreePick_popup_SFO;
	}

	public WebElement first_item_in_FreePick_popup_item_list_SFO() {
		return first_item_in_FreePick_popup_item_list_SFO;
	}
	
	public WebElement second_item_in_FreePick_popup_item_list_SFO() {
		return second_item_in_FreePick_popup_item_list_SFO;
	}

	public WebElement btn_CONFIRM_APPLY_FreePick_popup_SFO() {
		return btn_CONFIRM_APPLY_FreePick_popup_SFO;
	}

	public WebElement btn_ReviewCart_SFO_page() {
		return btn_ReviewCart_SFO_page;
	}

	public WebElement section_SFO_ReviewCart_page() {
		return section_SFO_ReviewCart_page;
	}

	public WebElement section_YTO_ReviewCart_page() {
		return section_YTO_ReviewCart_page;
	}

	public WebElement section_TE_ReviewCart_page() {
		return section_TE_ReviewCart_page;
	}

	public List<WebElement> group_by_Student_name_SFO_section_ReviewCart_page() {
		return group_by_Student_name_SFO_section_ReviewCart_page;
	}

	public WebElement name1_SFO_section_ReviewCart_page() {
		return name1_SFO_section_ReviewCart_page;
	}

	public WebElement item1_price_YTO_section_ReviewCart_page() {
		return item1_price_YTO_section_ReviewCart_page;
	}

	public WebElement item2_price_YTO_section_ReviewCart_page() {
		return item2_price_YTO_section_ReviewCart_page;
	}

	public WebElement item1_QTY_YTO_section_ReviewCart_page() {
		return item1_QTY_YTO_section_ReviewCart_page;
	}

	public WebElement item2_QTY_YTO_section_ReviewCart_page() {
		return item2_QTY_YTO_section_ReviewCart_page;
	}

	public WebElement YTO_section_subtotal_ReviewCart_page() {
		return YTO_section_subtotal_ReviewCart_page;
	}

	public WebElement GST_val_YTO_section_ReviewCart_page() {
		return GST_val_YTO_section_ReviewCart_page;
	}

	public WebElement PST_val_YTO_section_ReviewCart_page() {
		return PST_val_YTO_section_ReviewCart_page;
	}

	public WebElement QST_val_YTO_section_ReviewCart_page() {
		return QST_val_YTO_section_ReviewCart_page;
	}

	public WebElement HST_val_YTO_section_ReviewCart_page() {
		return HST_val_YTO_section_ReviewCart_page;
	}

	public WebElement YTO_section_Total_ReviewCart_page() {
		return YTO_section_Total_ReviewCart_page;
	}

	public WebElement item1_price_TE_section_ReviewCart_page() {
		return item1_price_TE_section_ReviewCart_page;
	}

	public WebElement item2_price_TE_section_ReviewCart_page() {
		return item2_price_TE_section_ReviewCart_page;
	}

	public WebElement item1_QTY_TE_section_ReviewCart_page() {
		return item1_QTY_TE_section_ReviewCart_page;
	}

	public WebElement item2_QTY_TE_section_ReviewCart_page() {
		return item2_QTY_TE_section_ReviewCart_page;
	}

	public WebElement TE_section_subtotal_ReviewCart_page() {
		return TE_section_subtotal_ReviewCart_page;
	}

	public WebElement GST_val_TE_section_ReviewCart_page() {
		return GST_val_TE_section_ReviewCart_page;
	}

	public WebElement PST_val_TE_section_ReviewCart_page() {
		return PST_val_TE_section_ReviewCart_page;
	}

	public WebElement QST_val_TE_section_ReviewCart_page() {
		return QST_val_TE_section_ReviewCart_page;
	}

	public WebElement HST_val_TE_section_ReviewCart_page() {
		return HST_val_TE_section_ReviewCart_page;
	}

	public WebElement TE_section_Total_ReviewCart_page() {
		return TE_section_Total_ReviewCart_page;
	}

	public WebElement name2_SFO_section_ReviewCart_page() {
		return name2_SFO_section_ReviewCart_page;
	}

	public WebElement btn_ADD_TO_CART_search_results_page() {
		return btn_ADD_TO_CART_search_results_page;
	}

	public WebElement btn_Continue_Shopping_in_popup_search_results_page() {
		return btn_Continue_Shopping_in_popup_search_results_page;
	}

	public WebElement btn_mini_ReviewCart() {
		return btn_mini_ReviewCart;
	}

	public WebElement tab_VERIFY_ACCOUNT() {
		return tab_VERIFY_ACCOUNT;
	}

	public WebElement tab_REWARDS_AND_COUPONS() {
		return tab_REWARDS_AND_COUPONS;
	}

	public WebElement Num_REVIEW_CART_StepHeader() {
		return Num_REVIEW_CART_StepHeader;
	}

	public WebElement Num_LOCATE_ACCOUNT_StepHeader() {
		return Num_LOCATE_ACCOUNT_StepHeader;
	}

	public WebElement Num_VERIFY_ACCOUNT_StepHeader() {
		return Num_VERIFY_ACCOUNT_StepHeader;
	}

	public WebElement Num_REWARDS_AND_COUPONS_StepHeader() {
		return Num_REWARDS_AND_COUPONS_StepHeader;
	}

	public WebElement Num_PAYMENT_StepHeader() {
		return Num_PAYMENT_StepHeader;
	}

	public WebElement Num_CONFIRM_and_SUBMIT_StepHeader() {
		return Num_CONFIRM_and_SUBMIT_StepHeader;
	}

	public WebElement CSR_hdr_Coupons_And_Rewards() {
		return CSR_hdr_Coupons_And_Rewards;
	}

	public WebElement CSR_hdr_Payment() {
		return CSR_hdr_Payment;
	}

	public WebElement CSR_hdr_ConfirmSubmit() {
		return CSR_hdr_ConfirmSubmit;
	}

	public WebElement Num_REDEMPTIONS_REWARDS_StepHeader() {
		return Num_REDEMPTIONS_REWARDS_StepHeader;
	}

	public WebElement txt_Enter_New_Order_OrderEntryPage() {
		return txt_Enter_New_Order_OrderEntryPage;
	}

	public WebElement hdr_ReviewYourCart_in_ReviewCartPage() {
		return hdr_ReviewYourCart_in_ReviewCartPage;
	}

	public WebElement blue_strip_in_OrderEntryPage() {
		return blue_strip_in_OrderEntryPage;
	}

	public WebElement popup_OrderEntryScript_OrderEntryPage() {
		return popup_OrderEntryScript_OrderEntryPage;
	}

	public WebElement btn_close_popup_OrderEntryScript_OrderEntryPage() {
		return btn_close_popup_OrderEntryScript_OrderEntryPage;
	}

	public WebElement txt_Teacher_Order_OrderEntryPage() {
		return txt_Teacher_Order_OrderEntryPage;
	}

	public WebElement section_Teacher_Order_OrderEntryPage() {
		return section_Teacher_Order_OrderEntryPage;
	}

	public WebElement section_Teacher_and_Student_Order_OrderEntryPage() {
		return section_Teacher_and_Student_Order_OrderEntryPage;
	}

	public WebElement btn_ProceedToCheckout_OrderEntryPage() {
		return btn_ProceedToCheckout_OrderEntryPage;
	}

	public WebElement btn_ProceedToCheckout_RewardsCoupons_popup() {
		return btn_ProceedToCheckout_RewardsCoupons_popup;
	}

	public WebElement Tab_RewardsAndCouponsActive() {
		return Tab_RewardsAndCouponsActive;
	}

	public WebElement btn_ContinueCheckout_RewardsPage() {
		return btn_ContinueCheckout_RewardsPage;
	}

	public WebElement btn_ContinueCheckout_ShippingRewardsPage() {
		return btn_ContinueCheckout_ShippingRewardsPage;
	}

	public WebElement section_Alternate_ship_ShippingRewardsPage() {
		return section_Alternate_ship_ShippingRewardsPage;
	}

	public WebElement fld_first_SavedCard_in_list_PaymentPage() {
		return fld_first_SavedCard_in_list_PaymentPage;
	}

	public WebElement selected_SavedCard_name_in_section_PaymentPage() {
		return selected_SavedCard_name_in_section_PaymentPage;
	}

	public WebElement layer_One_in_OrderEntryPage() {
		return layer_One_in_OrderEntryPage;
	}

	public WebElement fld1_FlyerCode_in_OrderEntryPage() {
		return fld1_FlyerCode_in_OrderEntryPage;
	}

	public WebElement fld2_FlyerCode_in_OrderEntryPage() {
		return fld2_FlyerCode_in_OrderEntryPage;
	}

	public WebElement fld3_FlyerCode_in_OrderEntryPage() {
		return fld3_FlyerCode_in_OrderEntryPage;
	}

	public WebElement popUp_ErrorMsg_in_OrderEntryPage() {
		return popUp_ErrorMsg_in_OrderEntryPage;
	}

	public WebElement link_CancelOrder_AllPages() {
		return link_CancelOrder_AllPages;
	}

	public WebElement btn_YES_CancelOrder_AllPages() {
		return btn_YES_CancelOrder_AllPages;
	}

	public WebElement btn_NO_CancelOrder_AllPages() {
		return btn_NO_CancelOrder_AllPages;
	}

	public WebElement popUp_window_Order_Cancellation_SourcePage() {
		return popUp_window_Order_Cancellation_SourcePage;
	}

	public WebElement paragraph_Order_Cancellation_window() {
		return paragraph_Order_Cancellation_window;
	}

	public WebElement btn_RESET_OrderEntry_page() {
		return btn_RESET_OrderEntry_page;
	}

	public WebElement callout_confirmation_RESET_OrderEntry_page() {
		return callout_confirmation_RESET_OrderEntry_page;
	}

	public WebElement text_callout_confirmation_RESET_OrderEntry_page() {
		return text_callout_confirmation_RESET_OrderEntry_page;
	}

	public WebElement btn_YES_callout_confirmation_RESET_OrderEntry_page() {
		return btn_YES_callout_confirmation_RESET_OrderEntry_page;
	}

	public WebElement btn_NO_callout_confirmation_RESET_OrderEntry_page() {
		return btn_NO_callout_confirmation_RESET_OrderEntry_page;
	}

	public WebElement btn_close_Order_Cancellation_modal_window() {
		return btn_close_Order_Cancellation_modal_window;
	}

	public WebElement popUp_FlyOut_for_BonusBank() {
		return popUp_FlyOut_for_BonusBank;
	}

	public WebElement popUp_ErrorMsg_for_Invalid_Items_OrderEntryPage() {
		return popUp_ErrorMsg_for_Invalid_Items_OrderEntryPage;
	}

	public WebElement modal_window_Invalid_item_1_OrderEntryPage() {
		return modal_window_Invalid_item_1_OrderEntryPage;
	}

	public WebElement modal_window_Invalid_item_2_OrderEntryPage() {
		return modal_window_Invalid_item_2_OrderEntryPage;
	}

	public WebElement modal_window_Invalid_item_3_OrderEntryPage() {
		return modal_window_Invalid_item_3_OrderEntryPage;
	}

	public List<WebElement> modal_window_Invalid_items_OrderEntryPage() {
		return modal_window_Invalid_items_OrderEntryPage;
	}

	public WebElement btn_Continue_popUp_ErrorMsg_for_Invalid_Items() {
		return btn_Continue_popUp_ErrorMsg_for_Invalid_Items;
	}

	public WebElement CSR_hdr_ReviewCart_Page() {
		return CSR_hdr_ReviewCart_Page;
	}

	public WebElement CSR_hdr_Enter_New_Order_Page() {
		return CSR_hdr_Enter_New_Order_Page;
	}

	public WebElement item1_TeacherCat_items_ReviewCart_page() {
		return item1_TeacherCat_items_ReviewCart_page;
	}

	public List<WebElement> items_TeacherCatalogues_ReviewCart_page() {
		return items_TeacherCatalogues_ReviewCart_page;
	}

	public WebElement btn_OK_popUp_ErrorMsg_for_Invalid_Items() {
		return btn_OK_popUp_ErrorMsg_for_Invalid_Items;
	}

	public WebElement btn_Cancel_popUp_ErrorMsg_for_Invalid_Items() {
		return btn_Cancel_popUp_ErrorMsg_for_Invalid_Items;
	}

	public WebElement ItemList_in_popUp_for_Invalid_Item1() {
		return ItemList_in_popUp_for_Invalid_Item1;
	}

	public List<WebElement> invalidItem_popUp() {
		return invalidItem_popUp;
	}

	public WebElement ItemList_in_popUp_for_Invalid_Item2() {
		return ItemList_in_popUp_for_Invalid_Item2;
	}

	public WebElement fld_FullName_in_Container1_OrderEntryPage() {
		return fld_FullName_in_Container1_OrderEntryPage;
	}

	public WebElement fld_School_Info1_in_Container2_CustProfile() {
		return fld_School_Info1_in_Container2_CustProfile;
	}

	public WebElement fld_School_Info2_in_Container2_CustProfile() {
		return fld_School_Info2_in_Container2_CustProfile;
	}

	public WebElement fld_School_Info3_in_Container2_CustProfile() {
		return fld_School_Info3_in_Container2_CustProfile;
	}

	public WebElement fld_School_Info4_in_Container2_CustProfile() {
		return fld_School_Info4_in_Container2_CustProfile;
	}

	public WebElement fld_ac_num_in_Container3_CustProfile() {
		return fld_ac_num_in_Container3_CustProfile;
	}

	public WebElement fld_CAC_info_in_Container3_CustProfile() {
		return fld_CAC_info_in_Container3_CustProfile;
	}

	public WebElement fld_status_of_Teacher_Container2_CustProfile() {
		return fld_status_of_Teacher_Container2_CustProfile;
	}

	public WebElement fld_status_of_Teacher_Container3_CustProfile() {
		return fld_status_of_Teacher_Container3_CustProfile;
	}

	public WebElement lbl_BonusPoints_Container4_CustProfile() {
		return lbl_BonusPoints_Container4_CustProfile;
	}

	public WebElement fld_BonusPoints_amt_Container4_CustProfile() {
		return fld_BonusPoints_amt_Container4_CustProfile;
	}

	public WebElement popUp_for_3digits_inQty_fld() {
		return popUp_for_3digits_inQty_fld;
	}

	public WebElement btn_YES_in_popUp_for_3digits_inQty_fld() {
		return btn_YES_in_popUp_for_3digits_inQty_fld;
	}

	public WebElement btn_NO_in_popUp_for_3digits_inQty_fld() {
		return btn_NO_in_popUp_for_3digits_inQty_fld;
	}

	public WebElement Item_Num_field_in_OrderEntryPage() {
		return Item_Num_field_in_OrderEntryPage;
	}

	public WebElement Item_Num_field_in_OrderEntryPage2() {
		return Item_Num_field_in_OrderEntryPage2;
	}

	public WebElement Paid_QTY_field_in_OrderEntryPage() {
		return Paid_QTY_field_in_OrderEntryPage;
	}

	public WebElement Paid_QTY_field_in_OrderEntryPage2() {
		return Paid_QTY_field_in_OrderEntryPage2;
	}

	public WebElement Item_Num_field2_in_OrderEntryPage() {
		return Item_Num_field2_in_OrderEntryPage;
	}

	public WebElement Item_Num_field2_in_OrderEntryPage2() {
		return Item_Num_field2_in_OrderEntryPage2;
	}

	public WebElement Paid_QTY_field2_in_OrderEntryPage() {
		return Paid_QTY_field2_in_OrderEntryPage;
	}

	public WebElement Paid_QTY_field2_in_OrderEntryPage2() {
		return Paid_QTY_field2_in_OrderEntryPage2;
	}

	public WebElement Item_Num_field3_in_OrderEntryPage() {
		return Item_Num_field3_in_OrderEntryPage;
	}

	public WebElement Paid_QTY_field3_in_OrderEntryPage() {
		return Paid_QTY_field3_in_OrderEntryPage;
	}

	public WebElement Item_Num_field4_in_OrderEntryPage() {
		return Item_Num_field4_in_OrderEntryPage;
	}

	public WebElement Paid_QTY_field4_in_OrderEntryPage() {
		return Paid_QTY_field4_in_OrderEntryPage;
	}

	public WebElement frm2_Item_Num_field1_in_OrderEntryPage() {
		return frm2_Item_Num_field1_in_OrderEntryPage;
	}

	public WebElement frm2_Item_Num_field2_in_OrderEntryPage() {
		return frm2_Item_Num_field2_in_OrderEntryPage;
	}

	public WebElement frm2_Paid_QTY_field1_in_OrderEntryPage() {
		return frm2_Paid_QTY_field1_in_OrderEntryPage;
	}

	public WebElement frm2_Paid_QTY_field2_in_OrderEntryPage() {
		return frm2_Paid_QTY_field2_in_OrderEntryPage;
	}

	public WebElement Item_Num_field_Student_in_OrderEntryPage() {
		return Item_Num_field_Student_in_OrderEntryPage;
	}

	public WebElement Paid_QTY_field_Student_in_OrderEntryPage() {
		return Paid_QTY_field_Student_in_OrderEntryPage;
	}

	public WebElement Item_Num_field2_Student_in_OrderEntryPage() {
		return Item_Num_field2_Student_in_OrderEntryPage;
	}

	public WebElement Paid_QTY_field2_Student_in_OrderEntryPage() {
		return Paid_QTY_field2_Student_in_OrderEntryPage;
	}

	public WebElement Item_Num_field3_Student_in_OrderEntryPage() {
		return Item_Num_field3_Student_in_OrderEntryPage;
	}

	public WebElement Paid_QTY_field3_Student_in_OrderEntryPage() {
		return Paid_QTY_field3_Student_in_OrderEntryPage;
	}

	public WebElement btn_Minus_YTO_section_ReviewCartPage() {
		return btn_Minus_YTO_section_ReviewCartPage;
	}

	public WebElement items_YTO_ReviewCartPage_CSR() {
		return items_YTO_ReviewCartPage_CSR;
	}

	public List<WebElement> items_YTO_ReviewCartPage_CSR_list() {
		return items_YTO_ReviewCartPage_CSR_list;
	}
	
	
	public List<WebElement> deleteitemreviewcartlist() {
		return deleteitemreviewcartlist;
	}

	public WebElement tab_Student_Orders_OrderEntryPage() {
		return tab_Student_Orders_OrderEntryPage;
	}

	public WebElement table_YTO_items_ReviewCartPage() {
		return table_YTO_items_ReviewCartPage;
	}

	public WebElement hdr_section_StudentClubs_ReviewCartPage() {
		return hdr_section_StudentClubs_ReviewCartPage;
	}

	public WebElement hdr_section_TeacherCatalogues_ReviewCartPage() {
		return hdr_section_TeacherCatalogues_ReviewCartPage;
	}

	public WebElement btn_Plus_YTO_section_ReviewCartPage() {
		return btn_Plus_YTO_section_ReviewCartPage;
	}

	public WebElement header_ITEM_YTO_CSR_ReviewCartPage() {
		return header_ITEM_YTO_CSR_ReviewCartPage;
	}

	public WebElement fld1_Item_num_YTO_CSR_ReviewCartPage() {
		return fld1_Item_num_YTO_CSR_ReviewCartPage;
	}

	public WebElement fld1_Title_YTO_CSR_ReviewCartPage() {
		return fld1_Title_YTO_CSR_ReviewCartPage;
	}

	public WebElement fld1_Flyer_YTO_CSR_ReviewCartPage() {
		return fld1_Flyer_YTO_CSR_ReviewCartPage;
	}

	public WebElement fld1_Price_YTO_CSR_ReviewCartPage() {
		return fld1_Price_YTO_CSR_ReviewCartPage;
	}

	public WebElement fld1_Qty_YTO_CSR_ReviewCartPage() {
		return fld1_Qty_YTO_CSR_ReviewCartPage;
	}

	public List<WebElement> List_all_YTO_items_CSR_ReviewCartPage() {
		return List_all_YTO_items_CSR_ReviewCartPage;
	}

	public WebElement header_TITLE_YTO_CSR_ReviewCartPage() {
		return header_TITLE_YTO_CSR_ReviewCartPage;
	}

	public WebElement header_FLYER_YTO_CSR_ReviewCartPage() {
		return header_FLYER_YTO_CSR_ReviewCartPage;
	}

	public WebElement header_PRICE_YTO_CSR_ReviewCartPage() {
		return header_PRICE_YTO_CSR_ReviewCartPage;
	}

	public WebElement header_QTY_YTO_CSR_ReviewCartPage() {
		return header_QTY_YTO_CSR_ReviewCartPage;
	}

	public WebElement items_Entry_fields_in_OrderEntryPage_form() {
		return items_Entry_fields_in_OrderEntryPage_form;
	}

	/*
	 * @FindBy(locator = "dw.SFOPage.sfoLabel") private List<WebElement>
	 * sfopageLabel;
	 */

	public WebElement Form_expansion_buttons_in_three_forms_in_OrderEntryPage() {
		return Form_expansion_buttons_in_three_forms_in_OrderEntryPage;
	}

	public WebElement Form_expansion_button_first_form_in_OrderEntryPage() {
		return Form_expansion_button_first_form_in_OrderEntryPage;
	}

	public WebElement Last_textbox_in_OrderEntryPage() {
		return Last_textbox_in_OrderEntryPage;
	}

	public WebElement label_FLYER_CODE_field_in_OrderEntryPage() {
		return label_FLYER_CODE_field_in_OrderEntryPage;
	}

	public WebElement label_ITEM_header_in_OrderEntryPage() {
		return label_ITEM_header_in_OrderEntryPage;
	}

	public WebElement label_PAID_QTY_header_in_OrderEntryPage() {
		return label_PAID_QTY_header_in_OrderEntryPage;
	}

	public WebElement label_BONUS_QTY_header_in_OrderEntryPage() {
		return label_BONUS_QTY_header_in_OrderEntryPage;
	}

	public WebElement gettextboxitemEnter() {
		return gettextboxitemEnter;
	}

	public WebElement gettextboxitemEnter2() {
		return gettextboxitemEnter2;
	}

	public WebElement gettextboxitemEnter3() {
		return gettextboxitemEnter3;
	}

	public WebElement gettextboxqtyEnter() {
		return gettextboxqtyEnter;
	}

	public WebElement getbuttonProceedcheckout() {
		return getbuttonProceedcheckout;
	}

	public List<WebElement> Form_expansion_buttons_count_in_three_forms_in_OrderEntryPage() {
		return Form_expansion_buttons_count_in_three_forms_in_OrderEntryPage;
	}

	public WebElement layer_Two_in_OrderEntryPage() {
		return layer_Two_in_OrderEntryPage;
	}

	public WebElement StudentsOrders_tab_in_OrderEntryPage() {
		return StudentsOrders_tab_in_OrderEntryPage;
	}

	public WebElement Bonus_QTY_text_boxes_in_OrderEntryPage() {
		return Bonus_QTY_text_boxes_in_OrderEntryPage;
	}

	public WebElement TeacherOrders_tab_in_OrderEntryPage() {
		return TeacherOrders_tab_in_OrderEntryPage;
	}

	public List<WebElement> tabs_in_firstlayer_in_OrderEntryPage() {
		return tabs_in_firstlayer_in_OrderEntryPage;
	}

	public List<WebElement> Rows_default_in_Item_Entry_Form_in_OrderEntryPage() {
		return Rows_default_in_Item_Entry_Form_in_OrderEntryPage;
	}

	public List<WebElement> TextBoxes_Row_default_inForm1_Item_Entry_Form_in_OrderEntryPage() {
		return TextBoxes_Row_default_inForm1_Item_Entry_Form_in_OrderEntryPage;
	}

	public List<WebElement> TextBoxes_Row_default_inForm2_Item_Entry_Form_in_OrderEntryPage() {
		return TextBoxes_Row_default_inForm2_Item_Entry_Form_in_OrderEntryPage;
	}

	public List<WebElement> TextBoxes_Row_default_inForm3_Item_Entry_Form_in_OrderEntryPage() {
		return TextBoxes_Row_default_inForm3_Item_Entry_Form_in_OrderEntryPage;
	}

	public List<WebElement> forms_default_in_secondLayer_in_OrderEntryPage() {
		return forms_default_in_secondLayer_in_OrderEntryPage;
	}

	public List<WebElement> rows_additional_in_secondLayer_in_OrderEntryPage() {
		return rows_additional_in_secondLayer_in_OrderEntryPage;
	}

	public WebElement get_sfo_page_button_Add() {
		return sfo_page_button_Add;
	}

	public List<WebElement> togetsfo_itemadded_header_grid() {
		return sfo_itemadded_header_grid;
	}

	public WebElement readitemfrom_sfogrid() {
		return toreaditemid_sfogrid;
	}

	public WebElement get_sfo_invliadItemNO_error() {
		return sfo_invalidItemNo_error;
	}

	public WebElement get_sfo_invalidStudentName_error() {
		return sfo_invliadStudentName_error;
	}

	public WebElement getsfo_page_studentname() {
		return sfo_page_studentname;
	}

	public WebElement getsfo_page_itemNo() {
		return sfo_page_itemNo;
	}

	public WebElement getapptxt_sfo_applyCoupon() {
		return apptxt_sfo_applyCoupon;
	}

	public WebElement getlink_sfoApplycpn() {
		return link_sfoApplycpn;
	}

	public List<WebElement> getmodalSFO_coupon_display() {
		return modalSFO_coupon_display;
	}

	public WebElement getSFOmodletitle() {
		return SFOmodletitle;
	}

	public WebElement SFO_modle_Window() {
		return SFO_modle_Window;
	}

	public WebElement getSFOmodleSubtitle(){

		return SFOmodleSubtitle;
	}

	public List<WebElement> getlinktoCloseSFOcouponmodel() {
		return linktoCloseSFOcouponmodel;
	}
	
	public WebElement btn_HOME() {
		return btn_HOME;
	}

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.roster.lst.studentnamelist.scrollbar")
	private WebElement lstStudentNameScroll;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.lbl.error.message")
	private WebElement lblErrorMessage;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.lbl.error.message")
	private WebElement studentFlyerOrderErrorMessage;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.lbl.subtitle")
	private WebElement lblSubTitle;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.lbl.tab.ordercount")
	private WebElement lblOrderCount;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.tab.yto")
	private WebElement tabYTO;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.tab.soo")
	private WebElement tabSOO;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.tab.sfo")
	private WebElement tabSFO;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.studentname.lnk.tooltip")
	private WebElement lnkStudentNameTooltip;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.studentname.lnk.tooltipbody")
	private WebElement lnkStudentNameTooltipBody;

	/*
	 * public List<WebElement> getsfopageLabel() { return sfopageLabel; }
	 */
	@FindBy(locator = "dw.sfopage.orderentry.studentname")
	private WebElement sfo_page_studentname;

	@FindBy(locator = "dw.sfopage.orderentry.itemno")
	private WebElement sfo_page_itemNo;

	@FindBy(locator = "dw.sfopage.applyCoupon.link")
	private WebElement link_sfoApplycpn;

	@FindBy(locator = "dw.sfopage.applycoupon.textlabel")
	private WebElement apptxt_sfo_applyCoupon;

	@FindBy(locator = "dw.sfo.sfoFreePickModal")
	private List<WebElement> modalSFO_coupon_display;

	@FindBy(locator = "dw.sfocouponModal.title")
	private WebElement SFOmodletitle;
	
	@FindBy(locator = "dw.sfo.sfoFreePickModal")
	private WebElement SFO_modle_Window;
	
	@FindBy(locator = "dw.studentflyerorder.btn.HOME")
	private WebElement btn_HOME;

	@FindBy(locator = "dw.sfocouponModal.Subtitle")
	private WebElement SFOmodleSubtitle;

	@FindBy(locator = "dw.sfocouponModal.rightside.closecrosslink")
	private List<WebElement> linktoCloseSFOcouponmodel;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.ordertable.lst.items")
	private List<WebElement> lstItemSFOOrderTable;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.ordertable.lst.studentname")
	private List<WebElement> lstStudentNameSFOOrderTable;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.ordertable.item.lst.title")
	private List<WebElement> lstTitleSFOOrderTable;

	public WebElement getLblTitleSFOOrderTable() {
		return lblTitleSFOOrderTable;
	}

	public List<WebElement> getLstTitleSFOOrderTable() {
		return lstTitleSFOOrderTable;
	}

	public List<WebElement> getLstStudentNameSFOOrderTable() {
		return lstStudentNameSFOOrderTable;
	}

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.ordertable.lst.flyers")
	private List<WebElement> lstFlyerSFOOrderTable;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.ordertable.lst.prices")
	private List<WebElement> lstPricesSFOOrderTable;

	public List<WebElement> getLstItemSFOOrderTable() {
		return lstItemSFOOrderTable;
	}

	public List<WebElement> getLstFlyerSFOOrderTable() {
		return lstFlyerSFOOrderTable;
	}

	public List<WebElement> getLstPricesSFOOrderTable() {
		return lstPricesSFOOrderTable;
	}

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.coupon.lbl.tooltip")
	private WebElement lblCouponToolTip;

	@FindBy(locator = "dw.teachers.enterorder.btn.closeICon")
	private WebElement btnEnterOrderClosePopup;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.applycoupon.couponmodal.lnk.close")
	private WebElement lnkCloseCouponModal;

	@FindBy(locator = "dw.teacher.studentflyerorder.coupon.popup.lnk.removeitem")
	private List<WebElement> lnkRemovePopupItem;

	@FindBy(locator = "dw.checkout.rewardsandcoupons.coupon.popup.removeYes")
	private WebElement btnRemoveCouponYes;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.ordertable.item.description")
	private WebElement itemdescription;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.ordertable.item.hide.detail")
	private WebElement itemhideDetails;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.ordertable.recommended.before.selected")
	private WebElement recommendedBeforeSelected;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.ordertable.recommended.after.selected")
	private WebElement recommendedAfterSelected;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.ordertable.wishlist.before.selected")
	private WebElement wishlistBeforeSelected;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.ordertable.wishlist.after.selected")
	private WebElement wishlistafterSelected;

	@FindBy(locator = "dw.teacher.home.enterorder.reviewstudentflyerorder.title")
	private WebElement reviewSFOTitle;

	@FindBy(locator = "dw.reviewcart.btn.proceedtocheckout")
	private WebElement btnProceedToCheckout;

	@FindBy(locator = "dw.reviewcart.lnk.Apr")
	private WebElement lnkMonthApr;

	@FindBy(locator = "dw.reviewcart.lnk.May")
	private WebElement lnkMonthMay;

	@FindBy(locator = "dw.reviewcart.lnk.Jun")
	private WebElement lnkMonthJun;

	public WebElement getBtnProceedToCheckout() {
		return btnProceedToCheckout;
	}

	public WebElement lnkMonthApr() {
		return lnkMonthApr;
	}

	public WebElement lnkMonthMay() {
		return lnkMonthMay;
	}

	public WebElement lnkMonthJun() {
		return lnkMonthJun;
	}

	public WebElement getReviewSFOTitle() {
		return reviewSFOTitle;
	}

	public WebElement getRecommendedBeforeSelected() {
		return recommendedBeforeSelected;
	}

	public WebElement getRecommendedAfterSelected() {
		return recommendedAfterSelected;
	}

	public WebElement getWishlistBeforeSelected() {
		return wishlistBeforeSelected;
	}

	public WebElement getWishlistAfterSelected() {
		return wishlistafterSelected;
	}

	public WebElement getItemDescription() {
		return itemdescription;
	}

	public WebElement getItemHideDetails() {
		return itemhideDetails;
	}

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.ordertable.column.lbl.coupon")
	private WebElement lblCouponSort;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.ordertable.list.coupons")
	private List<WebElement> listCoupons;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.ordertable.itemtitle")
	private List<WebElement> orderTableItemTitle;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.ordertable.hidedetail")
	private WebElement orderTableHideDetail;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.ordertable.list.details")
	private List<WebElement> listOrderTableDetail;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.applicationLoader")
	private WebElement applicationLoader;

	@FindBy(locator = "dw.reviewcart.yourteacherorder.carttable")
	private List<WebElement> tableReviewCartTable;

	@FindBy(locator = "dw.reviewcart.yourteacherorder.carttable.students")
	private List<WebElement> tableReviewCartTable_Students;

	// div[@class='cart-month-student-content']/div[1]/table

	@FindBy(locator = "dw.reviewcart.yourteacherorder.carttable1")
	private List<WebElement> tableReviewCartTable1;

	@FindBy(locator = "dw.reviewcart.btn.Minus.Student1.Qty")
	private WebElement btn_Minus_Student1_Qty;

	@FindBy(locator = "dw.reviewcart.btn.Plus.Student1.Qty")
	private WebElement btn_Plus_Student1_Qty;

	@FindBy(locator = "dw.sfopage.itemadded.grid")
	private List<WebElement> sfo_itemadded_header_grid;

	@FindBy(locator = "dw.sfopage.item.order.added")
	private WebElement toreaditemid_sfogrid;

	public WebElement btn_Plus_Student1_Qty() {
		return btn_Plus_Student1_Qty;
	}

	public WebElement btn_Minus_Student1_Qty() {
		return btn_Minus_Student1_Qty;
	}

	public List<WebElement> getTableReviewCartTable() {
		return tableReviewCartTable;
	}

	public List<WebElement> gettableReviewCartTable_Students() {
		return tableReviewCartTable_Students;
	}

	public List<WebElement> getTableReviewCartTable1() {
		return tableReviewCartTable1;
	}

	public List<WebElement> getListOrderTableDetail() {
		return listOrderTableDetail;
	}

	public WebElement getOrderTableHideDetail() {
		return orderTableHideDetail;
	}

	public List<WebElement> getOrderTableItemTitle() {
		return orderTableItemTitle;
	}

	public List<WebElement> getListCoupons() {
		return listCoupons;
	}

	public WebElement getLblCouponSort() {
		return lblCouponSort;
	}

	public List<WebElement> getLnkToModalRemoveItem() {
		return lnkRemovePopupItem;
	}

	public WebElement getBtnRemoveCouponYes() {
		return btnRemoveCouponYes;
	}

	public WebElement getLblOrderCount() {
		return lblOrderCount;
	}

	public List<WebElement> getLnkRemovePopupItem() {
		return lnkRemovePopupItem;
	}

	public WebElement getDetailsofItem(String studentnameforitem) {
		return SCHUtils.findElement("dw.teacher.home.enterorder.studentflyerorder.ordertable.item.description",
				studentnameforitem);
	}

	public WebElement getHideDetailsLink(String studentnameforitem) {
		return SCHUtils.findElement("dw.teacher.home.enterorder.studentflyerorder.ordertable.item.hide.detail",
				studentnameforitem);
	}

	public WebElement getIsActiveTabById(String tabId) {
		return SCHUtils.findElement("dw.teacher.home.enterorder.studentflyerorder.isactivetab", tabId);
	}

	public WebElement getIsActiveChildTab(String childTabText) {
		return SCHUtils.findElement("dw.teacher.home.enterorder.studentflyerorder.isactivechildtab", childTabText);
	}

	public WebElement getLblColumnNameSFOOrdertable(String columName) {
		return SCHUtils.findElement("dw.teacher.home.enterorder.studentflyerorder.ordertable.columnname", columName);
	}

	public WebElement getBtnEnterOrderClosePopup() {
		return btnEnterOrderClosePopup;
	}

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.lbl.soo")
	private WebElement tabSOOlbl;

	public WebElement getLnkCloseCouponModal() {
		return lnkCloseCouponModal;
	}

	public WebElement getTabSOOlbl() {
		return tabSOOlbl;
	}

	public WebElement getLblCouponToolTip() {
		return lblCouponToolTip;
	}

	public WebElement getLnkStudentNameTooltipBody() {
		return lnkStudentNameTooltipBody;
	}

	public WebElement getLnkStudentNameTooltip() {
		return lnkStudentNameTooltip;
	}

	public WebElement getTabYTO() {
		return tabYTO;
	}

	public WebElement getTabSFO() {
		return tabSFO;
	}

	public WebElement getTabSOO() {
		return tabSOO;
	}

	public void setTabSOO(WebElement tabSOO) {
		this.tabSOO = tabSOO;
	}

	public void setTabYTO(WebElement tabYTO) {
		this.tabYTO = tabYTO;
	}

	@FindBy(locator = "dw.teachers.home.enterorder.yourteacherorder.lbl.selectedgrade")
	private WebElement lblSelectedGrade;

	@FindBy(locator = "dw.teachers.home.enterorder.yourteacherorder.lbl.selectedgrade.flyer")
	private WebElement lblSelectedGradeflyer;

	@FindBy(locator = "dw.teachers.home.enterorder.yourteacherorder.lbl.selectedmonth")
	private WebElement lblSelectedMonth;

	@FindBy(locator = "dw.sfo.coupon.calloutmsg")
	private WebElement calloutMsg_sfofreepick;

	@FindBy(locator = "dw.sfo.coupon.Errorcalloutmsg")
	private WebElement calloutErrMsg_sfofreepick;

	@FindBy(locator = "teacherdesk.classlist.label")
	private WebElement teacherDesk_Classlist;

	@FindBy(locator = "teacherdesk.linkManage")
	private WebElement teacherDesk_linkManage;

	@FindBy(locator = "teacherdesk.classListManageModal")
	private List<WebElement> teacherDesk_classListModal;

	@FindBy(locator = "teacherdesk.classListManageModal.studentnamebox")
	private List<WebElement> classListmodal_enterStudentnamebox;

	@FindBy(locator = "teacherdesk.classListManageModal.buttonADD")
	private List<WebElement> classListmodal_buttonADD;
	
	@FindBy(locator = "dw.teachers.home.enterorder.list.soo")
	private WebElement listteacherenterordersoo;
	
	@FindBy(locator = "dw.teachers.home.enterorder.list.yto")
	private WebElement listteacherenterorderyto;
	
	@FindBy(locator = "dw.teachers.home.enterorder.list.sfo")
	private WebElement listteacherenterordersfo;
	
	public WebElement getlistteacherenterordersoo() {
		return listteacherenterordersoo;
	}
	
	public WebElement getlistteacherenterorderyto() {
		return listteacherenterorderyto;
	}
	
	public WebElement getlistteacherenterordersfo() {
		return listteacherenterordersfo;
	}

	public WebElement getLblSelectedGrade() {
		return lblSelectedGrade;
	}

	public WebElement getlblSelectedGradeflyer() {
		return lblSelectedGradeflyer;
	}

	public WebElement getlblSelectedMonth() {
		return lblSelectedMonth;
	}

	public WebElement get_calloutMsg_sfofreepick() {
		return calloutMsg_sfofreepick;
	}

	public WebElement get_ErrMsg_sfofreepick() {
		return calloutErrMsg_sfofreepick;
	}

	public WebElement getteacherDesk_classList() {
		return teacherDesk_Classlist;
	}

	public WebElement getteacherDesk_linkManage() {
		return teacherDesk_linkManage;
	}

	public List<WebElement> getteacherDesk_classListModal() {
		return teacherDesk_classListModal;
	}

	public List<WebElement> getclassListmodal_enterStudentnamebox() {
		return classListmodal_enterStudentnamebox;
	}

	public List<WebElement> getclassListmodal_buttonADD() {
		return classListmodal_buttonADD;
	}

	@Override
	public void clickOnYTO() {
		PauseUtil.waitForAjaxToComplete(2000);
		getTabYTO().click();
	}

	@Override
	public void clickOnSOO() {
		PauseUtil.pause(2000);
		SCHUtils.waitForLoaderToDismiss();
		SCHUtils.WaitForAjax();
		getTabSOO().click();
		PauseUtil.pause(2000);
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete();
		if (getTestBase().getContext().getProperty(ConstantUtils.SOO_CART_PRODUCTS) == null) {
			IStudentOnlineOrdersPage studentOnlineOrdersPage = new StudentOnlineOrdersPage();
			studentOnlineOrdersPage.fillSOOProductBean();
		}
	}

	@Override
	public void verifySOOTabInActive() {
		AssertUtils.assertDisplayed(getTabSOOlbl());
		AssertUtils.assertAttributeMatches(getTabSOOlbl(), "class", Matchers.containsString("null"));
	}

	public WebElement getLblSFOTabOrderCount() {
		return lblOrderCount;
	}

	public WebElement getLnkReviewOrder() {
		return lnkReviewOrder;
	}

	public WebElement getMiniPDP_reviewCartpage() {
		return miniPDPDisplay_reviewCartpage;
	}

	public List<WebElement> getLstStudentName() {
		return lstStudentName;
	}

	public WebElement getLstStudentNameScroll() {
		return lstStudentNameScroll;
	}

	public WebElement getLblErrorMessage() {
		return lblErrorMessage;
	}

	public WebElement getLblSubTitle() {
		return lblSubTitle;
	}

	public WebElement getBtnReviewCart() {
		return btnReviewCart;
	}

	public WebElement getLblStudentName() {
		return lblStudentName;
	}

	public WebElement getStudentFlyerOrderErrorMessage() {
		return studentFlyerOrderErrorMessage;
	}

	public WebElement getCmpStudentOrderTable() {
		return cmpStudentOrderTable;
	}

	public WebElement getTxtCouponsStudentName() {
		return txtCouponsStudentName;
	}

	public WebElement getTxtCouponNumber() {
		return txtCouponNumber;
	}

	public WebElement getBtnApplyCoupons() {
		return btnApplyCoupons;
	}

	public WebElement getLblTitle() {
		return lblTitle;
	}

	public WebElement getLnkLearnMore() {
		return lnkLearnMore;
	}

	public WebElement getReadOnlyTxtStudentName() {
		return txtReadOnlyStudentName;
	}

	public WebElement getapplicationLoader() {
		return applicationLoader;
	}

	public WebElement getBtnStudentNameClose() {
		return btnStudentNameclose;
	}

	public WebElement getTxtStudentName() {
		return txtStudentName;
	}

	public WebElement getlblTeacherCatalogues() {
		return lblTeacherCatalogues;
	}

	public WebElement getlnkMonthGrade() {
		return lnkMonthGrade;
	}

	public WebElement getlnkSecondMonthGrade() {
		return lnkSecondMonthGrade;
	}

	public List<WebElement> chklnkSecondMonthGrade() {
		return chklnkSecondMonthGrade;
	}

	public WebElement getimgFirstCatalogue() {
		return imgFirstCatalogue;
	}

	public WebElement getTxtItemNumber() {
		return txtItemQty;
	}

	public WebElement getBtnAdd() {
		return btnAdd;
	}

	public WebElement getLnkApplyCoupon() {
		return lnkApplyCoupon;
	}

	public WebElement getDrpRosterStudentName() {
		return drpRosterStudentName;
	}

	public List<WebElement> getLstRosterStudentName() {
		return lstRosterStudentName;
	}

	public WebElement getScrollbarRosterStudentName() {
		return scrollbarRosterStudentName;
	}

	public WebElement getLblStudentBoldLetterOrName() {
		return lblStudentBoldLetterOrName;
	}

	public WebElement getsfohometable() {
		return sfohometable;
	}

	// ADDING ITEMS FROM UNIVERSAL SEARCH OPTION TO AVIOD THE CONFLICTS FROM
	// SETTINGS ITEM ATTRIBUTES

	@FindBy(locator = "dw.teacher.home.txt.search")
	private List<WebElement> chkteacherHomeSearchTextField;

	@FindBy(locator = "csr.order.confirmation.popUp")
	private List<WebElement> chkCsrorderConfirmation_popup;

	@FindBy(locator = "dw.teacher.homepage.searchResults.displayed")
	private List<WebElement> getteacherHomeSearchResults;

	@FindBy(locator = "dw.teacher.home.txt.search")
	private WebElement getteacherHomeSearchTextField;

	@FindBy(locator = "dw.teacher.PDP.page.itemNo")
	private WebElement getreaditemNo_PDPpage;

	@FindBy(locator = "csr.orderconfirmation.popup")
	private WebElement csr_orderConfirmation_popup;

	@FindBy(locator = "csr.orderconfirmation.popup.title")
	private WebElement csr_orderConfirmation_popup_title;

	@FindBy(locator = "csr.orderConfirmation_popup_closeIcon")
	private WebElement csr_orderConfirmation_popup_closeIcon;

	@FindBy(locator = "csr.orderConfirmation_popup.totaltext.div")
	private List<WebElement> csrMessageOrderConfirm_Popup;

	@FindBy(locator = "dw.teacher.home.btn.search")
	private WebElement getteacherHomeSearchBtn;

	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.Teacher.Reward.Catalogues")
	private WebElement grade_Teacher_Reward_Catalogues;

	@FindBy(locator = "dw.teacher.txt.search.quantity")
	private WebElement getteacherSearchQuantityField;

	@FindBy(locator = "dw.teacher.btn.search.quantity.addcart")
	private WebElement getteacherSearchQuantityAddBtn;

	@FindBy(locator = "dw.teacher.btn.search.checkout")
	private WebElement getteacherSearchCheckOut;
	
	@FindBy(locator = "dw.teacher.btn.search.continue.shopping")
	private WebElement getteacherSearchContinueShopping;
	
	@FindBy(locator = "dw.teacher.home.minicart.itemsize")
	private List<WebElement> chkteacherHomeMiniCartItemSize;

	@FindBy(locator = "dw.teacher.lst.minicart.items")
	private WebElement getLstShopByCollectionItemList;

	@FindBy(locator = "dw.teacher.btn.minicart.quickview")
	private WebElement getLstQuickViewBtn;

	public List<WebElement> chkteacherHomeSearchTextField() {
		return chkteacherHomeSearchTextField;
	}

	public List<WebElement> getteacherHomeSearchResults() {
		return getteacherHomeSearchResults;
	}
	
	public WebElement getteacherSearchContinueShopping() {
		return getteacherSearchContinueShopping;
	}
	
	public WebElement getteacherHomeSearchTextField() {
		return getteacherHomeSearchTextField;
	}

	public WebElement readitemNo_PDPpage() {
		return getreaditemNo_PDPpage;
	}

	public WebElement getcsr_orderConfirmation_popup() {
		return csr_orderConfirmation_popup;
	}

	public WebElement getcsr_orderConfirmation_popup_title() {
		return csr_orderConfirmation_popup_title;
	}

	public List<WebElement> chkCsrorderConfirmation_popup() {
		return chkCsrorderConfirmation_popup;
	}

	public WebElement getcsr_orderConfirmation_popup_closeIcon() {
		return csr_orderConfirmation_popup_closeIcon;
	}

	public List<WebElement> getcsrMessage_Text_OrderConfirm_Popup() {
		return csrMessageOrderConfirm_Popup;
	}

	public WebElement grade_Teacher_Reward_Catalogues() {
		return grade_Teacher_Reward_Catalogues;
	}

	public WebElement getteacherHomeSearchBtn() {
		return getteacherHomeSearchBtn;
	}

	public WebElement getteacherSearchQuantityField() {
		return getteacherSearchQuantityField;
	}

	public WebElement getteacherSearchQuantityAddBtn() {
		return getteacherSearchQuantityAddBtn;
	}

	public WebElement getteacherSearchCheckOut() {
		return getteacherSearchCheckOut;
	}

	public List<WebElement> chkteacherHomeMiniCartItemSize() {
		return chkteacherHomeMiniCartItemSize;
	}

	public WebElement getLstShopByCollectionItemList() {
		return getLstShopByCollectionItemList;
	}

	public WebElement getLstQuickViewBtn() {
		return getLstQuickViewBtn;
	}

	@FindBy(locator = "dw.searchpage.productcount")
	private List<WebElement> sizeSearchProductCount;

	@FindBy(locator = "dw.searchpage.lnk.viewall")
	private WebElement getViewAllLinkSearchPage;

	@FindBy(locator = "dw.searchpage.lnk.viewall")
	private List<WebElement> sizegetViewAllLinkSearchPage;

	@FindBy(locator = "dw.searchpage.page.producttile")
	private WebElement SearchPageMainContent;

	@FindBy(locator = "dw.teacher.home.enterorder.reviewstudentflyerorder.title")
	private WebElement reviewCartPageDisplayed;

	@FindBy(locator = "dw.teacher.reviewcartpage.book.title")
	private WebElement booktitlefromReviewCartPage;

	@FindBy(locator = "dw.PDP.page.bookTitle")
	private WebElement getbooktitlefromPDPpage;
	
	@FindBy(locator = "dw.PDP.page.bookTitle")
	private List<WebElement> sizebooktitlefromPDPpage;

	public WebElement getViewAllLinkSearchPage() {
		return getViewAllLinkSearchPage;
	}

	public List<WebElement> sizegetViewAllLinkSearchPage() {
		return sizegetViewAllLinkSearchPage;
	}

	public List<WebElement> sizeSearchProductCount() {
		return sizeSearchProductCount;
	}

	public WebElement SearchPageMainContent() {
		return SearchPageMainContent;
	}

	public WebElement reviewCartPageisDisplayed() {
		return reviewCartPageDisplayed;
	}

	public WebElement getbooktitlefromReviewCartPage() {
		return booktitlefromReviewCartPage;
	}

	public WebElement getbooktitlefromPDPpage() {
		return getbooktitlefromPDPpage;
	}
	
	public List<WebElement> sizebooktitlefromPDPpage() {
		return sizebooktitlefromPDPpage;
	}

	@FindBy(locator = "dw.teacher.home.enterorder.reviewcart.lbl.studentclubstotal")
	private WebElement lblreviewcartstudentclubtotal;

	public WebElement getlblreviewcartstudentclubtotal() {
		return lblreviewcartstudentclubtotal;
	}

	@FindBy(locator = "dw.teacher.home.enterorder.reviewcart.lbl.teacherclubstotal")
	private WebElement lblreviewcartteacherclubstotal;

	public WebElement getlblreviewcartteacherclubstotal() {
		return lblreviewcartteacherclubstotal;
	}

	@FindBy(locator = "dw.teacher.home.enteroder.confirmsubmit.lbl.studentclubstotal")
	private WebElement lblconfirmsubmitstudentclubtotal;

	public WebElement getlblconfirmsubmitstudentclubtotal() {
		return lblconfirmsubmitstudentclubtotal;
	}

	@FindBy(locator = "dw.teacher.home.enteroder.confirmsubmit.lbl.teacherclubstotal")
	private WebElement lblconfirmsubmitteacherclubstotal;

	public WebElement getlblconfirmsubmitteacherclubstotal() {
		return lblconfirmsubmitteacherclubstotal;
	}

	@FindBy(locator = "dw.csr.studentflyerorder.tab.active.progresssection")
	private WebElement tabcsrprogresssectionactive;

	public WebElement gettabcsrprogresssectionactive() {
		return tabcsrprogresssectionactive;
	}

	@FindBy(locator = "dw.csr.studentflyerorder.tabs.progresssection")
	private WebElement tabscsrprogresssection;

	public WebElement gettabscsrprogresssection() {
		return tabscsrprogresssection;
	}

	@FindBy(locator = "dw.studentflyerorder.grade.flyer.studentflyerdownload")
	private WebElement lnkstudentflyerdownload;

	public WebElement getlnkstudentflyerdownload() {
		return lnkstudentflyerdownload;
	}

	@FindBy(locator = "dw.studentflyerorder.grade.flyer.teacherpagedownload")
	private WebElement lnkteacherpagedownload;

	public WebElement getlnkteacherpagedownload() {
		return lnkteacherpagedownload;
	}

	@FindBy(locator = "dw.studentflyerorder.confirmsubmit.alternativeshipping.section")
	private WebElement lblconfirmsubmitalternativeshipping;

	public WebElement getlblconfirmsubmitalternativeshipping() {
		return lblconfirmsubmitalternativeshipping;
	}

	@Override
	protected void openPage() {
		// TODO Auto-generated method stub
	}

	@Override
	public void fillStudentFlyerOrder(String studentname, String itemQty) {
		PauseUtil.waitForAjaxToComplete(2500);
		System.out.println("ENTERED IN TO THE FLYER TO FILL THE DATA" + System.currentTimeMillis());
		List<WebElement> cartTable1 = getTeacherFlyerOrderTable();
		for (WebElement cartTable : cartTable1) {
			List<WebElement> cartTabletr1 = cartTable.findElements(By.tagName("tr"));
			for (WebElement cartTabletd1 : cartTabletr1) {
				List<WebElement> cartTabletd = cartTabletd1.findElements(By.tagName("td"));
				String actualprice1 = cartTabletd.get(3).getText();
				actualprice1 = actualprice1.substring(1);
				Double actualprice = Double.parseDouble(actualprice1.trim());
				if (actualprice >= 1.01) {
					cartTabletd.get(2).findElement(By.tagName("input")).click();
					System.out.println("FILLING IN TO THE FLYER TO FILL THE DATA" + System.currentTimeMillis());
					WaitUtils.waitForNotDisplayed(getapplicationLoader());
					getTxtStudentName().clear();
					getTxtStudentName().sendKeys(studentname);
					getBtnStudentNameClose().click();
					WaitUtils.waitForNotDisplayed(getapplicationLoader());
					cartTabletd.get(4).findElement(By.tagName("input")).clear();
					cartTabletd.get(4).findElement(By.tagName("input")).sendKeys(itemQty);
					PauseUtil.pause(1500);
					String itemqty_entered1 = cartTabletd.get(4).findElement(By.tagName("input")).getAttribute("value");
					int itemqty_entered = Integer.parseInt(itemqty_entered1);
					System.out.println("qty entered is :" + itemqty_entered);
					getTestBase().getContext().setProperty("testexecution.itemqty_entered",
							String.valueOf(itemqty_entered));
					PauseUtil.pause(1500);
					getrevieworderPriceLabel().click();
					WaitUtils.waitForNotDisplayed(getapplicationLoader());
					break;
				}
			}
		}
	}

	@Override
	public void fillTeacherCatalogueFlyerOrder(double itemprice, double itemprice_limit, String studentname,
			String itemQty) {
		waitForPageToload();
		WaitUtils.waitForNotDisplayed(getapplicationLoader());
		SCHUtils.waitForElementToBeClickable(getlblTeacherCatalogues(), 15);
		SCHUtils.clickUsingJavaScript(getlblTeacherCatalogues());
		WaitUtils.waitForNotDisplayed(getapplicationLoader());
		SCHUtils.waitForElementToBeClickable(getlnkMonthGrade(), 15);
		SCHUtils.clickUsingJavaScript(getlnkMonthGrade());
		WaitUtils.waitForNotDisplayed(getapplicationLoader());

		SCHUtils.waitForElementToBeClickable(getlnkMonthGrade(), 15);
		SCHUtils.clickUsingJavaScript(getlnkMonthGrade());
		WaitUtils.waitForNotDisplayed(getapplicationLoader());

		SCHUtils.waitForElementToBeClickable(getimgFirstCatalogue(), 15);
		SCHUtils.clickUsingJavaScript(getimgFirstCatalogue());
		WaitUtils.waitForNotDisplayed(getapplicationLoader());
		PauseUtil.waitForAjaxToComplete(3000);

		List<WebElement> cartTable1 = getTeacherFlyerOrderTable();
		for (WebElement cartTable : cartTable1) {
			List<WebElement> cartTabletr1 = cartTable.findElements(By.tagName("tr"));
			for (WebElement cartTabletd1 : cartTabletr1) {
				List<WebElement> cartTabletd = cartTabletd1.findElements(By.tagName("td"));

				String actualprice1 = cartTabletd.get(3).getText();
				actualprice1 = actualprice1.substring(1);
				Double actualprice = Double.parseDouble(actualprice1.replaceAll(",", "").trim());

				System.out.println("out side the if loop>>>>>>>>>>>>>>>>>>>>>");
				if ((actualprice > (itemprice)) && (actualprice <= (itemprice_limit))) {
					System.out.println("Inside side the if loop>>>>>>>>>>>>>>>>>>>>>");
					cartTabletd.get(2).findElement(By.tagName("input")).click();
					WaitUtils.waitForNotDisplayed(getapplicationLoader());
					getTxtStudentName().clear();
					getTxtStudentName().sendKeys(studentname);
					getBtnStudentNameClose().click();
					WaitUtils.waitForNotDisplayed(getapplicationLoader());
					cartTabletd.get(4).findElement(By.tagName("input")).clear();
					cartTabletd.get(4).findElement(By.tagName("input")).sendKeys(itemQty);
					PauseUtil.pause(3000);
					// getrevieworderPriceLabel().click();
					PauseUtil.waitForAjaxToComplete(3000);
					break;

				} else {
					if (chklnkSecondMonthGrade().size() != 0) {
						SCHUtils.waitForElementToBeClickable(getlnkSecondMonthGrade(), 15);
						SCHUtils.clickUsingJavaScript(getlnkSecondMonthGrade());
						WaitUtils.waitForNotDisplayed(getapplicationLoader());

						SCHUtils.waitForElementToBeClickable(getlnkSecondMonthGrade(), 15);
						SCHUtils.clickUsingJavaScript(getlnkSecondMonthGrade());
						WaitUtils.waitForNotDisplayed(getapplicationLoader());

						SCHUtils.waitForElementToBeClickable(getimgFirstCatalogue(), 15);
						SCHUtils.clickUsingJavaScript(getimgFirstCatalogue());
						WaitUtils.waitForNotDisplayed(getapplicationLoader());
						PauseUtil.waitForAjaxToComplete(3000);

						List<WebElement> cartTable2 = getTeacherFlyerOrderTable();
						for (WebElement cartTablee : cartTable2) {
							List<WebElement> cartTabletr2 = cartTablee.findElements(By.tagName("tr"));
							for (WebElement cartTabletd2 : cartTabletr2) {
								List<WebElement> cartTabletdd = cartTabletd2.findElements(By.tagName("td"));

								String actualprice2 = cartTabletdd.get(3).getText();
								actualprice2 = actualprice2.substring(1);
								Double actualpricee = Double.parseDouble(actualprice2.replaceAll(",", "").trim());

								if ((actualpricee > (itemprice)) && (actualpricee <= (itemprice_limit))) {

									cartTabletdd.get(2).findElement(By.tagName("input")).click();
									WaitUtils.waitForNotDisplayed(getapplicationLoader());
									getTxtStudentName().clear();
									getTxtStudentName().sendKeys(studentname);
									getBtnStudentNameClose().click();
									WaitUtils.waitForNotDisplayed(getapplicationLoader());
									cartTabletdd.get(4).findElement(By.tagName("input")).clear();
									cartTabletdd.get(4).findElement(By.tagName("input")).sendKeys(itemQty);
									PauseUtil.pause(3000);
									/*
									 * getrevieworderPriceLabel().click();
									 * //WaitUtils.waitForNotDisplayed(
									 * getapplicationLoader());
									 * PauseUtil.waitForAjaxToComplete(2000);
									 */
									break;

								}
							}
						}
					}
				}
				break;
			}
		}
	}

	@Override
	public void fillStudentFlyerOrder_Eligible_Promotions(double itemprice, double itemprice_limit, String studentname,
			String itemQty) {
		waitForPageToload();
		WaitUtils.waitForNotDisplayed(getapplicationLoader());

		List<WebElement> cartTable1 = getTeacherFlyerOrderTable();
		for (WebElement cartTable : cartTable1) {
			List<WebElement> cartTabletr1 = cartTable.findElements(By.tagName("tr"));
			for (WebElement cartTabletd1 : cartTabletr1) {
				List<WebElement> cartTabletd = cartTabletd1.findElements(By.tagName("td"));

				String actualprice1 = cartTabletd.get(4).getText();
				actualprice1 = actualprice1.substring(1);
				Double actualprice = Double.parseDouble(actualprice1.trim());
				System.out.println("Printing the price from webpage >>>>>>>" + actualprice);

				if ((actualprice > (itemprice)) && (actualprice <= (itemprice_limit))) {
					cartTabletd.get(2).findElement(By.tagName("input")).click();
					WaitUtils.waitForNotDisplayed(getapplicationLoader());
					getTxtStudentName().clear();
					getTxtStudentName().sendKeys(studentname);
					getBtnStudentNameClose().click();
					WaitUtils.waitForNotDisplayed(getapplicationLoader());
					cartTabletd.get(4).findElement(By.tagName("input")).clear();
					cartTabletd.get(4).findElement(By.tagName("input")).sendKeys(itemQty);
					PauseUtil.pause(2000);
					// getrevieworderPriceLabel().click();
					// WaitUtils.waitForNotDisplayed(getapplicationLoader());
					PauseUtil.waitForAjaxToComplete(3000);
					System.out.println("print to check flow >>>>>>>>>>>>>>>>>>>>>>>>>.");

					break;
				}
			}
		}
	}

	@Override
	public void fillStudentFlyerOrder_Eligible_Promotions_SecondTier(double itemprice, double itemprice_limit,
			String studentname, String secondtier_itemQty) {
		waitForPageToload();
		WaitUtils.waitForNotDisplayed(getapplicationLoader());

		List<WebElement> cartTable1 = getTeacherFlyerOrderTable();
		for (WebElement cartTable : cartTable1) {
			List<WebElement> cartTabletr1 = cartTable.findElements(By.tagName("tr"));
			for (WebElement cartTabletd1 : cartTabletr1) {
				List<WebElement> cartTabletd = cartTabletd1.findElements(By.tagName("td"));
				String actualprice1 = cartTabletd.get(3).getText();
				actualprice1 = actualprice1.substring(1);
				Double actualprice = Double.parseDouble(actualprice1.trim());

				if ((actualprice > (itemprice)) && (actualprice <= (itemprice_limit))) {
					cartTabletd.get(2).findElement(By.tagName("input")).click();
					WaitUtils.waitForNotDisplayed(getapplicationLoader());
					getTxtStudentName().clear();
					getTxtStudentName().sendKeys(studentname);
					getBtnStudentNameClose().click();
					WaitUtils.waitForNotDisplayed(getapplicationLoader());
					cartTabletd.get(4).findElement(By.tagName("input")).clear();
					cartTabletd.get(4).findElement(By.tagName("input")).sendKeys(secondtier_itemQty);
					PauseUtil.pause(2000);
					getrevieworderPriceLabel().click();
					WaitUtils.waitForNotDisplayed(getapplicationLoader());
					PauseUtil.waitForAjaxToComplete(1000);
					break;
				}
			}
		}
	}

	@Override
	public void fillStudentFlyerOrder_Eligible_Promotions_SecondTier_ReviewCart(String secondtier_itemQty) {
		waitForPageToload();
		WaitUtils.waitForNotDisplayed(getapplicationLoader());

		RewardsAndCoupons rewardsAndCoupons = getFactory().getICheckoutPage().getRewardsAndCouponsSection();

		StudentFlyerOrdersPage studentFlyerOrdersPage = new StudentFlyerOrdersPage();

		SCHUtils.clickUsingJavaScript(rewardsAndCoupons.getLnkBackToShop());
		SCHUtils.waitForLoaderToDismiss();
		WaitUtils.waitForDisplayed(studentFlyerOrdersPage.getLblTitle());
		SCHUtils.clickUsingJavaScript(studentFlyerOrdersPage.getBtnReviewCart());
		SCHUtils.waitForElementToBeClickable(getBtnProceedToCheckout(), 20);
		// iStudentFlyerOrdersPage.verifyDefaultValueOfStudentFlyerOrder();
		studentFlyerOrdersPage.fillStudentFlyerOrder_ModifyQuantity_ReviewCartPage(
				TestBaseProvider.getTestBase().getTestData().getString("secondtier_itemQty"));
	}

	/*
	 * @Override public void fillStudentFlyerOrder_Eligible_Promotions(double
	 * itemprice, double itemprice_limit, String studentname, String itemQty) {
	 * waitForPageToload();
	 * WaitUtils.waitForNotDisplayed(getapplicationLoader()); //String
	 * studentNameArray[] = SCHUtils.getArrayFromStringData(studentname);
	 * //String itemIdArray[] = SCHUtils.getArrayFromStringData(itemno);
	 * 
	 * //String price1 = getrevieworderPriceLabel().getText(); //price1 =
	 * price1.substring(1); //Double price = Double.parseDouble(price1.trim());
	 * 
	 * //for (int i = 0; i < studentNameArray.length; i++) {
	 * 
	 * List<WebElement> cartTable1= getTeacherFlyerOrderTable(); for(WebElement
	 * cartTable:cartTable1){ List<WebElement> cartTabletr1=
	 * cartTable.findElements(By.tagName("tr")); for(WebElement
	 * cartTabletd1:cartTabletr1){ List<WebElement> cartTabletd=
	 * cartTabletd1.findElements(By.tagName("td"));
	 * 
	 * 
	 * String actualprice1 = cartTabletd.get(3).getText(); actualprice1 =
	 * actualprice1.substring(1); Double actualprice =
	 * Double.parseDouble(actualprice1.trim());
	 * 
	 * 
	 * if((actualprice>(itemprice)) && (actualprice<=(itemprice_limit)) ){
	 * cartTabletd.get(2).findElement(By.tagName("input")).click();
	 * WaitUtils.waitForNotDisplayed(getapplicationLoader());
	 * getTxtStudentName().clear(); getTxtStudentName().sendKeys(studentname);
	 * getBtnStudentNameClose().click();
	 * WaitUtils.waitForNotDisplayed(getapplicationLoader());
	 * cartTabletd.get(4).findElement(By.tagName("input")).clear();
	 * cartTabletd.get(4).findElement(By.tagName("input")).sendKeys(itemQty);
	 * PauseUtil.pause(2000); getrevieworderPriceLabel().click();
	 * WaitUtils.waitForNotDisplayed(getapplicationLoader());
	 * PauseUtil.waitForAjaxToComplete(1000); break; }} }}
	 */

	@Override

	public void fillStudentFlyerOrder_Eligible_Promotions_FirstTier_ReviewCart(String itemQty) {
		waitForPageToload();
		WaitUtils.waitForNotDisplayed(getapplicationLoader());

		RewardsAndCoupons rewardsAndCoupons = getFactory().getICheckoutPage().getRewardsAndCouponsSection();

		StudentFlyerOrdersPage studentFlyerOrdersPage = new StudentFlyerOrdersPage();

		SCHUtils.clickUsingJavaScript(rewardsAndCoupons.getLnkBackToShop());
		SCHUtils.waitForLoaderToDismiss();
		WaitUtils.waitForDisplayed(studentFlyerOrdersPage.getLblTitle());
		SCHUtils.clickUsingJavaScript(studentFlyerOrdersPage.getBtnReviewCart());
		SCHUtils.waitForElementToBeClickable(getBtnProceedToCheckout(), 20);
		// iStudentFlyerOrdersPage.verifyDefaultValueOfStudentFlyerOrder();
		studentFlyerOrdersPage.fillStudentFlyerOrder_ModifyQuantity_ReviewCartPage(
				TestBaseProvider.getTestBase().getTestData().getString("itemQty"));
	}

	@Override
	public void fillStudentFlyerOrder_multiQuantiy_Promotions(double itemprice, double itemprice_limit,
			String studentname, String itemQty) {
		waitForPageToload();
		WaitUtils.waitForNotDisplayed(getapplicationLoader());
		/*
		 * ======= public void fillStudentFlyerOrder_Eligible_Promotions(double
		 * itemprice, String studentname, String itemQty) {
		 * //waitForPageToload(); //
		 * WaitUtils.waitForNotDisplayed(getapplicationLoader()); >>>>>>>
		 * updated auto toss-in scenarios
		 */
		// String studentNameArray[] =
		// SCHUtils.getArrayFromStringData(studentname);
		// String itemIdArray[] = SCHUtils.getArrayFromStringData(itemno);

		// String price1 = getrevieworderPriceLabel().getText();
		// price1 = price1.substring(1);
		// Double price = Double.parseDouble(price1.trim());

		// for (int i = 0; i < studentNameArray.length; i++) {

		List<WebElement> cartTable1 = getTeacherFlyerOrderTable();
		for (WebElement cartTable : cartTable1) {
			List<WebElement> cartTabletr1 = cartTable.findElements(By.tagName("tr"));
			for (WebElement cartTabletd1 : cartTabletr1) {
				List<WebElement> cartTabletd = cartTabletd1.findElements(By.tagName("td"));

				String actualprice1 = cartTabletd.get(3).getText();
				actualprice1 = actualprice1.substring(1);
				Double actualprice = Double.parseDouble(actualprice1.trim());

				if ((actualprice > (itemprice)) && (actualprice <= (itemprice_limit))) {

					if (actualprice >= (itemprice)) {

						cartTabletd.get(2).findElement(By.tagName("input")).click();
						WaitUtils.waitForNotDisplayed(getapplicationLoader());
						getTxtStudentName().clear();
						getTxtStudentName().sendKeys(studentname);
						getBtnStudentNameClose().click();

						WaitUtils.waitForNotDisplayed(getapplicationLoader());
						cartTabletd.get(4).findElement(By.tagName("input")).clear();
						cartTabletd.get(4).findElement(By.tagName("input")).sendKeys(itemQty);
						PauseUtil.pause(2000);
						getrevieworderPriceLabel().click();
						WaitUtils.waitForNotDisplayed(getapplicationLoader());

						PauseUtil.waitForAjaxToComplete(1000);

						// PauseUtil.waitForAjaxToComplete(1000);

						break;
					}
				}
			}
		}
	}

	@Override
	public void fillStudentFlyerOrder_ModifyQuantity_ReviewCartPage(String updated_itemQty) {
		waitForPageToload();
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(4000);
		List<WebElement> cartTable1 = getTableReviewCartTable();
		for (WebElement cartTable : cartTable1) {
			List<WebElement> cartTabletr1 = cartTable.findElements(By.tagName("tr"));
			for (WebElement cartTabletd1 : cartTabletr1) {
				List<WebElement> cartTabletd = cartTabletd1.findElements(By.tagName("td"));
				cartTabletd.get(5).findElement(By.tagName("input")).clear();
				cartTabletd.get(5).findElement(By.tagName("input")).sendKeys(updated_itemQty);
				cartTabletd.get(5).findElement(By.tagName("input")).sendKeys(Keys.ENTER);
				PauseUtil.pause(2000);
				getrevieworderPriceLabel().click();
				SCHUtils.waitForLoaderToDismiss();
				PauseUtil.waitForAjaxToComplete(1000);

			}
		}
	}

	public void fillStudentFlyerOrder_ModifyQuantity_ReviewCartPage1(String updated_itemQty) {
		waitForPageToload();
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(4000);
		getinputItem1QTY().clear();
		getinputItem1QTY().sendKeys(updated_itemQty);
		getinputItem1QTY().sendKeys(Keys.ENTER);

	}

	@Override
	public void fillStudent_TeacherFlyerOrder_ModifyQuantity_ReviewCartPage(String updated_itemQty) {
		waitForPageToload();
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(4000);
		List<WebElement> cartTable1 = getTableReviewCartTable1();
		for (WebElement cartTable : cartTable1) {
			List<WebElement> cartTabletr1 = cartTable.findElements(By.tagName("tr"));
			for (WebElement cartTabletd1 : cartTabletr1) {
				List<WebElement> cartTabletd = cartTabletd1.findElements(By.tagName("td"));

				cartTabletd.get(4).findElement(By.tagName("input")).clear();
				cartTabletd.get(4).findElement(By.tagName("input")).sendKeys(updated_itemQty);
				cartTabletd.get(4).findElement(By.tagName("input")).sendKeys(Keys.ENTER);

				PauseUtil.pause(4000);
				// getrevieworderPriceLabel().click();
				getBtnProceedToCheckout().click();
				SCHUtils.waitForLoaderToDismiss();
				PauseUtil.waitForAjaxToComplete(1000);

			}
		}
	}

	@Override
	public void fillStudentFlyerOrder_ModifyQuantity_StudentClubs_ReviewCartPage(String updated_itemQty) {

		waitForPageToload();
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(3500);
		List<WebElement> cartTable1 = gettableReviewCartTable_Students();
		for (WebElement cartTable : cartTable1) {
			List<WebElement> cartTabletr1 = cartTable.findElements(By.tagName("tr"));
			for (WebElement cartTabletd1 : cartTabletr1) {
				List<WebElement> cartTabletd = cartTabletd1.findElements(By.tagName("td"));
				cartTabletd.get(4).findElement(By.tagName("input")).clear();
				cartTabletd.get(4).findElement(By.tagName("input")).sendKeys(updated_itemQty);
				cartTabletd.get(4).findElement(By.tagName("input")).sendKeys(Keys.ENTER);
				PauseUtil.pause(1000);
				YES_to_delete_item1_reviewcart().click();
				PauseUtil.waitForAjaxToComplete(2000);
				PauseUtil.pause(2000);
				getrevieworderPriceLabel().click();
				SCHUtils.waitForLoaderToDismiss();
				PauseUtil.waitForAjaxToComplete(1000);
				break;

			}
		}
	}

	@Override
	public void fillStudentFlyerOrder_NotEligible_Promotions(double itemprice, String studentname, String itemQty) {
		waitForPageToload();
		WaitUtils.waitForNotDisplayed(getapplicationLoader());

		List<WebElement> cartTable1 = getTeacherFlyerOrderTable();
		for (WebElement cartTable : cartTable1) {
			List<WebElement> cartTabletr1 = cartTable.findElements(By.tagName("tr"));
			for (WebElement cartTabletd1 : cartTabletr1) {
				List<WebElement> cartTabletd = cartTabletd1.findElements(By.tagName("td"));

				String actualprice1 = cartTabletd.get(3).getText();
				actualprice1 = actualprice1.substring(1);
				Double actualprice = Double.parseDouble(actualprice1.trim());

				if (actualprice <= (itemprice)) {

					cartTabletd.get(2).findElement(By.tagName("input")).click();
					WaitUtils.waitForNotDisplayed(getapplicationLoader());
					getTxtStudentName().clear();
					getTxtStudentName().sendKeys(studentname);
					getBtnStudentNameClose().click();
					WaitUtils.waitForNotDisplayed(getapplicationLoader());
					cartTabletd.get(4).findElement(By.tagName("input")).clear();
					cartTabletd.get(4).findElement(By.tagName("input")).sendKeys(itemQty);
					PauseUtil.pause(2000);
					getrevieworderPriceLabel().click();
					// WaitUtils.waitForNotDisplayed(getapplicationLoader());
					PauseUtil.waitForAjaxToComplete(1000);
					break;
				}
			}
		}
	}

	@Override
	public void placeItems_GlobalSearch(String itemName, String itemQty) {
		// waitForPageToload();
		PauseUtil.waitForAjaxToComplete(1000);
		TeachersHomePage tchhomepage = new TeachersHomePage();

		if (tchhomepage.chkTutorial_DontShowAgain_Link().size() != 0) {
			SCHUtils.clickUsingJavaScript(tchhomepage.getTutorial_DontShowAgain_Link());
			PauseUtil.pause(3000);
		}

		if (tchhomepage.chkBtnEnterOrderClosePopup().size() != 0) {
			SCHUtils.clickUsingJavaScript(tchhomepage.getBtnEnterOrderClosePopup());
			PauseUtil.pause(3000);
		}

		PauseUtil.pause(1500);

		SCHUtils.isPresent(getteacherHomeSearchTextField());
		getteacherHomeSearchTextField().click();
		getteacherHomeSearchTextField().clear();
		System.out.println("<<<<<<<<<<<<<<<" + itemName);
		getteacherHomeSearchTextField().sendKeys(itemName);
		PauseUtil.pause(1500);
		getteacherHomeSearchBtn().click();
		// waitForPageToload();
		PauseUtil.waitForAjaxToComplete(2500);
		if (chkteacherHomeMiniCartItemSize().size() != 0) {

			SCHUtils.mouseHoverOnElement(getLstShopByCollectionItemList());
			SCHUtils.clickUsingJavaScript(getLstQuickViewBtn());
			// waitForPageToload();
			PauseUtil.waitForAjaxToComplete(2500);
		}

		getteacherSearchQuantityField().click();
		getteacherSearchQuantityField().clear();
		getteacherSearchQuantityField().sendKeys(itemQty);
		PauseUtil.pause(1500);
		getteacherSearchQuantityAddBtn().click();
		// waitForPageToload();
		PauseUtil.waitForAjaxToComplete(2500);
		getteacherSearchCheckOut().click();
		// waitForPageToload();
		PauseUtil.waitForAjaxToComplete(2500);

	}
	
	@Override
	public void placeItems_GlobalSearch_StoreInfo(String itemName, String itemQty) {
		// waitForPageToload();
		PauseUtil.waitForAjaxToComplete(1000);
		TeachersHomePage tchhomepage = new TeachersHomePage();
		IStudentFlyerOrdersPage studentFlyerOrdersPage = getFactory().getIStudentFlyerOrdersPage();
		PCOD_ReviewCartPage pcod_reviewcart = new PCOD_ReviewCartPage();
		ProductDetailPage pdppage = new ProductDetailPage();

		if (tchhomepage.chkTutorial_DontShowAgain_Link().size() != 0) {
			SCHUtils.clickUsingJavaScript(tchhomepage.getTutorial_DontShowAgain_Link());
			PauseUtil.pause(3000);
		}

		if (tchhomepage.chkBtnEnterOrderClosePopup().size() != 0) {
			SCHUtils.clickUsingJavaScript(tchhomepage.getBtnEnterOrderClosePopup());
			PauseUtil.pause(3000);
		}

		PauseUtil.pause(1500);

		SCHUtils.isPresent(getteacherHomeSearchTextField());
		getteacherHomeSearchTextField().click();
		getteacherHomeSearchTextField().clear();
		System.out.println("<<<<<<<<<<<<<<<" + itemName);
		getteacherHomeSearchTextField().sendKeys(itemName);
		getteacherHomeSearchBtn().click();
		// waitForPageToload();
		PauseUtil.waitForAjaxToComplete(2500);
		if (chkteacherHomeMiniCartItemSize().size() != 0) {

			SCHUtils.mouseHoverOnElement(getLstShopByCollectionItemList());
			SCHUtils.clickUsingJavaScript(getLstQuickViewBtn());
			// waitForPageToload();
			PauseUtil.waitForAjaxToComplete(2500);
		}

		getteacherSearchQuantityField().click();
		getteacherSearchQuantityField().clear();
		getteacherSearchQuantityField().sendKeys(itemQty);
		PauseUtil.pause(1500);
		String itemnumber1 = studentFlyerOrdersPage.readitemNo_PDPpage().getText();
		int i = itemnumber1.indexOf(' ');
		String itemnumber12 = itemnumber1.substring(0, i);
		String itemnumber = itemnumber12.substring(1);
		
		String itemnum = itemnumber;
		String itemname = pdppage.getLblProductName().getText();
		String itemflyer = pdppage.getItemValue().getText();
		String itemprice1 = pdppage.getLblProductPrice().getText();
		itemprice1 = itemprice1.substring(1);
		
		String itemprice = pdppage.getLblProductPrice().getText();
		String itemqty =  pdppage.getTxtQuantity().getAttribute("value");
		
		
		getteacherSearchQuantityAddBtn().click();
		// waitForPageToload();
		PauseUtil.waitForAjaxToComplete(2500);
		getteacherSearchCheckOut().click();
		// waitForPageToload();
		PauseUtil.waitForAjaxToComplete(4500);
		String childname = pcod_reviewcart.getdrpdownchildname1reviewcart().getText();
		
		DateTimeFormatter dtf = DateTimeFormatter.ofPattern("MM.dd.yy");
		LocalDate localDate = LocalDate.now();
		String dateplaced = dtf.format(localDate);
		System.out.println("Date is:--------------->>>>>>>>>>>>"+dateplaced);
		
		String[] valueToWrite = {childname,dateplaced,itemnum,itemname,itemflyer,itemprice,itemqty};
        //Create an object of current class
        Pcod_ExcelLibrary objExcelFile = new Pcod_ExcelLibrary();
        //Write the file using file name, sheet name and the data to be filled
        try {
			objExcelFile.writeExcel(System.getProperty("user.dir")+"\\src\\ExcelFile","tcodpcoditeminfo.xlsx","1ch1th",valueToWrite);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        PauseUtil.pause(5000);

	}
	
	
	@Override
	public void parent_placing_2items_2childs(String itemName, String itemQty, String itemName2, String itemQty2) {
		// waitForPageToload();
		PauseUtil.waitForAjaxToComplete(1000);
		TeachersHomePage tchhomepage = new TeachersHomePage();
		IStudentFlyerOrdersPage studentFlyerOrdersPage = getFactory().getIStudentFlyerOrdersPage();
		PCOD_ReviewCartPage pcod_reviewcart = new PCOD_ReviewCartPage();
		ProductDetailPage pdppage = new ProductDetailPage();

		if (tchhomepage.chkTutorial_DontShowAgain_Link().size() != 0) {
			SCHUtils.clickUsingJavaScript(tchhomepage.getTutorial_DontShowAgain_Link());
			PauseUtil.pause(3000);
		}

		if (tchhomepage.chkBtnEnterOrderClosePopup().size() != 0) {
			SCHUtils.clickUsingJavaScript(tchhomepage.getBtnEnterOrderClosePopup());
			PauseUtil.pause(3000);
		}

		PauseUtil.pause(1500);

		SCHUtils.isPresent(getteacherHomeSearchTextField());
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);

		getteacherHomeSearchTextField().click();
		getteacherHomeSearchTextField().clear();
		getteacherHomeSearchTextField().sendKeys(itemName);
		getteacherHomeSearchBtn().click();
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		if (chkteacherHomeMiniCartItemSize().size() != 0) {

			SCHUtils.mouseHoverOnElement(getLstShopByCollectionItemList());
			SCHUtils.clickUsingJavaScript(getLstQuickViewBtn());
			SCHUtils.waitForLoaderToDismiss();
			PauseUtil.waitForAjaxToComplete(2500);
		}

		getteacherSearchQuantityField().click();
		getteacherSearchQuantityField().clear();
		PauseUtil.pause(1500);
		getteacherSearchQuantityField().sendKeys(itemQty);
		PauseUtil.pause(1500);
		String itemnumber1 = studentFlyerOrdersPage.readitemNo_PDPpage().getText();
		int i = itemnumber1.indexOf(' ');
		String itemnumber12 = itemnumber1.substring(0, i);
		String itemnumber = itemnumber12.substring(1);
		
		String itemnum = itemnumber;
		String itemname = pdppage.getLblProductName().getText();
		String itemflyer = pdppage.getItemValue().getText();
		String itemprice1 = pdppage.getLblProductPrice().getText();
		itemprice1 = itemprice1.substring(1);
		
		String itemprice = pdppage.getLblProductPrice().getText();
		String itemqty =  pdppage.getTxtQuantity().getAttribute("value");
		
		
		getteacherSearchQuantityAddBtn().click();
		PauseUtil.waitForAjaxToComplete(2500);
		getteacherSearchCheckOut().click();
		PauseUtil.waitForAjaxToComplete(4500);
		PauseUtil.pause(4500);
		 pcod_reviewcart.getdrpdwnchildname1reviewcart().click();
		    SCHUtils.selectOptionByIndex(pcod_reviewcart.getdrpdownchild1namereviewcart(),1);
		    	PauseUtil.pause(1500);
		    	getteacherHomeSearchTextField().click();
		    	PauseUtil.pause(1500);
    	String childname = pcod_reviewcart.getdrpdwnchildname1reviewcart().getText().trim();
		System.out.println("first childname------------>>>>>>>>>>>>..."+childname);
		DateTimeFormatter dtf = DateTimeFormatter.ofPattern("MM.dd.yy");
		LocalDate localDate = LocalDate.now();
		String dateplaced = dtf.format(localDate);
		System.out.println("Date is:--------------->>>>>>>>>>>>"+dateplaced);
		
		String[] valueToWrite = {childname,dateplaced,itemnum,itemname,itemflyer,itemprice,itemqty};
        //Create an object of current class
        Pcod_ExcelLibrary objExcelFile = new Pcod_ExcelLibrary();
        //Write the file using file name, sheet name and the data to be filled
        try {
			objExcelFile.writeExcel(System.getProperty("user.dir")+"\\src\\ExcelFile","tcodpcoditeminfo.xlsx","2ch1th1ord",valueToWrite);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		PauseUtil.pause(8000);

		SCHUtils.isPresent(getteacherHomeSearchTextField());
		getteacherHomeSearchTextField().click();
		getteacherHomeSearchTextField().clear();
		getteacherHomeSearchTextField().sendKeys(itemName2);
		getteacherHomeSearchBtn().click();
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		if (chkteacherHomeMiniCartItemSize().size() != 0) {

			SCHUtils.mouseHoverOnElement(getLstShopByCollectionItemList());
			SCHUtils.clickUsingJavaScript(getLstQuickViewBtn());
			SCHUtils.waitForLoaderToDismiss();
			PauseUtil.waitForAjaxToComplete(2500);
		}

		getteacherSearchQuantityField().click();
		getteacherSearchQuantityField().clear();
		getteacherSearchQuantityField().sendKeys(itemQty2);
		PauseUtil.pause(1500);
		
		String itemnumber21 = studentFlyerOrdersPage.readitemNo_PDPpage().getText();
		int j = itemnumber21.indexOf(' ');
		String itemnumber22 = itemnumber21.substring(0, j);
		String itemnumber2 = itemnumber22.substring(1);
		
		String itemnum2 = itemnumber2;
		String itemname2 = pdppage.getLblProductName().getText();
		String itemflyer2 = pdppage.getItemValue().getText();
		String itemprice21 = pdppage.getLblProductPrice().getText();
		itemprice21 = itemprice21.substring(1);
		
		String itemprice2 = pdppage.getLblProductPrice().getText();
		String itemqty2 =  pdppage.getTxtQuantity().getAttribute("value");
		
		
		getteacherSearchQuantityAddBtn().click();
		// waitForPageToload();
		PauseUtil.waitForAjaxToComplete(2500);
		getteacherSearchCheckOut().click();
		// waitForPageToload();
		PauseUtil.waitForAjaxToComplete(4500);
	   /* pcod_reviewcart.getdrpdwnchildname2reviewcart().click();
	    SCHUtils.selectOptionByIndex(pcod_reviewcart.getdrpdownchildname2reviewcart(),1);
	    	PauseUtil.pause(1500);*/
		String childname2 = pcod_reviewcart.getdrpdownchild2namereviewcart().getText();
		
		DateTimeFormatter dtf1 = DateTimeFormatter.ofPattern("MM.dd.yy");
		LocalDate localDate1 = LocalDate.now();
		String dateplaced2 = dtf1.format(localDate1);
		System.out.println("Date is:--------------->>>>>>>>>>>>"+dateplaced2);
		
		String[] valueToWrite2 = {childname2,dateplaced2,itemnum2,itemname2,itemflyer2,itemprice2,itemqty2};
        try {
			objExcelFile.writeExcel(System.getProperty("user.dir")+"\\src\\ExcelFile","tcodpcoditeminfo.xlsx","2ch1th1ord",valueToWrite2);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        PauseUtil.pause(5000);
	}
	
	
	
	@Override
	public void two_parents_placing_2items_2childs(String itemName, String itemQty, String itemName2, String itemQty2) {
		// waitForPageToload();
		PauseUtil.waitForAjaxToComplete(1000);
		TeachersHomePage tchhomepage = new TeachersHomePage();
		IStudentFlyerOrdersPage studentFlyerOrdersPage = getFactory().getIStudentFlyerOrdersPage();
		PCOD_ReviewCartPage pcod_reviewcart = new PCOD_ReviewCartPage();
		ProductDetailPage pdppage = new ProductDetailPage();
		PCOD_LoginPage pcod_logpage = new PCOD_LoginPage();
		ICheckoutPage_2 checkoutPage = getFactory().getICheckoutPage_2();
		PCOD_SubmitYourOrderPage pcod_submitpage = new PCOD_SubmitYourOrderPage();

		if (tchhomepage.chkTutorial_DontShowAgain_Link().size() != 0) {
			SCHUtils.clickUsingJavaScript(tchhomepage.getTutorial_DontShowAgain_Link());
			PauseUtil.pause(3000);
		}

		if (tchhomepage.chkBtnEnterOrderClosePopup().size() != 0) {
			SCHUtils.clickUsingJavaScript(tchhomepage.getBtnEnterOrderClosePopup());
			PauseUtil.pause(3000);
		}

		PauseUtil.pause(1500);

		SCHUtils.isPresent(getteacherHomeSearchTextField());
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);

		getteacherHomeSearchTextField().click();
		getteacherHomeSearchTextField().clear();
		getteacherHomeSearchTextField().sendKeys(itemName);
		getteacherHomeSearchBtn().click();
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		if (chkteacherHomeMiniCartItemSize().size() != 0) {

			SCHUtils.mouseHoverOnElement(getLstShopByCollectionItemList());
			SCHUtils.clickUsingJavaScript(getLstQuickViewBtn());
			SCHUtils.waitForLoaderToDismiss();
			PauseUtil.waitForAjaxToComplete(2500);
		}

		getteacherSearchQuantityField().click();
		getteacherSearchQuantityField().clear();
		PauseUtil.pause(1500);
		getteacherSearchQuantityField().sendKeys(itemQty);
		PauseUtil.pause(1500);
		String itemnumber1 = studentFlyerOrdersPage.readitemNo_PDPpage().getText();
		int i = itemnumber1.indexOf(' ');
		String itemnumber12 = itemnumber1.substring(0, i);
		String itemnumber = itemnumber12.substring(1);
		
		String itemnum = itemnumber;
		String itemname = pdppage.getLblProductName().getText();
		String itemflyer = pdppage.getItemValue().getText();
		String itemprice1 = pdppage.getLblProductPrice().getText();
		itemprice1 = itemprice1.substring(1);
		
		String itemprice = pdppage.getLblProductPrice().getText();
		String itemqty =  pdppage.getTxtQuantity().getAttribute("value");
		
		
		getteacherSearchQuantityAddBtn().click();
		PauseUtil.waitForAjaxToComplete(2500);
		getteacherSearchCheckOut().click();
		PauseUtil.waitForAjaxToComplete(4500);
		PauseUtil.pause(4500);
		String childname = pcod_reviewcart.getdrpdownchildname1reviewcart().getText();
		
		DateTimeFormatter dtf = DateTimeFormatter.ofPattern("MM.dd.yy");
		LocalDate localDate = LocalDate.now();
		String dateplaced = dtf.format(localDate);
		System.out.println("Date is:--------------->>>>>>>>>>>>"+dateplaced);
		
		String[] valueToWrite = {childname,dateplaced,itemnum,itemname,itemflyer,itemprice,itemqty};
        Pcod_ExcelLibrary objExcelFile = new Pcod_ExcelLibrary();
		PauseUtil.pause(5000);
		pcod_reviewcart.navigate_from_shoppingcart_to_submitorderpage();
        checkoutPage.teacher_clicks_on_SUBMIT_btn_Confirm_Submit_page();
        PauseUtil.pause(2000);
		pcod_submitpage.pcod_confirmpage_logout();
		PauseUtil.pause(2000);
		pcod_logpage.parent_login(pcod_logpage.getTxtUsername(), TestBaseProvider.getTestBase().getTestData().getString("acc_no2"),
                TestBaseProvider.getTestBase().getTestData().getString("password"));
        PauseUtil.pause(4500);
		SCHUtils.isPresent(getteacherHomeSearchTextField());
		getteacherHomeSearchTextField().click();
		getteacherHomeSearchTextField().clear();
		getteacherHomeSearchTextField().sendKeys(itemName2);
		getteacherHomeSearchBtn().click();
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		if (chkteacherHomeMiniCartItemSize().size() != 0) {

			SCHUtils.mouseHoverOnElement(getLstShopByCollectionItemList());
			SCHUtils.clickUsingJavaScript(getLstQuickViewBtn());
			SCHUtils.waitForLoaderToDismiss();
			PauseUtil.waitForAjaxToComplete(2500);
		}

		getteacherSearchQuantityField().click();
		getteacherSearchQuantityField().clear();
		getteacherSearchQuantityField().sendKeys(itemQty2);
		PauseUtil.pause(1500);
		
		String itemnumber21 = studentFlyerOrdersPage.readitemNo_PDPpage().getText();
		int j = itemnumber21.indexOf(' ');
		String itemnumber22 = itemnumber21.substring(0, j);
		String itemnumber2 = itemnumber22.substring(1);
		
		String itemnum2 = itemnumber2;
		String itemname2 = pdppage.getLblProductName().getText();
		String itemflyer2 = pdppage.getItemValue().getText();
		String itemprice21 = pdppage.getLblProductPrice().getText();
		itemprice21 = itemprice21.substring(1);
		
		String itemprice2 = pdppage.getLblProductPrice().getText();
		String itemqty2 =  pdppage.getTxtQuantity().getAttribute("value");
		
		getteacherSearchQuantityAddBtn().click();
		// waitForPageToload();
		PauseUtil.waitForAjaxToComplete(2500);
		getteacherSearchCheckOut().click();
		// waitForPageToload();
		PauseUtil.waitForAjaxToComplete(4500);
	   /* pcod_reviewcart.getdrpdwnchildname2reviewcart().click();
	    SCHUtils.selectOptionByIndex(pcod_reviewcart.getdrpdownchildname2reviewcart(),1);
	    	PauseUtil.pause(1500);*/
		String childname2 = pcod_reviewcart.getdrpdownchildname1reviewcart().getText();
		
		DateTimeFormatter dtf1 = DateTimeFormatter.ofPattern("MM.dd.yy");
		LocalDate localDate1 = LocalDate.now();
		String dateplaced2 = dtf1.format(localDate1);
		System.out.println("Date is:--------------->>>>>>>>>>>>"+dateplaced2);
		
		String[] valueToWrite2 = {childname2,dateplaced2,itemnum2,itemname2,itemflyer2,itemprice2,itemqty2};
        try {
			objExcelFile.writeExcel(System.getProperty("user.dir")+"\\src\\ExcelFile","tcodpcoditeminfo.xlsx","2pr2ch21ord",valueToWrite2);
			objExcelFile.writeExcel(System.getProperty("user.dir")+"\\src\\ExcelFile","tcodpcoditeminfo.xlsx","2pr2ch21ord",valueToWrite);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        PauseUtil.pause(5000);
		pcod_reviewcart.navigate_from_shoppingcart_to_submitorderpage();
        checkoutPage.teacher_clicks_on_SUBMIT_btn_Confirm_Submit_page();
        PauseUtil.pause(2000);
	}
	
	
	@Override
	public void parent_placing_2orders_2items_2childs(String itemName, String itemQty, String itemName2, String itemQty2) {
		PauseUtil.waitForAjaxToComplete(1000);
		TeachersHomePage tchhomepage = new TeachersHomePage();
		IStudentFlyerOrdersPage studentFlyerOrdersPage = getFactory().getIStudentFlyerOrdersPage();
		PCOD_ReviewCartPage pcod_reviewcart = new PCOD_ReviewCartPage();
		ProductDetailPage pdppage = new ProductDetailPage();
		ICheckoutPage_2 checkoutPage = getFactory().getICheckoutPage_2();
		PCOD_SubmitYourOrderPage pcod_submitpage = new PCOD_SubmitYourOrderPage();

		if (tchhomepage.chkTutorial_DontShowAgain_Link().size() != 0) {
			SCHUtils.clickUsingJavaScript(tchhomepage.getTutorial_DontShowAgain_Link());
			PauseUtil.pause(3000);
		}

		if (tchhomepage.chkBtnEnterOrderClosePopup().size() != 0) {
			SCHUtils.clickUsingJavaScript(tchhomepage.getBtnEnterOrderClosePopup());
			PauseUtil.pause(3000);
		}

		PauseUtil.pause(1500);
        for(int k=0;k<=1;k++){
		SCHUtils.isPresent(getteacherHomeSearchTextField());
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);

		getteacherHomeSearchTextField().click();
		getteacherHomeSearchTextField().clear();
		getteacherHomeSearchTextField().sendKeys(itemName);
		getteacherHomeSearchBtn().click();
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		if (chkteacherHomeMiniCartItemSize().size() != 0) {

			SCHUtils.mouseHoverOnElement(getLstShopByCollectionItemList());
			SCHUtils.clickUsingJavaScript(getLstQuickViewBtn());
			SCHUtils.waitForLoaderToDismiss();
			PauseUtil.waitForAjaxToComplete(2500);
		}

		getteacherSearchQuantityField().click();
		getteacherSearchQuantityField().clear();
		PauseUtil.pause(1500);
		getteacherSearchQuantityField().sendKeys(itemQty);
		PauseUtil.pause(1500);
		String itemnumber1 = studentFlyerOrdersPage.readitemNo_PDPpage().getText();
		int i = itemnumber1.indexOf(' ');
		String itemnumber12 = itemnumber1.substring(0, i);
		String itemnumber = itemnumber12.substring(1);
		
		String itemnum = itemnumber;
		String itemname = pdppage.getLblProductName().getText();
		String itemflyer = pdppage.getItemValue().getText();
		String itemprice1 = pdppage.getLblProductPrice().getText();
		itemprice1 = itemprice1.substring(1);
		
		String itemprice = pdppage.getLblProductPrice().getText();
		String itemqty =  pdppage.getTxtQuantity().getAttribute("value");
		
		getteacherSearchQuantityAddBtn().click();
		PauseUtil.waitForAjaxToComplete(2500);
		getteacherSearchCheckOut().click();
		PauseUtil.waitForAjaxToComplete(4500);
		PauseUtil.pause(4500);
		pcod_reviewcart.getdrpdwnchildname1reviewcart().click();
	    SCHUtils.selectOptionByIndex(pcod_reviewcart.getdrpdownchild1namereviewcart(),1);
	    PauseUtil.pause(1500);
	    getteacherHomeSearchTextField().click();
    	PauseUtil.pause(1500);
		String childname = pcod_reviewcart.getdrpdwnchildname1reviewcart().getText().trim();
		System.out.println("first childname------------>>>>>>>>>>>>..."+childname);
		PauseUtil.pause(1500);
		DateTimeFormatter dtf = DateTimeFormatter.ofPattern("MM.dd.yy");
		LocalDate localDate = LocalDate.now();
		String dateplaced = dtf.format(localDate);
		System.out.println("Date is:--------------->>>>>>>>>>>>"+dateplaced);
		
		String[] valueToWrite = {childname,dateplaced,itemnum,itemname,itemflyer,itemprice,itemqty};
        Pcod_ExcelLibrary objExcelFile = new Pcod_ExcelLibrary();
		PauseUtil.pause(5000);
		SCHUtils.isPresent(getteacherHomeSearchTextField());
		getteacherHomeSearchTextField().click();
		getteacherHomeSearchTextField().clear();
		getteacherHomeSearchTextField().sendKeys(itemName2);
		getteacherHomeSearchBtn().click();
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		if (chkteacherHomeMiniCartItemSize().size() != 0) {

			SCHUtils.mouseHoverOnElement(getLstShopByCollectionItemList());
			SCHUtils.clickUsingJavaScript(getLstQuickViewBtn());
			SCHUtils.waitForLoaderToDismiss();
			PauseUtil.waitForAjaxToComplete(2500);
		}

		getteacherSearchQuantityField().click();
		getteacherSearchQuantityField().clear();
		getteacherSearchQuantityField().sendKeys(itemQty2);
		PauseUtil.pause(1500);
		
		String itemnumber21 = studentFlyerOrdersPage.readitemNo_PDPpage().getText();
		int j = itemnumber21.indexOf(' ');
		String itemnumber22 = itemnumber21.substring(0, j);
		String itemnumber2 = itemnumber22.substring(1);
		
		String itemnum2 = itemnumber2;
		String itemname2 = pdppage.getLblProductName().getText();
		String itemflyer2 = pdppage.getItemValue().getText();
		String itemprice21 = pdppage.getLblProductPrice().getText();
		itemprice21 = itemprice21.substring(1);
		
		String itemprice2 = pdppage.getLblProductPrice().getText();
		String itemqty2 =  pdppage.getTxtQuantity().getAttribute("value");
		
		getteacherSearchQuantityAddBtn().click();
		PauseUtil.waitForAjaxToComplete(2500);
		getteacherSearchCheckOut().click();
		PauseUtil.waitForAjaxToComplete(4500);
		pcod_reviewcart.getdrpdwnchildname2reviewcart().click();
	    SCHUtils.selectOptionByIndex(pcod_reviewcart.getdrpdownchildname2reviewcart(),0);
    	PauseUtil.pause(1500);
    	getteacherHomeSearchTextField().click();
    	PauseUtil.pause(1500);
		String childname2 = pcod_reviewcart.getdrpdwnchildname2reviewcart().getText().trim();
		System.out.println("second childname------------>>>>>>>>>>>>..."+childname2);
		DateTimeFormatter dtf1 = DateTimeFormatter.ofPattern("MM.dd.yy");
		LocalDate localDate1 = LocalDate.now();
		String dateplaced2 = dtf1.format(localDate1);
		System.out.println("Date is:--------------->>>>>>>>>>>>"+dateplaced2);
		
		String[] valueToWrite2 = {childname2,dateplaced2,itemnum2,itemname2,itemflyer2,itemprice2,itemqty2};
        try {
			objExcelFile.writeExcel(System.getProperty("user.dir")+"\\src\\ExcelFile","tcodpcoditeminfo.xlsx","1pr2ch2ord",valueToWrite2);
			objExcelFile.writeExcel(System.getProperty("user.dir")+"\\src\\ExcelFile","tcodpcoditeminfo.xlsx","1pr2ch2ord",valueToWrite);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        PauseUtil.pause(5000);
		pcod_reviewcart.navigate_from_shoppingcart_to_submitorderpage();
        checkoutPage.teacher_clicks_on_SUBMIT_btn_Confirm_Submit_page();
        PauseUtil.pause(2000);
        pcod_submitpage.gethomeiconconfirmationpage().click();
        PauseUtil.pause(3000);
        }
	}

    @Override
    public void verifySFOFREEPICKcouponexpiredMessage() {
	    SCHUtils.waitForElementToBeDisplayed( getsfocouponmodalerrorMsg(),5000);
        String actualval = getsfocouponmodalerrorMsg().getText().trim();
        String expectedval=ConstantUtils.SFOCOUPON_EXPIRED_COUPON;
        Assert.assertEquals(actualval,expectedval);

    }


    @Override
	public void placeItems_GlobalSearch_Teach_StudentItems(String itemName, String itemQty, String itemName2,
			String itemQty2) {
		// waitForPageToload();
		PauseUtil.waitForAjaxToComplete(1000);
		TeachersHomePage tchhomepage = new TeachersHomePage();

		if (tchhomepage.chkTutorial_DontShowAgain_Link().size() != 0) {
			SCHUtils.clickUsingJavaScript(tchhomepage.getTutorial_DontShowAgain_Link());
			PauseUtil.pause(3000);
		}

		if (tchhomepage.chkBtnEnterOrderClosePopup().size() != 0) {
			SCHUtils.clickUsingJavaScript(tchhomepage.getBtnEnterOrderClosePopup());
			PauseUtil.pause(3000);
		}

		PauseUtil.pause(1500);

		SCHUtils.isPresent(getteacherHomeSearchTextField());
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);

		getteacherHomeSearchTextField().click();
		getteacherHomeSearchTextField().clear();
		getteacherHomeSearchTextField().sendKeys(itemName);
		getteacherHomeSearchBtn().click();
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		if (chkteacherHomeMiniCartItemSize().size() != 0) {

			SCHUtils.mouseHoverOnElement(getLstShopByCollectionItemList());
			SCHUtils.clickUsingJavaScript(getLstQuickViewBtn());
			SCHUtils.waitForLoaderToDismiss();
			PauseUtil.waitForAjaxToComplete(2500);
		}

		getteacherSearchQuantityField().click();
		getteacherSearchQuantityField().clear();
		PauseUtil.pause(1500);
		getteacherSearchQuantityField().sendKeys(itemQty);
		getteacherSearchQuantityAddBtn().click();
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		getteacherSearchCheckOut().click();
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);

		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(1500);
		PauseUtil.pause(8000);

		SCHUtils.isPresent(getteacherHomeSearchTextField());
		getteacherHomeSearchTextField().click();
		getteacherHomeSearchTextField().clear();
		getteacherHomeSearchTextField().sendKeys(itemName2);
		getteacherHomeSearchBtn().click();
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		if (chkteacherHomeMiniCartItemSize().size() != 0) {

			SCHUtils.mouseHoverOnElement(getLstShopByCollectionItemList());
			SCHUtils.clickUsingJavaScript(getLstQuickViewBtn());
			SCHUtils.waitForLoaderToDismiss();
			PauseUtil.waitForAjaxToComplete(2500);
		}

		getteacherSearchQuantityField().click();
		getteacherSearchQuantityField().clear();
		getteacherSearchQuantityField().sendKeys(itemQty2);
		getteacherSearchQuantityAddBtn().click();
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		getteacherSearchCheckOut().click();
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
	}

	@Override
	public void placeItems_GlobalSearch_3_items(String itemName, String itemQty, String itemName2, String itemQty2,
			String itemName3, String itemQty3) {
		// waitForPageToload();
		PauseUtil.waitForAjaxToComplete(1000);
		TeachersHomePage tchhomepage = new TeachersHomePage();

		if (tchhomepage.chkTutorial_DontShowAgain_Link().size() != 0) {
			SCHUtils.clickUsingJavaScript(tchhomepage.getTutorial_DontShowAgain_Link());
			PauseUtil.pause(3000);
		}

		if (tchhomepage.chkBtnEnterOrderClosePopup().size() != 0) {
			SCHUtils.clickUsingJavaScript(tchhomepage.getBtnEnterOrderClosePopup());
			PauseUtil.pause(3000);
		}

		PauseUtil.pause(1500);

		SCHUtils.isPresent(getteacherHomeSearchTextField());
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);

		getteacherHomeSearchTextField().click();
		getteacherHomeSearchTextField().clear();
		getteacherHomeSearchTextField().sendKeys(itemName);
		getteacherHomeSearchBtn().click();
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		if (chkteacherHomeMiniCartItemSize().size() != 0) {

			SCHUtils.mouseHoverOnElement(getLstShopByCollectionItemList());
			SCHUtils.clickUsingJavaScript(getLstQuickViewBtn());
			SCHUtils.waitForLoaderToDismiss();
			PauseUtil.waitForAjaxToComplete(2500);
		}

		getteacherSearchQuantityField().click();
		getteacherSearchQuantityField().clear();
		getteacherSearchQuantityField().sendKeys(itemQty);
		getteacherSearchQuantityAddBtn().click();
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		getteacherSearchCheckOut().click();
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);

		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(1500);
		PauseUtil.pause(8000);

		SCHUtils.isPresent(getteacherHomeSearchTextField());
		getteacherHomeSearchTextField().click();
		getteacherHomeSearchTextField().clear();
		getteacherHomeSearchTextField().sendKeys(itemName2);
		getteacherHomeSearchBtn().click();
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		if (chkteacherHomeMiniCartItemSize().size() != 0) {

			SCHUtils.mouseHoverOnElement(getLstShopByCollectionItemList());
			SCHUtils.clickUsingJavaScript(getLstQuickViewBtn());
			SCHUtils.waitForLoaderToDismiss();
			PauseUtil.waitForAjaxToComplete(2500);
		}

		getteacherSearchQuantityField().click();
		getteacherSearchQuantityField().clear();
		getteacherSearchQuantityField().sendKeys(itemQty2);
		getteacherSearchQuantityAddBtn().click();
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		getteacherSearchCheckOut().click();
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);

		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(1500);
		PauseUtil.pause(8000);

		SCHUtils.isPresent(getteacherHomeSearchTextField());
		getteacherHomeSearchTextField().click();
		getteacherHomeSearchTextField().clear();
		getteacherHomeSearchTextField().sendKeys(itemName3);
		getteacherHomeSearchBtn().click();
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		if (chkteacherHomeMiniCartItemSize().size() != 0) {

			SCHUtils.mouseHoverOnElement(getLstShopByCollectionItemList());
			SCHUtils.clickUsingJavaScript(getLstQuickViewBtn());
			SCHUtils.waitForLoaderToDismiss();
			PauseUtil.waitForAjaxToComplete(2500);
		}

		getteacherSearchQuantityField().click();
		getteacherSearchQuantityField().clear();
		getteacherSearchQuantityField().sendKeys(itemQty3);
		getteacherSearchQuantityAddBtn().click();
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		getteacherSearchCheckOut().click();
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
	}

	@Override
	public void placeItems_GlobalSearch_4_items(String itemName, String itemQty, String itemName2, String itemQty2,
			String itemName3, String itemQty3, String itemName4, String itemQty4) {
		// waitForPageToload();
		PauseUtil.waitForAjaxToComplete(1000);
		TeachersHomePage tchhomepage = new TeachersHomePage();

		if (tchhomepage.chkTutorial_DontShowAgain_Link().size() != 0) {
			SCHUtils.clickUsingJavaScript(tchhomepage.getTutorial_DontShowAgain_Link());
			PauseUtil.pause(3000);
		}

		if (tchhomepage.chkBtnEnterOrderClosePopup().size() != 0) {
			SCHUtils.clickUsingJavaScript(tchhomepage.getBtnEnterOrderClosePopup());
			PauseUtil.pause(3000);
		}

		PauseUtil.pause(1500);

		SCHUtils.isPresent(getteacherHomeSearchTextField());
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);

		getteacherHomeSearchTextField().click();
		getteacherHomeSearchTextField().clear();
		getteacherHomeSearchTextField().sendKeys(itemName);
		getteacherHomeSearchBtn().click();
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		if (chkteacherHomeMiniCartItemSize().size() != 0) {

			SCHUtils.mouseHoverOnElement(getLstShopByCollectionItemList());
			SCHUtils.clickUsingJavaScript(getLstQuickViewBtn());
			SCHUtils.waitForLoaderToDismiss();
			PauseUtil.waitForAjaxToComplete(2500);
		}

		getteacherSearchQuantityField().click();
		getteacherSearchQuantityField().clear();
		getteacherSearchQuantityField().sendKeys(itemQty);
		getteacherSearchQuantityAddBtn().click();
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		getteacherSearchCheckOut().click();
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);

		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(1500);
		PauseUtil.pause(4500);

		SCHUtils.isPresent(getteacherHomeSearchTextField());
		getteacherHomeSearchTextField().click();
		getteacherHomeSearchTextField().clear();
		getteacherHomeSearchTextField().sendKeys(itemName2);
		getteacherHomeSearchBtn().click();
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		if (chkteacherHomeMiniCartItemSize().size() != 0) {

			SCHUtils.mouseHoverOnElement(getLstShopByCollectionItemList());
			SCHUtils.clickUsingJavaScript(getLstQuickViewBtn());
			SCHUtils.waitForLoaderToDismiss();
			PauseUtil.waitForAjaxToComplete(2500);
		}

		getteacherSearchQuantityField().click();
		getteacherSearchQuantityField().clear();
		getteacherSearchQuantityField().sendKeys(itemQty2);
		getteacherSearchQuantityAddBtn().click();
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		getteacherSearchCheckOut().click();
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);

		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(1500);
		PauseUtil.pause(4500);

		SCHUtils.isPresent(getteacherHomeSearchTextField());
		getteacherHomeSearchTextField().click();
		getteacherHomeSearchTextField().clear();
		getteacherHomeSearchTextField().sendKeys(itemName3);
		getteacherHomeSearchBtn().click();
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		if (chkteacherHomeMiniCartItemSize().size() != 0) {

			SCHUtils.mouseHoverOnElement(getLstShopByCollectionItemList());
			SCHUtils.clickUsingJavaScript(getLstQuickViewBtn());
			SCHUtils.waitForLoaderToDismiss();
			PauseUtil.waitForAjaxToComplete(2500);
		}

		getteacherSearchQuantityField().click();
		getteacherSearchQuantityField().clear();
		getteacherSearchQuantityField().sendKeys(itemQty3);
		getteacherSearchQuantityAddBtn().click();
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		getteacherSearchCheckOut().click();
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);

		// adding 4th item
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(1500);
		PauseUtil.pause(4500);

		SCHUtils.isPresent(getteacherHomeSearchTextField());
		getteacherHomeSearchTextField().click();
		getteacherHomeSearchTextField().clear();
		getteacherHomeSearchTextField().sendKeys(itemName4);
		getteacherHomeSearchBtn().click();
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		if (chkteacherHomeMiniCartItemSize().size() != 0) {

			SCHUtils.mouseHoverOnElement(getLstShopByCollectionItemList());
			SCHUtils.clickUsingJavaScript(getLstQuickViewBtn());
			SCHUtils.waitForLoaderToDismiss();
			PauseUtil.waitForAjaxToComplete(2500);
		}

		getteacherSearchQuantityField().click();
		getteacherSearchQuantityField().clear();
		getteacherSearchQuantityField().sendKeys(itemQty4);
		getteacherSearchQuantityAddBtn().click();
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		getteacherSearchCheckOut().click();
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
	}

	@Override
	public void placeItems_GlobalSearch_Teach2_StudentItem1(String itemName, String itemQty, String itemName2,
			String itemQty2, String itemName3, String itemQty3) {
		// waitForPageToload();
		PauseUtil.waitForAjaxToComplete(1000);
		TeachersHomePage tchhomepage = new TeachersHomePage();

		if (tchhomepage.chkTutorial_DontShowAgain_Link().size() != 0) {
			SCHUtils.clickUsingJavaScript(tchhomepage.getTutorial_DontShowAgain_Link());
			PauseUtil.pause(3000);
		}

		if (tchhomepage.chkBtnEnterOrderClosePopup().size() != 0) {
			SCHUtils.clickUsingJavaScript(tchhomepage.getBtnEnterOrderClosePopup());
			PauseUtil.pause(3000);
		}

		PauseUtil.pause(1500);

		SCHUtils.isPresent(getteacherHomeSearchTextField());
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);

		getteacherHomeSearchTextField().click();
		getteacherHomeSearchTextField().clear();
		getteacherHomeSearchTextField().sendKeys(itemName);
		getteacherHomeSearchBtn().click();
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		if (chkteacherHomeMiniCartItemSize().size() != 0) {

			SCHUtils.mouseHoverOnElement(getLstShopByCollectionItemList());
			SCHUtils.clickUsingJavaScript(getLstQuickViewBtn());
			SCHUtils.waitForLoaderToDismiss();
			PauseUtil.waitForAjaxToComplete(2500);
		}

		getteacherSearchQuantityField().click();
		getteacherSearchQuantityField().clear();
		getteacherSearchQuantityField().sendKeys(itemQty);
		getteacherSearchQuantityAddBtn().click();
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		getteacherSearchCheckOut().click();
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);

		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(1500);
		PauseUtil.pause(8000);

		SCHUtils.isPresent(getteacherHomeSearchTextField());
		getteacherHomeSearchTextField().click();
		getteacherHomeSearchTextField().clear();
		getteacherHomeSearchTextField().sendKeys(itemName2);
		getteacherHomeSearchBtn().click();
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		if (chkteacherHomeMiniCartItemSize().size() != 0) {

			SCHUtils.mouseHoverOnElement(getLstShopByCollectionItemList());
			SCHUtils.clickUsingJavaScript(getLstQuickViewBtn());
			SCHUtils.waitForLoaderToDismiss();
			PauseUtil.waitForAjaxToComplete(2500);
		}

		getteacherSearchQuantityField().click();
		getteacherSearchQuantityField().clear();
		getteacherSearchQuantityField().sendKeys(itemQty2);
		getteacherSearchQuantityAddBtn().click();
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		getteacherSearchCheckOut().click();
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);

		PauseUtil.pause(8000);
		SCHUtils.isPresent(getteacherHomeSearchTextField());
		getteacherHomeSearchTextField().click();
		getteacherHomeSearchTextField().clear();
		getteacherHomeSearchTextField().sendKeys(itemName3);
		getteacherHomeSearchBtn().click();
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		if (chkteacherHomeMiniCartItemSize().size() != 0) {

			SCHUtils.mouseHoverOnElement(getLstShopByCollectionItemList());
			SCHUtils.clickUsingJavaScript(getLstQuickViewBtn());
			SCHUtils.waitForLoaderToDismiss();
			PauseUtil.waitForAjaxToComplete(2500);
		}

		getteacherSearchQuantityField().click();
		getteacherSearchQuantityField().clear();
		getteacherSearchQuantityField().sendKeys(itemQty3);
		getteacherSearchQuantityAddBtn().click();
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		getteacherSearchCheckOut().click();
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);

	}

	@Override
	public void fillStudentFlyerOrderWithSpecificField(String fieldName, Configuration data) {
		waitForPageToload();

		if (fieldName.equalsIgnoreCase("studentName")) {
			String studentName = data.getString("studentname");
			getTxtStudentName().clear();
			getTxtStudentName().click();
			getTxtStudentName().sendKeys(studentName);
		} else {
			String item = data.getString("itemid");
			getTxtItemNumber().click();
			getTxtItemNumber().sendKeys(item);
		}
		if (data.getString("autocomplete") != null && data.getString("autocomplete") == "true") {
			PauseUtil.pause(5000);
			verifyAutoComplete();
		}
	}

	/**
	 * This method fill apply coupons form after click on apply coupons link on
	 * student flyer order page
	 *
	 * @param studentName
	 * @param coupons
	 */
	@Override
	public void applyCoupons(String studentName, String coupons) {
		getTxtCouponsStudentName().sendKeys(studentName);
		getTxtItemNumber().sendKeys(coupons);
		getBtnApplyCoupons().click();
	}

	/**
	 * This Method Click On ApplyCoupon link in Student Flyer Order Page
	 */
	@Override
	public void clickOnApplyCouponLink() {
		SCHUtils.waitForLoaderToDismiss();
		SCHUtils.clickUsingJavaScript(getLnkApplyCoupon());
		// getLnkApplyCoupon().click();
	}

	/**
	 * this method return instance of product order table Section which is
	 * appears after adding the student name and item id
	 */
	@Override
	public IProductOrderTableSection getIProductOrderTableSection() {
		return SectionFactory.getFactory()
				.getIProductOrderTableSection(LocatorUtils.getBy("dw.product.studentordertable.cmp"));

	}

	/**
	 * this method return instance of Coupon Section which is appears after
	 * clicking on apply coupons link on SFO page
	 */
	/*
	 * @Override public ICouponSection getICouponSection() { return
	 * SectionFactory .getFactory() .getCouponSection( LocatorUtils
	 * .getBy("dw.teacher.studentflyerorder.coupon.popup.parent.couponmodal"));
	 * }
	 */
	/**
	 * /* This Method Clicks Id or Title from student Order Table based on test
	 * data flag. /**
	 * 
	 */
	@Override
	public void clickOnItemAddedOnStudentFlyerTable(Configuration data) {
		WaitUtils.waitForDisabled(getBtnAdd());
		IStudentFlyerOrdersPage studentFlyerOrdersPage = getFactory().getIStudentFlyerOrdersPage();
		studentFlyerOrdersPage.getIProductOrderTableSection().clickOnItemAddedOnStudentTable(data);
	}

	@Override
	public void waitForPageToload() {
		// PauseUtil.pause(3000);
		try {
			SCHUtils.waitForLoaderToDismiss();
			WaitUtils.waitForDisplayed(getLblTitle());
		} catch (Exception e) {
		}
	}

	/**
	 * This Method Click On review cart button in Student Flyer Order Page
	 */
	@Override
	public void clickOnReviewCart() {
		new StudentFlyerOrdersPage();
		SCHUtils.clickUsingJavaScript(getBtnReviewCart());

		// Code to handle popup on cart page for new accounts
		PauseUtil.pause(3000);
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete();
		ICartPage cartPage = getFactory().getICartPage();

		if (SCHUtils.isPresent(cartPage.getStudentFlyerOrdersCartSection().getBtnPopupClose())) {
			cartPage.getStudentFlyerOrdersCartSection().getBtnPopupClose().click();
		}
	}

	@Override
	public void reviewCartPageMiniPDPDisplays() {
		// validate the display for miniPDP
		AssertUtils.assertDisplayed(getMiniPDP_reviewCartpage());
	}

	@Override
	public void verifyItemNo_ReviewCartpage(String itemNo) {
		boolean flag = true;
		List<WebElement> cartTable1 = getTableReviewCartTable();
		for (WebElement cartTable : cartTable1) {
			List<WebElement> cartTabletr1 = cartTable.findElements(By.tagName("tr"));
			for (WebElement cartTabletd1 : cartTabletr1) {
				List<WebElement> cartTabletd = cartTabletd1.findElements(By.tagName("td"));
				System.out.println("td count >>>>>>>>>>" + cartTabletd.size());
				String readIteamid = cartTabletd.get(1).findElement(By.tagName("a")).getText();
				System.out.println("readitemid" + readIteamid);
				if (readIteamid.trim().equals(itemNo)) {
					flag = true;
					break;

				}

			}
		}
		Assert.assertEquals(true, flag, "No books found");
	}

	/**
	 * This Method Click On Review Order Link in Student Flyer Order Page
	 */
	@Override
	public void clickOnReviewOrderLink() {
		SCHUtils.scrollToView(getLnkReviewOrder());
		AssertUtils.assertDisplayed(getLnkReviewOrder());
		AssertUtils.assertEnabled(getLnkReviewOrder());
		SCHUtils.clickUsingJavaScript(getLnkReviewOrder());
	}

	/**
	 * This method verify default text in student name and item ID along with
	 * disabled status of add button and apply coupon link
	 */
	@Override
	public void verifyDefaultValueOfStudentFlyerOrder() {
		waitForPageToload();
		Assert.assertEquals(getLblSubTitle().getText(), ConstantUtils.SFO_SUBTITLE);
		AssertUtils.assertDisplayed(getLblStudentName());
		Assert.assertEquals(getTxtStudentName().getAttribute("placeholder").toString(),
				ConstantUtils.DEFAULT_STUDENT_NAME_TEXT);
		Assert.assertEquals(getTxtItemNumber().getAttribute("placeholder").toString(),
				ConstantUtils.DEFAULT_ITEM_ID_TEXT);
		AssertUtils.assertDisplayed(getLnkApplyCoupon());
		AssertUtils.assertDisabled(getBtnAdd());

	}

	/**
	 * this method will perform validations for add button functionality
	 */
	@Override
	public void validateAddButtonFuncationality(Configuration testData) {
		waitForPageToload();
		AssertUtils.assertDisabled(getBtnAdd());
		getTxtStudentName().clear();
		getTxtStudentName().sendKeys(testData.getString("validstudent"));
		getTxtItemNumber().sendKeys(testData.getString("validitem"));
		AssertUtils.assertEnabled(getBtnAdd());
		Assert.assertTrue(SCHUtils.isAlphaNumeric(testData.getString("validitem")), "The String is not alphanumeric");
		getTxtStudentName().sendKeys(testData.getString("validstudent"));
		getTxtItemNumber().sendKeys(testData.getString("invaliditem"));
		AssertUtils.assertDisplayed(getLblErrorMessage());
		getTxtItemNumber().sendKeys(testData.getString("teacheronlyitem"));
		AssertUtils.assertDisplayed(getLblErrorMessage());
		getTxtItemNumber().sendKeys(testData.getString("BPonlyitems"));
		AssertUtils.assertDisplayed(getLblErrorMessage());
	}

	/**
	 * this method will verify item total count of unique student names in order
	 * table on SFO page with the count shown in SFO tab
	 */
	@Override
	public void verifyItemTotalCountOnSFOTab() {
		int totalItemsOnProductOrderTable = getIProductOrderTableSection().getTotalStudentOnProductTable();
		AssertUtils.assertTextMatches(getLblSFOTabOrderCount(),
				Matchers.containsString(String.valueOf(totalItemsOnProductOrderTable)));
	}

	/**
	 * this method will perform Error message validations on SFO page on
	 * searching invalid items
	 *
	 * @param errorMessage
	 */
	@Override
	public void verifyStudentFlyerOrderErrorMessage(String errorMessage) {
		// TODO Auto-generated method stub
		System.out.println(getStudentFlyerOrderErrorMessage().getText());
		AssertUtils.assertTextMatches(getStudentFlyerOrderErrorMessage(), Matchers.containsString(errorMessage));

	}

	/*
	 * this method is used to check maximum character limit for studentname text
	 * field.
	 * 
	 * @param studentName
	 */
	@Override
	public void verifyMaxCharLimitForStudentName(String studentName) {
		getTxtStudentName().sendKeys(studentName);
		int studentNameLength = getTxtStudentName().getText().length();
		Assert.assertEquals(!(studentNameLength > 20), true);
	}

	/* this method is used to validate student roster */
	@Override
	public void verifyStudentRoster(Configuration data) {

		getTxtStudentName().click();
		new StudentFlyerOrdersPage();
		AssertUtils.assertDisplayed(getDrpRosterStudentName());

		fillStudentFlyerOrder(data.getString("alphanumericstudentname"), data.getString("itemid"));
		verifyMaxCharLimitForStudentName(data.getString("studentnamemorethantwenty"));

		String firstListElement = getLstRosterStudentName().get(0).getText();
		getTxtStudentName().clear();
		getTxtStudentName().sendKeys(firstListElement.substring(0, 1));
		PauseUtil.waitForAjaxToComplete(2000);
		Assert.assertEquals(firstListElement.substring(0, 1)
				.equalsIgnoreCase(getLstRosterStudentName().get(0).getText().substring(0, 1)), true);
		Assert.assertEquals(firstListElement.substring(0, 1).contains(getLblStudentBoldLetterOrName().getText()), true);
		String firstListElementBeforeEnter = getLstRosterStudentName().get(0).getText();
		getTxtStudentName().sendKeys(Keys.DOWN);
		getTxtStudentName().sendKeys(Keys.ENTER);
		PauseUtil.waitForAjaxToComplete(1000);
		Assert.assertEquals(firstListElementBeforeEnter.equalsIgnoreCase(getTxtStudentName().getAttribute("value")),
				true);
		getTxtItemNumber().click();
		getTxtStudentName().click();
		getTxtStudentName().clear();

		getTxtStudentName().sendKeys(data.getString("studentname"));
		PauseUtil.waitForAjaxToComplete(4000);
		getTxtStudentName().sendKeys(Keys.DOWN);
		getTxtStudentName().sendKeys(Keys.ENTER);
		PauseUtil.waitForAjaxToComplete(1000);
		Assert.assertTrue(data.getString("studentname").equalsIgnoreCase(getTxtStudentName().getAttribute("value")),
				"Student name in the test field was expected as " + data.getString("studentname") + " but found "
						+ getTxtStudentName().getAttribute("value"));

		getTxtStudentName().clear();
		getTxtStudentName().sendKeys(data.getString("studentname"));
		getTxtItemNumber().sendKeys(data.getString("itemid"));
		getBtnAdd().click();
		PauseUtil.waitForAjaxToComplete(2000);
		Assert.assertEquals(data.getString("studentname").equalsIgnoreCase(getTxtStudentName().getAttribute("value")),
				true);

		getTxtStudentName().click();
		PauseUtil.waitForAjaxToComplete(1000);
		Assert.assertEquals("".equalsIgnoreCase(getTxtStudentName().getAttribute("value")), true);

	}

	/**
	 * this method will perform validations of Student field on SFO page
	 */
	@Override
	public void verifyStudentNameFieldFunctionality() {
		getTxtStudentName().click();
		PauseUtil.pause(2000);
		List<WebElement> StudentNameDropDown = getLstStudentName();

		Assert.assertTrue(StudentNameDropDown.size() > 0, "Student list is not not displayed");

		List<String> StudentNames = new ArrayList<String>();
		for (WebElement webElement : StudentNameDropDown) {
			if (webElement.getText() != null && webElement.getText().length() != 0) {
				StudentNames.add(webElement.getText());
			}
		}
		List<String> listSorted = new ArrayList<String>(StudentNames);
		// Sorts the new list.
		Collections.sort(listSorted);
		// Check if both of list are equals.
		Assert.assertTrue(listSorted.equals(StudentNames), "Student list is not in alphabetical order");
		if (getLstStudentName().size() > 10) {
			AssertUtils.assertDisplayed(getLstStudentNameScroll());

		}

		// Tooltip verification
		getLnkStudentNameTooltip().click();
		AssertUtils.assertDisplayed(getLnkStudentNameTooltipBody());
	}

	/**
	 * this method will perform placeholder validations of both student name and
	 * itemid fields
	 */
	@Override
	public void verifyStudentOrderFieldinInStudentFlyerOrder() {
		AssertUtils.assertAttributeMatches(getTxtStudentName(), "placeholder",
				Matchers.containsString(ConstantUtils.DEFAULT_STUDENT_NAME_TEXT));
		AssertUtils.assertAttributeMatches(getTxtItemNumber(), "placeholder",
				Matchers.containsString(ConstantUtils.DEFAULT_ITEM_ID_TEXT));
	}

	/**
	 * this method will perform item field validations
	 */
	@Override
	public void verifyItemIdField(String itemNumber) {
		int actuallength = itemNumber.length();
		System.out.println("Actual Length-" + actuallength);
		getTxtItemNumber().sendKeys(itemNumber);
		int itemnumberlength = getTxtItemNumber().getAttribute("value").length();
		System.out.println("ItemLength-" + itemnumberlength);
		Assert.assertEquals((itemnumberlength != actuallength), true);
		Assert.assertEquals((itemnumberlength == 6), true);
	}

	/**
	 * this method will verify records after removing item from SFO order table
	 */
	@Override
	public void verifyUpdatedRecordsAfterRemoval(Configuration testData) {
		HashMap<String, ProductInfoBean> itemDeleted = SCHUtils.getSFORemovedProductItems();
		String[] student = SCHUtils.getArrayFromStringData(testData.getString("studentname"));
		String[] itemid = SCHUtils.getArrayFromStringData(testData.getString("itemid"));
		if (student.length > 0) {
			if (!itemDeleted.containsKey(itemid[0] + student[0])) {
				Assert.assertTrue(true, "Item is not deleted");
			}
		}
	}

	/**
	 * this method return instance of product order table Section which is
	 * appears after adding the student name and item id
	 */
	@Override
	public IProductOrderSummarySection getIProductOrderSummarySection() {
		return SectionFactory.getFactory()
				.getIProductOrderSummarySection(LocatorUtils.getBy("dw.product.order.summary.cmp"));

	}

	/**
	 * this method will click on SFO tab in Header portion
	 */
	@Override
	public void clickOnSFO() {
		getTabSFO().click();
	}

	@Override
	public void verifyStudentNameInRoster(Configuration data) {

		String[] Students = SCHUtils.getArrayFromStringData(data.getString("studentname"));
		for (WebElement student : getLstRosterStudentName()) {
			if (student.getText().equalsIgnoreCase(Students[0])) {
				break;
			} else {
				Assert.assertTrue(false);
			}

		}

	}

	@Override
	public void selectFromRoster() {
		getTxtStudentName().click();
		PauseUtil.waitForAjaxToComplete(1000);
		TestBaseProvider.getTestBase().getTestData().setProperty(ConstantUtils.SFO_SELECTED_ROSTER_NAME,
				getLstRosterStudentName().get(0).getText());
		getLstRosterStudentName().get(0).click();
	}

	@Override
	public void verifySelectedRoster() {
		AssertUtils.assertAttributeMatches(getTxtStudentName(), "value", Matchers.containsString(
				TestBaseProvider.getTestBase().getTestData().getString(ConstantUtils.SFO_SELECTED_ROSTER_NAME)));
	}

	/*
	 * @Override public void addscoupon(Configuration testData) {
	 * getLnkApplyCoupon().click();
	 * WaitUtils.waitForDisplayed(getTxtCouponsStudentName());
	 * getICouponSection().addCoupon(testData); }
	 */

	@Override
	public void verifycouponConfirmation() {
		AssertUtils.assertDisplayed(getLblCouponToolTip());
	}

	/**
	 * this method return instance of Coupon Section which is appears after
	 * clicking on apply coupons link on SFO page
	 */
	@Override
	public ICouponSection getICouponSection() {
		return SectionFactory.getFactory()
				.getCouponSection(LocatorUtils.getBy("dw.teacher.studentflyerorder.coupon.popup.parent.couponmodal"));

	}

	@Override
	public void addscoupon(Configuration testData) {
		PauseUtil.waitForAjaxToComplete(5000);
		getLnkApplyCoupon().click();
		WaitUtils.waitForDisplayed(getTxtCouponsStudentName());
		getICouponSection().addSFOCoupoun(testData);
		getICouponSection().addCoupon(testData);
	}

	@Override
	public void enterCoupon(Configuration testData) {
		PauseUtil.waitForAjaxToComplete(5000);
		PauseUtil.pause(2000);
		getLnkApplyCoupon().click();
		WaitUtils.waitForDisplayed(getTxtCouponsStudentName());
		getICouponSection().addSFOCoupoun(testData);

	}

	@Override
	public void verifyaddedcoupon(Configuration testData) {
		PauseUtil.waitForAjaxToComplete(5000);
		getICouponSection().verifyAppliedCouponsOnModal(testData);
	}

	@Override
	public void removeaddedfreeitem(Configuration testData) {
		PauseUtil.waitForAjaxToComplete(5000);
		getICouponSection().deleteSelectedItemOnModal(testData);
	}

	@Override
	public void deleteAllItemOnModal() {
		PauseUtil.pause(3000);
		if (null != getLnkToModalRemoveItem()) {
			for (WebElement webElement : getLnkToModalRemoveItem()) {
				webElement.click();
				PauseUtil.pause(2000);
				getBtnRemoveCouponYes().click();
			}
		}
	}
	//

	@Override
	public void verifyOrderTabs() {
		assertDisplayed(getTabSFO());
		assertDisplayed(getTabSOO());
		assertDisplayed(getTabYTO());
	}

	@Override
	public void verifyBlankCouponsEntryForm() {
		AssertUtils.assertAttributeMatches(getTxtCouponsStudentName(), "placeholder",
				Matchers.containsString(ConstantUtils.DEFAULT_STUDENT_NAME_TEXT_ON_COUPON));
		AssertUtils.assertAttributeMatches(getTxtCouponNumber(), "placeholder",
				Matchers.containsString(ConstantUtils.DEFAULT_COUPON_ITEM_ID_TEXT));
		Assert.assertTrue(getTxtCouponsStudentName().getText().isEmpty(),
				"student name field is not blank on coupan modal on sfo page");
		Assert.assertTrue(getTxtCouponNumber().getText().isEmpty(),
				"student coupon number field is not blank on coupan modal on sfo page");
		Assert.assertFalse(getBtnApplyCoupons().isEnabled(), "Apply button is not Disabled");
	}

	@Override
	public void closeCoupanModalOnSFO() {
		PauseUtil.pause(500);
		SCHUtils.clickUsingJavaScript(getLnkCloseCouponModal());
	}

	@Override
	public void fillSFOForm(String studentName, String Itemid) {
		getTxtStudentName().click();
		getTxtStudentName().sendKeys(studentName);
		getTxtItemNumber().click();
		getTxtItemNumber().sendKeys(Itemid);
	}

	@Override
	public void verifyStudentNameOnSfoCouponModal(String studentName) {
		WaitUtils.waitForDisplayed(getTxtStudentName());
		AssertUtils.assertAttributeMatches(getTxtCouponsStudentName(), "value", Matchers.containsString(studentName));
		getTxtCouponNumber().clear();

	}

	/*
	 * This method is to verify that a tab and its child tab is active,parameter
	 * will be "css-id of tab" and "text of child tab" (parametrized for all
	 * tabs and their child on of SFO Page)
	 */
	@Override
	public void verifyTabAndChildTabIsActive(String tabId, String childTabText) {
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.pause(3000);
		AssertUtils.assertDisplayed(getIsActiveTabById(tabId));
		AssertUtils.assertDisplayed(getIsActiveChildTab(childTabText));
	}

	@Override
	public void EnterCouponAndSelectApplyOnSFOPage(Configuration testData) {
		PauseUtil.pause(5000);
		getLnkApplyCoupon().click();
		WaitUtils.waitForDisplayed(getTxtCouponsStudentName());
		getICouponSection().addInvalidSFOCoupoun(testData);

	}

	@Override
	public void enterStudentNameOnSFOPage(String studentName) {
		getTxtStudentName().clear();
		getTxtStudentName().click();
		getTxtStudentName().sendKeys(studentName);
		PauseUtil.pause(2000);

	}

	@Override
	public void clickOnAddCouponLinkOnSFO() {
		getLnkApplyCoupon().click();
		PauseUtil.pause(2000);

	}

	@Override
	public void verifyStudentNamePrepopulatedOnCouponModule(String studentName) {
		String populatedStudentName = getTxtCouponsStudentName().getAttribute("value");

		Assert.assertEquals(studentName, populatedStudentName);

		String couponFieldPlaceHolder = getTxtCouponNumber().getAttribute("placeholder");
		Assert.assertEquals(couponFieldPlaceHolder, "e.g.3P3RW");

		PauseUtil.pause(2000);

	}

	@Override
	public void enterCouponInCouponModule(String couponNumber) {
		getTxtCouponNumber().click();
		getTxtCouponNumber().clear();
		getTxtCouponNumber().sendKeys(couponNumber);
		PauseUtil.pause(1000);

	}

	@Override
	public void verifyApplyCouponButtonIsInActive() {
		getICouponSection().verifyApplyCouponButtonInActive();

	}

	@Override
	public void clickOnApplyCouponButtonOnCouponModal() {
		getICouponSection().clickApplyOnCouponModal();

	}

	public void verifyAutoComplete() {
		System.out.println("Actual Size = " + getLstRosterStudentName().size());
		Assert.assertTrue(getLstRosterStudentName().size() == 10,
				"Found Roster Student History Count As" + getTxtStudentName().getSize());
	}

	@Override
	public void verifyeSortedStudentList() {
		SCHUtils.waitForLoaderToDismiss();
		getTxtStudentName().clear();
		getTxtStudentName().click();
		List<String> studentNames = new ArrayList<String>();
		// Starting loop from index 1
		for (int i = 1; i < getLstRosterStudentName().size(); i++) {
			studentNames.add(getLstRosterStudentName().get(i).getText());
		}
		List<String> sortedList = new ArrayList<String>(studentNames);
		Collections.sort(sortedList);
		for (int i = 0; i < sortedList.size(); i++) {
			System.out.println("child Name :============================" + sortedList.get(i));
		}
		Assert.assertTrue(sortedList.equals(studentNames), "Student list is not in alphabetical order");
	}

	@Override
	public void selectStudentName(String studName) {
		SCHUtils.waitForLoaderToDismiss();
		for (WebElement student : getLstRosterStudentName()) {
			if (student.getText().equalsIgnoreCase(studName)) {
				student.click();
			}
		}
	}

	@Override
	public void enterStudentNameAndItemNumberOnSFO(String studentName, String itemId) {
		getTxtStudentName().clear();
		getTxtStudentName().click();
		getTxtStudentName().sendKeys(studentName);
		getTxtStudentName().click();
		// clicking on LBL Title as Item number field is not visible as Student
		// name dropdown cums overon it
		getLblTitle().click();
		PauseUtil.pause(1000);
		getTxtItemNumber().click();
		getTxtItemNumber().sendKeys(itemId);
		getTxtItemNumber().click();
		PauseUtil.pause(1000);

	}

	@Override
	public void verifyAddButtonIsActive() {
		AssertUtils.assertEnabled(getBtnAdd());

	}

	@Override
	public void clickOnAddButton(Configuration testData) {
		getBtnAdd().click();
		if (!SCHUtils.isPresent(getLblErrorMessage())) {
			getDriver().navigate().refresh();
			SCHUtils.waitForLoaderToDismiss();
			PauseUtil.pause(2000);
			if (SCHUtils.isPresent(getBtnEnterOrderClosePopup())) {
				try {
					SCHUtils.clickUsingJavaScript(getBtnEnterOrderClosePopup());
				} catch (Exception e) {
				}
			}
			SCHUtils.addSFOProductItem(getIProductOrderTableSection()
					.fillSFOProductBean(testData.getString("studentname"), testData.getString("itemid")));
		}
	}

	@Override
	public void enterAndVerifyWrongItemErrorMessages(Configuration testData) {
		getTxtStudentName().sendKeys(testData.getString("validstudent"));
		getTxtItemNumber().sendKeys(testData.getString("invaliditem"));
		AssertUtils.assertDisplayed(getLblErrorMessage());
		getTxtItemNumber().sendKeys(testData.getString("teacheronlyitem"));
		AssertUtils.assertDisplayed(getLblErrorMessage());
		getTxtItemNumber().sendKeys(testData.getString("BPonlyitems"));
		AssertUtils.assertDisplayed(getLblErrorMessage());
	}

	@Override
	public void verifyReviewCartStudentTeacherClubTotalsLabel() {

		AssertUtils.assertTextMatches(getlblreviewcartstudentclubtotal(),
				Matchers.equalToIgnoringCase(ConstantUtils.REVIEWCARTSTUDENTCLUBTOTALLABEL));

		AssertUtils.assertTextMatches(getlblreviewcartteacherclubstotal(),
				Matchers.equalToIgnoringCase(ConstantUtils.REVIEWCARTTEACHERCLUBTOTALLABEL));

	}

	@Override
	public void verifyConfirmSubmitStudentTeacherClubTotalsLabel() {

		AssertUtils.assertTextMatches(getlblconfirmsubmitstudentclubtotal(),
				Matchers.equalToIgnoringCase(ConstantUtils.REVIEWCARTSTUDENTCLUBTOTALLABEL));

		AssertUtils.assertTextMatches(getlblconfirmsubmitteacherclubstotal(),
				Matchers.equalToIgnoringCase(ConstantUtils.REVIEWCARTTEACHERCLUBTOTALLABEL));

	}

	@Override
	public void clickOnItemFromSFOOrderTable() {
		getLblItemSFOOrderTable().click();

	}

	@Override
	public void verifyItemsSortedInAscendingOrder() {

		List<String> items = new ArrayList<String>();
		for (WebElement webElement : getLstItemSFOOrderTable()) {
			if (webElement.getText() != null && webElement.getText().length() != 0) {
				items.add(webElement.getText());
			}
		}
		List<String> listSorted = new ArrayList<String>(items);
		// Sorts the new list.
		Collections.sort(listSorted);
		// Check if both of list are equals.
		Assert.assertTrue(listSorted.equals(items), "Item are not in ascending order");
	}

	@Override
	public void verifyInvalidStudentNameErrorMessage() {
		WaitUtils.waitForDisplayed(getLblErrorMessage());
		AssertUtils.assertDisplayed(getLblErrorMessage());
		AssertUtils.assertTextMatches(getLblErrorMessage(),
				Matchers.equalToIgnoringCase(ConstantUtils.INVALID_STUDENTNAME_ERROR));

	}

	@Override
	public void verifyTeacherOnlyCouponErrorMessage() {
		AssertUtils.assertDisplayed(getLblErrorMessage());
		AssertUtils.assertTextMatches(getLblErrorMessage(),
				Matchers.containsString(ConstantUtils.ORDER_NOT_MEET_COUPON_REQUIREMENTS_MSG));
	}

	@Override
	public void verifyMaxTwentyAlphanumericCharForStudentNameField(String studentName, int maxSize) {

		String strMaxsize = Integer.toString(maxSize);
		getTxtStudentName().clear();
		getTxtStudentName().sendKeys(studentName);
		getTxtStudentName().sendKeys(Keys.ENTER);
		PauseUtil.waitForAjaxToComplete(1000);
		Assert.assertEquals(getTxtStudentName().getAttribute("value").length(), maxSize);
		AssertUtils.assertAttributeMatches(getTxtStudentName(), "maxlength", Matchers.containsString(strMaxsize));

	}

	@Override
	public void verifyTabIsActive(String tabId) {
		PauseUtil.pause(3000);
		AssertUtils.assertDisplayed(getIsActiveTabById(tabId));
	}

	@Override
	public void enterItemOnSFO(String itemid) {
		getTxtItemNumber().clear();
		getTxtItemNumber().sendKeys(itemid);
		PauseUtil.pause(2000);

	}

	@Override
	public void verifyStudentNamePopullatedInStudentNameField(String studentName) {
		Assert.assertEquals(getTxtStudentName().getAttribute("value"), studentName);
	}

	@Override
	public void clickOnLblStudentNameOrderTable() {
		waitForPageToload();
		getLblStudentNameSFOOrderTable().click();

	}

	@Override
	public void verifyStudentNameAscendingOrderSort() {
		List<String> studentNames = new ArrayList<String>();
		for (WebElement ele : getLstStudentName()) {
			studentNames.add(ele.getText());
		}
		List<String> sortedList = new ArrayList<String>(studentNames);
		Collections.sort(sortedList);
		Assert.assertTrue(sortedList.equals(studentNames), "Student list is not in alphabetical order");

	}

	@Override
	public void verifyStudentNameDescendingOrderSort() {
		List<String> studentNames = new ArrayList<String>();
		for (WebElement ele : getLstStudentName()) {
			studentNames.add(ele.getText());
		}
		List<String> sortedList = new ArrayList<String>(studentNames);
		Collections.sort(sortedList, Collections.reverseOrder());
		Assert.assertTrue(sortedList.equals(studentNames), "Student list is not in descending order");
	}

	@Override
	public void verifyItemsAscendingOrderSort() {
		List<String> items = new ArrayList<String>();
		for (WebElement ele : getLstItemSFOOrderTable()) {
			items.add(ele.getText());
		}
		List<String> sortedList = new ArrayList<String>(items);
		Collections.sort(sortedList);
		Assert.assertTrue(sortedList.equals(items), "Items list is not in alphabetical order");

	}

	@Override
	public void verifyItemsDescendingOrderSort() {
		List<String> items = new ArrayList<String>();
		for (WebElement ele : getLstItemSFOOrderTable()) {
			items.add(ele.getText());
		}
		List<String> sortedList = new ArrayList<String>(items);
		Collections.sort(sortedList, Collections.reverseOrder());
		Assert.assertTrue(sortedList.equals(items), "Items list is not in descending order");
	}

	@Override
	public void clickOnFlyerFromSFOOrderTable() {
		WaitUtils.waitForDisplayed(getLblFlyerSFOOrderTable());
		getLblFlyerSFOOrderTable().click();
	}

	@Override
	public void verifyFlyerDescendingOrderSort() {
		List<String> flyers = new ArrayList<String>();
		for (WebElement ele : getLstFlyerSFOOrderTable()) {
			flyers.add(ele.getText());
		}
		List<String> sortedList = new ArrayList<String>(flyers);
		Collections.sort(sortedList, Collections.reverseOrder());
		Assert.assertTrue(sortedList.equals(flyers), "Flyer list is not in descending order");
	}

	@Override
	public void verifyFlyerAscendingOrderSort() {
		List<String> flyers = new ArrayList<String>();
		for (WebElement ele : getLstFlyerSFOOrderTable()) {
			flyers.add(ele.getText());
		}
		List<String> sortedList = new ArrayList<String>(flyers);
		Collections.sort(sortedList);
		Assert.assertTrue(sortedList.equals(flyers), "Flyer list is not in Ascending order");
	}

	@Override
	public void verifyAddedDataOrderInSFOOrderTable(Configuration testData) {

		String studentName[] = SCHUtils.getArrayFromStringData(testData.getString("studentname"));
		List<String> listStudentname = new ArrayList<String>();

		listStudentname.addAll(Arrays.asList(studentName));

		List<String> studentNames = new ArrayList<String>();
		for (WebElement ele : getLstStudentNameSFOOrderTable()) {
			studentNames.add(ele.getText());
		}

		System.out.println(listStudentname);
		System.out.println(studentNames);

		Collections.reverse(listStudentname);

		Assert.assertTrue(listStudentname.equals(studentNames),
				"Data in order table is not in order tha data has beed added");
	}

	@Override
	public void clickOnCouponSort() {
		getLblCouponSort().click();
	}

	@Override
	public void verifyAutosuggestionOnSFOFields(Configuration testData) {
		getTxtStudentName().click();
		new StudentFlyerOrdersPage();
		AssertUtils.assertDisplayed(getDrpRosterStudentName());

	}

	@Override
	public void clickOnAddButtonAndVerifyUpdateToSavedButton(Configuration testData) {
		getBtnAdd().click();

		AssertUtils.assertDisplayed(getBtnSaved());

		if (!SCHUtils.isPresent(getLblErrorMessage())) {
			getDriver().navigate().refresh();
			SCHUtils.waitForLoaderToDismiss();
			PauseUtil.pause(2000);
			if (SCHUtils.isPresent(getBtnEnterOrderClosePopup())) {
				try {
					SCHUtils.clickUsingJavaScript(getBtnEnterOrderClosePopup());
				} catch (Exception e) {
				}
			}
			SCHUtils.addSFOProductItem(getIProductOrderTableSection()
					.fillSFOProductBean(testData.getString("studentname"), testData.getString("itemid")));
		}

	}

	@Override
	public void verfiyAutoSuggestionFunctionality(Configuration testData) {
		getTxtStudentName().clear();
		getTxtStudentName().click();
		getTxtStudentName().sendKeys(testData.getString("studentname"));
		AssertUtils.assertDisplayed(getDrpAutosuggestions().get(0));

		getTxtItemNumber().click();
		getTxtItemNumber().sendKeys(testData.getString("itemid"));
		AssertUtils.assertDisplayed(getDrpAutosuggestions().get(0));

	}

	@Override
	public void clickOnColumnFromSFOOrderTable(String columnName) {
		PauseUtil.pause(3000);
		WaitUtils.waitForDisplayed(getLblStudentName());
		if (columnName.equalsIgnoreCase("STUDENT NAME")) {
			getLblColumnNameSFOOrdertable("NAME").click();
			System.out.println("*******click");
		}
		getLblColumnNameSFOOrdertable(columnName).click();
		System.out.println("click on........" + columnName);
	}

	@Override
	public void verifyTitleDescendingOrderSort() {
		List<String> title = new ArrayList<String>();
		for (WebElement ele : getLstTitleSFOOrderTable()) {
			title.add(ele.getText());
		}
		List<String> sortedList = new ArrayList<String>(title);
		Collections.sort(sortedList, Collections.reverseOrder());
		Assert.assertTrue(sortedList.equals(title), "Flyer list is not in descending order");
	}

	@Override
	public void verifyTitleAscendingOrderSort() {
		List<String> title = new ArrayList<String>();
		for (WebElement ele : getLstTitleSFOOrderTable()) {
			title.add(ele.getText());
		}
		List<String> sortedList = new ArrayList<String>(title);
		Collections.sort(sortedList);
		Assert.assertTrue(sortedList.equals(title), "Flyer list is not in Ascending order");

	}

	@Override
	public void verifyPriceAscendingOrderSort() {
		List<String> price = new ArrayList<String>();
		for (WebElement ele : getLstPricesSFOOrderTable()) {
			price.add(ele.getText());
		}
		price.remove("FREE");
		List<String> sortedList = new ArrayList<String>(price);
		System.out.println(price);
		Collections.sort(sortedList);
		System.out.println(sortedList);
		Assert.assertTrue(sortedList.equals(price), "Flyer list is not in Ascending order");

	}

	@Override
	public void verifyPriceDescendingOrderSort() {
		List<String> price = new ArrayList<String>();
		for (WebElement ele : getLstPricesSFOOrderTable()) {
			price.add(ele.getText());
		}
		price.remove("FREE");
		List<String> sortedList = new ArrayList<String>(price);
		Collections.sort(sortedList, Collections.reverseOrder());
		Assert.assertTrue(sortedList.equals(price), "Flyer list is not in descending order");

	}

	@Override
	public void verifyDescriptionofItem(Configuration data) {
		PauseUtil.pause(2000);
		AssertUtils.assertDisplayed(getItemDescription());

	}

	@Override
	public void verifyHideDetails(Configuration data) {
		PauseUtil.pause(2000);
		AssertUtils.assertDisplayed(getItemHideDetails());

	}

	@Override
	public void verifyRecommendedButton() {
		AssertUtils.assertDisplayed(getRecommendedBeforeSelected());
		getRecommendedBeforeSelected().click();

		AssertUtils.assertDisplayed(getRecommendedAfterSelected());
	}

	@Override
	public void verifyWishListButton() {
		AssertUtils.assertDisplayed(getWishlistBeforeSelected());
		getWishlistBeforeSelected().click();
		AssertUtils.assertDisplayed(getWishlistAfterSelected());
	}

	@Override
	public void verifyCouponsAscendingOrderSort() {
		List<String> items = new ArrayList<String>();
		for (WebElement ele : getListCoupons()) {
			items.add(ele.getText());
		}
		List<String> sortedList = new ArrayList<String>(items);
		Collections.sort(sortedList);
		Assert.assertTrue(sortedList.equals(items), "Items list is not in alphabetical order");

	}

	@Override
	public void verifyCouponsDescendingOrderSort() {
		List<String> items = new ArrayList<String>();
		for (WebElement ele : getListCoupons()) {
			items.add(ele.getText());
		}
		List<String> sortedList = new ArrayList<String>(items);
		Collections.sort(sortedList, Collections.reverseOrder());
		Assert.assertTrue(sortedList.equals(items), "Items list is not in descending order");
	}

	@Override
	public void clickOnItemTitle() {
		getOrderTableItemTitle().get(0).click();
	}

	@Override
	public void clickOnOrderTableHideDetail() {
		getOrderTableHideDetail().click();
	}

	@Override
	public void clickonAnotherItemOfOrderTable() {
		if (getOrderTableItemTitle().size() > 0) {
			getOrderTableItemTitle().get(1).click();
		}
	}

	@Override
	public void hidePreviousItemDetailInOrderTable() {

		AssertUtils.assertTextNotMatches(getOrderTableItemTitle().get(0),
				Matchers.containsString(getListOrderTableDetail().get(0).getText()));

	}

	@Override
	public void verifyReviewSFOTitle() {
		AssertUtils.assertDisplayed(getReviewSFOTitle());
		AssertUtils.assertTextMatches(getReviewSFOTitle(), Matchers.containsString("Review Student Flyer Orders"));
	}

	@Override
	public void verifyReviewCartbtnonReviewSFO() {
		AssertUtils.assertDisplayed(getBtnReviewCart());

	}

	@Override
	public void verifyReviewOrderOnSFO() {
		AssertUtils.assertDisplayed(getLnkReviewOrder());
		AssertUtils.assertEnabled(getLnkReviewOrder());
	}

	@Override
	public void verifyExistanceofPopUp() {
		PauseUtil.pause(2000);
		if (SCHUtils.isPresent(getBtnPopUpClose())) {
			SCHUtils.clickUsingJavaScript(getBtnPopUpClose());
		}
	}

	@Override
	public void verifyErrorMessageForCoupons(Configuration testData) {

		AssertUtils.assertTextMatches(getLblErrorMessage(),
				Matchers.containsString(testData.getString("errorMessage")));
	}

	@Override
	public void waitForPageLoad() {
		// TODO Auto-generated method stub

	}

	@Override
	public void verifyItemIsAddedOnReviewOrderSFO(String studentName, String itemID) {
		// TODO Auto-generated method stub

	}

	@Override
	public void removeItemsFromReviewOrderPage(Configuration data) {
		// TODO Auto-generated method stub

	}

	@Override
	public void verifyDeleteOptionDisappearOnNoActionOnReviewOrder(Configuration data) {
		// TODO Auto-generated method stub

	}

	@Override
	public void verifyUpdatedRecordsAfterRemovalOnReviewOrder(Configuration data) {
		// TODO Auto-generated method stub

	}

	@Override
	public void editProductQuantityOnReviewOrder(Configuration data) {
		// TODO Auto-generated method stub

	}

	@Override
	public void verifyStudentNamesAscOrder() {
		// TODO Auto-generated method stub

	}

	@Override
	public void clickSFOLink() {
		// TODO Auto-generated method stub

	}

	@Override
	public void clickYTOLink() {
		// TODO Auto-generated method stub

	}

	@Override
	public void verifyStudentLevelOnReviewSFO() {
		// TODO Auto-generated method stub

	}

	@Override
	public ProductInfoBean fillPOProductBean(String itemId, String childName) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void clickOnSOOLink() {
		// TODO Auto-generated method stub

	}

	@Override
	public void verifyButtonState(Configuration testData) {
		// TODO Auto-generated method stub

	}

	@Override
	public void editProductQuantityOnOrderTable(Configuration testData) {
		// TODO Auto-generated method stub

	}

	@Override
	public void verifyTotalPriceQuantity(Configuration testData) {
		// TODO Auto-generated method stub

	}

	@Override
	public void clickOnItemAddedOnStudentTable(Configuration data) {
		// TODO Auto-generated method stub

	}

	@Override
	public void verifyItemQuickLookOnOrderTable(Configuration data) {
		// TODO Auto-generated method stub

	}

	@Override
	public void removeItemsFromReviewOrderPageBasedOnStatus(Configuration testData, String confirmationStatus) {
		// TODO Auto-generated method stub

	}

	@Override
	public void setDefaultChild(String itemId) {
		// TODO Auto-generated method stub

	}

	@Override
	public void verifyDefaultChild(String itemId) {
		// TODO Auto-generated method stub

	}

	@Override
	public void verifyChildList() {
		// TODO Auto-generated method stub

	}

	@Override
	public void clickOnAddChildFromChildDropDown() {
		// TODO Auto-generated method stub

	}

	@Override
	public void removeFreePickItems() {
		// TODO Auto-generated method stub

	}

	@Override
	public void verifyAddedFreePickItem() {
		// TODO Auto-generated method stub

	}

	@Override
	public void removeParentOrderItem(String itemId) {
		// TODO Auto-generated method stub

	}

	@Override
	public void verifyRemovedFreePickItem(Configuration data) {
		// TODO Auto-generated method stub

	}

	@Override
	public void verifyChild(String itemId, String childName) {
		// TODO Auto-generated method stub

	}

	@Override
	public void updateQuantity(String itemId, String childName) {
		// TODO Auto-generated method stub

	}

	@Override
	public void verifyStudentConnectedToTeacher(String childName, String itemId) {
		// TODO Auto-generated method stub

	}

	@Override
	public void setPropertyForNewChild(String itemId, String newChildName, String oldChild) {
		// TODO Auto-generated method stub

	}

	@Override
	public void verifySelectChildForItem(String itemId) {
		// TODO Auto-generated method stub

	}

	@Override
	public void verifyUpdatedChildName(Configuration data, String itemId) {
		// TODO Auto-generated method stub

	}

	@Override
	public WebElement getErrorOnHold() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public WebElement getrevieworderPriceLabel() {

		return revieworderpricelabel;
	}

	@Override
	public void verifyProductDetails(Configuration data) {
		// TODO Auto-generated method stub

	}

	@Override
	public void verifyHideDetailsAndClick(Configuration data) {
		// TODO Auto-generated method stub

	}

	@Override
	public void deleteItemFromParentById(String itemId) {
		// TODO Auto-generated method stub

	}

	@Override
	public void verifyWishListSectionReviewCart(String itemId) {
		// TODO Auto-generated method stub

	}

	@Override
	public void fillStudentFlyerOrder_Promotions(String studentName, String itemQty) {

		List<WebElement> cartTable1 = getTeacherFlyerOrderTable();
		for (WebElement cartTable : cartTable1) {
			int i = 0;
			List<WebElement> cartTabletr1 = cartTable.findElements(By.tagName("tr"));
			for (WebElement cartTabletd1 : cartTabletr1) {
				List<WebElement> cartTabletd = cartTabletd1.findElements(By.tagName("td"));
				cartTabletd.get(2).findElement(By.tagName("input")).click();
				WaitUtils.waitForNotDisplayed(getapplicationLoader());
				getTxtStudentName().clear();
				getTxtStudentName().sendKeys(studentName);
				getBtnStudentNameClose().click();

				WaitUtils.waitForNotDisplayed(getapplicationLoader());
				cartTabletd.get(4).findElement(By.tagName("input")).clear();
				cartTabletd.get(4).findElement(By.tagName("input")).sendKeys(itemQty);
				PauseUtil.pause(2000);
				getrevieworderPriceLabel().click();
				WaitUtils.waitForNotDisplayed(getapplicationLoader());
				// PauseUtil.waitForAjaxToComplete(1000);
				i++;
				if (i == 2)
					break;
			}

		}

	}

	@Override
	public void Wait_for_invisibility_of_locator() {

		WebDriver driver = TestBaseProvider.getTestBase().getDriver();
		WebDriverWait wait = new WebDriverWait(driver, 180);
		wait.until(ExpectedConditions.invisibilityOfElementLocated(By.xpath("//div[@class='loader-indicator']")));
		// WaitUtils.waitForNotDisplayed(Loader_invisibilty());
	}

	@Override
	public void fillStudentFlyerOrder_items_SameMonth() {
		// SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);// soma - as we are getting
												// loading issue. gave this
		PauseUtil.pause(10000);
		Wait_for_invisibility_of_locator();
		grade_Seesaw().click();
		// SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);// soma - as we are getting
												// loading issue. gave this
		PauseUtil.pause(8000);
		Wait_for_invisibility_of_locator();
		field_student1().click();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		studentZoomField().clear();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		studentZoomField().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("sname1"));
		WaitUtils.waitForDisplayed(select_arrow());
		// select_arrow().click();
		// SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);// soma - as we are getting
												// loading issue. gave this
		PauseUtil.pause(6000);
		Wait_for_invisibility_of_locator();
		field_qty1().click();
		field_qty1().clear();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		field_qty1().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("qty1"));
		click_outside().click();
		// SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);// soma - as we are getting
												// loading issue. gave this
		PauseUtil.pause(10000);
		Wait_for_invisibility_of_locator();
		// grade_Arrow().click();
		grade_Elf().click();
		// SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);// soma - as we are getting
												// loading issue. gave this
		PauseUtil.pause(10000);
		Wait_for_invisibility_of_locator();
		field_student1().click();
		PauseUtil.pause(2000);
		Wait_for_invisibility_of_locator();
		studentZoomField().clear();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		studentZoomField().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("sname2"));
		WaitUtils.waitForDisplayed(select_arrow());
		// select_arrow().click();
		// SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);// soma - as we are getting
												// loading issue. gave this
		PauseUtil.pause(6000);
		Wait_for_invisibility_of_locator();
		field_qty1().click();
		field_qty1().clear();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		field_qty1().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("qty2"));
		click_outside().click();
		// SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);// soma - as we are getting
												// loading issue. gave this
		PauseUtil.pause(10000);
		Wait_for_invisibility_of_locator();

		grade_UpMiddleSchool().click();
		// SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);// soma - as we are getting
												// loading issue. gave this
		PauseUtil.pause(10000);
		Wait_for_invisibility_of_locator();
		field_student1().click();
		PauseUtil.pause(2000);
		Wait_for_invisibility_of_locator();
		studentZoomField().clear();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		studentZoomField().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("sname3"));
		WaitUtils.waitForDisplayed(select_arrow());
		// select_arrow().click();
		// SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);// soma - as we are getting
												// loading issue. gave this
		PauseUtil.pause(6000);
		Wait_for_invisibility_of_locator();
		field_qty1().click();
		field_qty1().clear();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		field_qty1().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("qty3"));
		click_outside().click();
		// SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);// soma - as we are getting
												// loading issue. gave this
		PauseUtil.pause(10000);
		Wait_for_invisibility_of_locator();

	}

	@Override
	public void fillStudentFlyerOrder_items_SameMonth_for_to_reach_the_amt_nextTier() {
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(10000);
		Wait_for_invisibility_of_locator();
		grade_Seesaw().click();
		// SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(8000);
		Wait_for_invisibility_of_locator();
		field_student2().click();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		studentZoomField().clear();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		studentZoomField().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("sname4"));
		WaitUtils.waitForDisplayed(select_arrow());
		select_arrow().click();
		// SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(6000);
		Wait_for_invisibility_of_locator();
		field_qty2().click();
		field_qty2().clear();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		field_qty2().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("qty4"));
		click_outside().click();
		// SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(10000);
		Wait_for_invisibility_of_locator();

		grade_Arrow().click();
		// SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(10000);
		Wait_for_invisibility_of_locator();
		field_student2().click();
		PauseUtil.pause(2000);
		Wait_for_invisibility_of_locator();
		studentZoomField().clear();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		studentZoomField().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("sname5"));
		WaitUtils.waitForDisplayed(select_arrow());
		select_arrow().click();
		// SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(6000);
		Wait_for_invisibility_of_locator();
		field_qty2().click();
		field_qty2().clear();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		field_qty2().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("qty5"));
		click_outside().click();
		// SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(10000);
		Wait_for_invisibility_of_locator();

		grade_UpMiddleSchool().click();
		// SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(10000);
		Wait_for_invisibility_of_locator();
		field_student2().click();
		PauseUtil.pause(2000);
		studentZoomField().clear();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		studentZoomField().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("sname6"));
		WaitUtils.waitForDisplayed(select_arrow());
		select_arrow().click();
		// SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(6000);
		Wait_for_invisibility_of_locator();
		field_qty2().click();
		field_qty2().clear();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		field_qty2().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("qty6"));
		click_outside().click();
		// SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(10000);
		Wait_for_invisibility_of_locator();

	}

	@Override
	public void fillStudentFlyerOrder_items_lessthan_req_amount() {
		// SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(10000);
		Wait_for_invisibility_of_locator();
		grade_Seesaw().click();
		// SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(8000);
		Wait_for_invisibility_of_locator();
		field_student1().click();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		studentZoomField().clear();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		studentZoomField().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("sname1"));
		WaitUtils.waitForDisplayed(select_arrow());
		select_arrow().click();
		// SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(6000);
		Wait_for_invisibility_of_locator();
		field_qty1().click();
		field_qty1().clear();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		field_qty1().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("qty1"));
		click_outside().click();
		// SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(10000);
		Wait_for_invisibility_of_locator();

		grade_UpMiddleSchool().click();
		// SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(10000);
		Wait_for_invisibility_of_locator();
		field_student1().click();
		PauseUtil.pause(2000);
		studentZoomField().clear();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		studentZoomField().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("sname3"));
		WaitUtils.waitForDisplayed(select_arrow());
		select_arrow().click();
		// SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(6000);
		Wait_for_invisibility_of_locator();
		field_qty1().click();
		field_qty1().clear();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		field_qty1().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("qty3"));
		click_outside().click();
		// SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(10000);
		Wait_for_invisibility_of_locator();

	}

	@Override
	public void fillStudentFlyerOrder_items_SameMonth_2() {
		// SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);// soma - as we are getting
												// loading issue. gave this
		PauseUtil.pause(10000);
		Wait_for_invisibility_of_locator();
		grade_Seesaw().click();
		// SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);// soma - as we are getting
												// loading issue. gave this
		PauseUtil.pause(8000);
		Wait_for_invisibility_of_locator();
		field_student1().click();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		studentZoomField().clear();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		studentZoomField().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("sname1"));
		WaitUtils.waitForDisplayed(select_arrow());
		select_arrow().click();
		// SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);// soma - as we are getting
												// loading issue. gave this
		PauseUtil.pause(4000);
		Wait_for_invisibility_of_locator();
		field_qty1().click();
		field_qty1().clear();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		field_qty1().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("qty4"));
		click_outside().click();
		// SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);// soma - as we are getting
												// loading issue. gave this
		PauseUtil.pause(10000);
		Wait_for_invisibility_of_locator();

		grade_Arrow().click();
		// SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);// soma - as we are getting
												// loading issue. gave this
		PauseUtil.pause(10000);
		Wait_for_invisibility_of_locator();
		field_student1().click();
		PauseUtil.pause(2000);
		Wait_for_invisibility_of_locator();
		studentZoomField().clear();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		studentZoomField().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("sname2"));
		WaitUtils.waitForDisplayed(select_arrow());
		select_arrow().click();
		// SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);// soma - as we are getting
												// loading issue. gave this
		PauseUtil.pause(4000);
		Wait_for_invisibility_of_locator();
		field_qty1().click();
		field_qty1().clear();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		field_qty1().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("qty5"));
		click_outside().click();
		// SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);// soma - as we are getting
												// loading issue. gave this
		PauseUtil.pause(10000);
		Wait_for_invisibility_of_locator();

		grade_UpMiddleSchool().click();
		// SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);// soma - as we are getting
												// loading issue. gave this
		PauseUtil.pause(10000);
		Wait_for_invisibility_of_locator();
		field_student1().click();
		PauseUtil.pause(2000);
		Wait_for_invisibility_of_locator();
		studentZoomField().clear();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		studentZoomField().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("sname3"));
		WaitUtils.waitForDisplayed(select_arrow());
		select_arrow().click();
		// SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);// soma - as we are getting
												// loading issue. gave this
		PauseUtil.pause(4000);
		Wait_for_invisibility_of_locator();
		field_qty1().click();
		field_qty1().clear();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		field_qty1().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("qty6"));
		click_outside().click();
		// SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);// soma - as we are getting
												// loading issue. gave this
		PauseUtil.pause(10000);
		Wait_for_invisibility_of_locator();

	}

	@Override
	public void fillStudentFlyerOrder_items() {
		PauseUtil.pause(10000);
		Wait_for_invisibility_of_locator();
		grade_Seesaw().click();
		PauseUtil.pause(8000);
		Wait_for_invisibility_of_locator();
		PauseUtil.waitForAjaxToComplete(2500);
		Wait_for_invisibility_of_locator();
		/*field_student1().click();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		studentZoomField().clear();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		studentZoomField().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("sname1"));
		WaitUtils.waitForDisplayed(select_arrow());
		select_arrow().click();
		PauseUtil.pause(4000);
		Wait_for_invisibility_of_locator();*/
		field_qty1().click();
		field_qty1().clear();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		field_qty1().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("qty1"));
		click_outside().click();
		PauseUtil.pause(10000);
		Wait_for_invisibility_of_locator();

	}

	@Override
	public void clicks_on_flyer_and_month() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(10000);
		Wait_for_invisibility_of_locator();
		grade_Arrow().click();
		PauseUtil.pause(8000);
		Wait_for_invisibility_of_locator();
		PauseUtil.waitForAjaxToComplete(2500);
		Wait_for_invisibility_of_locator();
		lnkMonthApr().click();
		PauseUtil.waitForAjaxToComplete(2500);
		Wait_for_invisibility_of_locator();
	}

	@Override
	public void enters_Only_student_name_StudentClubs() {
		PauseUtil.pause(10000);
		Wait_for_invisibility_of_locator();
		grade_Seesaw().click();
		PauseUtil.pause(8000);
		Wait_for_invisibility_of_locator();
		PauseUtil.waitForAjaxToComplete(2500);
		Wait_for_invisibility_of_locator();
		field_student1().click();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		studentZoomField().clear();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		studentZoomField().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("sname1"));
		WaitUtils.waitForDisplayed(select_arrow());
		select_arrow().click();
		PauseUtil.pause(4000);
		Wait_for_invisibility_of_locator();
		click_outside().click();
		PauseUtil.pause(10000);
		Wait_for_invisibility_of_locator();

	}

	@Override
	public void Teacher_enters_StudentName_clicks_On_TickMark_StudentClub() {
		PauseUtil.pause(10000);
		Wait_for_invisibility_of_locator();
		grade_Seesaw().click();
		PauseUtil.pause(8000);
		Wait_for_invisibility_of_locator();
		PauseUtil.waitForAjaxToComplete(2500);// soma - as we are getting
												// loading issue. gave this
		field_student1().click();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		studentZoomField().clear();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		studentZoomField().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("sname1"));
		WaitUtils.waitForDisplayed(select_arrow());
		select_arrow().click();
		PauseUtil.pause(4000);
		Wait_for_invisibility_of_locator();
	}

	@Override
	public void Teacher_enters_StudentName_and_hits_ENTER_StudentClub() {
		PauseUtil.pause(10000);
		Wait_for_invisibility_of_locator();
		grade_Seesaw().click();
		PauseUtil.pause(8000);
		Wait_for_invisibility_of_locator();
		PauseUtil.waitForAjaxToComplete(2500);
		Wait_for_invisibility_of_locator();
		field_student1().click();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		studentZoomField().clear();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		studentZoomField().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("sname1"));
		PauseUtil.pause(2000);
		Wait_for_invisibility_of_locator();
		studentZoomField().sendKeys(Keys.ENTER);

	}

	@Override
	public void Teacher_clicks_On_Minus_btn_for_student_1_YTO() {
		PauseUtil.pause(5000);
		btn_Minus_Student1_Qty().click();
		PauseUtil.pause(2000);
		click_outside().click();
		PauseUtil.pause(8000);
	}

	@Override
	public void Teacher_clicks_On_Plus_btn_for_student_1_YTO() {
		PauseUtil.pause(5000);
		btn_Plus_Student1_Qty().click();
		PauseUtil.pause(2000);
		click_outside().click();
		PauseUtil.pause(8000);
	}

	@Override
	public int Validation_of_item_qty_decreased_in_YTO_Page() {
		PauseUtil.pause(3000);
		int value_act = TestBaseProvider.getTestBase().getTestData().getInt("qty1");
		value_act = value_act - 1;
		String value_exp = field_qty1().getAttribute("value");
		int value_exp_2 = Integer.parseInt(value_exp);

		Assert.assertEquals(value_exp_2, value_act, "Item quantity is incorrect in YTO Page");
		return value_act;
	}

	@Override
	public void Validation_of_item_qty_decreased_in_ReviewCart_Page(int value_act) {
		PauseUtil.pause(8000);
		String value_exp = cart_qty_item1().getAttribute("value");
		int value_exp_2 = Integer.parseInt(value_exp);

		Assert.assertEquals(value_exp_2, value_act, "Item quantity is incorrect in Review cart Page");

	}

	@Override
	public int Validation_of_item_qty_increased_in_YTO_Page() {
		PauseUtil.pause(3000);
		int value_act = TestBaseProvider.getTestBase().getTestData().getInt("qty1");
		value_act = value_act + 1;
		String value_exp = field_qty1().getAttribute("value");
		int value_exp_2 = Integer.parseInt(value_exp);

		Assert.assertEquals(value_exp_2, value_act, "Item quantity is incorrect in YTO Page");
		return value_act;
	}

	@Override
	public void Validation_of_item_qty_increased_in_ReviewCart_Page(int value_act) {
		PauseUtil.pause(8000);
		String value_exp = cart_qty_item1().getAttribute("value");
		int value_exp_2 = Integer.parseInt(value_exp);

		Assert.assertEquals(value_exp_2, value_act, "Item quantity is incorrect in Review cart Page");

	}

	@Override
	public void Verify_entered_student_name_field_in_StudentClub() {
		PauseUtil.pause(5000);
		String StudentName_act = field_student1().getAttribute("data-student-name");
		String StudentName_exp = TestBaseProvider.getTestBase().getTestData().getString("sname1");
		Assert.assertEquals(StudentName_act, StudentName_exp, "Student name is not displayed");

	}

	@Override
	public void fillStudentFlyerOrder_items_Diff_Month() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(10000);
		Wait_for_invisibility_of_locator();
		grade_Seesaw().click();
		PauseUtil.pause(6000);
		Wait_for_invisibility_of_locator();
		PauseUtil.waitForAjaxToComplete(2500);
		Wait_for_invisibility_of_locator();
		lnkMonthJun().click();
		PauseUtil.pause(5000);
		Wait_for_invisibility_of_locator();
		PauseUtil.waitForAjaxToComplete(2500);
		Wait_for_invisibility_of_locator();
		field_student1().click();
		PauseUtil.pause(2000);
		Wait_for_invisibility_of_locator();
		studentZoomField().clear();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		studentZoomField().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("sname1"));
		WaitUtils.waitForDisplayed(select_arrow());
		// select_arrow().click();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(6000);
		Wait_for_invisibility_of_locator();
		field_qty1().click();
		field_qty1().clear();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		field_qty1().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("qty1"));
		click_outside().click();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(10000);
		Wait_for_invisibility_of_locator();

		grade_Arrow().click();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(7000);
		Wait_for_invisibility_of_locator();
		lnkMonthApr().click();
		// SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(10000);
		Wait_for_invisibility_of_locator();
		field_student1().click();
		PauseUtil.pause(2000);
		Wait_for_invisibility_of_locator();
		studentZoomField().clear();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		studentZoomField().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("sname2"));
		WaitUtils.waitForDisplayed(select_arrow());
		// select_arrow().click();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(6000);
		Wait_for_invisibility_of_locator();
		field_qty1().click();
		field_qty1().clear();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		field_qty1().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("qty2"));
		click_outside().click();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(10000);
		Wait_for_invisibility_of_locator();

		grade_UpMiddleSchool().click();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(7000);
		Wait_for_invisibility_of_locator();
		// SCHUtils.waitForLoaderToDismiss();
		lnkMonthMay().click();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(10000);
		Wait_for_invisibility_of_locator();
		field_student1().click();
		PauseUtil.pause(2000);
		Wait_for_invisibility_of_locator();
		studentZoomField().clear();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		studentZoomField().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("sname3"));
		WaitUtils.waitForDisplayed(select_arrow());
		// select_arrow().click();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(6000);
		Wait_for_invisibility_of_locator();
		field_qty1().click();
		field_qty1().clear();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		field_qty1().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("qty3"));
		click_outside().click();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(10000);
		Wait_for_invisibility_of_locator();

	}

	@Override
	public void add_items_from_diff_TeacherClubs() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(10000);
		Wait_for_invisibility_of_locator();
		grade_TeacherCatalogues().click();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(6000);
		Wait_for_invisibility_of_locator();
		Classroom_Reward_Catalogues().click();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(6000);
		Wait_for_invisibility_of_locator();
		field_student1().click();
		PauseUtil.pause(2000);
		Wait_for_invisibility_of_locator();
		studentZoomField().clear();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		studentZoomField().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("sname1"));
		WaitUtils.waitForDisplayed(select_arrow());
		/* select_arrow().click() */;
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(6000);
		Wait_for_invisibility_of_locator();
		field_qty1().click();
		field_qty1().clear();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		field_qty1().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("qty1"));
		click_outside().click();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(10000);
		Wait_for_invisibility_of_locator();

		field_student2().click();
		PauseUtil.pause(2000);
		Wait_for_invisibility_of_locator();
		studentZoomField().clear();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		studentZoomField().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("sname2"));
		WaitUtils.waitForDisplayed(select_arrow());
		// select_arrow().click();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(6000);
		Wait_for_invisibility_of_locator();
		field_qty2().click();
		field_qty2().clear();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		field_qty2().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("qty2"));
		click_outside().click();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(10000);
		Wait_for_invisibility_of_locator();

		// Clearance_Flyers().click();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(6000);
		Wait_for_invisibility_of_locator();
		field_student3().click();
		PauseUtil.pause(2000);
		Wait_for_invisibility_of_locator();
		studentZoomField().clear();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		studentZoomField().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("sname3"));
		WaitUtils.waitForDisplayed(select_arrow());
		// select_arrow().click();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(6000);
		Wait_for_invisibility_of_locator();
		field_qty3().click();
		field_qty3().clear();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		field_qty3().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("qty3"));
		click_outside().click();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(10000);
		Wait_for_invisibility_of_locator();

	}

	@Override
	public void Teacher_adds_items_from_different_Student_and_Teacher_clubs() {
		/*
		 * PauseUtil.waitForAjaxToComplete(2500); PauseUtil.pause(10000);
		 * Wait_for_invisibility_of_locator();
		 * grade_TeacherCatalogues().click();
		 * PauseUtil.waitForAjaxToComplete(2500); PauseUtil.pause(10000);
		 * Wait_for_invisibility_of_locator();
		 */
		/*
		 * Classroom_Reward_Catalogues().click();
		 * PauseUtil.waitForAjaxToComplete(2500); PauseUtil.pause(6000);
		 * Wait_for_invisibility_of_locator(); field_student1().click();
		 * PauseUtil.pause(2000); Wait_for_invisibility_of_locator();
		 * studentZoomField().clear(); PauseUtil.pause(3000);
		 * Wait_for_invisibility_of_locator();
		 * studentZoomField().sendKeys(TestBaseProvider.getTestBase().
		 * getTestData().getString("sname1"));
		 * Wait_for_invisibility_of_locator(); field_qty1().click();
		 * field_qty1().clear(); PauseUtil.pause(2000);
		 * Wait_for_invisibility_of_locator();
		 * field_qty1().sendKeys(TestBaseProvider.getTestBase().getTestData().
		 * getString("qty1")); WaitUtils.waitForDisplayed(select_arrow());
		 * click_outside().click(); PauseUtil.waitForAjaxToComplete(2500);
		 * PauseUtil.pause(10000); Wait_for_invisibility_of_locator();
		 */

		select_arrow().click();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(6000);
		Wait_for_invisibility_of_locator();
		field_student1().click();
		PauseUtil.pause(2000);
		Wait_for_invisibility_of_locator();
		studentZoomField().clear();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		studentZoomField().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("sname1"));
		Wait_for_invisibility_of_locator();
		field_qty1().click();
		field_qty1().clear();
		PauseUtil.pause(2000);
		Wait_for_invisibility_of_locator();
		field_qty1().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("qty1"));
		WaitUtils.waitForDisplayed(select_arrow());
		click_outside().click();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(10000);
		Wait_for_invisibility_of_locator();

		/*
		 * field_student2().click(); PauseUtil.pause(2000);
		 * Wait_for_invisibility_of_locator(); studentZoomField().clear();
		 * PauseUtil.pause(3000); Wait_for_invisibility_of_locator();
		 * studentZoomField().sendKeys(TestBaseProvider.getTestBase().
		 * getTestData().getString("sname2"));
		 * Wait_for_invisibility_of_locator(); field_qty2().click();
		 * field_qty2().clear(); PauseUtil.pause(2000);
		 * Wait_for_invisibility_of_locator();
		 * field_qty2().sendKeys(TestBaseProvider.getTestBase().getTestData().
		 * getString("qty2")); WaitUtils.waitForDisplayed(select_arrow());
		 * click_outside().click(); PauseUtil.waitForAjaxToComplete(2500);
		 * PauseUtil.pause(10000); Wait_for_invisibility_of_locator();
		 */

		click_TeacherCatalogue();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(6000);
		Wait_for_invisibility_of_locator();
		field_student1().click();
		PauseUtil.pause(2000);
		Wait_for_invisibility_of_locator();
		studentZoomField().clear();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		studentZoomField().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("sname2"));
		Wait_for_invisibility_of_locator();
		field_qty1().click();
		field_qty1().clear();
		PauseUtil.pause(2000);
		Wait_for_invisibility_of_locator();
		field_qty1().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("qty2"));
		WaitUtils.waitForDisplayed(select_arrow());
		click_outside().click();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(10000);
		Wait_for_invisibility_of_locator();

		field_student2().click();
		PauseUtil.pause(2000);
		Wait_for_invisibility_of_locator();
		studentZoomField().clear();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		studentZoomField().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("sname3"));
		Wait_for_invisibility_of_locator();
		field_qty2().click();
		field_qty2().clear();
		PauseUtil.pause(2000);
		Wait_for_invisibility_of_locator();
		field_qty2().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("qty3"));
		WaitUtils.waitForDisplayed(select_arrow());
		click_outside().click();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(10000);
		Wait_for_invisibility_of_locator();

	}

	@Override
	public void Teacher_adds_items_from_different_Student_and_Teacher_clubs_2() {
		PauseUtil.pause(10000);
		Wait_for_invisibility_of_locator();
		/*
		 * grade_TeacherCatalogues().click();
		 * PauseUtil.waitForAjaxToComplete(2500); PauseUtil.pause(10000);
		 * Wait_for_invisibility_of_locator();
		 */
		/*
		 * Clearance_Flyers().click(); PauseUtil.waitForAjaxToComplete(2500);
		 * PauseUtil.pause(6000); Wait_for_invisibility_of_locator();
		 * field_student1().click(); PauseUtil.pause(2000);
		 * Wait_for_invisibility_of_locator(); studentZoomField().clear();
		 * PauseUtil.pause(3000); Wait_for_invisibility_of_locator();
		 * studentZoomField().sendKeys(TestBaseProvider.getTestBase().
		 * getTestData().getString("sname1"));
		 * WaitUtils.waitForDisplayed(select_arrow());
		 */
		grade_Elf().click();
		// select_arrow().click();
		Wait_for_invisibility_of_locator();
		field_student1().click();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		studentZoomField().clear();
		PauseUtil.pause(3000);
		studentZoomField().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("sname1"));
		// WaitUtils.waitForDisplayed(select_arrow());
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(4000);
		// Wait_for_invisibility_of_locator();
		field_qty1().click();
		field_qty1().clear();
		PauseUtil.pause(2000);
		// Wait_for_invisibility_of_locator();
		field_qty1().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("qty1"));
		click_outside().click();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(10000);
		Wait_for_invisibility_of_locator();
		/*
		 * field_student2().click(); PauseUtil.waitForAjaxToComplete(2500);
		 * PauseUtil.pause(2000); Wait_for_invisibility_of_locator();
		 * studentZoomField().clear(); PauseUtil.pause(3000);
		 * Wait_for_invisibility_of_locator();
		 * studentZoomField().sendKeys(TestBaseProvider.getTestBase().
		 * getTestData().getString("sname2"));
		 * //WaitUtils.waitForDisplayed(select_arrow());
		 * //select_arrow().click(); PauseUtil.waitForAjaxToComplete(2500);
		 * PauseUtil.pause(4000); Wait_for_invisibility_of_locator();
		 * field_qty2().click(); field_qty2().clear(); PauseUtil.pause(2000);
		 * Wait_for_invisibility_of_locator();
		 * field_qty2().sendKeys(TestBaseProvider.getTestBase().getTestData().
		 * getString("qty2")); click_outside().click();
		 * PauseUtil.waitForAjaxToComplete(2500); PauseUtil.pause(10000);
		 * Wait_for_invisibility_of_locator();
		 * 
		 * 
		 * grade_Seesaw().click(); PauseUtil.waitForAjaxToComplete(2500);
		 * PauseUtil.pause(8000); Wait_for_invisibility_of_locator();
		 * field_student1().click(); PauseUtil.pause(2000);
		 * Wait_for_invisibility_of_locator(); studentZoomField().clear();
		 * PauseUtil.pause(3000); Wait_for_invisibility_of_locator();
		 * studentZoomField().sendKeys(TestBaseProvider.getTestBase().
		 * getTestData().getString("sname3"));
		 * WaitUtils.waitForDisplayed(select_arrow()); //select_arrow().click();
		 * PauseUtil.waitForAjaxToComplete(2500); PauseUtil.pause(4000);
		 * Wait_for_invisibility_of_locator(); field_qty1().click();
		 * field_qty1().clear(); PauseUtil.pause(2000);
		 * Wait_for_invisibility_of_locator();
		 * field_qty1().sendKeys(TestBaseProvider.getTestBase().getTestData().
		 * getString("qty3")); click_outside().click();
		 * PauseUtil.waitForAjaxToComplete(2500); PauseUtil.pause(10000);
		 * Wait_for_invisibility_of_locator();
		 */

		grade_TeacherCatalogues().click();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(8000);
		Wait_for_invisibility_of_locator();
		PauseUtil.pause(8000);
		Clearance_Flyers().click();
		PauseUtil.pause(8000);
		field_student1().click();
		PauseUtil.pause(8000);
		Wait_for_invisibility_of_locator();
		studentZoomField().clear();
		PauseUtil.pause(8000);
		Wait_for_invisibility_of_locator();
		studentZoomField().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("sname3"));
		WaitUtils.waitForDisplayed(select_arrow());
		// select_arrow().click();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(4000);
		Wait_for_invisibility_of_locator();
		field_qty1().click();
		field_qty1().clear();
		PauseUtil.pause(2000);
		Wait_for_invisibility_of_locator();
		field_qty1().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("qty3"));
		click_outside().click();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(10000);
		Wait_for_invisibility_of_locator();
		PauseUtil.pause(8000);
		field_student2().click();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		studentZoomField().clear();
		PauseUtil.pause(3000);
		studentZoomField().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("sname2"));
		// WaitUtils.waitForDisplayed(select_arrow());
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(4000);
		// Wait_for_invisibility_of_locator();
		field_qty2().click();
		field_qty2().clear();
		PauseUtil.pause(2000);
		// Wait_for_invisibility_of_locator();
		field_qty2().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("qty2"));
		click_outside().click();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(10000);
		Wait_for_invisibility_of_locator();

		/*
		 * field_student2().click(); PauseUtil.pause(2000);
		 * Wait_for_invisibility_of_locator(); studentZoomField().clear();
		 * PauseUtil.pause(3000); Wait_for_invisibility_of_locator();
		 * studentZoomField().sendKeys(TestBaseProvider.getTestBase().
		 * getTestData().getString("sname2"));
		 * WaitUtils.waitForDisplayed(select_arrow()); //select_arrow().click();
		 * PauseUtil.waitForAjaxToComplete(2500); PauseUtil.pause(4000);
		 * Wait_for_invisibility_of_locator(); field_qty2().click();
		 * field_qty2().clear(); PauseUtil.pause(2000);
		 * Wait_for_invisibility_of_locator();
		 * field_qty2().sendKeys(TestBaseProvider.getTestBase().getTestData().
		 * getString("qty2")); click_outside().click();
		 * PauseUtil.waitForAjaxToComplete(2500); PauseUtil.pause(10000);
		 * Wait_for_invisibility_of_locator();
		 */

	}

	@Override
	public void Teacher_adds_items_from_single_flyer_Teacher_clubs() {
		PauseUtil.pause(10000);
		Wait_for_invisibility_of_locator();
		grade_TeacherCatalogues().click();
		PauseUtil.waitForAjaxToComplete(2500);// soma - as we are getting
												// loading issue. gave this
		PauseUtil.pause(8000);
		Wait_for_invisibility_of_locator();
		field_student1().click();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		studentZoomField().clear();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		studentZoomField().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("sname1"));
		// select_arrow().click();
		// SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);// soma - as we are getting
												// loading issue. gave this
		PauseUtil.pause(6000);
		Wait_for_invisibility_of_locator();
		field_qty1().click();
		field_qty1().clear();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		field_qty1().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("qty1"));
		click_outside().click();
		// SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);// soma - as we are getting
												// loading issue. gave this
		PauseUtil.pause(10000);
		Wait_for_invisibility_of_locator();

		field_student2().click();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		studentZoomField().clear();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		studentZoomField().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("sname2"));
		// select_arrow().click();
		// SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);// soma - as we are getting
												// loading issue. gave this
		PauseUtil.pause(6000);
		Wait_for_invisibility_of_locator();
		field_qty2().click();
		field_qty2().clear();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		field_qty2().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("qty2"));
		click_outside().click();
		// SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);// soma - as we are getting
												// loading issue. gave this
		PauseUtil.pause(10000);
		Wait_for_invisibility_of_locator();

	}

	@Override
	public void Validation_of_Student_club_And_Teacher_Catalogues_Total() {
		int stateTaxGST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxGST");
		int stateTaxPST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxPST");

		PauseUtil.pause(8000);
		String value1 = cart_item1_price().getText();
		String ele1 = cart_qty_item1().getAttribute("value");
		value1 = value1.substring(1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item1_price = d1 * a1;
		item1_price = Double.parseDouble(new DecimalFormat("##.##").format(item1_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item1_price);

		String StudentClbSubTot = subTotal_StudentClubs().getText();
		StudentClbSubTot = StudentClbSubTot.substring(1);
		double Student_SubTotal = Double.parseDouble(StudentClbSubTot);
		Assert.assertEquals(Student_SubTotal, item1_price, "Student Clubs Subtotal value is incorrect");

		double Student_GST_act = Student_GST();
		double Student_GST_exp = TaxRoundOff_item_1_Tax(stateTaxGST, d1, a1);
		Assert.assertEquals(Student_GST_act, Student_GST_exp, "Student Clubs Subtotal GST value is incorrect");

		double Student_PST_act = Student_PST();
		System.out.println("Actual PST Value#############:" + Student_PST_act);
		double Student_PST_exp = TaxRoundOff_item_1_Tax(stateTaxPST, d1, a1);
		System.out.println("Expected PST Value#############:" + Student_PST_exp);

		Assert.assertEquals(Student_PST_act, Student_PST_exp, "Student Clubs Subtotal PST value is incorrect");

		String StudentClubsTotal_Expected = Student_Clubs_Total().getText();
		StudentClubsTotal_Expected = StudentClubsTotal_Expected.substring(1);
		double StudentClubsTotal_exp = Double.parseDouble(StudentClubsTotal_Expected);
		System.out.println("StudentClubsTotal :::::::: " + StudentClubsTotal_exp);

		double StudentClubsTotal_Actual = item1_price + Student_GST_exp + Student_PST_exp;
		System.out.println("StudentClubsTotal_Actual :::::::: " + StudentClubsTotal_Actual);
		StudentClubsTotal_Actual = Double.parseDouble(new DecimalFormat("##.##").format(StudentClubsTotal_Actual));

		Assert.assertEquals(StudentClubsTotal_exp, StudentClubsTotal_Actual, "Student Clubs Total value is incorrect");

		////////////////////////////////////////////////////////
		String value2 = cart_item2_price().getText();
		String ele2 = cart_qty_item2().getAttribute("value");
		value2 = value2.substring(1);
		double d2 = Double.parseDouble(value2);
		System.out.println("#############>" + d2);
		int a2 = Integer.parseInt(ele2);
		System.out.println("%%%%%%%%%%%%>" + a2);
		double item2_price = d2 * a2;
		item2_price = Double.parseDouble(new DecimalFormat("##.##").format(item2_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item2_price);

		String value3 = cart_item3_price().getText();
		String ele3 = cart_qty_item3().getAttribute("value");
		value3 = value3.substring(1);
		double d3 = Double.parseDouble(value3);
		System.out.println("#############>" + d3);
		int a3 = Integer.parseInt(ele3);
		System.out.println("%%%%%%%%%%%%>" + a3);
		double item3_price = d3 * a3;
		item3_price = Double.parseDouble(new DecimalFormat("##.##").format(item3_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item3_price);

		double Teacher_Catalogues_Subtotal_Actual = item2_price + item3_price;
		Teacher_Catalogues_Subtotal_Actual = Double
				.parseDouble(new DecimalFormat("##.##").format(Teacher_Catalogues_Subtotal_Actual));

		String TeacherCataloguesClbSubTot = SubTotal_TeacherCatalogues().getText();
		TeacherCataloguesClbSubTot = TeacherCataloguesClbSubTot.substring(1);
		double TeacherCatalogues_SubTotal = Double.parseDouble(TeacherCataloguesClbSubTot);
		Assert.assertEquals(TeacherCatalogues_SubTotal, Teacher_Catalogues_Subtotal_Actual,
				"Teacher Catalogues Subtotal value is incorrect");

		double Teacher_GST_act = Teacher_GST();
		double Teacher_GST_exp = TaxRoundOff_item_2_Tax(stateTaxGST, d2, a2)
				+ TaxRoundOff_item_3_Tax(stateTaxGST, d3, a3);
		Teacher_GST_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_GST_exp));

		Assert.assertEquals(Teacher_GST_act, Teacher_GST_exp, "Teacher Catalogues Subtotal GST value is incorrect");

		double Teacher_PST_act = Teacher_PST();
		double Teacher_PST_exp = TaxRoundOff_item_2_Tax(stateTaxPST, d2, a2)
				+ TaxRoundOff_item_3_Tax(stateTaxPST, d3, a3);
		Teacher_PST_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_PST_exp));

		Assert.assertEquals(Teacher_PST_act, Teacher_PST_exp, "Teacher Catalogues Subtotal PST value is incorrect");

		String TeacherClubsTotal_Expected = Teacher_Catalogues_Total().getText();
		TeacherClubsTotal_Expected = TeacherClubsTotal_Expected.substring(1);
		double TeacherClubsTotal_exp = Double.parseDouble(TeacherClubsTotal_Expected);
		System.out.println("Teacher Catalogues :::::::: " + TeacherClubsTotal_exp);

		double TeacherClubsTotal_Actual = Teacher_Catalogues_Subtotal_Actual + Teacher_GST_exp + Teacher_PST_exp;
		System.out.println("StudentClubsTotal_Actual :::::::: " + TeacherClubsTotal_Actual);
		TeacherClubsTotal_Actual = Double.parseDouble(new DecimalFormat("##.##").format(TeacherClubsTotal_Actual));

		Assert.assertEquals(TeacherClubsTotal_exp, TeacherClubsTotal_Actual,
				"Teacher Catalogues Total value is incorrect");

		double Total_Amount_Of_Student_And_Teacher = StudentClubsTotal_Actual + TeacherClubsTotal_Actual;
		Total_Amount_Of_Student_And_Teacher = Double
				.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Student_And_Teacher));

		String Total_Owing_Amount_Expected = Total_Amount_Owing().getText();
		Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
		double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
		Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Student_And_Teacher,
				"Total owing value is incorrect");
	}

	@Override
	public void Validation_of_Student_club_And_Teacher_Catalogues_Total_ConfirmSubmitPage() {
		int stateTaxGST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxGST");
		int stateTaxPST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxPST");

		PauseUtil.pause(8000);
		String value1 = item1_price_SubmitPage().getText();
		value1 = value1.trim();

		String ele1 = item1_qty_SubmitPage().getText();
		ele1 = ele1.trim();

		value1 = value1.substring(1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item1_price = d1 * a1;
		item1_price = Double.parseDouble(new DecimalFormat("##.##").format(item1_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item1_price);

		String StudentClbSubTot = subTotal_StudentClubs().getText();
		StudentClbSubTot = StudentClbSubTot.substring(1);
		double Student_SubTotal = Double.parseDouble(StudentClbSubTot);
		Assert.assertEquals(Student_SubTotal, item1_price, "Student Clubs Subtotal value is incorrect");

		double Student_gst_act = Student_GST();
		double Student_gst_exp = TaxRoundOff_item_1_Tax(stateTaxGST, d1, a1);
		Student_gst_exp = Double.parseDouble(new DecimalFormat("##.##").format(Student_gst_exp));
		Assert.assertEquals(Student_gst_act, Student_gst_exp, "Student Clubs Subtotal GST value is incorrect");

		double Student_pst_act = Student_PST();
		double Student_pst_exp = TaxRoundOff_item_1_Tax(stateTaxPST, d1, a1);
		Student_pst_exp = Double.parseDouble(new DecimalFormat("##.##").format(Student_pst_exp));
		Assert.assertEquals(Student_pst_act, Student_pst_exp, "Student Clubs Subtotal PST value is incorrect");

		String StudentClubsTotal_Expected = Total_StudentClubs_SubmitPage().getText();
		StudentClubsTotal_Expected = StudentClubsTotal_Expected.substring(1);
		double StudentClubsTotal_exp = Double.parseDouble(StudentClubsTotal_Expected);
		System.out.println("StudentClubsTotal :::::::: " + StudentClubsTotal_exp);

		double StudentClubsTotal_Actual = item1_price + Student_gst_exp + Student_pst_exp;
		StudentClubsTotal_Actual = Double.parseDouble(new DecimalFormat("##.##").format(StudentClubsTotal_Actual));
		System.out.println("StudentClubsTotal_Actual :::::::: " + StudentClubsTotal_Actual);

		Assert.assertEquals(StudentClubsTotal_exp, StudentClubsTotal_Actual, "Student Clubs Total value is incorrect");

		////////////////////////////////////////////////////////
		String value2 = item2_price_SubmitPage().getText();
		value2 = value2.trim();
		String ele2 = item2_qty_SubmitPage().getText();
		ele2 = ele2.trim();
		value2 = value2.substring(1);
		double d2 = Double.parseDouble(value2);
		System.out.println("#############>" + d2);
		int a2 = Integer.parseInt(ele2);
		System.out.println("%%%%%%%%%%%%>" + a2);
		double item2_price = d2 * a2;
		item2_price = Double.parseDouble(new DecimalFormat("##.##").format(item2_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item2_price);

		String value3 = item3_price_SubmitPage().getText();
		value3 = value3.trim();
		String ele3 = item3_qty_SubmitPage().getText();
		ele3 = ele3.trim();
		value3 = value3.substring(1);
		double d3 = Double.parseDouble(value3);
		System.out.println("#############>" + d3);
		int a3 = Integer.parseInt(ele3);
		System.out.println("%%%%%%%%%%%%>" + a3);
		double item3_price = d3 * a3;
		item3_price = Double.parseDouble(new DecimalFormat("##.##").format(item3_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item3_price);

		double Teacher_Catalogues_Subtotal_Actual = item2_price + item3_price;
		Teacher_Catalogues_Subtotal_Actual = Double
				.parseDouble(new DecimalFormat("##.##").format(Teacher_Catalogues_Subtotal_Actual));

		String TeacherCataloguesClbSubTot = SubTotal_TeacherCatalogues().getText();
		TeacherCataloguesClbSubTot = TeacherCataloguesClbSubTot.substring(1);
		double TeacherCatalogues_SubTotal = Double.parseDouble(TeacherCataloguesClbSubTot);
		Assert.assertEquals(TeacherCatalogues_SubTotal, Teacher_Catalogues_Subtotal_Actual,
				"Teacher Catalogues Subtotal value is incorrect");

		double Teacher_GST_act = Teacher_GST();
		double Teacher_GST_exp = TaxRoundOff_item_2_Tax(stateTaxGST, d2, a2)
				+ TaxRoundOff_item_3_Tax(stateTaxGST, d3, a3);
		Teacher_GST_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_GST_exp));
		Assert.assertEquals(Teacher_GST_act, Teacher_GST_exp, "Teacher Catalogues Subtotal GST value is incorrect");

		double Teacher_PST_act = Teacher_PST();
		double Teacher_PST_exp = TaxRoundOff_item_2_Tax(stateTaxPST, d2, a2)
				+ TaxRoundOff_item_3_Tax(stateTaxPST, d3, a3);
		Teacher_PST_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_PST_exp));
		Assert.assertEquals(Teacher_PST_act, Teacher_PST_exp, "Teacher Catalogues Subtotal PST value is incorrect");

		String TeacherClubsTotal_Expected = Total_TeacherCatalogues_SubmitPage().getText();
		TeacherClubsTotal_Expected = TeacherClubsTotal_Expected.substring(1);
		double TeacherClubsTotal_exp = Double.parseDouble(TeacherClubsTotal_Expected);
		System.out.println("Teacher Catalogues :::::::: " + TeacherClubsTotal_exp);

		double TeacherClubsTotal_Actual = Teacher_Catalogues_Subtotal_Actual + Teacher_GST_exp + Teacher_PST_exp;
		TeacherClubsTotal_Actual = Double.parseDouble(new DecimalFormat("##.##").format(TeacherClubsTotal_Actual));
		System.out.println("StudentClubsTotal_Actual :::::::: " + TeacherClubsTotal_Actual);

		Assert.assertEquals(TeacherClubsTotal_exp, TeacherClubsTotal_Actual,
				"Teacher Catalogues Total value is incorrect");

		int Shipping_tax_gst = stateTaxGST;

		String Shipping_val = Total_Shipping_SubmitPage().getText();
		Shipping_val = Shipping_val.trim();
		
		if (Shipping_val.equals("FREE!")) {
			double ShippingValue_is = 0;
			double Total_Amount_Of_Student_Teacher = StudentClubsTotal_Actual + TeacherClubsTotal_Actual
					+ ShippingValue_is;
			Total_Amount_Of_Student_Teacher = Double.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Student_Teacher));
			String Total_Owing_Amount_Exp = Total_Amount_Owing_submitPage().getText();
			Total_Owing_Amount_Exp = Total_Owing_Amount_Exp.substring(1);
			double Total_Owing_Amount_Exp_2 = Double.parseDouble(Total_Owing_Amount_Exp);
			Assert.assertEquals(Total_Owing_Amount_Exp_2, Total_Amount_Of_Student_Teacher,
					"Total owing value is incorrect");

		} else if(!Shipping_val.equals("FREE!")) {
			String Shipping_act = subTotal_PaidShipping_SubmitPage().getText();
			Shipping_act = Shipping_act.trim();
			Shipping_act = Shipping_act.substring(1);
			double Shipping_act_2 = Double.parseDouble(Shipping_act);
			Shipping_act_2 = Double.parseDouble(new DecimalFormat("##.##").format(Shipping_act_2));

			double gst_Shipping_act = (double) (Shipping_tax_gst * Shipping_act_2) / 100;
			gst_Shipping_act = Double.parseDouble(new DecimalFormat("##.##").format(gst_Shipping_act));
			System.out.println("EXPECTED#########" + gst_Shipping_act);

			String gst_Shipping_exp = amount_GST_Shipping_SubmitPage().getText();
				gst_Shipping_exp = gst_Shipping_exp.trim();
				gst_Shipping_exp = gst_Shipping_exp.substring(1);
				double gst_Shipping_exp_2 = Double.parseDouble(gst_Shipping_exp);

				Assert.assertEquals(gst_Shipping_act, gst_Shipping_exp_2, "Shipping & Handling GST value is incorrect");

				int Shipping_tax_pst = stateTaxPST;

				/*
				 * String Shipping_act=subTotal_Shipping_SubmitPage().getText();
				 * Shipping_act=Shipping_act.trim(); Shipping_act =
				 * Shipping_act.substring(1); double
				 * Shipping_act_2=Double.parseDouble(Shipping_act);
				 * Shipping_act_2 =Double.parseDouble(new
				 * DecimalFormat("##.##").format(Shipping_act_2));
				 */

				double pst_Shipping_act = (double) (Shipping_tax_pst * Shipping_act_2) / 100;
				pst_Shipping_act = Double.parseDouble(new DecimalFormat("##.##").format(pst_Shipping_act));
				System.out.println("EXPECTED#########" + pst_Shipping_act);

				String pst_Shipping_exp = amount_PST_Shipping_SubmitPage().getText();
				pst_Shipping_exp = pst_Shipping_exp.trim();
				pst_Shipping_exp = pst_Shipping_exp.substring(1);
				double pst_Shipping_exp_2 = Double.parseDouble(pst_Shipping_exp);

				Assert.assertEquals(pst_Shipping_act, pst_Shipping_exp_2, "Shipping & Handling PST value is incorrect");

				double ShippingTotValue_act = Shipping_act_2 + gst_Shipping_act + pst_Shipping_act;
				ShippingTotValue_act = TaxRoundOff_of(ShippingTotValue_act);

				String ShippingTotValue_exp = Total_Shipping_SubmitPage().getText();
				ShippingTotValue_exp = ShippingTotValue_exp.trim();
				ShippingTotValue_exp = ShippingTotValue_exp.substring(1);
				double ShippingTotValue_exp_2 = Double.parseDouble(ShippingTotValue_exp);

				Assert.assertEquals(ShippingTotValue_act, ShippingTotValue_exp_2,
						"Shipping & Handling Total value is incorrect");
				///////////////////////////////////////
				double Total_Amount_Of_Student_And_Teacher = StudentClubsTotal_Actual + TeacherClubsTotal_Actual
						+ ShippingTotValue_act;
				Total_Amount_Of_Student_And_Teacher = Double
						.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Student_And_Teacher));

				String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
				Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
				double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
				Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Student_And_Teacher,
						"Total owing value is incorrect");
			}
	}

	@Override
	public void Validation_of_Student_club_And_Teacher_Catalogues_Total_GST_PST_OrderRefPage() {
		int stateTaxGST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxGST");
		double stateTaxPST = TestBaseProvider.getTestBase().getTestData().getDouble("stateTaxPST");
		PauseUtil.pause(8000);
		Assert.assertTrue(msg_order_reference().isDisplayed(), "Ordere reference message is not displayed");

		String value1 = item1_price_SubmitPage().getText();
		value1 = value1.trim();

		String ele1 = item1_qty_SubmitPage().getText();
		ele1 = ele1.trim();

		value1 = value1.substring(1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item1_price = d1 * a1;
		item1_price = Double.parseDouble(new DecimalFormat("##.##").format(item1_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item1_price);

		String StudentClbSubTot = subTotal_StudentClubs().getText();
		StudentClbSubTot = StudentClbSubTot.substring(1);
		double Student_SubTotal = Double.parseDouble(StudentClbSubTot);
		Assert.assertEquals(Student_SubTotal, item1_price, "Student Clubs Subtotal value is incorrect");

		double Student_gst_act = Student_GST();
		double Student_gst_exp = TaxRoundOff_item_1_Tax(stateTaxGST, d1, a1);
		Student_gst_exp = Double.parseDouble(new DecimalFormat("##.##").format(Student_gst_exp));
		Assert.assertEquals(Student_gst_act, Student_gst_exp, "Student Clubs Subtotal GST value is incorrect");

		double Student_pst_act = Student_PST();
		double Student_pst_exp = TaxRoundOff_item_1_Tax(stateTaxPST, d1, a1);
		Student_pst_exp = Double.parseDouble(new DecimalFormat("##.##").format(Student_pst_exp));
		// Assert.assertEquals(Student_pst_act, Student_pst_exp, "Student Clubs
		// Subtotal PST value is incorrect");

		String StudentClubsTotal_Expected = Total_StudentClubs_SubmitPage().getText();
		StudentClubsTotal_Expected = StudentClubsTotal_Expected.substring(1);
		double StudentClubsTotal_exp = Double.parseDouble(StudentClubsTotal_Expected);
		System.out.println("StudentClubsTotal :::::::: " + StudentClubsTotal_exp);

		double StudentClubsTotal_Actual = item1_price + Student_gst_exp + Student_pst_exp;
		StudentClubsTotal_Actual = Double.parseDouble(new DecimalFormat("##.##").format(StudentClubsTotal_Actual));
		System.out.println("StudentClubsTotal_Actual :::::::: " + StudentClubsTotal_Actual);

		Assert.assertEquals(StudentClubsTotal_exp, StudentClubsTotal_Actual, "Student Clubs Total value is incorrect");

		////////////////////////////////////////////////////////
		String value2 = item2_price_SubmitPage().getText();
		value2 = value2.trim();
		String ele2 = item2_qty_SubmitPage().getText();
		ele2 = ele2.trim();
		value2 = value2.substring(1);
		double d2 = Double.parseDouble(value2);
		System.out.println("#############>" + d2);
		int a2 = Integer.parseInt(ele2);
		System.out.println("%%%%%%%%%%%%>" + a2);
		double item2_price = d2 * a2;
		item2_price = Double.parseDouble(new DecimalFormat("##.##").format(item2_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item2_price);

		String value3 = item3_price_SubmitPage().getText();
		value3 = value3.trim();
		String ele3 = item3_qty_SubmitPage().getText();
		ele3 = ele3.trim();
		value3 = value3.substring(1);
		double d3 = Double.parseDouble(value3);
		System.out.println("#############>" + d3);
		int a3 = Integer.parseInt(ele3);
		System.out.println("%%%%%%%%%%%%>" + a3);
		double item3_price = d3 * a3;
		item3_price = Double.parseDouble(new DecimalFormat("##.##").format(item3_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item3_price);

		double Teacher_Catalogues_Subtotal_Actual = item2_price + item3_price;
		Teacher_Catalogues_Subtotal_Actual = Double
				.parseDouble(new DecimalFormat("##.##").format(Teacher_Catalogues_Subtotal_Actual));

		String TeacherCataloguesClbSubTot = SubTotal_TeacherCatalogues().getText();
		TeacherCataloguesClbSubTot = TeacherCataloguesClbSubTot.substring(1);
		double TeacherCatalogues_SubTotal = Double.parseDouble(TeacherCataloguesClbSubTot);
		Assert.assertEquals(TeacherCatalogues_SubTotal, Teacher_Catalogues_Subtotal_Actual,
				"Teacher Catalogues Subtotal value is incorrect");

		double Teacher_GST_act = Teacher_GST();
		double Teacher_GST_exp = TaxRoundOff_item_2_Tax(stateTaxGST, d2, a2)
				+ TaxRoundOff_item_3_Tax(stateTaxGST, d3, a3);
		Teacher_GST_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_GST_exp));
		Assert.assertEquals(Teacher_GST_act, Teacher_GST_exp, "Teacher Catalogues Subtotal GST value is incorrect");

		double Teacher_PST_act = Teacher_PST();
		double Teacher_PST_exp = TaxRoundOff_item_2_Tax(stateTaxPST, d2, a2)
				+ TaxRoundOff_item_3_Tax(stateTaxPST, d3, a3);
		Teacher_PST_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_PST_exp));
		Assert.assertEquals(Teacher_PST_act, Teacher_PST_exp, "Teacher Catalogues Subtotal PST value is incorrect");

		String TeacherClubsTotal_Expected = Total_TeacherCatalogues_SubmitPage().getText();
		TeacherClubsTotal_Expected = TeacherClubsTotal_Expected.substring(1);
		double TeacherClubsTotal_exp = Double.parseDouble(TeacherClubsTotal_Expected);
		System.out.println("Teacher Catalogues :::::::: " + TeacherClubsTotal_exp);

		double TeacherClubsTotal_Actual = Teacher_Catalogues_Subtotal_Actual + Teacher_GST_exp + Teacher_PST_exp;
		TeacherClubsTotal_Actual = Double.parseDouble(new DecimalFormat("##.##").format(TeacherClubsTotal_Actual));
		System.out.println("StudentClubsTotal_Actual :::::::: " + TeacherClubsTotal_Actual);

		Assert.assertEquals(TeacherClubsTotal_exp, TeacherClubsTotal_Actual,
				"Teacher Catalogues Total value is incorrect");

		double Shipping_tax_gst = stateTaxGST;

		String Shipping_val = Total_Shipping_SubmitPage().getText();
		Shipping_val = Shipping_val.trim();
		
		if (Shipping_val.equals("FREE!")) {
			double ShippingValue_is = 0;
			double Total_Amount_Of_Student_Teacher = StudentClubsTotal_Actual + TeacherClubsTotal_Actual
					+ ShippingValue_is;
			Total_Amount_Of_Student_Teacher = Double.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Student_Teacher));
			String Total_Owing_Amount_Exp = Total_Amount_Owing_submitPage().getText();
			Total_Owing_Amount_Exp = Total_Owing_Amount_Exp.substring(1);
			double Total_Owing_Amount_Exp_2 = Double.parseDouble(Total_Owing_Amount_Exp);
			Assert.assertEquals(Total_Owing_Amount_Exp_2, Total_Amount_Of_Student_Teacher,
					"Total owing value is incorrect");

		} else if(!Shipping_val.equals("FREE!")) {
			String Shipping_act = subTotal_PaidShipping_SubmitPage().getText();
			Shipping_act = Shipping_act.trim();
			Shipping_act = Shipping_act.substring(1);
			double Shipping_act_2 = Double.parseDouble(Shipping_act);
			Shipping_act_2 = Double.parseDouble(new DecimalFormat("##.##").format(Shipping_act_2));

			double gst_Shipping_act = (double) (Shipping_tax_gst * Shipping_act_2) / 100;
			gst_Shipping_act = Double.parseDouble(new DecimalFormat("##.##").format(gst_Shipping_act));
			System.out.println("EXPECTED#########" + gst_Shipping_act);

			String gst_Shipping_exp = amount_GST_Shipping_SubmitPage().getText();
				gst_Shipping_exp = gst_Shipping_exp.trim();
				gst_Shipping_exp = gst_Shipping_exp.substring(1);
				double gst_Shipping_exp_2 = Double.parseDouble(gst_Shipping_exp);

				Assert.assertEquals(gst_Shipping_exp_2, gst_Shipping_act,
						"Shipping & Handling GST Tax value is incorrect");

				double Shipping_tax_pst = stateTaxPST;

				double pst_Shipping_act = (double) (Shipping_tax_pst * Shipping_act_2) / 100;
				pst_Shipping_act = Double.parseDouble(new DecimalFormat("##.##").format(pst_Shipping_act));
				System.out.println("EXPECTED#########" + pst_Shipping_act);

				String pst_Shipping_exp = amount_PST_Shipping_SubmitPage().getText();
				pst_Shipping_exp = pst_Shipping_exp.trim();
				pst_Shipping_exp = pst_Shipping_exp.substring(1);
				double pst_Shipping_exp_2 = Double.parseDouble(pst_Shipping_exp);

				Assert.assertEquals(pst_Shipping_exp_2, pst_Shipping_act,
						"Shipping & Handling PST Tax value is incorrect");

				double ShippingTotValue_act = Shipping_act_2 + gst_Shipping_act + pst_Shipping_act;
				ShippingTotValue_act = TaxRoundOff_of(ShippingTotValue_act);

				String ShippingTotValue_exp = Total_Shipping_SubmitPage().getText();
				ShippingTotValue_exp = ShippingTotValue_exp.trim();
				ShippingTotValue_exp = ShippingTotValue_exp.substring(1);
				double ShippingTotValue_exp_2 = Double.parseDouble(ShippingTotValue_exp);

				Assert.assertEquals(ShippingTotValue_exp_2, ShippingTotValue_act,
						"Shipping & Handling Total value is incorrect");
				///////////////////////////////////////
				double Total_Amount_Of_Student_And_Teacher = StudentClubsTotal_Actual + TeacherClubsTotal_Actual
						+ ShippingTotValue_act;
				Total_Amount_Of_Student_And_Teacher = Double
						.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Student_And_Teacher));

				String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
				Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
				double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
				Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Student_And_Teacher,
						"Total owing value is incorrect");
			}
	}

	@Override
	public void Validation_of_Student_club_Total_ShippingFee_GST_PST_OrderRefPage() {
		int stateTaxGST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxGST");
		double stateTaxPST = TestBaseProvider.getTestBase().getTestData().getDouble("stateTaxPST");
		PauseUtil.pause(8000);
		Assert.assertTrue(msg_order_reference().isDisplayed(), "Order reference message is not displayed");

		String value1 = item1_price_SubmitPage().getText();
		value1 = value1.trim();
		String ele1 = item1_qty_SubmitPage().getText();
		ele1 = ele1.trim();
		value1 = value1.substring(1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item1_price = d1 * a1;
		item1_price = Double.parseDouble(new DecimalFormat("##.##").format(item1_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item1_price);

		String value2 = item2_price_SubmitPage().getText();
		value2 = value2.trim();
		String ele2 = item2_qty_SubmitPage().getText();
		ele2 = ele2.trim();
		value2 = value2.substring(1);
		double d2 = Double.parseDouble(value2);
		System.out.println("#############>" + d2);
		int a2 = Integer.parseInt(ele2);
		System.out.println("%%%%%%%%%%%%>" + a2);
		double item2_price = d2 * a2;
		item2_price = Double.parseDouble(new DecimalFormat("##.##").format(item2_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item2_price);

		String value3 = item3_price_SubmitPage().getText();
		value3 = value3.trim();
		String ele3 = item3_qty_SubmitPage().getText();
		ele3 = ele3.trim();
		value3 = value3.substring(1);
		double d3 = Double.parseDouble(value3);
		System.out.println("#############>" + d3);
		int a3 = Integer.parseInt(ele3);
		System.out.println("%%%%%%%%%%%%>" + a3);
		double item3_price = d3 * a3;
		item3_price = Double.parseDouble(new DecimalFormat("##.##").format(item3_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item3_price);

		double Student_SubTotal_exp = item1_price + item2_price + item3_price;
		Student_SubTotal_exp = Double.parseDouble(new DecimalFormat("##.##").format(Student_SubTotal_exp));

		String StudentClbSubTot = subTotal_StudentClubs().getText();
		StudentClbSubTot = StudentClbSubTot.substring(1);
		double Student_SubTotal = Double.parseDouble(StudentClbSubTot);
		Assert.assertEquals(Student_SubTotal, Student_SubTotal_exp, "Student Clubs Subtotal value is incorrect");

		double Student_gst_act = Student_GST();
		double Student_gst_exp = TaxRoundOff_item_1_Tax(stateTaxGST, d1, a1)
				+ TaxRoundOff_item_2_Tax(stateTaxGST, d2, a2) + TaxRoundOff_item_3_Tax(stateTaxGST, d3, a3);
		Student_gst_exp = Double.parseDouble(new DecimalFormat("##.##").format(Student_gst_exp));
		Assert.assertEquals(Student_gst_act, Student_gst_exp, "Student Clubs Subtotal GST value is incorrect");

		double Student_pst_act = Student_PST();
		double Student_pst_exp = TaxRoundOff_item_1_Tax(stateTaxPST, d1, a1)
				+ TaxRoundOff_item_2_Tax(stateTaxPST, d2, a2) + TaxRoundOff_item_3_Tax(stateTaxPST, d3, a3);
		Student_pst_exp = Double.parseDouble(new DecimalFormat("##.##").format(Student_pst_exp));
		Assert.assertEquals(Student_pst_act, Student_pst_exp, "Student Clubs Subtotal PST value is incorrect");

		String StudentClubsTotal_Expected = Total_StudentClubs_SubmitPage().getText();
		StudentClubsTotal_Expected = StudentClubsTotal_Expected.substring(1);
		double StudentClubsTotal_exp = Double.parseDouble(StudentClubsTotal_Expected);
		System.out.println("StudentClubsTotal :::::::: " + StudentClubsTotal_exp);

		double StudentClubsTotal_Actual = Student_SubTotal_exp + Student_gst_exp + Student_pst_exp;
		StudentClubsTotal_Actual = Double.parseDouble(new DecimalFormat("##.##").format(StudentClubsTotal_Actual));
		System.out.println("StudentClubsTotal_Actual :::::::: " + StudentClubsTotal_Actual);

		Assert.assertEquals(StudentClubsTotal_exp, StudentClubsTotal_Actual, "Student Clubs Total value is incorrect");

		////////////////////////////////////////////////////////

		double Shipping_tax_gst = stateTaxGST;
		double Shipping_tax_pst = stateTaxPST;

		String Shipping_val = Total_Shipping_SubmitPage().getText();
		Shipping_val = Shipping_val.trim();

		if (Shipping_val.equals("FREE!")) {
			double ShippingValue_is = 0;
			double Total_Amount_Of_Student = StudentClubsTotal_Actual + ShippingValue_is;
			Total_Amount_Of_Student = Double.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Student));
			String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
			Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
			double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
			Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Student,
					"Total owing value is incorrect");

		} else if (!Shipping_val.equals("FREE!")) {
			String Shipping_act = subTotal_PaidShipping_SubmitPage().getText();
			Shipping_act = Shipping_act.trim();
			Shipping_act = Shipping_act.substring(1);
			double Shipping_act_2 = Double.parseDouble(Shipping_act);
			Shipping_act_2 = Double.parseDouble(new DecimalFormat("##.##").format(Shipping_act_2));

			double gst_Shipping_act = (double) (Shipping_tax_gst * Shipping_act_2) / 100;
			gst_Shipping_act = Double.parseDouble(new DecimalFormat("##.##").format(gst_Shipping_act));
			System.out.println("EXPECTED#########" + gst_Shipping_act);

			String gst_Shipping_exp = amount_GST_Shipping_SubmitPage().getText();
			gst_Shipping_exp = gst_Shipping_exp.trim();
			gst_Shipping_exp = gst_Shipping_exp.substring(1);
			double gst_Shipping_exp_2 = Double.parseDouble(gst_Shipping_exp);

			Assert.assertEquals(gst_Shipping_act, gst_Shipping_exp_2, "Shipping & Handling GST Tax value is incorrect");

			double pst_Shipping_act = (double) (Shipping_tax_pst * Shipping_act_2) / 100;
			pst_Shipping_act = Double.parseDouble(new DecimalFormat("##.##").format(pst_Shipping_act));
			System.out.println("EXPECTED#########" + pst_Shipping_act);

			String pst_Shipping_exp = amount_PST_Shipping_SubmitPage().getText();
			pst_Shipping_exp = pst_Shipping_exp.trim();
			pst_Shipping_exp = pst_Shipping_exp.substring(1);
			double pst_Shipping_exp_2 = Double.parseDouble(pst_Shipping_exp);

			Assert.assertEquals(pst_Shipping_act, pst_Shipping_exp_2, "Shipping & Handling PST Tax value is incorrect");

			double ShippingTotValue_act = Shipping_act_2 + gst_Shipping_act + pst_Shipping_act;
			ShippingTotValue_act = TaxRoundOff_of(ShippingTotValue_act);

			String ShippingTotValue_exp = Total_Shipping_SubmitPage().getText();
			ShippingTotValue_exp = ShippingTotValue_exp.trim();
			ShippingTotValue_exp = ShippingTotValue_exp.substring(1);
			double ShippingTotValue_exp_2 = Double.parseDouble(ShippingTotValue_exp);

			Assert.assertEquals(ShippingTotValue_act, ShippingTotValue_exp_2,
					"Shipping & Handling Total value is incorrect");
			///////////////////////////////////////
			double Total_Amount_Of_Student = StudentClubsTotal_Actual + ShippingTotValue_act;
			Total_Amount_Of_Student = Double.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Student));

			String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
			Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
			double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
			Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Student,
					"Total owing value is incorrect");
		}
	}

	@Override
	public void Validation_of_Student_club_Total_ShippingFee_GST_PST_ConfirmSubmit_Page() {
		int stateTaxGST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxGST");
		double stateTaxPST = TestBaseProvider.getTestBase().getTestData().getDouble("stateTaxPST");
		PauseUtil.pause(8000);

		String value1 = item1_price_SubmitPage().getText();
		value1 = value1.trim();
		String ele1 = item1_qty_SubmitPage().getText();
		ele1 = ele1.trim();
		value1 = value1.substring(1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item1_price = d1 * a1;
		item1_price = Double.parseDouble(new DecimalFormat("##.##").format(item1_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item1_price);

		String value2 = item2_price_SubmitPage().getText();
		value2 = value2.trim();
		String ele2 = item2_qty_SubmitPage().getText();
		ele2 = ele2.trim();
		value2 = value2.substring(1);
		double d2 = Double.parseDouble(value2);
		System.out.println("#############>" + d2);
		int a2 = Integer.parseInt(ele2);
		System.out.println("%%%%%%%%%%%%>" + a2);
		double item2_price = d2 * a2;
		item2_price = Double.parseDouble(new DecimalFormat("##.##").format(item2_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item2_price);

		String value3 = item3_price_SubmitPage().getText();
		value3 = value3.trim();
		String ele3 = item3_qty_SubmitPage().getText();
		ele3 = ele3.trim();
		value3 = value3.substring(1);
		double d3 = Double.parseDouble(value3);
		System.out.println("#############>" + d3);
		int a3 = Integer.parseInt(ele3);
		System.out.println("%%%%%%%%%%%%>" + a3);
		double item3_price = d3 * a3;
		item3_price = Double.parseDouble(new DecimalFormat("##.##").format(item3_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item3_price);

		double Student_SubTotal_exp = item1_price + item2_price + item3_price;
		Student_SubTotal_exp = Double.parseDouble(new DecimalFormat("##.##").format(Student_SubTotal_exp));

		String StudentClbSubTot = subTotal_StudentClubs().getText();
		StudentClbSubTot = StudentClbSubTot.substring(1);
		double Student_SubTotal = Double.parseDouble(StudentClbSubTot);
		Assert.assertEquals(Student_SubTotal, Student_SubTotal_exp, "Student Clubs Subtotal value is incorrect");

		double Student_gst_act = Student_GST();
		double Student_gst_exp = TaxRoundOff_item_1_Tax(stateTaxGST, d1, a1)
				+ TaxRoundOff_item_2_Tax(stateTaxGST, d2, a2) + TaxRoundOff_item_3_Tax(stateTaxGST, d3, a3);
		Student_gst_exp = Double.parseDouble(new DecimalFormat("##.##").format(Student_gst_exp));
		Assert.assertEquals(Student_gst_act, Student_gst_exp, "Student Clubs Subtotal GST value is incorrect");

		double Student_pst_act = Student_PST();
		double Student_pst_exp = TaxRoundOff_item_1_Tax(stateTaxPST, d1, a1)
				+ TaxRoundOff_item_2_Tax(stateTaxPST, d2, a2) + TaxRoundOff_item_3_Tax(stateTaxPST, d3, a3);
		Student_pst_exp = Double.parseDouble(new DecimalFormat("##.##").format(Student_pst_exp));
		Assert.assertEquals(Student_pst_act, Student_pst_exp, "Student Clubs Subtotal PST value is incorrect");

		String StudentClubsTotal_Expected = Total_StudentClubs_SubmitPage().getText();
		StudentClubsTotal_Expected = StudentClubsTotal_Expected.substring(1);
		double StudentClubsTotal_exp = Double.parseDouble(StudentClubsTotal_Expected);
		System.out.println("StudentClubsTotal :::::::: " + StudentClubsTotal_exp);

		double StudentClubsTotal_Actual = Student_SubTotal_exp + Student_gst_exp + Student_pst_exp;
		StudentClubsTotal_Actual = Double.parseDouble(new DecimalFormat("##.##").format(StudentClubsTotal_Actual));
		System.out.println("StudentClubsTotal_Actual :::::::: " + StudentClubsTotal_Actual);

		Assert.assertEquals(StudentClubsTotal_exp, StudentClubsTotal_Actual, "Student Clubs Total value is incorrect");

		////////////////////////////////////////////////////////

		double Shipping_tax_gst = stateTaxGST;
		double Shipping_tax_pst = stateTaxPST;

		String Shipping_val = Total_Shipping_SubmitPage().getText();
		Shipping_val = Shipping_val.trim();

		if (Shipping_val.equals("FREE!")) {
			double ShippingValue_is = 0;
			double Total_Amount_Of_Student = StudentClubsTotal_Actual + ShippingValue_is;
			Total_Amount_Of_Student = Double.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Student));
			String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
			Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
			double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
			Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Student,
					"Total owing value is incorrect");

		} else if (!Shipping_val.equals("FREE!")) {
			String Shipping_act = subTotal_PaidShipping_SubmitPage().getText();
			Shipping_act = Shipping_act.trim();
			Shipping_act = Shipping_act.substring(1);
			double Shipping_act_2 = Double.parseDouble(Shipping_act);
			Shipping_act_2 = Double.parseDouble(new DecimalFormat("##.##").format(Shipping_act_2));

			double gst_Shipping_act = (double) (Shipping_tax_gst * Shipping_act_2) / 100;
			gst_Shipping_act = Double.parseDouble(new DecimalFormat("##.##").format(gst_Shipping_act));
			System.out.println("EXPECTED#########" + gst_Shipping_act);

			String gst_Shipping_exp = amount_GST_Shipping_SubmitPage().getText();
			gst_Shipping_exp = gst_Shipping_exp.trim();
			gst_Shipping_exp = gst_Shipping_exp.substring(1);
			double gst_Shipping_exp_2 = Double.parseDouble(gst_Shipping_exp);

			Assert.assertEquals(gst_Shipping_exp_2, gst_Shipping_act, "Shipping & Handling GST Tax value is incorrect");

			double pst_Shipping_act = (double) (Shipping_tax_pst * Shipping_act_2) / 100;
			pst_Shipping_act = Double.parseDouble(new DecimalFormat("##.##").format(pst_Shipping_act));
			System.out.println("EXPECTED#########" + pst_Shipping_act);

			String pst_Shipping_exp = amount_PST_Shipping_SubmitPage().getText();
			pst_Shipping_exp = pst_Shipping_exp.trim();
			pst_Shipping_exp = pst_Shipping_exp.substring(1);
			double pst_Shipping_exp_2 = Double.parseDouble(pst_Shipping_exp);

			Assert.assertEquals(pst_Shipping_act, pst_Shipping_exp_2, "Shipping & Handling PST Tax value is incorrect");

			double ShippingTotValue_act = Shipping_act_2 + gst_Shipping_act + pst_Shipping_act;
			ShippingTotValue_act = TaxRoundOff_of(ShippingTotValue_act);

			String ShippingTotValue_exp = Total_Shipping_SubmitPage().getText();
			ShippingTotValue_exp = ShippingTotValue_exp.trim();
			ShippingTotValue_exp = ShippingTotValue_exp.substring(1);
			double ShippingTotValue_exp_2 = Double.parseDouble(ShippingTotValue_exp);

			Assert.assertEquals(ShippingTotValue_act, ShippingTotValue_exp_2,
					"Shipping & Handling Total value is incorrect");
			///////////////////////////////////////
			double Total_Amount_Of_Student = StudentClubsTotal_Actual + ShippingTotValue_act;
			Total_Amount_Of_Student = Double.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Student));

			String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
			Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
			double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
			Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Student,
					"Total owing value is incorrect");
		}
	}

	@Override
	public void Validation_of_Student_club_Total_ShippingFee_GST_QST_OrderRefPage() {
		int stateTaxGST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxGST");
		double stateTaxQST = TestBaseProvider.getTestBase().getTestData().getDouble("stateTaxQST");
		PauseUtil.pause(8000);
		Assert.assertTrue(msg_order_reference().isDisplayed(), "Order reference message is not displayed");

		String value1 = item1_price_SubmitPage().getText();
		value1 = value1.trim();
		String ele1 = item1_qty_SubmitPage().getText();
		ele1 = ele1.trim();
		value1 = value1.substring(1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item1_price = d1 * a1;
		item1_price = Double.parseDouble(new DecimalFormat("##.##").format(item1_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item1_price);

		String value2 = item2_price_SubmitPage().getText();
		value2 = value2.trim();
		String ele2 = item2_qty_SubmitPage().getText();
		ele2 = ele2.trim();
		value2 = value2.substring(1);
		double d2 = Double.parseDouble(value2);
		System.out.println("#############>" + d2);
		int a2 = Integer.parseInt(ele2);
		System.out.println("%%%%%%%%%%%%>" + a2);
		double item2_price = d2 * a2;
		item2_price = Double.parseDouble(new DecimalFormat("##.##").format(item2_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item2_price);

		String value3 = item3_price_SubmitPage().getText();
		value3 = value3.trim();
		String ele3 = item3_qty_SubmitPage().getText();
		ele3 = ele3.trim();
		value3 = value3.substring(1);
		double d3 = Double.parseDouble(value3);
		System.out.println("#############>" + d3);
		int a3 = Integer.parseInt(ele3);
		System.out.println("%%%%%%%%%%%%>" + a3);
		double item3_price = d3 * a3;
		item3_price = Double.parseDouble(new DecimalFormat("##.##").format(item3_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item3_price);

		double Student_SubTotal_exp = item1_price + item2_price + item3_price;
		Student_SubTotal_exp = Double.parseDouble(new DecimalFormat("##.##").format(Student_SubTotal_exp));

		String StudentClbSubTot = subTotal_StudentClubs().getText();
		StudentClbSubTot = StudentClbSubTot.substring(1);
		double Student_SubTotal = Double.parseDouble(StudentClbSubTot);
		Assert.assertEquals(Student_SubTotal, Student_SubTotal_exp, "Student Clubs Subtotal value is incorrect");

		double Student_gst_act = Student_GST();
		double Student_gst_exp = TaxRoundOff_item_1_Tax(stateTaxGST, d1, a1)
				+ TaxRoundOff_item_2_Tax(stateTaxGST, d2, a2) + TaxRoundOff_item_3_Tax(stateTaxGST, d3, a3);
		Student_gst_exp = Double.parseDouble(new DecimalFormat("##.##").format(Student_gst_exp));
		Assert.assertEquals(Student_gst_act, Student_gst_exp, "Student Clubs Subtotal GST value is incorrect");

		double Student_qst_act = Student_QST();
		double Student_qst_exp = TaxRoundOff_item_1_Tax(stateTaxQST, d1, a1)
				+ TaxRoundOff_item_2_Tax(stateTaxQST, d2, a2) + TaxRoundOff_item_3_Tax(stateTaxQST, d3, a3);
		Student_qst_exp = Double.parseDouble(new DecimalFormat("##.##").format(Student_qst_exp));
		Assert.assertEquals(Student_qst_act, Student_qst_exp, "Student Clubs Subtotal QST value is incorrect");

		String StudentClubsTotal_Expected = Total_StudentClubs_SubmitPage().getText();
		StudentClubsTotal_Expected = StudentClubsTotal_Expected.substring(1);
		double StudentClubsTotal_exp = Double.parseDouble(StudentClubsTotal_Expected);
		System.out.println("StudentClubsTotal :::::::: " + StudentClubsTotal_exp);

		double StudentClubsTotal_Actual = Student_SubTotal_exp + Student_gst_exp + Student_qst_exp;
		StudentClubsTotal_Actual = Double.parseDouble(new DecimalFormat("##.##").format(StudentClubsTotal_Actual));
		System.out.println("StudentClubsTotal_Actual :::::::: " + StudentClubsTotal_Actual);

		Assert.assertEquals(StudentClubsTotal_exp, StudentClubsTotal_Actual, "Student Clubs Total value is incorrect");

		////////////////////////////////////////////////////////

		double Shipping_tax_gst = stateTaxGST;
		double Shipping_tax_qst = stateTaxQST;

		String Shipping_val = Total_Shipping_SubmitPage().getText();
		Shipping_val = Shipping_val.trim();

		if (Shipping_val.equals("FREE!")) {
			double ShippingValue_is = 0;
			double Total_Amount_Of_Student = StudentClubsTotal_Actual + ShippingValue_is;
			Total_Amount_Of_Student = Double.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Student));
			String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
			Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
			double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
			Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Student,
					"Total owing value is incorrect");

		} else if (!Shipping_val.equals("FREE!")) {
			String Shipping_act = subTotal_Shipping_SubmitPage1().getText();
			Shipping_act = Shipping_act.trim();
			Shipping_act = Shipping_act.substring(1);
			double Shipping_act_2 = Double.parseDouble(Shipping_act);
			Shipping_act_2 = Double.parseDouble(new DecimalFormat("##.##").format(Shipping_act_2));

			double gst_Shipping_act = (double) (Shipping_tax_gst * Shipping_act_2) / 100;
			gst_Shipping_act = Double.parseDouble(new DecimalFormat("##.##").format(gst_Shipping_act));
			System.out.println("EXPECTED#########" + gst_Shipping_act);

			String gst_Shipping_exp = amount_GST_Shipping_SubmitPage().getText();
			gst_Shipping_exp = gst_Shipping_exp.trim();
			gst_Shipping_exp = gst_Shipping_exp.substring(1);
			double gst_Shipping_exp_2 = Double.parseDouble(gst_Shipping_exp);
			System.out.println("gst_Shipping_act" + gst_Shipping_act);
			System.out.println("gst_Shipping_exp_2" + gst_Shipping_exp_2);
			Assert.assertEquals(gst_Shipping_act, gst_Shipping_exp_2, "Shipping & Handling GST Tax value is incorrect");

			double qst_Shipping_act = (double) (Shipping_tax_qst * Shipping_act_2) / 100;
			qst_Shipping_act = Double.parseDouble(new DecimalFormat("##.##").format(qst_Shipping_act));
			System.out.println("EXPECTED#########" + qst_Shipping_act);

			String qst_Shipping_exp = amount_PST_Shipping_SubmitPage().getText();
			qst_Shipping_exp = qst_Shipping_exp.trim();
			qst_Shipping_exp = qst_Shipping_exp.substring(1);
			double qst_Shipping_exp_2 = Double.parseDouble(qst_Shipping_exp);

			Assert.assertEquals(qst_Shipping_act, qst_Shipping_exp_2, "Shipping & Handling QST Tax value is incorrect");

			double ShippingTotValue_act = Shipping_act_2 + gst_Shipping_act + qst_Shipping_act;
			ShippingTotValue_act = TaxRoundOff_of(ShippingTotValue_act);

			String ShippingTotValue_exp = Total_Shipping_SubmitPage().getText();
			ShippingTotValue_exp = ShippingTotValue_exp.trim();
			ShippingTotValue_exp = ShippingTotValue_exp.substring(1);
			double ShippingTotValue_exp_2 = Double.parseDouble(ShippingTotValue_exp);

			Assert.assertEquals(ShippingTotValue_act, ShippingTotValue_exp_2,
					"Shipping & Handling Total value is incorrect");
			///////////////////////////////////////
			double Total_Amount_Of_Student = StudentClubsTotal_Actual + ShippingTotValue_act;
			Total_Amount_Of_Student = Double.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Student));

			String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
			Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
			double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
			Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Student,
					"Total owing value is incorrect");
		}
	}

	@Override
	public void Validation_of_Student_club_Total_ShippingFee_GST_QST_ConfirmSubmit_Page() {
		int stateTaxGST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxGST");
		double stateTaxQST = TestBaseProvider.getTestBase().getTestData().getDouble("stateTaxQST");
		PauseUtil.pause(8000);

		String value1 = item1_price_SubmitPage().getText();
		value1 = value1.trim();
		String ele1 = item1_qty_SubmitPage().getText();
		ele1 = ele1.trim();
		value1 = value1.substring(1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item1_price = d1 * a1;
		item1_price = Double.parseDouble(new DecimalFormat("##.##").format(item1_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item1_price);

		String value2 = item2_price_SubmitPage().getText();
		value2 = value2.trim();
		String ele2 = item2_qty_SubmitPage().getText();
		ele2 = ele2.trim();
		value2 = value2.substring(1);
		double d2 = Double.parseDouble(value2);
		System.out.println("#############>" + d2);
		int a2 = Integer.parseInt(ele2);
		System.out.println("%%%%%%%%%%%%>" + a2);
		double item2_price = d2 * a2;
		item2_price = Double.parseDouble(new DecimalFormat("##.##").format(item2_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item2_price);

		String value3 = item3_price_SubmitPage().getText();
		value3 = value3.trim();
		String ele3 = item3_qty_SubmitPage().getText();
		ele3 = ele3.trim();
		value3 = value3.substring(1);
		double d3 = Double.parseDouble(value3);
		System.out.println("#############>" + d3);
		int a3 = Integer.parseInt(ele3);
		System.out.println("%%%%%%%%%%%%>" + a3);
		double item3_price = d3 * a3;
		item3_price = Double.parseDouble(new DecimalFormat("##.##").format(item3_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item3_price);

		double Student_SubTotal_exp = item1_price + item2_price + item3_price;
		Student_SubTotal_exp = Double.parseDouble(new DecimalFormat("##.##").format(Student_SubTotal_exp));

		String StudentClbSubTot = subTotal_StudentClubs().getText();
		StudentClbSubTot = StudentClbSubTot.substring(1);
		double Student_SubTotal = Double.parseDouble(StudentClbSubTot);
		Assert.assertEquals(Student_SubTotal, Student_SubTotal_exp, "Student Clubs Subtotal value is incorrect");

		double Student_gst_act = Student_GST();
		double Student_gst_exp = TaxRoundOff_item_1_Tax(stateTaxGST, d1, a1)
				+ TaxRoundOff_item_2_Tax(stateTaxGST, d2, a2) + TaxRoundOff_item_3_Tax(stateTaxGST, d3, a3);
		Student_gst_exp = Double.parseDouble(new DecimalFormat("##.##").format(Student_gst_exp));
		Assert.assertEquals(Student_gst_act, Student_gst_exp, "Student Clubs Subtotal GST value is incorrect");

		double Student_qst_act = Student_QST();
		double Student_qst_exp = TaxRoundOff_item_1_Tax(stateTaxQST, d1, a1)
				+ TaxRoundOff_item_2_Tax(stateTaxQST, d2, a2) + TaxRoundOff_item_3_Tax(stateTaxQST, d3, a3);
		Student_qst_exp = Double.parseDouble(new DecimalFormat("##.##").format(Student_qst_exp));
		Assert.assertEquals(Student_qst_act, Student_qst_exp, "Student Clubs Subtotal QST value is incorrect");

		String StudentClubsTotal_Expected = Total_StudentClubs_SubmitPage().getText();
		StudentClubsTotal_Expected = StudentClubsTotal_Expected.substring(1);
		double StudentClubsTotal_exp = Double.parseDouble(StudentClubsTotal_Expected);
		System.out.println("StudentClubsTotal :::::::: " + StudentClubsTotal_exp);

		double StudentClubsTotal_Actual = Student_SubTotal_exp + Student_gst_exp + Student_qst_exp;
		System.out.println("StudentClubsTotal_Actual :::::::: " + StudentClubsTotal_Actual);
		StudentClubsTotal_Actual = Double.parseDouble(new DecimalFormat("##.##").format(StudentClubsTotal_Actual));

		Assert.assertEquals(StudentClubsTotal_exp, StudentClubsTotal_Actual, "Student Clubs Total value is incorrect");

		////////////////////////////////////////////////////////

		double Shipping_tax_gst = stateTaxGST;
		double Shipping_tax_qst = stateTaxQST;

		String Shipping_val = Total_Shipping_SubmitPage().getText();
		Shipping_val = Shipping_val.trim();

		if (Shipping_val.equals("FREE!")) {
			double ShippingValue_is = 0;
			double Total_Amount_Of_Student = StudentClubsTotal_Actual + ShippingValue_is;
			Total_Amount_Of_Student = Double.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Student));
			String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
			Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
			double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
			Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Student,
					"Total owing value is incorrect");

		} else if (!Shipping_val.equals("FREE!")) {
			String Shipping_act = subTotal_Shipping_SubmitPage().getText();
			Shipping_act = Shipping_act.trim();
			Shipping_act = Shipping_act.substring(1);
			double Shipping_act_2 = Double.parseDouble(Shipping_act);
			Shipping_act_2 = Double.parseDouble(new DecimalFormat("##.##").format(Shipping_act_2));

			double gst_Shipping_act = (double) (Shipping_tax_gst * Shipping_act_2) / 100;
			gst_Shipping_act = Double.parseDouble(new DecimalFormat("##.##").format(gst_Shipping_act));
			System.out.println("EXPECTED#########" + gst_Shipping_act);

			String gst_Shipping_exp = amount_GST_Shipping_SubmitPage().getText();
			gst_Shipping_exp = gst_Shipping_exp.trim();
			gst_Shipping_exp = gst_Shipping_exp.substring(1);
			double gst_Shipping_exp_2 = Double.parseDouble(gst_Shipping_exp);

			Assert.assertEquals(gst_Shipping_act, gst_Shipping_exp_2, "Shipping & Handling GST Tax value is incorrect");

			double qst_Shipping_act = (double) (Shipping_tax_qst * Shipping_act_2) / 100;
			qst_Shipping_act = Double.parseDouble(new DecimalFormat("##.##").format(qst_Shipping_act));
			System.out.println("EXPECTED#########" + qst_Shipping_act);

			String qst_Shipping_exp = amount_PST_Shipping_SubmitPage().getText();
			qst_Shipping_exp = qst_Shipping_exp.trim();
			qst_Shipping_exp = qst_Shipping_exp.substring(1);
			double qst_Shipping_exp_2 = Double.parseDouble(qst_Shipping_exp);

			Assert.assertEquals(qst_Shipping_act, qst_Shipping_exp_2, "Shipping & Handling QST Tax value is incorrect");

			double ShippingTotValue_act = Shipping_act_2 + gst_Shipping_act + qst_Shipping_act;
			ShippingTotValue_act = TaxRoundOff_of(ShippingTotValue_act);

			String ShippingTotValue_exp = Total_Shipping_SubmitPage().getText();
			ShippingTotValue_exp = ShippingTotValue_exp.trim();
			ShippingTotValue_exp = ShippingTotValue_exp.substring(1);
			double ShippingTotValue_exp_2 = Double.parseDouble(ShippingTotValue_exp);

			Assert.assertEquals(ShippingTotValue_act, ShippingTotValue_exp_2,
					"Shipping & Handling Total value is incorrect");
			///////////////////////////////////////
			double Total_Amount_Of_Student = StudentClubsTotal_Actual + ShippingTotValue_act;
			Total_Amount_Of_Student = Double.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Student));

			String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
			Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
			double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
			Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Student,
					"Total owing value is incorrect");
		}
	}

	@Override
	public void Validation_of_Student_club_Total_ShippingFee_HST_OrderRefPage() {
		int stateTaxHST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxHST");
		PauseUtil.pause(8000);
		Assert.assertTrue(msg_order_reference().isDisplayed(), "Order reference message is not displayed");

		String value1 = item1_price_SubmitPage().getText();
		value1 = value1.trim();
		String ele1 = item1_qty_SubmitPage().getText();
		ele1 = ele1.trim();
		value1 = value1.substring(1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item1_price = d1 * a1;
		item1_price = Double.parseDouble(new DecimalFormat("##.##").format(item1_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item1_price);

		String value2 = item2_price_SubmitPage().getText();
		value2 = value2.trim();
		String ele2 = item2_qty_SubmitPage().getText();
		ele2 = ele2.trim();
		value2 = value2.substring(1);
		double d2 = Double.parseDouble(value2);
		System.out.println("#############>" + d2);
		int a2 = Integer.parseInt(ele2);
		System.out.println("%%%%%%%%%%%%>" + a2);
		double item2_price = d2 * a2;
		item2_price = Double.parseDouble(new DecimalFormat("##.##").format(item2_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item2_price);

		String value3 = item3_price_SubmitPage().getText();
		value3 = value3.trim();
		String ele3 = item3_qty_SubmitPage().getText();
		ele3 = ele3.trim();
		value3 = value3.substring(1);
		double d3 = Double.parseDouble(value3);
		System.out.println("#############>" + d3);
		int a3 = Integer.parseInt(ele3);
		System.out.println("%%%%%%%%%%%%>" + a3);
		double item3_price = d3 * a3;
		item3_price = Double.parseDouble(new DecimalFormat("##.##").format(item3_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item3_price);

		double Student_SubTotal_exp = item1_price + item2_price + item3_price;
		Student_SubTotal_exp = Double.parseDouble(new DecimalFormat("##.##").format(Student_SubTotal_exp));

		String StudentClbSubTot = subTotal_StudentClubs().getText();
		StudentClbSubTot = StudentClbSubTot.substring(1);
		double Student_SubTotal = Double.parseDouble(StudentClbSubTot);
		Assert.assertEquals(Student_SubTotal, Student_SubTotal_exp, "Student Clubs Subtotal value is incorrect");

		double Student_hst_act = Student_HST();
		double Student_hst_exp = TaxRoundOff_item_1_Tax(stateTaxHST, d1, a1)
				+ TaxRoundOff_item_2_Tax(stateTaxHST, d2, a2) + TaxRoundOff_item_3_Tax(stateTaxHST, d3, a3);
		Student_hst_exp = Double.parseDouble(new DecimalFormat("##.##").format(Student_hst_exp));
		Assert.assertEquals(Student_hst_act, Student_hst_exp, "Student Clubs Subtotal HST value is incorrect");

		String StudentClubsTotal_Expected = Total_StudentClubs_SubmitPage().getText();
		StudentClubsTotal_Expected = StudentClubsTotal_Expected.substring(1);
		double StudentClubsTotal_exp = Double.parseDouble(StudentClubsTotal_Expected);
		System.out.println("StudentClubsTotal :::::::: " + StudentClubsTotal_exp);

		double StudentClubsTotal_Actual = Student_SubTotal_exp + Student_hst_exp;
		StudentClubsTotal_Actual = Double.parseDouble(new DecimalFormat("##.##").format(StudentClubsTotal_Actual));
		System.out.println("StudentClubsTotal_Actual :::::::: " + StudentClubsTotal_Actual);

		Assert.assertEquals(StudentClubsTotal_exp, StudentClubsTotal_Actual, "Student Clubs Total value is incorrect");

		////////////////////////////////////////////////////////

		double Shipping_tax = stateTaxHST;

		String Shipping_val = Total_Shipping_SubmitPage().getText();
		Shipping_val = Shipping_val.trim();

		if (Shipping_val.equals("FREE!")) {
			double ShippingValue_is = 0;
			double Total_Amount_Of_Student = StudentClubsTotal_Actual + ShippingValue_is;
			Total_Amount_Of_Student = Double.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Student));
			String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
			Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
			double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
			Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Student,
					"Total owing value is incorrect");

		} else if (!Shipping_val.equals("FREE!")) {
			String Shipping_act = subTotal_PaidShipping_SubmitPage().getText();
			Shipping_act = Shipping_act.trim();
			Shipping_act = Shipping_act.substring(1);
			double Shipping_act_2 = Double.parseDouble(Shipping_act);
			Shipping_act_2 = Double.parseDouble(new DecimalFormat("##.##").format(Shipping_act_2));

			double hst_Shipping_act = (double) (Shipping_tax * Shipping_act_2) / 100;
			hst_Shipping_act = Double.parseDouble(new DecimalFormat("##.##").format(hst_Shipping_act));
			System.out.println("EXPECTED#########" + hst_Shipping_act);

			String hst_Shipping_exp = amount_GST_Shipping_SubmitPage().getText();
			hst_Shipping_exp = hst_Shipping_exp.trim();
			hst_Shipping_exp = hst_Shipping_exp.substring(1);
			double hst_Shipping_exp_2 = Double.parseDouble(hst_Shipping_exp);

			Assert.assertEquals(hst_Shipping_act, hst_Shipping_exp_2, "Shipping & Handling Tax value is incorrect");

			double ShippingTotValue_act1 = Shipping_act_2 + hst_Shipping_act;
			ShippingTotValue_act1 = TaxRoundOff_of(ShippingTotValue_act1);

			double r = (double) Math.round(ShippingTotValue_act1 * 100);
			double ShippingTotValue_act = r / 100.0;

			String ShippingTotValue_exp = Total_Shipping_SubmitPage().getText();
			ShippingTotValue_exp = ShippingTotValue_exp.trim();
			ShippingTotValue_exp = ShippingTotValue_exp.substring(1);
			double ShippingTotValue_exp_2 = Double.parseDouble(ShippingTotValue_exp);

			Assert.assertEquals(ShippingTotValue_act, ShippingTotValue_exp_2,
					"Shipping & Handling Total value is incorrect");
			///////////////////////////////////////
			double Total_Amount_Of_Student = StudentClubsTotal_Actual + ShippingTotValue_act;
			Total_Amount_Of_Student = Double.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Student));

			String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
			Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
			double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
			Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Student,
					"Total owing value is incorrect");
		}
	}

	@Override
	public void Validation_of_Student_club_Total_ShippingFee_HST_ConfirmSubmit_Page() {
		int stateTaxHST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxHST");
		PauseUtil.pause(8000);

		String value1 = item1_price_SubmitPage().getText();
		value1 = value1.trim();
		String ele1 = item1_qty_SubmitPage().getText();
		ele1 = ele1.trim();
		value1 = value1.substring(1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item1_price = d1 * a1;
		item1_price = Double.parseDouble(new DecimalFormat("##.##").format(item1_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item1_price);

		String value2 = item2_price_SubmitPage().getText();
		value2 = value2.trim();
		String ele2 = item2_qty_SubmitPage().getText();
		ele2 = ele2.trim();
		value2 = value2.substring(1);
		double d2 = Double.parseDouble(value2);
		System.out.println("#############>" + d2);
		int a2 = Integer.parseInt(ele2);
		System.out.println("%%%%%%%%%%%%>" + a2);
		double item2_price = d2 * a2;
		item2_price = Double.parseDouble(new DecimalFormat("##.##").format(item2_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item2_price);

		String value3 = item3_price_SubmitPage().getText();
		value3 = value3.trim();
		String ele3 = item3_qty_SubmitPage().getText();
		ele3 = ele3.trim();
		value3 = value3.substring(1);
		double d3 = Double.parseDouble(value3);
		System.out.println("#############>" + d3);
		int a3 = Integer.parseInt(ele3);
		System.out.println("%%%%%%%%%%%%>" + a3);
		double item3_price = d3 * a3;
		item3_price = Double.parseDouble(new DecimalFormat("##.##").format(item3_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item3_price);

		double Student_SubTotal_exp = item1_price + item2_price + item3_price;
		Student_SubTotal_exp = Double.parseDouble(new DecimalFormat("##.##").format(Student_SubTotal_exp));

		String StudentClbSubTot = subTotal_StudentClubs().getText();
		StudentClbSubTot = StudentClbSubTot.substring(1);
		double Student_SubTotal = Double.parseDouble(StudentClbSubTot);
		Assert.assertEquals(Student_SubTotal, Student_SubTotal_exp, "Student Clubs Subtotal value is incorrect");

		double Student_hst_act = Student_HST();
		double Student_hst_exp = TaxRoundOff_item_1_Tax(stateTaxHST, d1, a1)
				+ TaxRoundOff_item_2_Tax(stateTaxHST, d2, a2) + TaxRoundOff_item_3_Tax(stateTaxHST, d3, a3);
		Student_hst_exp = Double.parseDouble(new DecimalFormat("##.##").format(Student_hst_exp));
		Assert.assertEquals(Student_hst_act, Student_hst_exp, "Student Clubs Subtotal HST value is incorrect");

		String StudentClubsTotal_Expected = Total_StudentClubs_SubmitPage().getText();
		StudentClubsTotal_Expected = StudentClubsTotal_Expected.substring(1);
		double StudentClubsTotal_exp = Double.parseDouble(StudentClubsTotal_Expected);
		System.out.println("StudentClubsTotal :::::::: " + StudentClubsTotal_exp);

		double StudentClubsTotal_Actual = Student_SubTotal_exp + Student_hst_exp;
		StudentClubsTotal_Actual = Double.parseDouble(new DecimalFormat("##.##").format(StudentClubsTotal_Actual));
		System.out.println("StudentClubsTotal_Actual :::::::: " + StudentClubsTotal_Actual);

		Assert.assertEquals(StudentClubsTotal_exp, StudentClubsTotal_Actual, "Student Clubs Total value is incorrect");

		////////////////////////////////////////////////////////

		double Shipping_tax = stateTaxHST;

		String Shipping_val = Total_Shipping_SubmitPage().getText();
		Shipping_val = Shipping_val.trim();

		if (Shipping_val.equals("FREE!")) {
			double ShippingValue_is = 0;
			double Total_Amount_Of_Student = StudentClubsTotal_Actual + ShippingValue_is;
			Total_Amount_Of_Student = Double.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Student));
			String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
			Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
			double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
			Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Student,
					"Total owing value is incorrect");

		} else if (!Shipping_val.equals("FREE!")) {
			String Shipping_act = subTotal_PaidShipping_SubmitPage().getText();
			Shipping_act = Shipping_act.trim();
			Shipping_act = Shipping_act.substring(1);
			double Shipping_act_2 = Double.parseDouble(Shipping_act);
			Shipping_act_2 = Double.parseDouble(new DecimalFormat("##.##").format(Shipping_act_2));

			double hst_Shipping_act = (double) (Shipping_tax * Shipping_act_2) / 100;
			hst_Shipping_act = Double.parseDouble(new DecimalFormat("##.##").format(hst_Shipping_act));
			System.out.println("EXPECTED#########" + hst_Shipping_act);

			String hst_Shipping_exp = amount_GST_Shipping_SubmitPage().getText();
			hst_Shipping_exp = hst_Shipping_exp.trim();
			hst_Shipping_exp = hst_Shipping_exp.substring(1);
			double hst_Shipping_exp_2 = Double.parseDouble(hst_Shipping_exp);

			Assert.assertEquals(hst_Shipping_act, hst_Shipping_exp_2, "Shipping & Handling Tax value is incorrect");

			double ShippingTotValue_act = Shipping_act_2 + hst_Shipping_act;
			ShippingTotValue_act = TaxRoundOff_of(ShippingTotValue_act);

			String ShippingTotValue_exp = Total_Shipping_SubmitPage().getText();
			ShippingTotValue_exp = ShippingTotValue_exp.trim();
			ShippingTotValue_exp = ShippingTotValue_exp.substring(1);
			double ShippingTotValue_exp_2 = Double.parseDouble(ShippingTotValue_exp);

			Assert.assertEquals(ShippingTotValue_act, ShippingTotValue_exp_2,
					"Shipping & Handling Total value is incorrect");
			///////////////////////////////////////
			double Total_Amount_Of_Student = StudentClubsTotal_Actual + ShippingTotValue_act;
			Total_Amount_Of_Student = Double.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Student));

			String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
			Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
			double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
			Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Student,
					"Total owing value is incorrect");
		}
	}

	@Override
	public void Validation_of_Student_club_Total_ShippingFee_GST_OrderRefPage() {
		int stateTaxGST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxGST");
		PauseUtil.pause(8000);
		Assert.assertTrue(msg_order_reference().isDisplayed(), "Order reference message is not displayed");

		String value1 = item1_price_SubmitPage().getText();
		value1 = value1.trim();
		String ele1 = item1_qty_SubmitPage().getText();
		ele1 = ele1.trim();
		value1 = value1.substring(1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item1_price = d1 * a1;
		item1_price = Double.parseDouble(new DecimalFormat("##.##").format(item1_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item1_price);

		String value2 = item2_price_SubmitPage().getText();
		value2 = value2.trim();
		String ele2 = item2_qty_SubmitPage().getText();
		ele2 = ele2.trim();
		value2 = value2.substring(1);
		double d2 = Double.parseDouble(value2);
		System.out.println("#############>" + d2);
		int a2 = Integer.parseInt(ele2);
		System.out.println("%%%%%%%%%%%%>" + a2);
		double item2_price = d2 * a2;
		item2_price = Double.parseDouble(new DecimalFormat("##.##").format(item2_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item2_price);

		String value3 = item3_price_SubmitPage().getText();
		value3 = value3.trim();
		String ele3 = item3_qty_SubmitPage().getText();
		ele3 = ele3.trim();
		value3 = value3.substring(1);
		double d3 = Double.parseDouble(value3);
		System.out.println("#############>" + d3);
		int a3 = Integer.parseInt(ele3);
		System.out.println("%%%%%%%%%%%%>" + a3);
		double item3_price = d3 * a3;
		item3_price = Double.parseDouble(new DecimalFormat("##.##").format(item3_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item3_price);

		double Student_SubTotal_exp = item1_price + item2_price + item3_price;
		Student_SubTotal_exp = Double.parseDouble(new DecimalFormat("##.##").format(Student_SubTotal_exp));

		String StudentClbSubTot = subTotal_StudentClubs().getText();
		StudentClbSubTot = StudentClbSubTot.substring(1);
		double Student_SubTotal = Double.parseDouble(StudentClbSubTot);
		Assert.assertEquals(Student_SubTotal, Student_SubTotal_exp, "Student Clubs Subtotal value is incorrect");

		double Student_gst_act = Student_GST();
		double Student_gst_exp = TaxRoundOff_item_1_Tax(stateTaxGST, d1, a1)
				+ TaxRoundOff_item_2_Tax(stateTaxGST, d2, a2) + TaxRoundOff_item_3_Tax(stateTaxGST, d3, a3);
		Student_gst_exp = Double.parseDouble(new DecimalFormat("##.##").format(Student_gst_exp));
		Assert.assertEquals(Student_gst_act, Student_gst_exp, "Student Clubs Subtotal GST value is incorrect");

		String StudentClubsTotal_Expected = Total_StudentClubs_SubmitPage().getText();
		StudentClubsTotal_Expected = StudentClubsTotal_Expected.substring(1);
		double StudentClubsTotal_exp = Double.parseDouble(StudentClubsTotal_Expected);
		System.out.println("StudentClubsTotal :::::::: " + StudentClubsTotal_exp);

		double StudentClubsTotal_Actual = Student_SubTotal_exp + Student_gst_exp;
		StudentClubsTotal_Actual = Double.parseDouble(new DecimalFormat("##.##").format(StudentClubsTotal_Actual));
		System.out.println("StudentClubsTotal_Actual :::::::: " + StudentClubsTotal_Actual);

		Assert.assertEquals(StudentClubsTotal_exp, StudentClubsTotal_Actual, "Student Clubs Total value is incorrect");

		////////////////////////////////////////////////////////

		double Shipping_tax = stateTaxGST;

		String Shipping_val = Total_Shipping_SubmitPage().getText();
		Shipping_val = Shipping_val.trim();

		if (Shipping_val.equals("FREE!")) {
			double ShippingValue_is = 0;
			double Total_Amount_Of_Student = StudentClubsTotal_Actual + ShippingValue_is;
			Total_Amount_Of_Student = Double.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Student));
			String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
			Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
			double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
			Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Student,
					"Total owing value is incorrect");

		} else if (!Shipping_val.equals("FREE!")) {
			String Shipping_act = subTotal_PaidShipping_SubmitPage().getText();
			Shipping_act = Shipping_act.trim();
			Shipping_act = Shipping_act.substring(1);
			double Shipping_act_2 = Double.parseDouble(Shipping_act);
			Shipping_act_2 = Double.parseDouble(new DecimalFormat("##.##").format(Shipping_act_2));

			double gst_Shipping_act = (double) (Shipping_tax * Shipping_act_2) / 100;
			gst_Shipping_act = Double.parseDouble(new DecimalFormat("##.##").format(gst_Shipping_act));
			System.out.println("EXPECTED#########" + gst_Shipping_act);

			String gst_Shipping_exp = amount_GST_Shipping_SubmitPage().getText();
			gst_Shipping_exp = gst_Shipping_exp.trim();
			gst_Shipping_exp = gst_Shipping_exp.substring(1);
			double gst_Shipping_exp_2 = Double.parseDouble(gst_Shipping_exp);

			Assert.assertEquals(gst_Shipping_act, gst_Shipping_exp_2, "Shipping & Handling Tax value is incorrect");

			double ShippingTotValue_act = Shipping_act_2 + gst_Shipping_act;
			ShippingTotValue_act = TaxRoundOff_of(ShippingTotValue_act);

			String ShippingTotValue_exp = Total_Shipping_SubmitPage().getText();
			ShippingTotValue_exp = ShippingTotValue_exp.trim();
			ShippingTotValue_exp = ShippingTotValue_exp.substring(1);
			double ShippingTotValue_exp_2 = Double.parseDouble(ShippingTotValue_exp);

			Assert.assertEquals(ShippingTotValue_act, ShippingTotValue_exp_2,
					"Shipping & Handling Total value is incorrect");
			///////////////////////////////////////
			double Total_Amount_Of_Student = StudentClubsTotal_Actual + ShippingTotValue_act;
			Total_Amount_Of_Student = Double.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Student));

			String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
			Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
			double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
			Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Student,
					"Total owing value is incorrect");
		}
	}

	@Override
	public void Validation_of_Student_club_Total_ShippingFee_GST_ConfirmSubmit_Page() {
		int stateTaxGST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxGST");
		PauseUtil.pause(8000);

		String value1 = item1_price_SubmitPage().getText();
		value1 = value1.trim();
		String ele1 = item1_qty_SubmitPage().getText();
		ele1 = ele1.trim();
		value1 = value1.substring(1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item1_price = d1 * a1;
		item1_price = Double.parseDouble(new DecimalFormat("##.##").format(item1_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item1_price);

		String value2 = item2_price_SubmitPage().getText();
		value2 = value2.trim();
		String ele2 = item2_qty_SubmitPage().getText();
		ele2 = ele2.trim();
		value2 = value2.substring(1);
		double d2 = Double.parseDouble(value2);
		System.out.println("#############>" + d2);
		int a2 = Integer.parseInt(ele2);
		System.out.println("%%%%%%%%%%%%>" + a2);
		double item2_price = d2 * a2;
		item2_price = Double.parseDouble(new DecimalFormat("##.##").format(item2_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item2_price);

		String value3 = item3_price_SubmitPage().getText();
		value3 = value3.trim();
		String ele3 = item3_qty_SubmitPage().getText();
		ele3 = ele3.trim();
		value3 = value3.substring(1);
		double d3 = Double.parseDouble(value3);
		System.out.println("#############>" + d3);
		int a3 = Integer.parseInt(ele3);
		System.out.println("%%%%%%%%%%%%>" + a3);
		double item3_price = d3 * a3;
		item3_price = Double.parseDouble(new DecimalFormat("##.##").format(item3_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item3_price);

		double Student_SubTotal_exp = item1_price + item2_price + item3_price;
		Student_SubTotal_exp = Double.parseDouble(new DecimalFormat("##.##").format(Student_SubTotal_exp));

		String StudentClbSubTot = subTotal_StudentClubs().getText();
		StudentClbSubTot = StudentClbSubTot.substring(1);
		double Student_SubTotal = Double.parseDouble(StudentClbSubTot);
		Assert.assertEquals(Student_SubTotal, Student_SubTotal_exp, "Student Clubs Subtotal value is incorrect");

		double Student_gst_act = Student_GST();
		double Student_gst_exp = TaxRoundOff_item_1_Tax(stateTaxGST, d1, a1)
				+ TaxRoundOff_item_2_Tax(stateTaxGST, d2, a2) + TaxRoundOff_item_3_Tax(stateTaxGST, d3, a3);
		Student_gst_exp = Double.parseDouble(new DecimalFormat("##.##").format(Student_gst_exp));
		Assert.assertEquals(Student_gst_act, Student_gst_exp, "Student Clubs Subtotal GST value is incorrect");

		String StudentClubsTotal_Expected = Total_StudentClubs_SubmitPage().getText();
		StudentClubsTotal_Expected = StudentClubsTotal_Expected.substring(1);
		double StudentClubsTotal_exp = Double.parseDouble(StudentClubsTotal_Expected);
		System.out.println("StudentClubsTotal :::::::: " + StudentClubsTotal_exp);

		double StudentClubsTotal_Actual = Student_SubTotal_exp + Student_gst_exp;
		StudentClubsTotal_Actual = Double.parseDouble(new DecimalFormat("##.##").format(StudentClubsTotal_Actual));
		System.out.println("StudentClubsTotal_Actual :::::::: " + StudentClubsTotal_Actual);

		Assert.assertEquals(StudentClubsTotal_exp, StudentClubsTotal_Actual, "Student Clubs Total value is incorrect");

		////////////////////////////////////////////////////////

		double Shipping_tax = stateTaxGST;

		String Shipping_val = Total_Shipping_SubmitPage().getText();
		Shipping_val = Shipping_val.trim();

		if (Shipping_val.equals("FREE!")) {
			double ShippingValue_is = 0;
			double Total_Amount_Of_Student = StudentClubsTotal_Actual + ShippingValue_is;
			Total_Amount_Of_Student = Double.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Student));
			String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
			Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
			double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
			Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Student,
					"Total owing value is incorrect");

		} else if (!Shipping_val.equals("FREE!")) {
			String Shipping_act = subTotal_PaidShipping_SubmitPage().getText();
			Shipping_act = Shipping_act.trim();
			Shipping_act = Shipping_act.substring(1);
			double Shipping_act_2 = Double.parseDouble(Shipping_act);
			Shipping_act_2 = Double.parseDouble(new DecimalFormat("##.##").format(Shipping_act_2));

			double gst_Shipping_act = (double) (Shipping_tax * Shipping_act_2) / 100;
			gst_Shipping_act = Double.parseDouble(new DecimalFormat("##.##").format(gst_Shipping_act));
			System.out.println("EXPECTED#########" + gst_Shipping_act);

			String gst_Shipping_exp = amount_GST_Shipping_SubmitPage().getText();
			gst_Shipping_exp = gst_Shipping_exp.trim();
			gst_Shipping_exp = gst_Shipping_exp.substring(1);
			double gst_Shipping_exp_2 = Double.parseDouble(gst_Shipping_exp);

			Assert.assertEquals(gst_Shipping_act, gst_Shipping_exp_2, "Shipping & Handling Tax value is incorrect");

			double ShippingTotValue_act = Shipping_act_2 + gst_Shipping_act;
			ShippingTotValue_act = TaxRoundOff_of(ShippingTotValue_act);

			String ShippingTotValue_exp = Total_Shipping_SubmitPage().getText();
			ShippingTotValue_exp = ShippingTotValue_exp.trim();
			ShippingTotValue_exp = ShippingTotValue_exp.substring(1);
			double ShippingTotValue_exp_2 = Double.parseDouble(ShippingTotValue_exp);

			Assert.assertEquals(ShippingTotValue_act, ShippingTotValue_exp_2,
					"Shipping & Handling Total value is incorrect");
			///////////////////////////////////////
			double Total_Amount_Of_Student = StudentClubsTotal_Actual + ShippingTotValue_act;
			Total_Amount_Of_Student = Double.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Student));

			String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
			Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
			double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
			Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Student,
					"Total owing value is incorrect");
		}
	}

	@Override
	public void Validation_of_Teacher_Catalogues_Total_ShippingFee_HST_OrderRefPage() {
		int stateTaxHST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxHST");
		PauseUtil.pause(8000);
		Assert.assertTrue(msg_order_reference().isDisplayed(), "Order reference message is not displayed");

		String value1 = item1_price_SubmitPage().getText();
		value1 = value1.trim();
		String ele1 = item1_qty_SubmitPage().getText();
		ele1 = ele1.trim();
		value1 = value1.substring(1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item1_price = d1 * a1;
		item1_price = Double.parseDouble(new DecimalFormat("##.##").format(item1_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item1_price);

		String value2 = item2_price_SubmitPage().getText();
		value2 = value2.trim();
		String ele2 = item2_qty_SubmitPage().getText();
		ele2 = ele2.trim();
		value2 = value2.substring(1);
		double d2 = Double.parseDouble(value2);
		System.out.println("#############>" + d2);
		int a2 = Integer.parseInt(ele2);
		System.out.println("%%%%%%%%%%%%>" + a2);
		double item2_price = d2 * a2;
		item2_price = Double.parseDouble(new DecimalFormat("##.##").format(item2_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item2_price);

		String value3 = item3_price_SubmitPage().getText();
		value3 = value3.trim();
		String ele3 = item3_qty_SubmitPage().getText();
		ele3 = ele3.trim();
		value3 = value3.substring(1);
		double d3 = Double.parseDouble(value3);
		System.out.println("#############>" + d3);
		int a3 = Integer.parseInt(ele3);
		System.out.println("%%%%%%%%%%%%>" + a3);
		double item3_price = d3 * a3;
		item3_price = Double.parseDouble(new DecimalFormat("##.##").format(item3_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item3_price);

		double Teacher_SubTotal_exp = item1_price + item2_price + item3_price;
		Teacher_SubTotal_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_SubTotal_exp));

		String teacherCatTot = SubTotal_TeacherCatalogues().getText();
		teacherCatTot = teacherCatTot.substring(1);
		double Teacher_SubTotal = Double.parseDouble(teacherCatTot);
		Assert.assertEquals(Teacher_SubTotal, Teacher_SubTotal_exp, "Teacher Catalogues Subtotal value is incorrect");

		double Teacher_HST_act = Teacher_HST();
		double Teacher_HST_exp = TaxRoundOff_item_1_Tax(stateTaxHST, d1, a1)
				+ TaxRoundOff_item_2_Tax(stateTaxHST, d2, a2) + TaxRoundOff_item_3_Tax(stateTaxHST, d3, a3);
		Teacher_HST_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_HST_exp));
		Assert.assertEquals(Teacher_HST_act, Teacher_HST_exp, "Teacher Catalogues Subtotal HST value is incorrect");

		String TeacherCatTotal_Expected = Total_TeacherCatalogues_SubmitPage_For_all_Items().getText();
		TeacherCatTotal_Expected = TeacherCatTotal_Expected.substring(1);
		double TeacherCatTotal_exp = Double.parseDouble(TeacherCatTotal_Expected);
		System.out.println("TeacherCat Total :::::::: " + TeacherCatTotal_exp);

		double TeacherCatTotal_Actual = Teacher_SubTotal_exp + Teacher_HST_exp;
		TeacherCatTotal_Actual = Double.parseDouble(new DecimalFormat("##.##").format(TeacherCatTotal_Actual));
		System.out.println("Teacher Catalogues Total_Actual :::::::: " + TeacherCatTotal_Actual);

		Assert.assertEquals(TeacherCatTotal_exp, TeacherCatTotal_Actual, "Teacher Catalogues Total value is incorrect");

		////////////////////////////////////////////////////////

		double Shipping_tax = stateTaxHST;

		String Shipping_val = Total_Shipping_SubmitPage().getText();
		Shipping_val = Shipping_val.trim();

		if (Shipping_val.equals("FREE!")) {
			double ShippingValue_is = 0;
			double Total_Amount_Of_Teacher = TeacherCatTotal_Actual + ShippingValue_is;
			Total_Amount_Of_Teacher = Double.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Teacher));

			String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
			Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
			double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
			Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Teacher,
					"Total owing value is incorrect");

		} else if (!Shipping_val.equals("FREE!")) {
			String Shipping_act = subTotal_PaidShipping_SubmitPage().getText();
			Shipping_act = Shipping_act.trim();
			Shipping_act = Shipping_act.substring(1);
			double Shipping_act_2 = Double.parseDouble(Shipping_act);
			Shipping_act_2 = Double.parseDouble(new DecimalFormat("##.##").format(Shipping_act_2));

			double hst_Shipping_act = (double) (Shipping_tax * Shipping_act_2) / 100;
			hst_Shipping_act = Double.parseDouble(new DecimalFormat("##.##").format(hst_Shipping_act));
			System.out.println("EXPECTED#########" + hst_Shipping_act);

			String hst_Shipping_exp = amount_GST_Shipping_SubmitPage().getText();
			hst_Shipping_exp = hst_Shipping_exp.trim();
			hst_Shipping_exp = hst_Shipping_exp.substring(1);
			double hst_Shipping_exp_2 = Double.parseDouble(hst_Shipping_exp);

			Assert.assertEquals(hst_Shipping_act, hst_Shipping_exp_2, "Shipping & Handling Tax value is incorrect");

			double ShippingTotValue_act = Shipping_act_2 + hst_Shipping_act;
			ShippingTotValue_act = TaxRoundOff_of(ShippingTotValue_act);

			String ShippingTotValue_exp = Total_Shipping_SubmitPage().getText();
			ShippingTotValue_exp = ShippingTotValue_exp.trim();
			ShippingTotValue_exp = ShippingTotValue_exp.substring(1);
			double ShippingTotValue_exp_2 = Double.parseDouble(ShippingTotValue_exp);

			Assert.assertEquals(ShippingTotValue_act, ShippingTotValue_exp_2,
					"Shipping & Handling Total value is incorrect");
			///////////////////////////////////////
			double Total_Amount_Of_Student = TeacherCatTotal_Actual + ShippingTotValue_act;
			Total_Amount_Of_Student = Double.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Student));

			String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
			Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
			double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
			Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Student,
					"Total owing value is incorrect");
		}
	}

	@Override
	public void Validation_of_Teacher_Catalogues_Total_ShippingFee_HST_ConfirmSubmit_Page() {
		int stateTaxHST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxHST");
		PauseUtil.pause(8000);

		String value1 = item1_price_SubmitPage().getText();
		value1 = value1.trim();
		String ele1 = item1_qty_SubmitPage().getText();
		ele1 = ele1.trim();
		value1 = value1.substring(1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item1_price = d1 * a1;
		item1_price = Double.parseDouble(new DecimalFormat("##.##").format(item1_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item1_price);

		String value2 = item2_price_SubmitPage().getText();
		value2 = value2.trim();
		String ele2 = item2_qty_SubmitPage().getText();
		ele2 = ele2.trim();
		value2 = value2.substring(1);
		double d2 = Double.parseDouble(value2);
		System.out.println("#############>" + d2);
		int a2 = Integer.parseInt(ele2);
		System.out.println("%%%%%%%%%%%%>" + a2);
		double item2_price = d2 * a2;
		item2_price = Double.parseDouble(new DecimalFormat("##.##").format(item2_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item2_price);

		String value3 = item3_price_SubmitPage().getText();
		value3 = value3.trim();
		String ele3 = item3_qty_SubmitPage().getText();
		ele3 = ele3.trim();
		value3 = value3.substring(1);
		double d3 = Double.parseDouble(value3);
		System.out.println("#############>" + d3);
		int a3 = Integer.parseInt(ele3);
		System.out.println("%%%%%%%%%%%%>" + a3);
		double item3_price = d3 * a3;
		item3_price = Double.parseDouble(new DecimalFormat("##.##").format(item3_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item3_price);

		double Teacher_SubTotal_exp = item1_price + item2_price + item3_price;
		Teacher_SubTotal_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_SubTotal_exp));

		String teacherCatTot = SubTotal_TeacherCatalogues().getText();
		teacherCatTot = teacherCatTot.substring(1);
		double Teacher_SubTotal = Double.parseDouble(teacherCatTot);
		Assert.assertEquals(Teacher_SubTotal, Teacher_SubTotal_exp, "Teacher Catalogues Subtotal value is incorrect");

		double Teacher_HST_act = Teacher_HST();
		double Teacher_HST_exp = TaxRoundOff_item_1_Tax(stateTaxHST, d1, a1)
				+ TaxRoundOff_item_2_Tax(stateTaxHST, d2, a2) + TaxRoundOff_item_3_Tax(stateTaxHST, d3, a3);
		Teacher_HST_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_HST_exp));
		Assert.assertEquals(Teacher_HST_act, Teacher_HST_exp, "Teacher Catalogues Subtotal HST value is incorrect");

		String TeacherCatTotal_Expected = Total_TeacherCatalogues_SubmitPage_For_all_Items().getText();
		TeacherCatTotal_Expected = TeacherCatTotal_Expected.substring(1);
		double TeacherCatTotal_exp = Double.parseDouble(TeacherCatTotal_Expected);
		System.out.println("TeacherCat Total :::::::: " + TeacherCatTotal_exp);

		double TeacherCatTotal_Actual = Teacher_SubTotal_exp + Teacher_HST_exp;
		TeacherCatTotal_Actual = Double.parseDouble(new DecimalFormat("##.##").format(TeacherCatTotal_Actual));
		System.out.println("Teacher Catalogues Total_Actual :::::::: " + TeacherCatTotal_Actual);

		Assert.assertEquals(TeacherCatTotal_exp, TeacherCatTotal_Actual, "Teacher Catalogues Total value is incorrect");

		////////////////////////////////////////////////////////

		double Shipping_tax = stateTaxHST;

		String Shipping_val = Total_Shipping_SubmitPage().getText();
		Shipping_val = Shipping_val.trim();

		if (Shipping_val.equals("FREE!")) {
			double ShippingValue_is = 0;
			double Total_Amount_Of_Teacher = TeacherCatTotal_Actual + ShippingValue_is;
			Total_Amount_Of_Teacher = Double.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Teacher));

			String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
			Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
			double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
			Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Teacher,
					"Total owing value is incorrect");

		} else if (!Shipping_val.equals("FREE!")) {
			String Shipping_act = subTotal_PaidShipping_SubmitPage().getText();
			Shipping_act = Shipping_act.trim();
			Shipping_act = Shipping_act.substring(1);
			double Shipping_act_2 = Double.parseDouble(Shipping_act);
			Shipping_act_2 = Double.parseDouble(new DecimalFormat("##.##").format(Shipping_act_2));

			double hst_Shipping_act = (double) (Shipping_tax * Shipping_act_2) / 100;
			hst_Shipping_act = Double.parseDouble(new DecimalFormat("##.##").format(hst_Shipping_act));
			System.out.println("EXPECTED#########" + hst_Shipping_act);

			String hst_Shipping_exp = amount_GST_Shipping_SubmitPage().getText();
			hst_Shipping_exp = hst_Shipping_exp.trim();
			hst_Shipping_exp = hst_Shipping_exp.substring(1);
			double hst_Shipping_exp_2 = Double.parseDouble(hst_Shipping_exp);

			Assert.assertEquals(hst_Shipping_act, hst_Shipping_exp_2, "Shipping & Handling Tax value is incorrect");

			double ShippingTotValue_act = Shipping_act_2 + hst_Shipping_act;
			ShippingTotValue_act = TaxRoundOff_of(ShippingTotValue_act);

			String ShippingTotValue_exp = Total_Shipping_SubmitPage().getText();
			ShippingTotValue_exp = ShippingTotValue_exp.trim();
			ShippingTotValue_exp = ShippingTotValue_exp.substring(1);
			double ShippingTotValue_exp_2 = Double.parseDouble(ShippingTotValue_exp);

			Assert.assertEquals(ShippingTotValue_act, ShippingTotValue_exp_2,
					"Shipping & Handling Total value is incorrect");
			///////////////////////////////////////
			double Total_Amount_Of_Student = TeacherCatTotal_Actual + ShippingTotValue_act;
			Total_Amount_Of_Student = Double.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Student));

			String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
			Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
			double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
			Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Student,
					"Total owing value is incorrect");
		}
	}

	@Override
	public void Validation_of_Teacher_Catalogues_Total_ShippingFee_GST_OrderRefPage() {
		int stateTaxGST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxGST");
		PauseUtil.pause(8000);
		Assert.assertTrue(msg_order_reference().isDisplayed(), "Order reference message is not displayed");

		String value1 = item1_price_SubmitPage().getText();
		value1 = value1.trim();
		String ele1 = item1_qty_SubmitPage().getText();
		ele1 = ele1.trim();
		value1 = value1.substring(1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item1_price = d1 * a1;
		item1_price = Double.parseDouble(new DecimalFormat("##.##").format(item1_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item1_price);

		String value2 = item2_price_SubmitPage().getText();
		value2 = value2.trim();
		String ele2 = item2_qty_SubmitPage().getText();
		ele2 = ele2.trim();
		value2 = value2.substring(1);
		double d2 = Double.parseDouble(value2);
		System.out.println("#############>" + d2);
		int a2 = Integer.parseInt(ele2);
		System.out.println("%%%%%%%%%%%%>" + a2);
		double item2_price = d2 * a2;
		item2_price = Double.parseDouble(new DecimalFormat("##.##").format(item2_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item2_price);

		String value3 = item3_price_SubmitPage().getText();
		value3 = value3.trim();
		String ele3 = item3_qty_SubmitPage().getText();
		ele3 = ele3.trim();
		value3 = value3.substring(1);
		double d3 = Double.parseDouble(value3);
		System.out.println("#############>" + d3);
		int a3 = Integer.parseInt(ele3);
		System.out.println("%%%%%%%%%%%%>" + a3);
		double item3_price = d3 * a3;
		item3_price = Double.parseDouble(new DecimalFormat("##.##").format(item3_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item3_price);

		double Teacher_SubTotal_exp = item1_price + item2_price + item3_price;
		Teacher_SubTotal_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_SubTotal_exp));

		String teacherCatTot = SubTotal_TeacherCatalogues().getText();
		teacherCatTot = teacherCatTot.substring(1);
		double Teacher_SubTotal = Double.parseDouble(teacherCatTot);
		Assert.assertEquals(Teacher_SubTotal, Teacher_SubTotal_exp, "Teacher Catalogues Subtotal value is incorrect");

		double Teacher_GST_act = Teacher_GST();
		double Teacher_GST_exp = TaxRoundOff_item_1_Tax(stateTaxGST, d1, a1)
				+ TaxRoundOff_item_2_Tax(stateTaxGST, d2, a2) + TaxRoundOff_item_3_Tax(stateTaxGST, d3, a3);
		Teacher_GST_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_GST_exp));
		Assert.assertEquals(Teacher_GST_act, Teacher_GST_exp, "Teacher Catalogues Subtotal GST value is incorrect");

		String TeacherCatTotal_Expected = Total_TeacherCatalogues_SubmitPage_For_all_Items().getText();
		TeacherCatTotal_Expected = TeacherCatTotal_Expected.substring(1);
		double TeacherCatTotal_exp = Double.parseDouble(TeacherCatTotal_Expected);
		System.out.println("TeacherCat Total :::::::: " + TeacherCatTotal_exp);

		double TeacherCatTotal_Actual = Teacher_SubTotal_exp + Teacher_GST_exp;
		TeacherCatTotal_Actual = Double.parseDouble(new DecimalFormat("##.##").format(TeacherCatTotal_Actual));
		System.out.println("Teacher Catalogues Total_Actual :::::::: " + TeacherCatTotal_Actual);

		Assert.assertEquals(TeacherCatTotal_exp, TeacherCatTotal_Actual, "Teacher Catalogues Total value is incorrect");

		////////////////////////////////////////////////////////

		double Shipping_tax = stateTaxGST;

		String Shipping_val = Total_Shipping_SubmitPage().getText();
		Shipping_val = Shipping_val.trim();

		if (Shipping_val.equals("FREE!")) {
			double ShippingValue_is = 0;
			double Total_Amount_Of_Teacher = TeacherCatTotal_Actual + ShippingValue_is;
			Total_Amount_Of_Teacher = Double.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Teacher));

			String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
			Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
			double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
			Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Teacher,
					"Total owing value is incorrect");

		} else if (!Shipping_val.equals("FREE!")) {
			String Shipping_act = subTotal_PaidShipping_SubmitPage().getText();
			Shipping_act = Shipping_act.trim();
			Shipping_act = Shipping_act.substring(1);
			double Shipping_act_2 = Double.parseDouble(Shipping_act);
			Shipping_act_2 = Double.parseDouble(new DecimalFormat("##.##").format(Shipping_act_2));

			double gst_Shipping_act = (double) (Shipping_tax * Shipping_act_2) / 100;
			gst_Shipping_act = Double.parseDouble(new DecimalFormat("##.##").format(gst_Shipping_act));
			System.out.println("EXPECTED#########" + gst_Shipping_act);

			String gst_Shipping_exp = amount_GST_Shipping_SubmitPage().getText();
			gst_Shipping_exp = gst_Shipping_exp.trim();
			gst_Shipping_exp = gst_Shipping_exp.substring(1);
			double gst_Shipping_exp_2 = Double.parseDouble(gst_Shipping_exp);

			Assert.assertEquals(gst_Shipping_act, gst_Shipping_exp_2, "Shipping & Handling Tax value is incorrect");

			double ShippingTotValue_act = Shipping_act_2 + gst_Shipping_act;
			ShippingTotValue_act = TaxRoundOff_of(ShippingTotValue_act);

			String ShippingTotValue_exp = Total_Shipping_SubmitPage().getText();
			ShippingTotValue_exp = ShippingTotValue_exp.trim();
			ShippingTotValue_exp = ShippingTotValue_exp.substring(1);
			double ShippingTotValue_exp_2 = Double.parseDouble(ShippingTotValue_exp);

			Assert.assertEquals(ShippingTotValue_act, ShippingTotValue_exp_2,
					"Shipping & Handling Total value is incorrect");
			///////////////////////////////////////
			double Total_Amount_Of_Student = TeacherCatTotal_Actual + ShippingTotValue_act;
			Total_Amount_Of_Student = Double.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Student));

			String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
			Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
			double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
			Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Student,
					"Total owing value is incorrect");
		}
	}

	@Override
	public void Validation_of_Teacher_Catalogues_Total_ShippingFee_GST_ConfirmSubmit_Page() {
		int stateTaxGST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxGST");
		PauseUtil.pause(8000);

		String value1 = item1_price_SubmitPage().getText();
		value1 = value1.trim();
		String ele1 = item1_qty_SubmitPage().getText();
		ele1 = ele1.trim();
		value1 = value1.substring(1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item1_price = d1 * a1;
		item1_price = Double.parseDouble(new DecimalFormat("##.##").format(item1_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item1_price);

		String value2 = item2_price_SubmitPage().getText();
		value2 = value2.trim();
		String ele2 = item2_qty_SubmitPage().getText();
		ele2 = ele2.trim();
		value2 = value2.substring(1);
		double d2 = Double.parseDouble(value2);
		System.out.println("#############>" + d2);
		int a2 = Integer.parseInt(ele2);
		System.out.println("%%%%%%%%%%%%>" + a2);
		double item2_price = d2 * a2;
		item2_price = Double.parseDouble(new DecimalFormat("##.##").format(item2_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item2_price);

		String value3 = item3_price_SubmitPage().getText();
		value3 = value3.trim();
		String ele3 = item3_qty_SubmitPage().getText();
		ele3 = ele3.trim();
		value3 = value3.substring(1);
		double d3 = Double.parseDouble(value3);
		System.out.println("#############>" + d3);
		int a3 = Integer.parseInt(ele3);
		System.out.println("%%%%%%%%%%%%>" + a3);
		double item3_price = d3 * a3;
		item3_price = Double.parseDouble(new DecimalFormat("##.##").format(item3_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item3_price);

		double Teacher_SubTotal_exp = item1_price + item2_price + item3_price;
		Teacher_SubTotal_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_SubTotal_exp));

		String teacherCatTot = SubTotal_TeacherCatalogues().getText();
		teacherCatTot = teacherCatTot.substring(1);
		double Teacher_SubTotal = Double.parseDouble(teacherCatTot);
		Assert.assertEquals(Teacher_SubTotal, Teacher_SubTotal_exp, "Teacher Catalogues Subtotal value is incorrect");

		double Teacher_GST_act = Teacher_GST();
		double Teacher_GST_exp = TaxRoundOff_item_1_Tax(stateTaxGST, d1, a1)
				+ TaxRoundOff_item_2_Tax(stateTaxGST, d2, a2) + TaxRoundOff_item_3_Tax(stateTaxGST, d3, a3);
		Teacher_GST_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_GST_exp));
		Assert.assertEquals(Teacher_GST_act, Teacher_GST_exp, "Teacher Catalogues Subtotal GST value is incorrect");

		String TeacherCatTotal_Expected = Total_TeacherCatalogues_SubmitPage_For_all_Items().getText();
		TeacherCatTotal_Expected = TeacherCatTotal_Expected.substring(1);
		double TeacherCatTotal_exp = Double.parseDouble(TeacherCatTotal_Expected);
		System.out.println("TeacherCat Total :::::::: " + TeacherCatTotal_exp);

		double TeacherCatTotal_Actual = Teacher_SubTotal_exp + Teacher_GST_exp;
		TeacherCatTotal_Actual = Double.parseDouble(new DecimalFormat("##.##").format(TeacherCatTotal_Actual));
		System.out.println("Teacher Catalogues Total_Actual :::::::: " + TeacherCatTotal_Actual);

		Assert.assertEquals(TeacherCatTotal_exp, TeacherCatTotal_Actual, "Teacher Catalogues Total value is incorrect");

		////////////////////////////////////////////////////////

		double Shipping_tax = stateTaxGST;

		String Shipping_val = Total_Shipping_SubmitPage().getText();
		Shipping_val = Shipping_val.trim();

		if (Shipping_val.equals("FREE!")) {
			double ShippingValue_is = 0;
			double Total_Amount_Of_Teacher = TeacherCatTotal_Actual + ShippingValue_is;
			Total_Amount_Of_Teacher = Double.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Teacher));

			String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
			Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
			double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
			Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Teacher,
					"Total owing value is incorrect");

		} else if (!Shipping_val.equals("FREE!")) {
			String Shipping_act = subTotal_PaidShipping_SubmitPage().getText();
			Shipping_act = Shipping_act.trim();
			Shipping_act = Shipping_act.substring(1);
			double Shipping_act_2 = Double.parseDouble(Shipping_act);
			Shipping_act_2 = Double.parseDouble(new DecimalFormat("##.##").format(Shipping_act_2));

			double gst_Shipping_act = (double) (Shipping_tax * Shipping_act_2) / 100;
			gst_Shipping_act = Double.parseDouble(new DecimalFormat("##.##").format(gst_Shipping_act));
			System.out.println("EXPECTED#########" + gst_Shipping_act);

			String gst_Shipping_exp = amount_GST_Shipping_SubmitPage().getText();
			gst_Shipping_exp = gst_Shipping_exp.trim();
			gst_Shipping_exp = gst_Shipping_exp.substring(1);
			double gst_Shipping_exp_2 = Double.parseDouble(gst_Shipping_exp);

			Assert.assertEquals(gst_Shipping_act, gst_Shipping_exp_2, "Shipping & Handling Tax value is incorrect");

			double ShippingTotValue_act = Shipping_act_2 + gst_Shipping_act;
			ShippingTotValue_act = TaxRoundOff_of(ShippingTotValue_act);

			String ShippingTotValue_exp = Total_Shipping_SubmitPage().getText();
			ShippingTotValue_exp = ShippingTotValue_exp.trim();
			ShippingTotValue_exp = ShippingTotValue_exp.substring(1);
			double ShippingTotValue_exp_2 = Double.parseDouble(ShippingTotValue_exp);

			Assert.assertEquals(ShippingTotValue_act, ShippingTotValue_exp_2,
					"Shipping & Handling Total value is incorrect");
			///////////////////////////////////////
			double Total_Amount_Of_Student = TeacherCatTotal_Actual + ShippingTotValue_act;
			Total_Amount_Of_Student = Double.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Student));

			String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
			Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
			double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
			Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Student,
					"Total owing value is incorrect");
		}
	}

	@Override
	public void Validation_of_Teacher_Catalogue_Total_ShippingFee_GST_QST_OrderRefPage() {
		int stateTaxGST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxGST");
		double stateTaxQST = TestBaseProvider.getTestBase().getTestData().getDouble("stateTaxQST");
		PauseUtil.pause(8000);
		Assert.assertTrue(msg_order_reference().isDisplayed(), "Ordere reference message is not displayed");

		String value1 = item1_price_SubmitPage().getText();
		value1 = value1.trim();
		String ele1 = item1_qty_SubmitPage().getText();
		ele1 = ele1.trim();
		value1 = value1.substring(1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item1_price = d1 * a1;
		item1_price = Double.parseDouble(new DecimalFormat("##.##").format(item1_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item1_price);

		String value2 = item2_price_SubmitPage().getText();
		value2 = value2.trim();
		String ele2 = item2_qty_SubmitPage().getText();
		ele2 = ele2.trim();
		value2 = value2.substring(1);
		double d2 = Double.parseDouble(value2);
		System.out.println("#############>" + d2);
		int a2 = Integer.parseInt(ele2);
		System.out.println("%%%%%%%%%%%%>" + a2);
		double item2_price = d2 * a2;
		item2_price = Double.parseDouble(new DecimalFormat("##.##").format(item2_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item2_price);

		String value3 = item3_price_SubmitPage().getText();
		value3 = value3.trim();
		String ele3 = item3_qty_SubmitPage().getText();
		ele3 = ele3.trim();
		value3 = value3.substring(1);
		double d3 = Double.parseDouble(value3);
		System.out.println("#############>" + d3);
		int a3 = Integer.parseInt(ele3);
		System.out.println("%%%%%%%%%%%%>" + a3);
		double item3_price = d3 * a3;
		item3_price = Double.parseDouble(new DecimalFormat("##.##").format(item3_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item3_price);

		double Teacher_SubTotal_exp = item1_price + item2_price + item3_price;
		Teacher_SubTotal_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_SubTotal_exp));

		String TeacherCatSubTot = SubTotal_TeacherCatalogues().getText();
		TeacherCatSubTot = TeacherCatSubTot.substring(1);
		double Teacher_SubTotal = Double.parseDouble(TeacherCatSubTot);
		Assert.assertEquals(Teacher_SubTotal, Teacher_SubTotal_exp, "Teacher Catalogues Subtotal value is incorrect");

		double Teacher_GST_act = Teacher_GST();
		double Teacher_GST_exp = TaxRoundOff_item_1_Tax(stateTaxGST, d1, a1)
				+ TaxRoundOff_item_2_Tax(stateTaxGST, d2, a2) + TaxRoundOff_item_3_Tax(stateTaxGST, d3, a3);
		Teacher_GST_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_GST_exp));
		Assert.assertEquals(Teacher_GST_act, Teacher_GST_exp, "Teacher Catalogues Subtotal GST value is incorrect");

		double Teacher_QST_act = Teacher_QST();
		double Teacher_QST_exp = TaxRoundOff_item_1_Tax(stateTaxQST, d1, a1)
				+ TaxRoundOff_item_2_Tax(stateTaxQST, d2, a2) + TaxRoundOff_item_3_Tax(stateTaxQST, d3, a3);
		Teacher_QST_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_QST_exp));
		Assert.assertEquals(Teacher_QST_act, Teacher_QST_exp, "Teacher Catalogues Subtotal QST value is incorrect");

		String TeacherCataloguesTotal_Expected = Total_TeacherCatalogues_SubmitPage_For_all_Items().getText();
		TeacherCataloguesTotal_Expected = TeacherCataloguesTotal_Expected.substring(1);
		double TeacherCatTotal_exp = Double.parseDouble(TeacherCataloguesTotal_Expected);
		System.out.println("StudentClubsTotal :::::::: " + TeacherCatTotal_exp);

		double TeacherCataloguesTotal_Actual = Teacher_SubTotal_exp + Teacher_GST_exp + Teacher_QST_exp;
		TeacherCataloguesTotal_Actual = Double
				.parseDouble(new DecimalFormat("##.##").format(TeacherCataloguesTotal_Actual));
		System.out.println("Teacher Catalogues Total_Actual :::::::: " + TeacherCataloguesTotal_Actual);

		Assert.assertEquals(TeacherCatTotal_exp, TeacherCataloguesTotal_Actual,
				"Teacher Catalogues Total value is incorrect");

		////////////////////////////////////////////////////////

		double Shipping_tax_gst = stateTaxGST;
		double Shipping_tax_qst = stateTaxQST;

		String Shipping_val = Total_Shipping_SubmitPage().getText();
		Shipping_val = Shipping_val.trim();

		if (Shipping_val.equals("FREE!")) {
			double ShippingValue_is = 0;
			double Total_Amount_Of_Teacher = TeacherCataloguesTotal_Actual + ShippingValue_is;
			Total_Amount_Of_Teacher = Double.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Teacher));

			String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
			Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
			double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
			Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Teacher,
					"Total owing value is incorrect");

		} else if (!Shipping_val.equals("FREE!")) {
			String Shipping_act = subTotal_PaidShipping_SubmitPage().getText();
			Shipping_act = Shipping_act.trim();
			Shipping_act = Shipping_act.substring(1);
			double Shipping_act_2 = Double.parseDouble(Shipping_act);
			Shipping_act_2 = Double.parseDouble(new DecimalFormat("##.##").format(Shipping_act_2));

			double gst_Shipping_act = (double) (Shipping_tax_gst * Shipping_act_2) / 100;
			gst_Shipping_act = Double.parseDouble(new DecimalFormat("##.##").format(gst_Shipping_act));
			System.out.println("EXPECTED#########" + gst_Shipping_act);

			String gst_Shipping_exp = amount_GST_Shipping_SubmitPage().getText();
			gst_Shipping_exp = gst_Shipping_exp.trim();
			gst_Shipping_exp = gst_Shipping_exp.substring(1);
			double gst_Shipping_exp_2 = Double.parseDouble(gst_Shipping_exp);

			Assert.assertEquals(gst_Shipping_act, gst_Shipping_exp_2, "Shipping & Handling GST Tax value is incorrect");

			double qst_Shipping_act = (double) (Shipping_tax_qst * Shipping_act_2) / 100;
			qst_Shipping_act = Double.parseDouble(new DecimalFormat("##.##").format(qst_Shipping_act));
			System.out.println("EXPECTED#########" + qst_Shipping_act);

			String qst_Shipping_exp = amount_PST_Shipping_SubmitPage().getText();
			qst_Shipping_exp = qst_Shipping_exp.trim();
			qst_Shipping_exp = qst_Shipping_exp.substring(1);
			double qst_Shipping_exp_2 = Double.parseDouble(qst_Shipping_exp);

			Assert.assertEquals(qst_Shipping_act, qst_Shipping_exp_2, "Shipping & Handling QST Tax value is incorrect");

			double ShippingTotValue_act = Shipping_act_2 + gst_Shipping_act + qst_Shipping_act;
			ShippingTotValue_act = TaxRoundOff_of(ShippingTotValue_act);

			String ShippingTotValue_exp = Total_Shipping_SubmitPage().getText();
			ShippingTotValue_exp = ShippingTotValue_exp.trim();
			ShippingTotValue_exp = ShippingTotValue_exp.substring(1);
			double ShippingTotValue_exp_2 = Double.parseDouble(ShippingTotValue_exp);

			Assert.assertEquals(ShippingTotValue_act, ShippingTotValue_exp_2,
					"Shipping & Handling Total value is incorrect");
			///////////////////////////////////////
			double Total_Amount_Of_Teacher = TeacherCataloguesTotal_Actual + ShippingTotValue_act;
			Total_Amount_Of_Teacher = Double.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Teacher));

			String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
			Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
			double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
			Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Teacher,
					"Total owing value is incorrect");
		}
	}

	@Override
	public void Validation_of_Teacher_Catalogue_Total_ShippingFee_GST_QST_ConfirmSubmit_Page() {
		int stateTaxGST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxGST");
		double stateTaxQST = TestBaseProvider.getTestBase().getTestData().getDouble("stateTaxQST");
		PauseUtil.pause(8000);

		String value1 = item1_price_SubmitPage().getText();
		value1 = value1.trim();
		String ele1 = item1_qty_SubmitPage().getText();
		ele1 = ele1.trim();
		value1 = value1.substring(1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item1_price = d1 * a1;
		item1_price = Double.parseDouble(new DecimalFormat("##.##").format(item1_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item1_price);

		String value2 = item2_price_SubmitPage().getText();
		value2 = value2.trim();
		String ele2 = item2_qty_SubmitPage().getText();
		ele2 = ele2.trim();
		value2 = value2.substring(1);
		double d2 = Double.parseDouble(value2);
		System.out.println("#############>" + d2);
		int a2 = Integer.parseInt(ele2);
		System.out.println("%%%%%%%%%%%%>" + a2);
		double item2_price = d2 * a2;
		item2_price = Double.parseDouble(new DecimalFormat("##.##").format(item2_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item2_price);

		String value3 = item3_price_SubmitPage().getText();
		value3 = value3.trim();
		String ele3 = item3_qty_SubmitPage().getText();
		ele3 = ele3.trim();
		value3 = value3.substring(1);
		double d3 = Double.parseDouble(value3);
		System.out.println("#############>" + d3);
		int a3 = Integer.parseInt(ele3);
		System.out.println("%%%%%%%%%%%%>" + a3);
		double item3_price = d3 * a3;
		item3_price = Double.parseDouble(new DecimalFormat("##.##").format(item3_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item3_price);

		double Teacher_SubTotal_exp = item1_price + item2_price + item3_price;
		Teacher_SubTotal_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_SubTotal_exp));

		String TeacherCatSubTot = SubTotal_TeacherCatalogues().getText();
		TeacherCatSubTot = TeacherCatSubTot.substring(1);
		double Teacher_SubTotal = Double.parseDouble(TeacherCatSubTot);
		Assert.assertEquals(Teacher_SubTotal, Teacher_SubTotal_exp, "Teacher Catalogues Subtotal value is incorrect");

		double Teacher_GST_act = Teacher_GST();
		double Teacher_GST_exp = TaxRoundOff_item_1_Tax(stateTaxGST, d1, a1)
				+ TaxRoundOff_item_2_Tax(stateTaxGST, d2, a2) + TaxRoundOff_item_3_Tax(stateTaxGST, d3, a3);
		Teacher_GST_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_GST_exp));
		Assert.assertEquals(Teacher_GST_act, Teacher_GST_exp, "Teacher Catalogues Subtotal GST value is incorrect");

		double Teacher_QST_act = Teacher_QST();
		double Teacher_QST_exp = TaxRoundOff_item_1_Tax(stateTaxQST, d1, a1)
				+ TaxRoundOff_item_2_Tax(stateTaxQST, d2, a2) + TaxRoundOff_item_3_Tax(stateTaxQST, d3, a3);
		Teacher_QST_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_QST_exp));
		Assert.assertEquals(Teacher_QST_act, Teacher_QST_exp, "Teacher Catalogues Subtotal QST value is incorrect");

		String TeacherCataloguesTotal_Expected = Total_TeacherCatalogues_SubmitPage_For_all_Items().getText();
		TeacherCataloguesTotal_Expected = TeacherCataloguesTotal_Expected.substring(1);
		double TeacherCatTotal_exp = Double.parseDouble(TeacherCataloguesTotal_Expected);
		System.out.println("StudentClubsTotal :::::::: " + TeacherCatTotal_exp);

		double TeacherCataloguesTotal_Actual = Teacher_SubTotal_exp + Teacher_GST_exp + Teacher_QST_exp;
		TeacherCataloguesTotal_Actual = Double
				.parseDouble(new DecimalFormat("##.##").format(TeacherCataloguesTotal_Actual));
		System.out.println("Teacher Catalogues Total_Actual :::::::: " + TeacherCataloguesTotal_Actual);

		Assert.assertEquals(TeacherCatTotal_exp, TeacherCataloguesTotal_Actual,
				"Teacher Catalogues Total value is incorrect");

		////////////////////////////////////////////////////////

		double Shipping_tax_gst = stateTaxGST;
		double Shipping_tax_qst = stateTaxQST;

		String Shipping_val = Total_Shipping_SubmitPage().getText();
		Shipping_val = Shipping_val.trim();

		if (Shipping_val.equals("FREE!")) {
			double ShippingValue_is = 0;
			double Total_Amount_Of_Teacher = TeacherCataloguesTotal_Actual + ShippingValue_is;
			Total_Amount_Of_Teacher = Double.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Teacher));

			String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
			Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
			double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
			Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Teacher,
					"Total owing value is incorrect");

		} else if (!Shipping_val.equals("FREE!")) {
			String Shipping_act = subTotal_PaidShipping_SubmitPage().getText();
			Shipping_act = Shipping_act.trim();
			Shipping_act = Shipping_act.substring(1);
			double Shipping_act_2 = Double.parseDouble(Shipping_act);
			Shipping_act_2 = Double.parseDouble(new DecimalFormat("##.##").format(Shipping_act_2));

			double gst_Shipping_act = (double) (Shipping_tax_gst * Shipping_act_2) / 100;
			gst_Shipping_act = Double.parseDouble(new DecimalFormat("##.##").format(gst_Shipping_act));
			System.out.println("EXPECTED#########" + gst_Shipping_act);

			String gst_Shipping_exp = amount_GST_Shipping_SubmitPage().getText();
			gst_Shipping_exp = gst_Shipping_exp.trim();
			gst_Shipping_exp = gst_Shipping_exp.substring(1);
			double gst_Shipping_exp_2 = Double.parseDouble(gst_Shipping_exp);

			Assert.assertEquals(gst_Shipping_act, gst_Shipping_exp_2, "Shipping & Handling GST Tax value is incorrect");

			double qst_Shipping_act = (double) (Shipping_tax_qst * Shipping_act_2) / 100;
			qst_Shipping_act = Double.parseDouble(new DecimalFormat("##.##").format(qst_Shipping_act));
			System.out.println("EXPECTED#########" + qst_Shipping_act);

			String qst_Shipping_exp = amount_PST_Shipping_SubmitPage().getText();
			qst_Shipping_exp = qst_Shipping_exp.trim();
			qst_Shipping_exp = qst_Shipping_exp.substring(1);
			double qst_Shipping_exp_2 = Double.parseDouble(qst_Shipping_exp);

			Assert.assertEquals(qst_Shipping_act, qst_Shipping_exp_2, "Shipping & Handling QST Tax value is incorrect");

			double ShippingTotValue_act = Shipping_act_2 + gst_Shipping_act + qst_Shipping_act;
			ShippingTotValue_act = TaxRoundOff_of(ShippingTotValue_act);

			String ShippingTotValue_exp = Total_Shipping_SubmitPage().getText();
			ShippingTotValue_exp = ShippingTotValue_exp.trim();
			ShippingTotValue_exp = ShippingTotValue_exp.substring(1);
			double ShippingTotValue_exp_2 = Double.parseDouble(ShippingTotValue_exp);

			Assert.assertEquals(ShippingTotValue_act, ShippingTotValue_exp_2,
					"Shipping & Handling Total value is incorrect");
			///////////////////////////////////////
			double Total_Amount_Of_Teacher = TeacherCataloguesTotal_Actual + ShippingTotValue_act;
			Total_Amount_Of_Teacher = Double.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Teacher));

			String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
			Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
			double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
			Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Teacher,
					"Total owing value is incorrect");
		}
	}

	@Override
	public void Validation_of_Teacher_Catalogue_Total_ShippingFee_GST_PST_OrderRefPage() {
		int stateTaxGST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxGST");
		double stateTaxPST = TestBaseProvider.getTestBase().getTestData().getDouble("stateTaxPST");
		PauseUtil.pause(8000);
		Assert.assertTrue(msg_order_reference().isDisplayed(), "Ordere reference message is not displayed");

		String value1 = item1_price_SubmitPage().getText();
		value1 = value1.trim();
		String ele1 = item1_qty_SubmitPage().getText();
		ele1 = ele1.trim();
		value1 = value1.substring(1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item1_price = d1 * a1;
		item1_price = Double.parseDouble(new DecimalFormat("##.##").format(item1_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item1_price);

		String value2 = item2_price_SubmitPage().getText();
		value2 = value2.trim();
		String ele2 = item2_qty_SubmitPage().getText();
		ele2 = ele2.trim();
		value2 = value2.substring(1);
		double d2 = Double.parseDouble(value2);
		System.out.println("#############>" + d2);
		int a2 = Integer.parseInt(ele2);
		System.out.println("%%%%%%%%%%%%>" + a2);
		double item2_price = d2 * a2;
		item2_price = Double.parseDouble(new DecimalFormat("##.##").format(item2_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item2_price);

		String value3 = item3_price_SubmitPage().getText();
		value3 = value3.trim();
		String ele3 = item3_qty_SubmitPage().getText();
		ele3 = ele3.trim();
		value3 = value3.substring(1);
		double d3 = Double.parseDouble(value3);
		System.out.println("#############>" + d3);
		int a3 = Integer.parseInt(ele3);
		System.out.println("%%%%%%%%%%%%>" + a3);
		double item3_price = d3 * a3;
		item3_price = Double.parseDouble(new DecimalFormat("##.##").format(item3_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item3_price);

		double Teacher_SubTotal_exp = item1_price + item2_price + item3_price;
		Teacher_SubTotal_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_SubTotal_exp));

		String TeacherCatSubTot = SubTotal_TeacherCatalogues().getText();
		TeacherCatSubTot = TeacherCatSubTot.substring(1);
		double Teacher_SubTotal = Double.parseDouble(TeacherCatSubTot);
		Assert.assertEquals(Teacher_SubTotal, Teacher_SubTotal_exp, "Teacher Catalogues Subtotal value is incorrect");

		double Teacher_GST_act = Teacher_GST();
		double Teacher_GST_exp = TaxRoundOff_item_1_Tax(stateTaxGST, d1, a1)
				+ TaxRoundOff_item_2_Tax(stateTaxGST, d2, a2) + TaxRoundOff_item_3_Tax(stateTaxGST, d3, a3);
		Teacher_GST_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_GST_exp));
		Assert.assertEquals(Teacher_GST_act, Teacher_GST_exp, "Teacher Catalogues Subtotal GST value is incorrect");

		double Teacher_PST_act = Teacher_PST();
		double Teacher_PST_exp = TaxRoundOff_item_1_Tax(stateTaxPST, d1, a1)
				+ TaxRoundOff_item_2_Tax(stateTaxPST, d2, a2) + TaxRoundOff_item_3_Tax(stateTaxPST, d3, a3);
		Teacher_PST_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_PST_exp));
		Assert.assertEquals(Teacher_PST_act, Teacher_PST_exp, "Teacher Catalogues Subtotal PST value is incorrect");

		String TeacherCataloguesTotal_Expected = Total_TeacherCatalogues_SubmitPage_For_all_Items().getText();
		TeacherCataloguesTotal_Expected = TeacherCataloguesTotal_Expected.substring(1);
		double TeacherCatTotal_exp = Double.parseDouble(TeacherCataloguesTotal_Expected);
		System.out.println("StudentClubsTotal :::::::: " + TeacherCatTotal_exp);

		double TeacherCataloguesTotal_Actual = Teacher_SubTotal_exp + Teacher_GST_exp + Teacher_PST_exp;
		TeacherCataloguesTotal_Actual = Double
				.parseDouble(new DecimalFormat("##.##").format(TeacherCataloguesTotal_Actual));
		System.out.println("Teacher Catalogues Total_Actual :::::::: " + TeacherCataloguesTotal_Actual);

		Assert.assertEquals(TeacherCatTotal_exp, TeacherCataloguesTotal_Actual,
				"Teacher Catalogues Total value is incorrect");

		////////////////////////////////////////////////////////

		double Shipping_tax_gst = stateTaxGST;
		double Shipping_tax_pst = stateTaxPST;

		String Shipping_val = Total_Shipping_SubmitPage().getText();
		Shipping_val = Shipping_val.trim();

		if (Shipping_val.equals("FREE!")) {
			double ShippingValue_is = 0;
			double Total_Amount_Of_Teacher = TeacherCataloguesTotal_Actual + ShippingValue_is;
			Total_Amount_Of_Teacher = Double.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Teacher));

			String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
			Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
			double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
			Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Teacher,
					"Total owing value is incorrect");

		} else if (!Shipping_val.equals("FREE!")) {
			String Shipping_act = subTotal_PaidShipping_SubmitPage().getText();
			Shipping_act = Shipping_act.trim();
			Shipping_act = Shipping_act.substring(1);
			double Shipping_act_2 = Double.parseDouble(Shipping_act);
			Shipping_act_2 = Double.parseDouble(new DecimalFormat("##.##").format(Shipping_act_2));

			double gst_Shipping_act = (double) (Shipping_tax_gst * Shipping_act_2) / 100;
			gst_Shipping_act = Double.parseDouble(new DecimalFormat("##.##").format(gst_Shipping_act));
			System.out.println("EXPECTED#########" + gst_Shipping_act);

			String gst_Shipping_exp = amount_GST_Shipping_SubmitPage().getText();
			gst_Shipping_exp = gst_Shipping_exp.trim();
			gst_Shipping_exp = gst_Shipping_exp.substring(1);
			double gst_Shipping_exp_2 = Double.parseDouble(gst_Shipping_exp);

			Assert.assertEquals(gst_Shipping_act, gst_Shipping_exp_2, "Shipping & Handling GST Tax value is incorrect");

			double pst_Shipping_act = (double) (Shipping_tax_pst * Shipping_act_2) / 100;
			pst_Shipping_act = Double.parseDouble(new DecimalFormat("##.##").format(pst_Shipping_act));
			System.out.println("EXPECTED#########" + pst_Shipping_act);

			String pst_Shipping_exp = amount_PST_Shipping_SubmitPage().getText();
			pst_Shipping_exp = pst_Shipping_exp.trim();
			pst_Shipping_exp = pst_Shipping_exp.substring(1);
			double pst_Shipping_exp_2 = Double.parseDouble(pst_Shipping_exp);

			Assert.assertEquals(pst_Shipping_act, pst_Shipping_exp_2, "Shipping & Handling PST Tax value is incorrect");

			double ShippingTotValue_act = Shipping_act_2 + gst_Shipping_act + pst_Shipping_act;
			ShippingTotValue_act = TaxRoundOff_of(ShippingTotValue_act);

			String ShippingTotValue_exp = Total_Shipping_SubmitPage().getText();
			ShippingTotValue_exp = ShippingTotValue_exp.trim();
			ShippingTotValue_exp = ShippingTotValue_exp.substring(1);
			double ShippingTotValue_exp_2 = Double.parseDouble(ShippingTotValue_exp);

			Assert.assertEquals(ShippingTotValue_act, ShippingTotValue_exp_2,
					"Shipping & Handling Total value is incorrect");
			///////////////////////////////////////
			double Total_Amount_Of_Teacher = TeacherCataloguesTotal_Actual + ShippingTotValue_act;
			Total_Amount_Of_Teacher = Double.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Teacher));

			String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
			Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
			double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
			Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Teacher,
					"Total owing value is incorrect");
		}
	}

	@Override
	public void Validation_of_Teacher_Catalogue_Total_ShippingFee_GST_PST_ConfirmSubmit_Page() {
		int stateTaxGST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxGST");
		double stateTaxPST = TestBaseProvider.getTestBase().getTestData().getDouble("stateTaxPST");
		PauseUtil.pause(8000);

		String value1 = item1_price_SubmitPage().getText();
		value1 = value1.trim();
		String ele1 = item1_qty_SubmitPage().getText();
		ele1 = ele1.trim();
		value1 = value1.substring(1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item1_price = d1 * a1;
		item1_price = Double.parseDouble(new DecimalFormat("##.##").format(item1_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item1_price);

		String value2 = item2_price_SubmitPage().getText();
		value2 = value2.trim();
		String ele2 = item2_qty_SubmitPage().getText();
		ele2 = ele2.trim();
		value2 = value2.substring(1);
		double d2 = Double.parseDouble(value2);
		System.out.println("#############>" + d2);
		int a2 = Integer.parseInt(ele2);
		System.out.println("%%%%%%%%%%%%>" + a2);
		double item2_price = d2 * a2;
		item2_price = Double.parseDouble(new DecimalFormat("##.##").format(item2_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item2_price);

		String value3 = item3_price_SubmitPage().getText();
		value3 = value3.trim();
		String ele3 = item3_qty_SubmitPage().getText();
		ele3 = ele3.trim();
		value3 = value3.substring(1);
		double d3 = Double.parseDouble(value3);
		System.out.println("#############>" + d3);
		int a3 = Integer.parseInt(ele3);
		System.out.println("%%%%%%%%%%%%>" + a3);
		double item3_price = d3 * a3;
		item3_price = Double.parseDouble(new DecimalFormat("##.##").format(item3_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item3_price);

		double Teacher_SubTotal_exp = item1_price + item2_price + item3_price;
		Teacher_SubTotal_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_SubTotal_exp));

		String TeacherCatSubTot = SubTotal_TeacherCatalogues().getText();
		PauseUtil.waitForAjaxToComplete(2000);
		TeacherCatSubTot = TeacherCatSubTot.substring(1);
		double Teacher_SubTotal = Double.parseDouble(TeacherCatSubTot);
		Assert.assertEquals(Teacher_SubTotal, Teacher_SubTotal_exp, "Teacher Catalogues Subtotal value is incorrect");

		double Teacher_GST_act = Teacher_GST();
		double Teacher_GST_exp = TaxRoundOff_item_1_Tax(stateTaxGST, d1, a1)
				+ TaxRoundOff_item_2_Tax(stateTaxGST, d2, a2) + TaxRoundOff_item_3_Tax(stateTaxGST, d3, a3);
		Teacher_GST_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_GST_exp));
		Assert.assertEquals(Teacher_GST_act, Teacher_GST_exp, "Teacher Catalogues Subtotal GST value is incorrect");

		double Teacher_PST_act = Teacher_PST();
		double Teacher_PST_exp = TaxRoundOff_item_1_Tax(stateTaxPST, d1, a1)
				+ TaxRoundOff_item_2_Tax(stateTaxPST, d2, a2) + TaxRoundOff_item_3_Tax(stateTaxPST, d3, a3);
		Teacher_PST_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_PST_exp));
		Assert.assertEquals(Teacher_PST_act, Teacher_PST_exp, "Teacher Catalogues Subtotal PST value is incorrect");

		String TeacherCataloguesTotal_Expected = Total_TeacherCatalogues_SubmitPage_For_all_Items().getText();
		TeacherCataloguesTotal_Expected = TeacherCataloguesTotal_Expected.substring(1);
		double TeacherCatTotal_exp = Double.parseDouble(TeacherCataloguesTotal_Expected);
		System.out.println("StudentClubsTotal :::::::: " + TeacherCatTotal_exp);

		double TeacherCataloguesTotal_Actual = Teacher_SubTotal_exp + Teacher_GST_exp + Teacher_PST_exp;
		System.out.println("Teacher Catalogues Total_Actual :::::::: " + TeacherCataloguesTotal_Actual);
		TeacherCataloguesTotal_Actual = Double
				.parseDouble(new DecimalFormat("##.##").format(TeacherCataloguesTotal_Actual));

		Assert.assertEquals(TeacherCatTotal_exp, TeacherCataloguesTotal_Actual,
				"Teacher Catalogues Total value is incorrect");

		////////////////////////////////////////////////////////

		double Shipping_tax_gst = stateTaxGST;
		double Shipping_tax_pst = stateTaxPST;

		String Shipping_val = Total_Shipping_SubmitPage().getText();
		Shipping_val = Shipping_val.trim();

		if (Shipping_val.equals("FREE!")) {
			double ShippingValue_is = 0;
			double Total_Amount_Of_Teacher = TeacherCataloguesTotal_Actual + ShippingValue_is;
			Total_Amount_Of_Teacher = Double.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Teacher));

			String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
			Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
			double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
			Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Teacher,
					"Total owing value is incorrect");

		} else if (!Shipping_val.equals("FREE!")) {
			String Shipping_act = subTotal_PaidShipping_SubmitPage().getText();
			Shipping_act = Shipping_act.trim();
			Shipping_act = Shipping_act.substring(1);
			double Shipping_act_2 = Double.parseDouble(Shipping_act);
			Shipping_act_2 = Double.parseDouble(new DecimalFormat("##.##").format(Shipping_act_2));

			double gst_Shipping_act = (double) (Shipping_tax_gst * Shipping_act_2) / 100;
			gst_Shipping_act = Double.parseDouble(new DecimalFormat("##.##").format(gst_Shipping_act));
			System.out.println("EXPECTED#########" + gst_Shipping_act);

			String gst_Shipping_exp = amount_GST_Shipping_SubmitPage().getText();
			gst_Shipping_exp = gst_Shipping_exp.trim();
			gst_Shipping_exp = gst_Shipping_exp.substring(1);
			double gst_Shipping_exp_2 = Double.parseDouble(gst_Shipping_exp);

			Assert.assertEquals(gst_Shipping_act, gst_Shipping_exp_2, "Shipping & Handling PST Tax value is incorrect");

			double pst_Shipping_act = (double) (Shipping_tax_pst * Shipping_act_2) / 100;
			pst_Shipping_act = Double.parseDouble(new DecimalFormat("##.##").format(pst_Shipping_act));
			System.out.println("EXPECTED#########" + pst_Shipping_act);

			String pst_Shipping_exp = amount_PST_Shipping_SubmitPage().getText();
			pst_Shipping_exp = pst_Shipping_exp.trim();
			pst_Shipping_exp = pst_Shipping_exp.substring(1);
			double pst_Shipping_exp_2 = Double.parseDouble(pst_Shipping_exp);

			Assert.assertEquals(pst_Shipping_act, pst_Shipping_exp_2, "Shipping & Handling PST Tax value is incorrect");

			double ShippingTotValue_act = Shipping_act_2 + gst_Shipping_act + pst_Shipping_act;
			ShippingTotValue_act = TaxRoundOff_of(ShippingTotValue_act);

			String ShippingTotValue_exp = Total_Shipping_SubmitPage().getText();
			ShippingTotValue_exp = ShippingTotValue_exp.trim();
			ShippingTotValue_exp = ShippingTotValue_exp.substring(1);
			double ShippingTotValue_exp_2 = Double.parseDouble(ShippingTotValue_exp);

			Assert.assertEquals(ShippingTotValue_act, ShippingTotValue_exp_2,
					"Shipping & Handling Total value is incorrect");
			///////////////////////////////////////
			double Total_Amount_Of_Teacher = TeacherCataloguesTotal_Actual + ShippingTotValue_act;
			Total_Amount_Of_Teacher = Double.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Teacher));

			String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
			Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
			double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
			Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Teacher,
					"Total owing value is incorrect");
		}
	}

	@Override
	public void Validation_of_Student_club_And_Teacher_Catalogues_Total_GST_QST_OrderRefPage() {
		int stateTaxGST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxGST");
		double stateTaxQST = TestBaseProvider.getTestBase().getTestData().getDouble("stateTaxQST");
		PauseUtil.pause(8000);
		Assert.assertTrue(msg_order_reference().isDisplayed(), "Ordere reference message is not displayed");

		String value1 = item1_price_SubmitPage().getText();
		value1 = value1.trim();

		String ele1 = item1_qty_SubmitPage().getText();
		ele1 = ele1.trim();

		value1 = value1.substring(1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item1_price = d1 * a1;
		item1_price = Double.parseDouble(new DecimalFormat("##.##").format(item1_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item1_price);

		String StudentClbSubTot = subTotal_StudentClubs().getText();
		StudentClbSubTot = StudentClbSubTot.substring(1);
		double Student_SubTotal = Double.parseDouble(StudentClbSubTot);
		Assert.assertEquals(Student_SubTotal, item1_price, "Student Clubs Subtotal value is incorrect");

		double Student_gst_act = Student_GST();
		double Student_gst_exp = TaxRoundOff_item_1_Tax(stateTaxGST, d1, a1);
		Student_gst_exp = Double.parseDouble(new DecimalFormat("##.##").format(Student_gst_exp));
		Assert.assertEquals(Student_gst_act, Student_gst_exp, "Student Clubs Subtotal GST value is incorrect");

		double Student_qst_act = Student_QST();
		double Student_qst_exp = TaxRoundOff_item_1_Tax(stateTaxQST, d1, a1);
		Student_qst_exp = Double.parseDouble(new DecimalFormat("##.##").format(Student_qst_exp));
		Assert.assertEquals(Student_qst_act, Student_qst_exp, "Student Clubs Subtotal QST value is incorrect");

		String StudentClubsTotal_Expected = Total_StudentClubs_SubmitPage().getText();
		StudentClubsTotal_Expected = StudentClubsTotal_Expected.substring(1);
		double StudentClubsTotal_exp = Double.parseDouble(StudentClubsTotal_Expected);
		System.out.println("StudentClubsTotal :::::::: " + StudentClubsTotal_exp);

		double StudentClubsTotal_Actual = item1_price + Student_gst_exp + Student_qst_exp;
		StudentClubsTotal_Actual = Double.parseDouble(new DecimalFormat("##.##").format(StudentClubsTotal_Actual));
		System.out.println("StudentClubsTotal_Actual :::::::: " + StudentClubsTotal_Actual);

		Assert.assertEquals(StudentClubsTotal_exp, StudentClubsTotal_Actual, "Student Clubs Total value is incorrect");

		////////////////////////////////////////////////////////
		String value2 = item2_price_SubmitPage().getText();
		value2 = value2.trim();
		String ele2 = item2_qty_SubmitPage().getText();
		ele2 = ele2.trim();
		value2 = value2.substring(1);
		double d2 = Double.parseDouble(value2);
		System.out.println("#############>" + d2);
		int a2 = Integer.parseInt(ele2);
		System.out.println("%%%%%%%%%%%%>" + a2);
		double item2_price = d2 * a2;
		item2_price = Double.parseDouble(new DecimalFormat("##.##").format(item2_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item2_price);

		String value3 = item3_price_SubmitPage().getText();
		value3 = value3.trim();
		String ele3 = item3_qty_SubmitPage().getText();
		ele3 = ele3.trim();
		value3 = value3.substring(1);
		double d3 = Double.parseDouble(value3);
		System.out.println("#############>" + d3);
		int a3 = Integer.parseInt(ele3);
		System.out.println("%%%%%%%%%%%%>" + a3);
		double item3_price = d3 * a3;
		item3_price = Double.parseDouble(new DecimalFormat("##.##").format(item3_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item3_price);

		double Teacher_Catalogues_Subtotal_Actual = item2_price + item3_price;
		Teacher_Catalogues_Subtotal_Actual = Double
				.parseDouble(new DecimalFormat("##.##").format(Teacher_Catalogues_Subtotal_Actual));

		String TeacherCataloguesClbSubTot = SubTotal_TeacherCatalogues().getText();
		TeacherCataloguesClbSubTot = TeacherCataloguesClbSubTot.substring(1);
		double TeacherCatalogues_SubTotal = Double.parseDouble(TeacherCataloguesClbSubTot);
		Assert.assertEquals(TeacherCatalogues_SubTotal, Teacher_Catalogues_Subtotal_Actual,
				"Teacher Catalogues Subtotal value is incorrect");

		double Teacher_GST_act = Teacher_GST();
		double Teacher_GST_exp = TaxRoundOff_item_2_Tax(stateTaxGST, d2, a2)
				+ TaxRoundOff_item_3_Tax(stateTaxGST, d3, a3);
		Teacher_GST_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_GST_exp));
		Assert.assertEquals(Teacher_GST_act, Teacher_GST_exp, "Teacher Catalogues Subtotal GST value is incorrect");

		double Teacher_QST_act = Teacher_QST();
		double Teacher_QST_exp = TaxRoundOff_item_2_Tax(stateTaxQST, d2, a2)
				+ TaxRoundOff_item_3_Tax(stateTaxQST, d3, a3);
		Teacher_QST_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_QST_exp));
		Assert.assertEquals(Teacher_QST_act, Teacher_QST_exp, "Teacher Catalogues Subtotal QST value is incorrect");

		String TeacherClubsTotal_Expected = Total_TeacherCatalogues_SubmitPage().getText();
		TeacherClubsTotal_Expected = TeacherClubsTotal_Expected.substring(1);
		double TeacherClubsTotal_exp = Double.parseDouble(TeacherClubsTotal_Expected);
		System.out.println("Teacher Catalogues :::::::: " + TeacherClubsTotal_exp);

		double TeacherClubsTotal_Actual = Teacher_Catalogues_Subtotal_Actual + Teacher_GST_exp + Teacher_QST_exp;
		TeacherClubsTotal_Actual = Double.parseDouble(new DecimalFormat("##.##").format(TeacherClubsTotal_Actual));
		System.out.println("StudentClubsTotal_Actual :::::::: " + TeacherClubsTotal_Actual);

		Assert.assertEquals(TeacherClubsTotal_exp, TeacherClubsTotal_Actual,
				"Teacher Catalogues Total value is incorrect");

		double Shipping_tax_gst = stateTaxGST;

		String Shipping_val = Total_Shipping_SubmitPage().getText();
		Shipping_val = Shipping_val.trim();

		if (Shipping_val.equals("FREE!")) {
			double ShippingValue_is = 0;
			double Total_Amount_Of_Student = StudentClubsTotal_Actual + TeacherClubsTotal_Actual + ShippingValue_is;
			Total_Amount_Of_Student = Double.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Student));
			String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
			Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
			double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
			Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Student,
					"Total owing value is incorrect");

		} else if (!Shipping_val.equals("FREE!")) {
			String Shipping_act = subTotal_PaidShipping_SubmitPage().getText();
			Shipping_act = Shipping_act.trim();
			Shipping_act = Shipping_act.substring(1);
			double Shipping_act_2 = Double.parseDouble(Shipping_act);
			Shipping_act_2 = Double.parseDouble(new DecimalFormat("##.##").format(Shipping_act_2));

			double gst_Shipping_act = (double) (Shipping_tax_gst * Shipping_act_2) / 100;
			gst_Shipping_act = Double.parseDouble(new DecimalFormat("##.##").format(gst_Shipping_act));
			System.out.println("EXPECTED#########" + gst_Shipping_act);

			String gst_Shipping_exp = amount_GST_Shipping_SubmitPage().getText();
				gst_Shipping_exp = gst_Shipping_exp.trim();
				gst_Shipping_exp = gst_Shipping_exp.substring(1);
				double gst_Shipping_exp_2 = Double.parseDouble(gst_Shipping_exp);

				Assert.assertEquals(gst_Shipping_act, gst_Shipping_exp_2,
						"Shipping & Handling GST Tax value is incorrect");

				double Shipping_tax_qst = stateTaxQST;

				double qst_Shipping_act = (double) (Shipping_tax_qst * Shipping_act_2) / 100;
				qst_Shipping_act = Double.parseDouble(new DecimalFormat("##.##").format(qst_Shipping_act));
				System.out.println("EXPECTED#########" + qst_Shipping_act);

				String qst_Shipping_exp = amount_PST_Shipping_SubmitPage().getText();
				qst_Shipping_exp = qst_Shipping_exp.trim();
				qst_Shipping_exp = qst_Shipping_exp.substring(1);
				double qst_Shipping_exp_2 = Double.parseDouble(qst_Shipping_exp);

				Assert.assertEquals(qst_Shipping_act, qst_Shipping_exp_2,
						"Shipping & Handling QST Tax value is incorrect");

				double ShippingTotValue_act = Shipping_act_2 + gst_Shipping_act + qst_Shipping_act;
				ShippingTotValue_act = TaxRoundOff_of(ShippingTotValue_act);

				String ShippingTotValue_exp = Total_Shipping_SubmitPage().getText();
				ShippingTotValue_exp = ShippingTotValue_exp.trim();
				ShippingTotValue_exp = ShippingTotValue_exp.substring(1);
				double ShippingTotValue_exp_2 = Double.parseDouble(ShippingTotValue_exp);

				Assert.assertEquals(ShippingTotValue_act, ShippingTotValue_exp_2,
						"Shipping & Handling Total value is incorrect");
				///////////////////////////////////////
				double Total_Amount_Of_Student_And_Teacher = StudentClubsTotal_Actual + TeacherClubsTotal_Actual
						+ ShippingTotValue_act;
				Total_Amount_Of_Student_And_Teacher = Double
						.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Student_And_Teacher));

				String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
				Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
				double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
				Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Student_And_Teacher,
						"Total owing value is incorrect");

			}
	}

	@Override
	public void Validation_of_Student_club_And_Teacher_Catalogues_Total_GST_QST_ConfirmSubmitPage() {
		int stateTaxGST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxGST");
		double stateTaxQST = TestBaseProvider.getTestBase().getTestData().getDouble("stateTaxQST");

		PauseUtil.pause(8000);
		String value1 = item1_price_SubmitPage().getText();
		value1 = value1.trim();

		String ele1 = item1_qty_SubmitPage().getText();
		ele1 = ele1.trim();

		value1 = value1.substring(1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item1_price = d1 * a1;
		item1_price = Double.parseDouble(new DecimalFormat("##.##").format(item1_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item1_price);

		String StudentClbSubTot = subTotal_StudentClubs().getText();
		StudentClbSubTot = StudentClbSubTot.substring(1);
		double Student_SubTotal = Double.parseDouble(StudentClbSubTot);
		Assert.assertEquals(Student_SubTotal, item1_price, "Student Clubs Subtotal value is incorrect");

		double Student_gst_act = Student_GST();
		double Student_gst_exp = TaxRoundOff_item_1_Tax(stateTaxGST, d1, a1);
		Student_gst_exp = Double.parseDouble(new DecimalFormat("##.##").format(Student_gst_exp));
		Assert.assertEquals(Student_gst_act, Student_gst_exp, "Student Clubs Subtotal GST value is incorrect");

		double Student_qst_act = Student_QST();
		double Student_qst_exp = TaxRoundOff_item_1_Tax(stateTaxQST, d1, a1);
		Student_qst_exp = Double.parseDouble(new DecimalFormat("##.##").format(Student_qst_exp));
		Assert.assertEquals(Student_qst_act, Student_qst_exp, "Student Clubs Subtotal QST value is incorrect");

		String StudentClubsTotal_Expected = Total_StudentClubs_SubmitPage().getText();
		StudentClubsTotal_Expected = StudentClubsTotal_Expected.substring(1);
		double StudentClubsTotal_exp = Double.parseDouble(StudentClubsTotal_Expected);
		System.out.println("StudentClubsTotal :::::::: " + StudentClubsTotal_exp);

		double StudentClubsTotal_Actual = item1_price + Student_gst_exp + Student_qst_exp;
		StudentClubsTotal_Actual = Double.parseDouble(new DecimalFormat("##.##").format(StudentClubsTotal_Actual));
		System.out.println("StudentClubsTotal_Actual :::::::: " + StudentClubsTotal_Actual);

		Assert.assertEquals(StudentClubsTotal_exp, StudentClubsTotal_Actual, "Student Clubs Total value is incorrect");

		////////////////////////////////////////////////////////
		String value2 = item2_price_SubmitPage().getText();
		value2 = value2.trim();
		String ele2 = item2_qty_SubmitPage().getText();
		ele2 = ele2.trim();
		value2 = value2.substring(1);
		double d2 = Double.parseDouble(value2);
		System.out.println("#############>" + d2);
		int a2 = Integer.parseInt(ele2);
		System.out.println("%%%%%%%%%%%%>" + a2);
		double item2_price = d2 * a2;
		item2_price = Double.parseDouble(new DecimalFormat("##.##").format(item2_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item2_price);

		String value3 = item3_price_SubmitPage().getText();
		value3 = value3.trim();
		String ele3 = item3_qty_SubmitPage().getText();
		ele3 = ele3.trim();
		value3 = value3.substring(1);
		double d3 = Double.parseDouble(value3);
		System.out.println("#############>" + d3);
		int a3 = Integer.parseInt(ele3);
		System.out.println("%%%%%%%%%%%%>" + a3);
		double item3_price = d3 * a3;
		item3_price = Double.parseDouble(new DecimalFormat("##.##").format(item3_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item3_price);

		double Teacher_Catalogues_Subtotal_Actual = item2_price + item3_price;
		Teacher_Catalogues_Subtotal_Actual = Double
				.parseDouble(new DecimalFormat("##.##").format(Teacher_Catalogues_Subtotal_Actual));

		String TeacherCataloguesClbSubTot = SubTotal_TeacherCatalogues().getText();
		TeacherCataloguesClbSubTot = TeacherCataloguesClbSubTot.substring(1);
		double TeacherCatalogues_SubTotal = Double.parseDouble(TeacherCataloguesClbSubTot);
		Assert.assertEquals(TeacherCatalogues_SubTotal, Teacher_Catalogues_Subtotal_Actual,
				"Teacher Catalogues Subtotal value is incorrect");

		double Teacher_GST_act = Teacher_GST();
		double Teacher_GST_exp = TaxRoundOff_item_2_Tax(stateTaxGST, d2, a2)
				+ TaxRoundOff_item_3_Tax(stateTaxGST, d3, a3);
		Teacher_GST_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_GST_exp));
		Assert.assertEquals(Teacher_GST_act, Teacher_GST_exp, "Teacher Catalogues Subtotal GST value is incorrect");

		double Teacher_QST_act = Teacher_QST();
		double Teacher_QST_exp = TaxRoundOff_item_2_Tax(stateTaxQST, d2, a2)
				+ TaxRoundOff_item_3_Tax(stateTaxQST, d3, a3);
		Teacher_QST_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_QST_exp));
		Assert.assertEquals(Teacher_QST_act, Teacher_QST_exp, "Teacher Catalogues Subtotal QST value is incorrect");

		String TeacherClubsTotal_Expected = Total_TeacherCatalogues_SubmitPage().getText();
		TeacherClubsTotal_Expected = TeacherClubsTotal_Expected.substring(1);
		double TeacherClubsTotal_exp = Double.parseDouble(TeacherClubsTotal_Expected);
		System.out.println("Teacher Catalogues :::::::: " + TeacherClubsTotal_exp);

		double TeacherClubsTotal_Actual = Teacher_Catalogues_Subtotal_Actual + Teacher_GST_exp + Teacher_QST_exp;
		TeacherClubsTotal_Actual = Double.parseDouble(new DecimalFormat("##.##").format(TeacherClubsTotal_Actual));
		System.out.println("StudentClubsTotal_Actual :::::::: " + TeacherClubsTotal_Actual);

		Assert.assertEquals(TeacherClubsTotal_exp, TeacherClubsTotal_Actual,
				"Teacher Catalogues Total value is incorrect");

		double Shipping_tax_gst = stateTaxGST;

		String Shipping_val = Total_Shipping_SubmitPage().getText();
		Shipping_val = Shipping_val.trim();

		if (Shipping_val.equals("FREE!")) {
			double ShippingValue_is = 0;
			double Total_Amount_Of_Student = StudentClubsTotal_Actual + TeacherClubsTotal_Actual + ShippingValue_is;
			Total_Amount_Of_Student = Double.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Student));
			String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
			Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
			double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
			Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Student,
					"Total owing value is incorrect");

		} else if (!Shipping_val.equals("FREE!")) {
			String Shipping_act = subTotal_PaidShipping_SubmitPage().getText();
			Shipping_act = Shipping_act.trim();
			Shipping_act = Shipping_act.substring(1);
			double Shipping_act_2 = Double.parseDouble(Shipping_act);
			Shipping_act_2 = Double.parseDouble(new DecimalFormat("##.##").format(Shipping_act_2));

			double gst_Shipping_act = (double) (Shipping_tax_gst * Shipping_act_2) / 100;
			gst_Shipping_act = Double.parseDouble(new DecimalFormat("##.##").format(gst_Shipping_act));
			System.out.println("EXPECTED#########" + gst_Shipping_act);

			String gst_Shipping_exp = amount_GST_Shipping_SubmitPage().getText();
				gst_Shipping_exp = gst_Shipping_exp.trim();
				gst_Shipping_exp = gst_Shipping_exp.substring(1);
				double gst_Shipping_exp_2 = Double.parseDouble(gst_Shipping_exp);

				Assert.assertEquals(gst_Shipping_act, gst_Shipping_exp_2,
						"Shipping & Handling GST Tax value is incorrect");

				double Shipping_tax_qst = stateTaxQST;

				double qst_Shipping_act = (double) (Shipping_tax_qst * Shipping_act_2) / 100;
				qst_Shipping_act = Double.parseDouble(new DecimalFormat("##.##").format(qst_Shipping_act));
				System.out.println("EXPECTED#########" + qst_Shipping_act);

				String qst_Shipping_exp = amount_PST_Shipping_SubmitPage().getText();
				qst_Shipping_exp = qst_Shipping_exp.trim();
				qst_Shipping_exp = qst_Shipping_exp.substring(1);
				double qst_Shipping_exp_2 = Double.parseDouble(qst_Shipping_exp);

				Assert.assertEquals(qst_Shipping_act, qst_Shipping_exp_2,
						"Shipping & Handling QST Tax value is incorrect");

				double ShippingTotValue_act = Shipping_act_2 + gst_Shipping_act + qst_Shipping_act;
				ShippingTotValue_act = TaxRoundOff_of(ShippingTotValue_act);

				String ShippingTotValue_exp = Total_Shipping_SubmitPage().getText();
				ShippingTotValue_exp = ShippingTotValue_exp.trim();
				ShippingTotValue_exp = ShippingTotValue_exp.substring(1);
				double ShippingTotValue_exp_2 = Double.parseDouble(ShippingTotValue_exp);

				Assert.assertEquals(ShippingTotValue_act, ShippingTotValue_exp_2,
						"Shipping & Handling Total value is incorrect");
				///////////////////////////////////////
				double Total_Amount_Of_Student_And_Teacher = StudentClubsTotal_Actual + TeacherClubsTotal_Actual
						+ ShippingTotValue_act;
				Total_Amount_Of_Student_And_Teacher = Double
						.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Student_And_Teacher));

				String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
				Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
				double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
				Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Student_And_Teacher,
						"Total owing value is incorrect");
			}
	}

	@Override
	public void Validation_of_Student_club_And_Teacher_Catalogues_Total_HST_ConfirmSubmitPage() {
		int stateTaxHST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxHST");

		PauseUtil.pause(8000);
		String value1 = item1_price_SubmitPage().getText();
		value1 = value1.trim();

		String ele1 = item1_qty_SubmitPage().getText();
		ele1 = ele1.trim();

		value1 = value1.substring(1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item1_price = d1 * a1;
		item1_price = Double.parseDouble(new DecimalFormat("##.##").format(item1_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item1_price);

		String StudentClbSubTot = subTotal_StudentClubs().getText();
		StudentClbSubTot = StudentClbSubTot.substring(1);
		double Student_SubTotal = Double.parseDouble(StudentClbSubTot);
		Assert.assertEquals(Student_SubTotal, item1_price, "Student Clubs Subtotal value is incorrect");

		double Student_hst_act = Student_HST();
		double Student_hst_exp = TaxRoundOff_item_1_Tax(stateTaxHST, d1, a1);
		Student_hst_exp = Double.parseDouble(new DecimalFormat("##.##").format(Student_hst_exp));
		Assert.assertEquals(Student_hst_act, Student_hst_exp, "Student Clubs Subtotal HST value is incorrect");

		String StudentClubsTotal_Expected = Total_StudentClubs_SubmitPage().getText();
		StudentClubsTotal_Expected = StudentClubsTotal_Expected.substring(1);
		double StudentClubsTotal_exp = Double.parseDouble(StudentClubsTotal_Expected);
		System.out.println("StudentClubsTotal :::::::: " + StudentClubsTotal_exp);

		double StudentClubsTotal_Actual = item1_price + Student_hst_exp;
		System.out.println("StudentClubsTotal_Actual :::::::: " + StudentClubsTotal_Actual);
		StudentClubsTotal_Actual = Double.parseDouble(new DecimalFormat("##.##").format(StudentClubsTotal_Actual));

		Assert.assertEquals(StudentClubsTotal_exp, StudentClubsTotal_Actual, "Student Clubs Total value is incorrect");

		////////////////////////////////////////////////////////
		String value2 = item2_price_SubmitPage().getText();
		value2 = value2.trim();
		String ele2 = item2_qty_SubmitPage().getText();
		ele2 = ele2.trim();
		value2 = value2.substring(1);
		double d2 = Double.parseDouble(value2);
		System.out.println("#############>" + d2);
		int a2 = Integer.parseInt(ele2);
		System.out.println("%%%%%%%%%%%%>" + a2);
		double item2_price = d2 * a2;
		item2_price = Double.parseDouble(new DecimalFormat("##.##").format(item2_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item2_price);

		String value3 = item3_price_SubmitPage().getText();
		value3 = value3.trim();
		String ele3 = item3_qty_SubmitPage().getText();
		ele3 = ele3.trim();
		value3 = value3.substring(1);
		double d3 = Double.parseDouble(value3);
		System.out.println("#############>" + d3);
		int a3 = Integer.parseInt(ele3);
		System.out.println("%%%%%%%%%%%%>" + a3);
		double item3_price = d3 * a3;
		item3_price = Double.parseDouble(new DecimalFormat("##.##").format(item3_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item3_price);

		double Teacher_Catalogues_Subtotal_Actual = item2_price + item3_price;
		Teacher_Catalogues_Subtotal_Actual = Double
				.parseDouble(new DecimalFormat("##.##").format(Teacher_Catalogues_Subtotal_Actual));

		String TeacherCataloguesClbSubTot = SubTotal_TeacherCatalogues().getText();
		TeacherCataloguesClbSubTot = TeacherCataloguesClbSubTot.substring(1);
		double TeacherCatalogues_SubTotal = Double.parseDouble(TeacherCataloguesClbSubTot);
		Assert.assertEquals(TeacherCatalogues_SubTotal, Teacher_Catalogues_Subtotal_Actual,
				"Teacher Catalogues Subtotal value is incorrect");

		double Teacher_HST_act = Teacher_HST();
		double Teacher_HST_exp = TaxRoundOff_item_2_Tax(stateTaxHST, d2, a2)
				+ TaxRoundOff_item_3_Tax(stateTaxHST, d3, a3);
		Teacher_HST_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_HST_exp));
		Assert.assertEquals(Teacher_HST_act, Teacher_HST_exp, "Teacher Catalogues Subtotal HST value is incorrect");

		String TeacherClubsTotal_Expected = Total_TeacherCatalogues_SubmitPage().getText();
		TeacherClubsTotal_Expected = TeacherClubsTotal_Expected.substring(1);
		double TeacherClubsTotal_exp = Double.parseDouble(TeacherClubsTotal_Expected);
		System.out.println("Teacher Catalogues :::::::: " + TeacherClubsTotal_exp);

		double TeacherClubsTotal_Actual = Teacher_Catalogues_Subtotal_Actual + Teacher_HST_exp;
		TeacherClubsTotal_Actual = Double.parseDouble(new DecimalFormat("##.##").format(TeacherClubsTotal_Actual));
		System.out.println("StudentClubsTotal_Actual :::::::: " + TeacherClubsTotal_Actual);

		Assert.assertEquals(TeacherClubsTotal_exp, TeacherClubsTotal_Actual,
				"Teacher Catalogues Total value is incorrect");

		double Shipping_tax = stateTaxHST;
		String Shipping_val = Total_Shipping_SubmitPage().getText();
		Shipping_val = Shipping_val.trim();

		if (Shipping_val.equals("FREE!")) {
			double ShippingValue_is = 0;
			double Total_Amount_Of_Student = StudentClubsTotal_Actual + TeacherClubsTotal_Actual + ShippingValue_is;
			Total_Amount_Of_Student = Double.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Student));
			String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
			Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
			double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
			Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Student,
					"Total owing value is incorrect");

		} else if (!Shipping_val.equals("FREE!")) {
			String Shipping_act = subTotal_PaidShipping_SubmitPage().getText();
			Shipping_act = Shipping_act.trim();
			Shipping_act = Shipping_act.substring(1);
			double Shipping_act_2 = Double.parseDouble(Shipping_act);
			Shipping_act_2 = Double.parseDouble(new DecimalFormat("##.##").format(Shipping_act_2));

			double hst_Shipping_act = (double) (Shipping_tax * Shipping_act_2) / 100;
			hst_Shipping_act = Double.parseDouble(new DecimalFormat("##.##").format(hst_Shipping_act));
			System.out.println("EXPECTED#########" + hst_Shipping_act);

			String hst_Shipping_exp = amount_GST_Shipping_SubmitPage().getText();
				hst_Shipping_exp = hst_Shipping_exp.trim();
				hst_Shipping_exp = hst_Shipping_exp.substring(1);
				double hst_Shipping_exp_2 = Double.parseDouble(hst_Shipping_exp);

				Assert.assertEquals(hst_Shipping_act, hst_Shipping_exp_2,
						"Shipping & Handling HST Tax value is incorrect");

				double ShippingTotValue_act = Shipping_act_2 + hst_Shipping_act;
				ShippingTotValue_act = TaxRoundOff_of(ShippingTotValue_act);

				String ShippingTotValue_exp = Total_Shipping_SubmitPage().getText();
				ShippingTotValue_exp = ShippingTotValue_exp.trim();
				ShippingTotValue_exp = ShippingTotValue_exp.substring(1);
				double ShippingTotValue_exp_2 = Double.parseDouble(ShippingTotValue_exp);

				Assert.assertEquals(ShippingTotValue_act, ShippingTotValue_exp_2,
						"Shipping & Handling Total value is incorrect");
				///////////////////////////////////////
				double Total_Amount_Of_Student_And_Teacher = StudentClubsTotal_Actual + TeacherClubsTotal_Actual
						+ ShippingTotValue_act;
				Total_Amount_Of_Student_And_Teacher = Double
						.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Student_And_Teacher));

				String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
				Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
				double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
				Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Student_And_Teacher,
						"Total owing value is incorrect");
			}
	}

	@Override
	public void Validation_of_Student_club_And_Teacher_Catalogues_Total_HST_OrderRefPage() {
		int stateTaxHST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxHST");

		PauseUtil.pause(8000);
		Assert.assertTrue(msg_order_reference().isDisplayed(), "Ordere reference message is not displayed");
		String value1 = item1_price_SubmitPage().getText();
		value1 = value1.trim();

		String ele1 = item1_qty_SubmitPage().getText();
		ele1 = ele1.trim();

		value1 = value1.substring(1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item1_price = d1 * a1;
		item1_price = Double.parseDouble(new DecimalFormat("##.##").format(item1_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item1_price);

		String StudentClbSubTot = subTotal_StudentClubs().getText();
		StudentClbSubTot = StudentClbSubTot.substring(1);
		double Student_SubTotal = Double.parseDouble(StudentClbSubTot);
		Assert.assertEquals(Student_SubTotal, item1_price, "Student Clubs Subtotal value is incorrect");

		double Student_hst_act = Student_HST();
		double Student_hst_exp = TaxRoundOff_item_1_Tax(stateTaxHST, d1, a1);
		Student_hst_exp = Double.parseDouble(new DecimalFormat("##.##").format(Student_hst_exp));
		Assert.assertEquals(Student_hst_act, Student_hst_exp, "Student Clubs Subtotal HST value is incorrect");

		String StudentClubsTotal_Expected = Total_StudentClubs_SubmitPage().getText();
		StudentClubsTotal_Expected = StudentClubsTotal_Expected.substring(1);
		double StudentClubsTotal_exp = Double.parseDouble(StudentClubsTotal_Expected);
		System.out.println("StudentClubsTotal :::::::: " + StudentClubsTotal_exp);

		double StudentClubsTotal_Actual = item1_price + Student_hst_exp;
		StudentClubsTotal_Actual = Double.parseDouble(new DecimalFormat("##.##").format(StudentClubsTotal_Actual));
		System.out.println("StudentClubsTotal_Actual :::::::: " + StudentClubsTotal_Actual);

		Assert.assertEquals(StudentClubsTotal_exp, StudentClubsTotal_Actual, "Student Clubs Total value is incorrect");

		////////////////////////////////////////////////////////
		String value2 = item2_price_SubmitPage().getText();
		value2 = value2.trim();
		String ele2 = item2_qty_SubmitPage().getText();
		ele2 = ele2.trim();
		value2 = value2.substring(1);
		double d2 = Double.parseDouble(value2);
		System.out.println("#############>" + d2);
		int a2 = Integer.parseInt(ele2);
		System.out.println("%%%%%%%%%%%%>" + a2);
		double item2_price = d2 * a2;
		item2_price = Double.parseDouble(new DecimalFormat("##.##").format(item2_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item2_price);

		String value3 = item3_price_SubmitPage().getText();
		value3 = value3.trim();
		String ele3 = item3_qty_SubmitPage().getText();
		ele3 = ele3.trim();
		value3 = value3.substring(1);
		double d3 = Double.parseDouble(value3);
		System.out.println("#############>" + d3);
		int a3 = Integer.parseInt(ele3);
		System.out.println("%%%%%%%%%%%%>" + a3);
		double item3_price = d3 * a3;
		item3_price = Double.parseDouble(new DecimalFormat("##.##").format(item3_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item3_price);

		double Teacher_Catalogues_Subtotal_Actual = item2_price + item3_price;
		Teacher_Catalogues_Subtotal_Actual = Double
				.parseDouble(new DecimalFormat("##.##").format(Teacher_Catalogues_Subtotal_Actual));

		String TeacherCataloguesClbSubTot = SubTotal_TeacherCatalogues().getText();
		TeacherCataloguesClbSubTot = TeacherCataloguesClbSubTot.substring(1);
		double TeacherCatalogues_SubTotal = Double.parseDouble(TeacherCataloguesClbSubTot);
		Assert.assertEquals(TeacherCatalogues_SubTotal, Teacher_Catalogues_Subtotal_Actual,
				"Teacher Catalogues Subtotal value is incorrect");

		double Teacher_HST_act = Teacher_HST();
		double Teacher_HST_exp = TaxRoundOff_item_2_Tax(stateTaxHST, d2, a2)
				+ TaxRoundOff_item_3_Tax(stateTaxHST, d3, a3);
		Teacher_HST_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_HST_exp));
		Assert.assertEquals(Teacher_HST_act, Teacher_HST_exp, "Teacher Catalogues Subtotal HST value is incorrect");

		String TeacherClubsTotal_Expected = Total_TeacherCatalogues_SubmitPage().getText();
		TeacherClubsTotal_Expected = TeacherClubsTotal_Expected.substring(1);
		double TeacherClubsTotal_exp = Double.parseDouble(TeacherClubsTotal_Expected);
		System.out.println("Teacher Catalogues :::::::: " + TeacherClubsTotal_exp);

		double TeacherClubsTotal_Actual = Teacher_Catalogues_Subtotal_Actual + Teacher_HST_exp;
		TeacherClubsTotal_Actual = Double.parseDouble(new DecimalFormat("##.##").format(TeacherClubsTotal_Actual));
		System.out.println("StudentClubsTotal_Actual :::::::: " + TeacherClubsTotal_Actual);

		Assert.assertEquals(TeacherClubsTotal_exp, TeacherClubsTotal_Actual,
				"Teacher Catalogues Total value is incorrect");

		double Shipping_tax = stateTaxHST;
		
		String Shipping_val = Total_Shipping_SubmitPage().getText();
		Shipping_val = Shipping_val.trim();

		if (Shipping_val.equals("FREE!")) {
			double ShippingValue_is = 0;
			double Total_Amount_Of_Student = StudentClubsTotal_Actual + TeacherClubsTotal_Actual + ShippingValue_is;
			Total_Amount_Of_Student = Double.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Student));
			String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
			Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
			double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
			Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Student,
					"Total owing value is incorrect");

		} else if (!Shipping_val.equals("FREE!")) {
			String Shipping_act = subTotal_PaidShipping_SubmitPage().getText();
			Shipping_act = Shipping_act.trim();
			Shipping_act = Shipping_act.substring(1);
			double Shipping_act_2 = Double.parseDouble(Shipping_act);
			Shipping_act_2 = Double.parseDouble(new DecimalFormat("##.##").format(Shipping_act_2));

			double hst_Shipping_act = (double) (Shipping_tax * Shipping_act_2) / 100;
			hst_Shipping_act = Double.parseDouble(new DecimalFormat("##.##").format(hst_Shipping_act));
			System.out.println("EXPECTED#########" + hst_Shipping_act);

			String hst_Shipping_exp = amount_GST_Shipping_SubmitPage().getText();
				hst_Shipping_exp = hst_Shipping_exp.trim();
				hst_Shipping_exp = hst_Shipping_exp.substring(1);
				double hst_Shipping_exp_2 = Double.parseDouble(hst_Shipping_exp);

				Assert.assertEquals(hst_Shipping_act, hst_Shipping_exp_2,
						"Shipping & Handling HST Tax value is incorrect");

				double ShippingTotValue_act = Shipping_act_2 + hst_Shipping_act;
				ShippingTotValue_act = TaxRoundOff_of(ShippingTotValue_act);

				String ShippingTotValue_exp = Total_Shipping_SubmitPage().getText();
				ShippingTotValue_exp = ShippingTotValue_exp.trim();
				ShippingTotValue_exp = ShippingTotValue_exp.substring(1);
				double ShippingTotValue_exp_2 = Double.parseDouble(ShippingTotValue_exp);

				Assert.assertEquals(ShippingTotValue_act, ShippingTotValue_exp_2,
						"Shipping & Handling Total value is incorrect");
				///////////////////////////////////////
				double Total_Amount_Of_Student_And_Teacher = StudentClubsTotal_Actual + TeacherClubsTotal_Actual
						+ ShippingTotValue_act;
				Total_Amount_Of_Student_And_Teacher = Double
						.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Student_And_Teacher));

				String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
				Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
				double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
				Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Student_And_Teacher,
						"Total owing value is incorrect");
		}
	}

	@Override
	public void Validation_of_Student_club_And_Teacher_Catalogues_Total_GST_OrderRefPage() {
		int stateTaxGST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxGST");

		PauseUtil.pause(8000);
		Assert.assertTrue(msg_order_reference().isDisplayed(), "Order reference message is not displayed");
		String value1 = item1_price_SubmitPage().getText();
		value1 = value1.trim();

		String ele1 = item1_qty_SubmitPage().getText();
		ele1 = ele1.trim();

		value1 = value1.substring(1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item1_price = d1 * a1;
		item1_price = Double.parseDouble(new DecimalFormat("##.##").format(item1_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item1_price);

		String StudentClbSubTot = subTotal_StudentClubs().getText();
		StudentClbSubTot = StudentClbSubTot.substring(1);
		double Student_SubTotal = Double.parseDouble(StudentClbSubTot);
		Assert.assertEquals(Student_SubTotal, item1_price, "Student Clubs Subtotal value is incorrect");

		double Student_gst_act = Student_GST();
		double Student_gst_exp = TaxRoundOff_item_1_Tax(stateTaxGST, d1, a1);
		Student_gst_exp = Double.parseDouble(new DecimalFormat("##.##").format(Student_gst_exp));
		Assert.assertEquals(Student_gst_act, Student_gst_exp, "Student Clubs Subtotal GST value is incorrect");

		String StudentClubsTotal_Expected = Total_StudentClubs_SubmitPage().getText();
		StudentClubsTotal_Expected = StudentClubsTotal_Expected.substring(1);
		double StudentClubsTotal_exp = Double.parseDouble(StudentClubsTotal_Expected);
		System.out.println("StudentClubsTotal :::::::: " + StudentClubsTotal_exp);

		double StudentClubsTotal_Actual = item1_price + Student_gst_exp;
		StudentClubsTotal_Actual = Double.parseDouble(new DecimalFormat("##.##").format(StudentClubsTotal_Actual));
		System.out.println("StudentClubsTotal_Actual :::::::: " + StudentClubsTotal_Actual);

		Assert.assertEquals(StudentClubsTotal_exp, StudentClubsTotal_Actual, "Student Clubs Total value is incorrect");

		////////////////////////////////////////////////////////
		String value2 = item2_price_SubmitPage().getText();
		value2 = value2.trim();
		String ele2 = item2_qty_SubmitPage().getText();
		ele2 = ele2.trim();
		value2 = value2.substring(1);
		double d2 = Double.parseDouble(value2);
		System.out.println("#############>" + d2);
		int a2 = Integer.parseInt(ele2);
		System.out.println("%%%%%%%%%%%%>" + a2);
		double item2_price = d2 * a2;
		item2_price = Double.parseDouble(new DecimalFormat("##.##").format(item2_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item2_price);

		String value3 = item3_price_SubmitPage().getText();
		value3 = value3.trim();
		String ele3 = item3_qty_SubmitPage().getText();
		ele3 = ele3.trim();
		value3 = value3.substring(1);
		double d3 = Double.parseDouble(value3);
		System.out.println("#############>" + d3);
		int a3 = Integer.parseInt(ele3);
		System.out.println("%%%%%%%%%%%%>" + a3);
		double item3_price = d3 * a3;
		item3_price = Double.parseDouble(new DecimalFormat("##.##").format(item3_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item3_price);

		double Teacher_Catalogues_Subtotal_Actual = item2_price + item3_price;
		Teacher_Catalogues_Subtotal_Actual = Double
				.parseDouble(new DecimalFormat("##.##").format(Teacher_Catalogues_Subtotal_Actual));

		String TeacherCataloguesClbSubTot = SubTotal_TeacherCatalogues().getText();
		TeacherCataloguesClbSubTot = TeacherCataloguesClbSubTot.substring(1);
		double TeacherCatalogues_SubTotal = Double.parseDouble(TeacherCataloguesClbSubTot);
		Assert.assertEquals(TeacherCatalogues_SubTotal, Teacher_Catalogues_Subtotal_Actual,
				"Teacher Catalogues Subtotal value is incorrect");

		double Teacher_GST_act = Teacher_GST();
		double Teacher_GST_exp = TaxRoundOff_item_2_Tax(stateTaxGST, d2, a2)
				+ TaxRoundOff_item_3_Tax(stateTaxGST, d3, a3);
		Teacher_GST_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_GST_exp));
		Assert.assertEquals(Teacher_GST_act, Teacher_GST_exp, "Teacher Catalogues Subtotal GST value is incorrect");

		String TeacherClubsTotal_Expected = Total_TeacherCatalogues_SubmitPage().getText();
		TeacherClubsTotal_Expected = TeacherClubsTotal_Expected.substring(1);
		double TeacherClubsTotal_exp = Double.parseDouble(TeacherClubsTotal_Expected);
		System.out.println("Teacher Catalogues :::::::: " + TeacherClubsTotal_exp);

		double TeacherClubsTotal_Actual = Teacher_Catalogues_Subtotal_Actual + Teacher_GST_exp;
		TeacherClubsTotal_Actual = Double.parseDouble(new DecimalFormat("##.##").format(TeacherClubsTotal_Actual));
		System.out.println("StudentClubsTotal_Actual :::::::: " + TeacherClubsTotal_Actual);

		Assert.assertEquals(TeacherClubsTotal_exp, TeacherClubsTotal_Actual,
				"Teacher Catalogues Total value is incorrect");

		double Shipping_tax = stateTaxGST;

		String Shipping_val = Total_Shipping_SubmitPage().getText();
		Shipping_val = Shipping_val.trim();

		if (Shipping_val.equals("FREE!")) {
			double ShippingValue_is = 0;
			double Total_Amount_Of_Student = StudentClubsTotal_Actual + TeacherClubsTotal_Actual + ShippingValue_is;
			Total_Amount_Of_Student = Double.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Student));
			String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
			Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
			double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
			Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Student,
					"Total owing value is incorrect");

		} else if (!Shipping_val.equals("FREE!")) {
			String Shipping_act = subTotal_PaidShipping_SubmitPage().getText();
			Shipping_act = Shipping_act.trim();
			Shipping_act = Shipping_act.substring(1);
			double Shipping_act_2 = Double.parseDouble(Shipping_act);
			Shipping_act_2 = Double.parseDouble(new DecimalFormat("##.##").format(Shipping_act_2));

			double gst_Shipping_act = (double) (Shipping_tax * Shipping_act_2) / 100;
			gst_Shipping_act = Double.parseDouble(new DecimalFormat("##.##").format(gst_Shipping_act));
			System.out.println("EXPECTED#########" + gst_Shipping_act);

			String gst_Shipping_exp = amount_GST_Shipping_SubmitPage().getText();
				gst_Shipping_exp = gst_Shipping_exp.trim();
				gst_Shipping_exp = gst_Shipping_exp.substring(1);
				double gst_Shipping_exp_2 = Double.parseDouble(gst_Shipping_exp);

				Assert.assertEquals(gst_Shipping_act, gst_Shipping_exp_2,
						"Shipping & Handling GST Tax value is incorrect");

				double ShippingTotValue_act = Shipping_act_2 + gst_Shipping_act;
				ShippingTotValue_act = TaxRoundOff_of(ShippingTotValue_act);

				String ShippingTotValue_exp = Total_Shipping_SubmitPage().getText();
				ShippingTotValue_exp = ShippingTotValue_exp.trim();
				ShippingTotValue_exp = ShippingTotValue_exp.substring(1);
				double ShippingTotValue_exp_2 = Double.parseDouble(ShippingTotValue_exp);

				Assert.assertEquals(ShippingTotValue_act, ShippingTotValue_exp_2,
						"Shipping & Handling Total value is incorrect");
				///////////////////////////////////////
				double Total_Amount_Of_Student_And_Teacher = StudentClubsTotal_Actual + TeacherClubsTotal_Actual
						+ ShippingTotValue_act;
				Total_Amount_Of_Student_And_Teacher = Double
						.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Student_And_Teacher));

				String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
				Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
				double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
				Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Student_And_Teacher,
						"Total owing value is incorrect");
		}
	}

	@Override
	public void Validation_of_Student_club_And_Teacher_Catalogues_Total_GST_ConfirmSubmitPage() {
		int stateTaxGST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxGST");

		PauseUtil.pause(8000);
		String value1 = item1_price_SubmitPage().getText();
		value1 = value1.trim();

		String ele1 = item1_qty_SubmitPage().getText();
		ele1 = ele1.trim();

		value1 = value1.substring(1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############d1>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%a1>" + a1);
		double item1_price = d1 * a1;
		item1_price = Double.parseDouble(new DecimalFormat("##.##").format(item1_price));
		System.out.println("^^^^^^^^^^^^^^^^^item1_price" + item1_price);

		String StudentClbSubTot = subTotal_StudentClubs().getText();
		StudentClbSubTot = StudentClbSubTot.substring(1);
		double Student_SubTotal = Double.parseDouble(StudentClbSubTot);
		System.out.println("studentSubtotal    " + Student_SubTotal);
		Assert.assertEquals(Student_SubTotal, item1_price,
				"Student Clubs Subtotal value is incorrect in Confirm and Submit page");

		double Student_gst_act = Student_GST();
		double Student_gst_exp = TaxRoundOff_item_1_Tax(stateTaxGST, d1, a1);
		Student_gst_exp = Double.parseDouble(new DecimalFormat("##.##").format(Student_gst_exp));
		System.out.println("Student_gst_exp  " + Student_gst_exp);
		Assert.assertEquals(Student_gst_act, Student_gst_exp, "Student Clubs Subtotal GST value is incorrect");

		String StudentClubsTotal_Expected = Total_StudentClubs_SubmitPage().getText();
		StudentClubsTotal_Expected = StudentClubsTotal_Expected.substring(1);
		double StudentClubsTotal_exp = Double.parseDouble(StudentClubsTotal_Expected);
		System.out.println("StudentClubsTotal :::::::: " + StudentClubsTotal_exp);

		double StudentClubsTotal_Actual = item1_price + Student_gst_exp;
		StudentClubsTotal_Actual = Double.parseDouble(new DecimalFormat("##.##").format(StudentClubsTotal_Actual));
		System.out.println("StudentClubsTotal_Actual :::::::: " + StudentClubsTotal_Actual);

		// Assert.assertEquals(StudentClubsTotal_exp, StudentClubsTotal_Actual,
		// "Student Clubs Total value is incorrect");

		////////////////////////////////////////////////////////
		String value2 = item2_price_SubmitPage().getText();
		value2 = value2.trim();
		String ele2 = item2_qty_SubmitPage().getText();
		ele2 = ele2.trim();
		value2 = value2.substring(1);
		double d2 = Double.parseDouble(value2);
		System.out.println("#############>" + d2);
		int a2 = Integer.parseInt(ele2);
		System.out.println("%%%%%%%%%%%%>" + a2);
		double item2_price = d2 * a2;
		item2_price = Double.parseDouble(new DecimalFormat("##.##").format(item2_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item2_price);

		String value3 = item3_price_SubmitPage().getText();
		value3 = value3.trim();
		String ele3 = item3_qty_SubmitPage().getText();
		ele3 = ele3.trim();
		value3 = value3.substring(1);
		double d3 = Double.parseDouble(value3);
		System.out.println("#############>" + d3);
		int a3 = Integer.parseInt(ele3);
		System.out.println("%%%%%%%%%%%%>" + a3);
		double item3_price = d3 * a3;
		item3_price = Double.parseDouble(new DecimalFormat("##.##").format(item3_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item3_price);

		double Teacher_Catalogues_Subtotal_Actual = item2_price + item3_price;
		Teacher_Catalogues_Subtotal_Actual = Double
				.parseDouble(new DecimalFormat("##.##").format(Teacher_Catalogues_Subtotal_Actual));

		String TeacherCataloguesClbSubTot = SubTotal_TeacherCatalogues().getText();
		TeacherCataloguesClbSubTot = TeacherCataloguesClbSubTot.substring(1);
		double TeacherCatalogues_SubTotal = Double.parseDouble(TeacherCataloguesClbSubTot);
		Assert.assertEquals(TeacherCatalogues_SubTotal, Teacher_Catalogues_Subtotal_Actual,
				"Teacher Catalogues Subtotal value is incorrect");

		double Teacher_GST_act = Teacher_GST();
		double Teacher_GST_exp = TaxRoundOff_item_2_Tax(stateTaxGST, d2, a2)
				+ TaxRoundOff_item_3_Tax(stateTaxGST, d3, a3);
		Teacher_GST_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_GST_exp));
		Assert.assertEquals(Teacher_GST_act, Teacher_GST_exp, "Teacher Catalogues Subtotal GST value is incorrect");

		String TeacherClubsTotal_Expected = Total_TeacherCatalogues_SubmitPage().getText();
		TeacherClubsTotal_Expected = TeacherClubsTotal_Expected.substring(1);
		double TeacherClubsTotal_exp = Double.parseDouble(TeacherClubsTotal_Expected);
		System.out.println("Teacher Catalogues :::::::: " + TeacherClubsTotal_exp);

		double TeacherClubsTotal_Actual = Teacher_Catalogues_Subtotal_Actual + Teacher_GST_exp;
		TeacherClubsTotal_Actual = Double.parseDouble(new DecimalFormat("##.##").format(TeacherClubsTotal_Actual));
		System.out.println("StudentClubsTotal_Actual :::::::: " + TeacherClubsTotal_Actual);

		Assert.assertEquals(TeacherClubsTotal_exp, TeacherClubsTotal_Actual,
				"Teacher Catalogues Total value is incorrect");

		double Shipping_tax = stateTaxGST;

		String Shipping_val = Total_Shipping_SubmitPage().getText();
		Shipping_val = Shipping_val.trim();

		if (Shipping_val.equals("FREE!")) {
			double ShippingValue_is = 0;
			double Total_Amount_Of_Student = StudentClubsTotal_Actual + TeacherClubsTotal_Actual + ShippingValue_is;
			Total_Amount_Of_Student = Double.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Student));
			String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
			Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
			double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
			Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Student,
					"Total owing value is incorrect");

		} else if (!Shipping_val.equals("FREE!")) {
			String Shipping_act = subTotal_PaidShipping_SubmitPage().getText();
			Shipping_act = Shipping_act.trim();
			Shipping_act = Shipping_act.substring(1);
			double Shipping_act_2 = Double.parseDouble(Shipping_act);
			Shipping_act_2 = Double.parseDouble(new DecimalFormat("##.##").format(Shipping_act_2));

			double gst_Shipping_act = (double) (Shipping_tax * Shipping_act_2) / 100;
			gst_Shipping_act = Double.parseDouble(new DecimalFormat("##.##").format(gst_Shipping_act));
			System.out.println("EXPECTED#########" + gst_Shipping_act);

			String gst_Shipping_exp = amount_GST_Shipping_SubmitPage().getText();
				gst_Shipping_exp = gst_Shipping_exp.trim();
				gst_Shipping_exp = gst_Shipping_exp.substring(1);
				double gst_Shipping_exp_2 = Double.parseDouble(gst_Shipping_exp);

				Assert.assertEquals(gst_Shipping_act, gst_Shipping_exp_2,
						"Shipping & Handling GST Tax value is incorrect");

				double ShippingTotValue_act = Shipping_act_2 + gst_Shipping_act;
				ShippingTotValue_act = TaxRoundOff_of(ShippingTotValue_act);

				String ShippingTotValue_exp = Total_Shipping_SubmitPage().getText();
				ShippingTotValue_exp = ShippingTotValue_exp.trim();
				ShippingTotValue_exp = ShippingTotValue_exp.substring(1);
				double ShippingTotValue_exp_2 = Double.parseDouble(ShippingTotValue_exp);

				Assert.assertEquals(ShippingTotValue_act, ShippingTotValue_exp_2,
						"Shipping & Handling Total value is incorrect");
				///////////////////////////////////////
				double Total_Amount_Of_Student_And_Teacher = StudentClubsTotal_Actual + TeacherClubsTotal_Actual
						+ ShippingTotValue_act;
				Total_Amount_Of_Student_And_Teacher = Double
						.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Student_And_Teacher));

				String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
				Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
				double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
				Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Student_And_Teacher,
						"Total owing value is incorrect");
		}
	}

	@Override
	public void Validation_of_Student_club_And_Teacher_Catalogues_Total_after_enter_BPoints_GST_ConfirmSubmitPage() {
		double stateTaxGST = TestBaseProvider.getTestBase().getTestData().getDouble("stateTaxGST");

		PauseUtil.pause(8000);
		String value1 = item1_price_SubmitPage().getText();
		value1 = value1.trim();
		// value1=7.99
		String ele1 = item1_qty_SubmitPage().getText();
		ele1 = ele1.trim();
		// ele1=1
		value1 = value1.substring(1);
		double d1 = Double.parseDouble(value1);
		System.out.println("########d1value1#####>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%int a1 of ele1%%%%%%%>" + a1);
		double item1_price = d1 * a1;
		item1_price = Double.parseDouble(new DecimalFormat("##.##").format(item1_price));
		System.out.println("^^^^^^^^d1*a1^^^^^^^^^" + item1_price);

		String StudentClbSubTot = subTotal_StudentClubs().getText();
		StudentClbSubTot = StudentClbSubTot.substring(1);
		double Student_SubTotal = Double.parseDouble(StudentClbSubTot);
		Assert.assertEquals(Student_SubTotal, item1_price,
				"Student Clubs Subtotal value is incorrect in Confirm and Submit page");

		double Student_gst_act = Student_GST();
		double Student_gst_exp = TaxRoundOff_item_1_Tax(stateTaxGST, d1, a1);
		Student_gst_exp = Double.parseDouble(new DecimalFormat("##.##").format(Student_gst_exp));
		Assert.assertEquals(Student_gst_act, Student_gst_exp, "Student Clubs Subtotal GST value is incorrect");

		String StudentClubsTotal_Expected = Total_StudentClubs_SubmitPage().getText();
		StudentClubsTotal_Expected = StudentClubsTotal_Expected.substring(1);
		double StudentClubsTotal_exp = Double.parseDouble(StudentClubsTotal_Expected);
		System.out.println("StudentClubsTotal :::::::: " + StudentClubsTotal_exp);

		double StudentClubsTotal_Actual = item1_price + Student_gst_exp;
		StudentClubsTotal_Actual = Double.parseDouble(new DecimalFormat("##.##").format(StudentClubsTotal_Actual));
		StudentClubsTotal_Actual = StudentClubsTotal_Actual
				- (TestBaseProvider.getTestBase().getTestData().getDouble("sBonusBank")
						+ TestBaseProvider.getTestBase().getTestData().getDouble("sPaperBank"));
		StudentClubsTotal_Actual = TaxRoundOff_of(StudentClubsTotal_Actual);
		System.out.println("############StudentClubs Total Value is " + StudentClubsTotal_Actual);
		Assert.assertEquals(StudentClubsTotal_exp, StudentClubsTotal_Actual, "Student Clubs Total value is incorrect");

		////////////////////////////////////////////////////////
		String value2 = item2_price_SubmitPage().getText();
		value2 = value2.trim();
		String ele2 = item2_qty_SubmitPage().getText();
		ele2 = ele2.trim();
		value2 = value2.substring(1);
		double d2 = Double.parseDouble(value2);
		System.out.println("#############>" + d2);
		int a2 = Integer.parseInt(ele2);
		System.out.println("%%%%%%%%%%%%>" + a2);
		double item2_price = d2 * a2;
		item2_price = Double.parseDouble(new DecimalFormat("##.##").format(item2_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item2_price);

		String value3 = item3_price_SubmitPage().getText();
		value3 = value3.trim();
		String ele3 = item3_qty_SubmitPage().getText();
		ele3 = ele3.trim();
		value3 = value3.substring(1);
		double d3 = Double.parseDouble(value3);
		System.out.println("#############>" + d3);
		int a3 = Integer.parseInt(ele3);
		System.out.println("%%%%%%%%%%%%>" + a3);
		double item3_price = d3 * a3;
		item3_price = Double.parseDouble(new DecimalFormat("##.##").format(item3_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item3_price);

		double Teacher_Catalogues_Subtotal_Actual = item2_price + item3_price;
		Teacher_Catalogues_Subtotal_Actual = Double
				.parseDouble(new DecimalFormat("##.##").format(Teacher_Catalogues_Subtotal_Actual));
		Teacher_Catalogues_Subtotal_Actual = TaxRoundOff_of(Teacher_Catalogues_Subtotal_Actual);

		String TeacherCataloguesClbSubTot = SubTotal_TeacherCatalogues().getText();
		TeacherCataloguesClbSubTot = TeacherCataloguesClbSubTot.substring(1);
		double TeacherCatalogues_SubTotal = Double.parseDouble(TeacherCataloguesClbSubTot);
		Assert.assertEquals(TeacherCatalogues_SubTotal, Teacher_Catalogues_Subtotal_Actual,
				"Teacher Catalogues Subtotal value is incorrect");

		double Teacher_GST_act = Teacher_GST();
		double Teacher_GST_exp = TaxRoundOff_item_2_Tax(stateTaxGST, d2, a2)
				+ TaxRoundOff_item_3_Tax(stateTaxGST, d3, a3);
		Teacher_GST_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_GST_exp));
		Teacher_GST_exp = TaxRoundOff_of(Teacher_GST_exp);
		Assert.assertEquals(Teacher_GST_act, Teacher_GST_exp, "Teacher Catalogues Subtotal GST value is incorrect");

		String TeacherClubsTotal_Expected = Total_TeacherCatalogues_SubmitPage().getText();
		TeacherClubsTotal_Expected = TeacherClubsTotal_Expected.substring(1);
		double TeacherClubsTotal_exp = Double.parseDouble(TeacherClubsTotal_Expected);
		System.out.println("Teacher Catalogues :::::::: " + TeacherClubsTotal_exp);

		double TeacherClubsTotal_Actual = Teacher_Catalogues_Subtotal_Actual + Teacher_GST_exp;
		TeacherClubsTotal_Actual = Double.parseDouble(new DecimalFormat("##.##").format(TeacherClubsTotal_Actual));
		TeacherClubsTotal_Actual = TeacherClubsTotal_Actual
				- (TestBaseProvider.getTestBase().getTestData().getDouble("tBonusBank")
						+ TestBaseProvider.getTestBase().getTestData().getDouble("tPaperBank"));
		TeacherClubsTotal_Actual = TaxRoundOff_of(TeacherClubsTotal_Actual);
		System.out.println("Teacher Catalogues :::::::: " + TeacherClubsTotal_Actual);
		Assert.assertEquals(TeacherClubsTotal_exp, TeacherClubsTotal_Actual,
				"Teacher Catalogues Total value is incorrect");

		double Shipping_tax = stateTaxGST;
		String Shipping_val = Total_Shipping_SubmitPage().getText();
		Shipping_val = Shipping_val.trim();

		if (Shipping_val.equals("FREE!")) {
			double ShippingValue_is = 0;
			double Total_Amount_Of_Student = StudentClubsTotal_Actual + TeacherClubsTotal_Actual + ShippingValue_is;
			Total_Amount_Of_Student = Double.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Student));
			String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
			Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
			double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
			Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Student,
					"Total owing value is incorrect");

		} else if (!Shipping_val.equals("FREE!")) {
			String Shipping_act = subTotal_PaidShipping_SubmitPage().getText();
			Shipping_act = Shipping_act.trim();
			Shipping_act = Shipping_act.substring(1);
			double Shipping_act_2 = Double.parseDouble(Shipping_act);
			Shipping_act_2 = Double.parseDouble(new DecimalFormat("##.##").format(Shipping_act_2));

			double gst_Shipping_act = (double) (Shipping_tax * Shipping_act_2) / 100;
			gst_Shipping_act = Double.parseDouble(new DecimalFormat("##.##").format(gst_Shipping_act));
			System.out.println("EXPECTED#########" + gst_Shipping_act);

			String gst_Shipping_exp = amount_GST_Shipping_SubmitPage().getText();
				gst_Shipping_exp = gst_Shipping_exp.trim();
				gst_Shipping_exp = gst_Shipping_exp.substring(1);
				double gst_Shipping_exp_2 = Double.parseDouble(gst_Shipping_exp);

				Assert.assertEquals(gst_Shipping_act, gst_Shipping_exp_2,
						"Shipping & Handling GST Tax value is incorrect");

				double ShippingTotValue_act = Shipping_act_2 + gst_Shipping_act;
				ShippingTotValue_act = TaxRoundOff_of(ShippingTotValue_act);

				String ShippingTotValue_exp = Total_Shipping_SubmitPage().getText();
				ShippingTotValue_exp = ShippingTotValue_exp.trim();
				ShippingTotValue_exp = ShippingTotValue_exp.substring(1);
				double ShippingTotValue_exp_2 = Double.parseDouble(ShippingTotValue_exp);

				Assert.assertEquals(ShippingTotValue_act, ShippingTotValue_exp_2,
						"Shipping & Handling Total value is incorrect");
				///////////////////////////////////////
				double Total_Amount_Of_Student_And_Teacher = StudentClubsTotal_Actual + TeacherClubsTotal_Actual
						+ ShippingTotValue_act;
				Total_Amount_Of_Student_And_Teacher = Double
						.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Student_And_Teacher));

				String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
				Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
				double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
				Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Student_And_Teacher,
						"Total owing value is incorrect");

		}
	}

	@Override
	public void Validation_of_Student_club_And_Teacher_Catalogues_Total_2() {
		int stateTaxGST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxGST");
		double stateTaxQST = TestBaseProvider.getTestBase().getTestData().getDouble("stateTaxQST");

		PauseUtil.pause(8000);
		String value1 = cart_item1_price().getText();
		String ele1 = cart_qty_item1().getAttribute("value");
		value1 = value1.substring(1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item1_price = d1 * a1;
		item1_price = Double.parseDouble(new DecimalFormat("##.##").format(item1_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item1_price);

		String StudentClbSubTot = subTotal_StudentClubs().getText();
		StudentClbSubTot = StudentClbSubTot.substring(1);
		double Student_SubTotal = Double.parseDouble(StudentClbSubTot);
		Assert.assertEquals(Student_SubTotal, item1_price, "Student Clubs Subtotal value is incorrect");

		double Student_gst_act = Student_GST();
		double Student_gst_exp = TaxRoundOff_item_1_Tax(stateTaxGST, d1, a1);
		Student_gst_exp = Double.parseDouble(new DecimalFormat("##.##").format(Student_gst_exp));

		Assert.assertEquals(Student_gst_act, Student_gst_exp, "Student Clubs Subtotal GST value is incorrect");

		double Student_qst_act = Student_QST();
		double Student_qst_exp = TaxRoundOff_item_1_Tax(stateTaxQST, d1, a1);
		Student_qst_exp = Double.parseDouble(new DecimalFormat("##.##").format(Student_qst_exp));

		Assert.assertEquals(Student_qst_act, Student_qst_exp, "Student Clubs Subtotal QST value is incorrect");

		String StudentClubsTotal_Expected = Student_Clubs_Total().getText();
		StudentClubsTotal_Expected = StudentClubsTotal_Expected.substring(1);
		double StudentClubsTotal_exp = Double.parseDouble(StudentClubsTotal_Expected);
		System.out.println("StudentClubsTotal :::::::: " + StudentClubsTotal_exp);

		double StudentClubsTotal_Actual = item1_price + Student_gst_exp + Student_qst_exp;
		StudentClubsTotal_Actual = Double.parseDouble(new DecimalFormat("##.##").format(StudentClubsTotal_Actual));

		Assert.assertEquals(StudentClubsTotal_exp, StudentClubsTotal_Actual, "Student Clubs Total value is incorrect");

		////////////////////////////////////////////////////////
		String value2 = cart_item2_price().getText();
		String ele2 = cart_qty_item2().getAttribute("value");
		value2 = value2.substring(1);
		double d2 = Double.parseDouble(value2);
		System.out.println("#############>" + d2);
		int a2 = Integer.parseInt(ele2);
		System.out.println("%%%%%%%%%%%%>" + a2);
		double item2_price = d2 * a2;
		item2_price = Double.parseDouble(new DecimalFormat("##.##").format(item2_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item2_price);

		String value3 = cart_item3_price().getText();
		String ele3 = cart_qty_item3().getAttribute("value");
		value3 = value3.substring(1);
		double d3 = Double.parseDouble(value3);
		System.out.println("#############>" + d3);
		int a3 = Integer.parseInt(ele3);
		System.out.println("%%%%%%%%%%%%>" + a3);
		double item3_price = d3 * a3;
		item3_price = Double.parseDouble(new DecimalFormat("##.##").format(item3_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item3_price);

		double Teacher_Catalogues_Subtotal_Actual = item2_price + item3_price;
		Teacher_Catalogues_Subtotal_Actual = Double
				.parseDouble(new DecimalFormat("##.##").format(Teacher_Catalogues_Subtotal_Actual));

		String TeacherCataloguesClbSubTot = SubTotal_TeacherCatalogues().getText();
		TeacherCataloguesClbSubTot = TeacherCataloguesClbSubTot.substring(1);
		double TeacherCatalogues_SubTotal = Double.parseDouble(TeacherCataloguesClbSubTot);
		Assert.assertEquals(TeacherCatalogues_SubTotal, Teacher_Catalogues_Subtotal_Actual,
				"Teacher Catalogues Subtotal value is incorrect");

		double Teacher_GST_act = Teacher_GST();
		double Teacher_GST_exp = TaxRoundOff_item_2_Tax(stateTaxGST, d2, a2)
				+ TaxRoundOff_item_3_Tax(stateTaxGST, d3, a3);
		Teacher_GST_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_GST_exp));
		Assert.assertEquals(Teacher_GST_act, Teacher_GST_exp, "Teacher Catalogues Subtotal GST value is incorrect");

		double Teacher_QST_act = Teacher_QST();
		double Teacher_QST_exp = TaxRoundOff_item_2_Tax(stateTaxQST, d2, a2)
				+ TaxRoundOff_item_3_Tax(stateTaxQST, d3, a3);
		Teacher_QST_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_QST_exp));
		Assert.assertEquals(Teacher_QST_act, Teacher_QST_exp, "Teacher Catalogues Subtotal QST value is incorrect");

		String TeacherClubsTotal_Expected = Teacher_Catalogues_Total().getText();
		TeacherClubsTotal_Expected = TeacherClubsTotal_Expected.substring(1);
		double TeacherClubsTotal_exp = Double.parseDouble(TeacherClubsTotal_Expected);
		System.out.println("Teacher Catalogues :::::::: " + TeacherClubsTotal_exp);

		double TeacherClubsTotal_Actual = Teacher_Catalogues_Subtotal_Actual + Teacher_GST_exp + Teacher_QST_exp;
		TeacherClubsTotal_Actual = Double.parseDouble(new DecimalFormat("##.##").format(TeacherClubsTotal_Actual));

		Assert.assertEquals(TeacherClubsTotal_exp, TeacherClubsTotal_Actual,
				"Teacher Catalogues Total value is incorrect");

		double Total_Amount_Of_Student_And_Teacher = StudentClubsTotal_Actual + TeacherClubsTotal_Actual;
		System.out.println(">>>>>>>>><<<<<<<<<<<<" + Total_Amount_Of_Student_And_Teacher);
		Total_Amount_Of_Student_And_Teacher = Double
				.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Student_And_Teacher));

		System.out.println(">>>>>>>>ROUNDEDOFF><<<<<<<<<<<<" + Total_Amount_Of_Student_And_Teacher);

		String Total_Owing_Amount_Expected = Total_Amount_Owing().getText();
		Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
		double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
		Total_Owing_Amount_Expected_2 = Double
				.parseDouble(new DecimalFormat("##.##").format(Total_Owing_Amount_Expected_2));
		System.out.println("%%%%%%%%%%%%%%%%%%%%%" + Total_Owing_Amount_Expected_2);

		Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Student_And_Teacher,
				"Total owing value is incorrect");
	}

	@Override
	public void Validation_of_Student_club_And_Teacher_Catalogues_Total_3() {
		int stateTaxHST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxHST");

		PauseUtil.pause(8000);
		String value1 = cart_item1_price().getText();
		String ele1 = cart_qty_item1().getAttribute("value");
		value1 = value1.substring(1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item1_price = d1 * a1;
		item1_price = Double.parseDouble(new DecimalFormat("##.##").format(item1_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item1_price);

		String StudentClbSubTot = subTotal_StudentClubs().getText();
		StudentClbSubTot = StudentClbSubTot.substring(1);
		double Student_SubTotal = Double.parseDouble(StudentClbSubTot);
		Student_SubTotal = Double.parseDouble(new DecimalFormat("##.##").format(Student_SubTotal));
		Assert.assertEquals(Student_SubTotal, item1_price, "Student Clubs Subtotal value is incorrect");

		double Student_hst_act = Student_HST();
		double Student_hst_exp = TaxRoundOff_item_1_Tax(stateTaxHST, d1, a1);
		System.out.println("Expected Tax##############: " + Student_hst_exp);

		Student_hst_exp = Double.parseDouble(new DecimalFormat("##.##").format(Student_hst_exp));
		Assert.assertEquals(Student_hst_act, Student_hst_exp, "Student Clubs Subtotal HST value is incorrect");

		String StudentClubsTotal_Expected = Student_Clubs_Total().getText();
		StudentClubsTotal_Expected = StudentClubsTotal_Expected.substring(1);
		double StudentClubsTotal_exp = Double.parseDouble(StudentClubsTotal_Expected);
		System.out.println("StudentClubsTotal :::::::: " + StudentClubsTotal_exp);

		double StudentClubsTotal_Actual = item1_price + Student_hst_exp;
		StudentClubsTotal_Actual = Double.parseDouble(new DecimalFormat("##.##").format(StudentClubsTotal_Actual));
		System.out.println("StudentClubsTotal_Actual :::::::: " + StudentClubsTotal_Actual);

		Assert.assertEquals(StudentClubsTotal_exp, StudentClubsTotal_Actual, "Student Clubs Total value is incorrect");

		////////////////////////////////////////////////////////
		String value2 = cart_item2_price().getText();
		String ele2 = cart_qty_item2().getAttribute("value");
		value2 = value2.substring(1);
		double d2 = Double.parseDouble(value2);
		System.out.println("#############>" + d2);
		int a2 = Integer.parseInt(ele2);
		System.out.println("%%%%%%%%%%%%>" + a2);
		double item2_price = d2 * a2;
		item2_price = Double.parseDouble(new DecimalFormat("##.##").format(item2_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item2_price);

		String value3 = cart_item3_price().getText();
		String ele3 = cart_qty_item3().getAttribute("value");
		value3 = value3.substring(1);
		double d3 = Double.parseDouble(value3);
		System.out.println("#############>" + d3);
		int a3 = Integer.parseInt(ele3);
		System.out.println("%%%%%%%%%%%%>" + a3);
		double item3_price = d3 * a3;
		item3_price = Double.parseDouble(new DecimalFormat("##.##").format(item3_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item3_price);

		double Teacher_Catalogues_Subtotal_Actual = item2_price + item3_price;
		Teacher_Catalogues_Subtotal_Actual = Double
				.parseDouble(new DecimalFormat("##.##").format(Teacher_Catalogues_Subtotal_Actual));

		String TeacherCataloguesClbSubTot = SubTotal_TeacherCatalogues().getText();
		TeacherCataloguesClbSubTot = TeacherCataloguesClbSubTot.substring(1);
		double TeacherCatalogues_SubTotal = Double.parseDouble(TeacherCataloguesClbSubTot);
		Assert.assertEquals(TeacherCatalogues_SubTotal, Teacher_Catalogues_Subtotal_Actual,
				"Teacher Catalogues Subtotal value is incorrect");

		double Teacher_HST_act = Teacher_HST();
		double Teacher_HST_exp = TaxRoundOff_item_2_Tax(stateTaxHST, d2, a2)
				+ TaxRoundOff_item_3_Tax(stateTaxHST, d3, a3);
		System.out.println("Expected Tax##############: " + Teacher_HST_exp);

		Teacher_HST_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_HST_exp));
		Assert.assertEquals(Teacher_HST_act, Teacher_HST_exp, "Teacher Catalogues Subtotal HST value is incorrect");

		String TeacherClubsTotal_Expected = Teacher_Catalogues_Total().getText();
		TeacherClubsTotal_Expected = TeacherClubsTotal_Expected.substring(1);
		double TeacherClubsTotal_exp = Double.parseDouble(TeacherClubsTotal_Expected);
		System.out.println("Teacher Catalogues :::::::: " + TeacherClubsTotal_exp);

		double TeacherClubsTotal_Actual = Teacher_Catalogues_Subtotal_Actual + Teacher_HST_exp;
		TeacherClubsTotal_Actual = Double.parseDouble(new DecimalFormat("##.##").format(TeacherClubsTotal_Actual));
		System.out.println("StudentClubsTotal_Actual :::::::: " + TeacherClubsTotal_Actual);

		Assert.assertEquals(TeacherClubsTotal_exp, TeacherClubsTotal_Actual,
				"Teacher Catalogues Total value is incorrect");

		double Total_Amount_Of_Student_And_Teacher1 = StudentClubsTotal_Actual + TeacherClubsTotal_Actual;
		Total_Amount_Of_Student_And_Teacher1 = Double
				.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Student_And_Teacher1));

		String Total_Owing_Amount_Expected1 = Total_Amount_Owing().getText();
		Total_Owing_Amount_Expected1 = Total_Owing_Amount_Expected1.substring(1);
		double Total_Owing_Amount_Expected = Double.parseDouble(Total_Owing_Amount_Expected1);

		Assert.assertEquals(Total_Owing_Amount_Expected, Total_Amount_Of_Student_And_Teacher1,
				"Total owing value is incorrect");
	}

	@Override
	public void Validation_of_Student_club_And_Teacher_Catalogues_Total_4() {
		int stateTaxGST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxGST");

		PauseUtil.pause(8000);
		String value1 = cart_item1_price().getText();
		String ele1 = cart_qty_item1().getAttribute("value");
		value1 = value1.substring(1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item1_price = d1 * a1;
		item1_price = Double.parseDouble(new DecimalFormat("##.##").format(item1_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item1_price);

		String StudentClbSubTot = subTotal_StudentClubs().getText();
		StudentClbSubTot = StudentClbSubTot.substring(1);
		double Student_SubTotal = Double.parseDouble(StudentClbSubTot);
		Student_SubTotal = Double.parseDouble(new DecimalFormat("##.##").format(Student_SubTotal));
		Assert.assertEquals(Student_SubTotal, item1_price, "Student Clubs Subtotal value is incorrect");

		double Student_gst_act = Student_GST();
		double Student_gst_exp = TaxRoundOff_item_1_Tax(stateTaxGST, d1, a1);
		Student_gst_exp = Double.parseDouble(new DecimalFormat("##.##").format(Student_gst_exp));
		Assert.assertEquals(Student_gst_act, Student_gst_exp, "Student Clubs Subtotal GST value is incorrect");

		String StudentClubsTotal_Expected = Student_Clubs_Total().getText();
		StudentClubsTotal_Expected = StudentClubsTotal_Expected.substring(1);
		double StudentClubsTotal_exp = Double.parseDouble(StudentClubsTotal_Expected);
		System.out.println("StudentClubsTotal :::::::: " + StudentClubsTotal_exp);

		double StudentClubsTotal_Actual = item1_price + Student_gst_exp;
		StudentClubsTotal_Actual = Double.parseDouble(new DecimalFormat("##.##").format(StudentClubsTotal_Actual));
		System.out.println("StudentClubsTotal_Actual :::::::: " + StudentClubsTotal_Actual);

		Assert.assertEquals(StudentClubsTotal_exp, StudentClubsTotal_Actual, "Student Clubs Total value is incorrect");

		////////////////////////////////////////////////////////
		String value2 = cart_item2_price().getText();
		String ele2 = cart_qty_item2().getAttribute("value");
		value2 = value2.substring(1);
		double d2 = Double.parseDouble(value2);
		System.out.println("#############>" + d2);
		int a2 = Integer.parseInt(ele2);
		System.out.println("%%%%%%%%%%%%>" + a2);
		double item2_price = d2 * a2;
		item2_price = Double.parseDouble(new DecimalFormat("##.##").format(item2_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item2_price);

		String value3 = cart_item3_price().getText();
		String ele3 = cart_qty_item3().getAttribute("value");
		value3 = value3.substring(1);
		double d3 = Double.parseDouble(value3);
		System.out.println("#############>" + d3);
		int a3 = Integer.parseInt(ele3);
		System.out.println("%%%%%%%%%%%%>" + a3);
		double item3_price = d3 * a3;
		item3_price = Double.parseDouble(new DecimalFormat("##.##").format(item3_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item3_price);

		double Teacher_Catalogues_Subtotal_Actual = item2_price + item3_price;
		Teacher_Catalogues_Subtotal_Actual = Double
				.parseDouble(new DecimalFormat("##.##").format(Teacher_Catalogues_Subtotal_Actual));

		String TeacherCataloguesClbSubTot = SubTotal_TeacherCatalogues().getText();
		TeacherCataloguesClbSubTot = TeacherCataloguesClbSubTot.substring(1);
		double TeacherCatalogues_SubTotal = Double.parseDouble(TeacherCataloguesClbSubTot);
		Assert.assertEquals(TeacherCatalogues_SubTotal, Teacher_Catalogues_Subtotal_Actual,
				"Teacher Catalogues Subtotal value is incorrect");

		double Teacher_GST_act = Teacher_GST();
		double Teacher_GST_exp = TaxRoundOff_item_2_Tax(stateTaxGST, d2, a2)
				+ TaxRoundOff_item_3_Tax(stateTaxGST, d3, a3);
		Teacher_GST_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_GST_exp));
		Assert.assertEquals(Teacher_GST_act, Teacher_GST_exp, "Teacher Catalogues Subtotal GST value is incorrect");

		String TeacherClubsTotal_Expected = Teacher_Catalogues_Total().getText();
		TeacherClubsTotal_Expected = TeacherClubsTotal_Expected.substring(1);
		double TeacherClubsTotal_exp = Double.parseDouble(TeacherClubsTotal_Expected);
		System.out.println("Teacher Catalogues :::::::: " + TeacherClubsTotal_exp);

		double TeacherClubsTotal_Actual = Teacher_Catalogues_Subtotal_Actual + Teacher_GST_exp;
		TeacherClubsTotal_Actual = Double.parseDouble(new DecimalFormat("##.##").format(TeacherClubsTotal_Actual));
		System.out.println("StudentClubsTotal_Actual :::::::: " + TeacherClubsTotal_Actual);

		Assert.assertEquals(TeacherClubsTotal_exp, TeacherClubsTotal_Actual,
				"Teacher Catalogues Total value is incorrect");

		double Total_Amount_Of_Student_And_Teacher = StudentClubsTotal_Actual + TeacherClubsTotal_Actual;

		Total_Amount_Of_Student_And_Teacher = TaxRoundOff_of(Total_Amount_Of_Student_And_Teacher);

		String Total_Owing_Amount_Expected = Total_Amount_Owing().getText();
		Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
		double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
		Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Student_And_Teacher,
				"Total owing value is incorrect");
	}

	@Override
	public void Validation_of_no_taxes_are_charged_on_Student_and_Teacher_club_Subtotal_Total_amount() {
		PauseUtil.pause(8000);
		if (GST_Student_Clubs_Subtotal().isDisplayed()) {
			String Student_gst = GST_Student_Clubs_Subtotal().getText();
			Student_gst = Student_gst.substring(1);
			double Student_gst_2 = Double.parseDouble(Student_gst);
			System.out.println("################:" + Student_gst_2);
			double value = 0.0;
			System.out.println("%%%%%%%%%%%%%%%:" + value);
			Assert.assertEquals(Student_gst_2, value, "GST value is displayed for Student_Clubs_Subtotal");

		} else if (PST_Student_Clubs_Subtotal().isDisplayed()) {
			String Student_pst = PST_Student_Clubs_Subtotal().getText();
			Student_pst = Student_pst.substring(1);
			double Student_gst_2 = Double.parseDouble(Student_pst);
			double value = 0.0;
			Assert.assertEquals(value, Student_gst_2, "PST value is displayed for Student_Clubs_Subtotal");
			/*
			 * }else if (HST_Student_Clubs_Subtotal().isDisplayed()) { String
			 * Student_hst=HST_Student_Clubs_Subtotal().getText(); Student_hst =
			 * Student_hst.substring(1); double
			 * Student_hst_2=Double.parseDouble(Student_hst); double value=0.0;
			 * Assert.assertNotEquals(value, Student_hst_2,
			 * "HST value is displayed for Student_Clubs_Subtotal"); }else if
			 * (QST_Student_Clubs_Subtotal().isDisplayed()) { String
			 * Student_qst=QST_Student_Clubs_Subtotal().getText(); Student_qst =
			 * Student_qst.substring(1); double
			 * Student_qst_2=Double.parseDouble(Student_qst); double value=0.0;
			 * Assert.assertNotEquals(value, Student_qst_2,
			 * "QST value is displayed for Student_Clubs_Subtotal");
			 */
		} else if (PST_Teacher_Catalogues_Subtotal().isDisplayed()) {
			String Teacher_pst = PST_Teacher_Catalogues_Subtotal().getText();
			Teacher_pst = Teacher_pst.substring(1);
			double Teacher_pst_2 = Double.parseDouble(Teacher_pst);
			double value = 0.0;
			Assert.assertEquals(value, Teacher_pst_2, "PST value is displayed for Teacher_Catalogues_Subtotal");
			/*
			 * }else if (HST_Teacher_Subtotal().isDisplayed()) { String
			 * Teacher_hst=HST_Teacher_Subtotal().getText(); Teacher_hst =
			 * Teacher_hst.substring(1); double
			 * Teacher_hst_2=Double.parseDouble(Teacher_hst); double value=0.0;
			 * Assert.assertNotEquals(value, Teacher_hst_2,
			 * "HST value is displayed for Teacher_Catalogues_Subtotal"); }else
			 * if (QST_Teacher_Catalogues_Subtotal().isDisplayed()) { String
			 * Teacher_qst=QST_Teacher_Catalogues_Subtotal().getText();
			 * Teacher_qst = Teacher_qst.substring(1); double
			 * Teacher_qst_2=Double.parseDouble(Teacher_qst); double value=0.0;
			 * Assert.assertNotEquals(value, Teacher_qst_2,
			 * "QST value is displayed for Teacher_Catalogues_Subtotal");
			 */
		} else if (GST_Teacher_Catalogues_Subtotal().isDisplayed()) {
			String Teacher_gst = GST_Teacher_Catalogues_Subtotal().getText();
			Teacher_gst = Teacher_gst.substring(1);
			double Teacher_gst_2 = Double.parseDouble(Teacher_gst);
			double value = 0.0;
			Assert.assertEquals(value, Teacher_gst_2, "GST value is displayed for Teacher_Catalogues_Subtotal");
		} else {
			System.out.println("no_taxes_are_charged_on_Student_and_Teacher_club_Subtotal_Total_amount");

		}

		PauseUtil.pause(4000);
		String value1 = cart_item1_price().getText();
		String ele1 = cart_qty_item1().getAttribute("value");
		value1 = value1.substring(1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item1_price = d1 * a1;
		item1_price = Double.parseDouble(new DecimalFormat("##.##").format(item1_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item1_price);

		String StudentClbSubTot = subTotal_StudentClubs().getText();
		StudentClbSubTot = StudentClbSubTot.substring(1);
		double Student_SubTotal = Double.parseDouble(StudentClbSubTot);
		Student_SubTotal = Double.parseDouble(new DecimalFormat("##.##").format(Student_SubTotal));
		Assert.assertEquals(Student_SubTotal, item1_price, "Student Clubs Subtotal value is incorrect");

		String StudentClubsTotal_Expected = Student_Clubs_Total().getText();
		StudentClubsTotal_Expected = StudentClubsTotal_Expected.substring(1);
		double StudentClubsTotal_exp = Double.parseDouble(StudentClubsTotal_Expected);
		System.out.println("StudentClubsTotal :::::::: " + StudentClubsTotal_exp);

		double StudentClubsTotal_Actual = item1_price;
		System.out.println("StudentClubsTotal_Actual :::::::: " + StudentClubsTotal_Actual);
		StudentClubsTotal_Actual = Double.parseDouble(new DecimalFormat("##.##").format(StudentClubsTotal_Actual));

		Assert.assertEquals(StudentClubsTotal_exp, StudentClubsTotal_Actual, "Student Clubs Total value is incorrect");

		////////////////////////////////////////////////////////
		String value2 = cart_item2_price().getText();
		String ele2 = cart_qty_item2().getAttribute("value");
		value2 = value2.substring(1);
		double d2 = Double.parseDouble(value2);
		System.out.println("#############>" + d2);
		int a2 = Integer.parseInt(ele2);
		System.out.println("%%%%%%%%%%%%>" + a2);
		double item2_price = d2 * a2;
		item2_price = Double.parseDouble(new DecimalFormat("##.##").format(item2_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item2_price);

		String value3 = cart_item3_price().getText();
		String ele3 = cart_qty_item3().getAttribute("value");
		value3 = value3.substring(1);
		double d3 = Double.parseDouble(value3);
		System.out.println("#############>" + d3);
		int a3 = Integer.parseInt(ele3);
		System.out.println("%%%%%%%%%%%%>" + a3);
		double item3_price = d3 * a3;
		item3_price = Double.parseDouble(new DecimalFormat("##.##").format(item3_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item3_price);

		double Teacher_Catalogues_Subtotal_Actual = item2_price + item3_price;
		Teacher_Catalogues_Subtotal_Actual = Double
				.parseDouble(new DecimalFormat("##.##").format(Teacher_Catalogues_Subtotal_Actual));

		String TeacherCataloguesClbSubTot = SubTotal_TeacherCatalogues().getText();
		TeacherCataloguesClbSubTot = TeacherCataloguesClbSubTot.substring(1);
		double TeacherCatalogues_SubTotal = Double.parseDouble(TeacherCataloguesClbSubTot);
		Assert.assertEquals(TeacherCatalogues_SubTotal, Teacher_Catalogues_Subtotal_Actual,
				"Teacher Catalogues Subtotal value is incorrect");

		String TeacherClubsTotal_Expected = Teacher_Catalogues_Total().getText();
		TeacherClubsTotal_Expected = TeacherClubsTotal_Expected.substring(1);
		double TeacherClubsTotal_exp = Double.parseDouble(TeacherClubsTotal_Expected);
		System.out.println("Teacher Catalogues :::::::: " + TeacherClubsTotal_exp);

		double TeacherClubsTotal_Actual = Teacher_Catalogues_Subtotal_Actual;
		TeacherClubsTotal_Actual = Double.parseDouble(new DecimalFormat("##.##").format(TeacherClubsTotal_Actual));
		System.out.println("StudentClubsTotal_Actual :::::::: " + TeacherClubsTotal_Actual);

		Assert.assertEquals(TeacherClubsTotal_exp, TeacherClubsTotal_Actual,
				"Teacher Catalogues Total value is incorrect");

		double Total_Amount_Of_Student_And_Teacher = StudentClubsTotal_Actual + TeacherClubsTotal_Actual;

		Total_Amount_Of_Student_And_Teacher = Double
				.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Student_And_Teacher));

		String Total_Owing_Amount_Expected = Total_Amount_Owing().getText();
		Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
		double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
		Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Student_And_Teacher,
				"Total owing value is incorrect");
	}

	@Override
	public void Validation_of_no_taxes_are_charged_on_Student_and_Teacher_club_Subtotal_Total_amount_ConfirmSubmitPage() {
		int stateTaxGST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxGST");
		int stateTaxPST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxPST");
		PauseUtil.pause(8000);
		if (GST_Student_Clubs_Subtotal().isDisplayed()) {
			String Student_gst = GST_Student_Clubs_Subtotal().getText();
			Student_gst = Student_gst.substring(1);
			double Student_gst_2 = Double.parseDouble(Student_gst);
			System.out.println("################studgst:" + Student_gst_2);
			double value = 0.0;
			System.out.println("%%%%%%%%%%%%%%%:gst" + value);
			Assert.assertEquals(Student_gst_2, value, "GST value is displayed for Student_Clubs_Subtotal");

		} else if (PST_Student_Clubs_Subtotal().isDisplayed()) {
			String Student_pst = PST_Student_Clubs_Subtotal().getText();
			Student_pst = Student_pst.substring(1);
			double Student_gst_2 = Double.parseDouble(Student_pst);
			double value = 0.0;
			Assert.assertEquals(Student_gst_2, value, "PST value is displayed for Student_Clubs_Subtotal");
			/*
			 * }else if (HST_Student_Clubs_Subtotal().isDisplayed()) { String
			 * Student_hst=HST_Student_Clubs_Subtotal().getText(); Student_hst =
			 * Student_hst.substring(1); double
			 * Student_hst_2=Double.parseDouble(Student_hst); double value=0.0;
			 * Assert.assertNotEquals(value, Student_hst_2,
			 * "HST value is displayed for Student_Clubs_Subtotal"); }else if
			 * (QST_Student_Clubs_Subtotal().isDisplayed()) { String
			 * Student_qst=QST_Student_Clubs_Subtotal().getText(); Student_qst =
			 * Student_qst.substring(1); double
			 * Student_qst_2=Double.parseDouble(Student_qst); double value=0.0;
			 * Assert.assertNotEquals(value, Student_qst_2,
			 * "QST value is displayed for Student_Clubs_Subtotal");
			 */
		} else if (PST_Teacher_Catalogues_Subtotal().isDisplayed()) {
			String Teacher_pst = PST_Teacher_Catalogues_Subtotal().getText();
			Teacher_pst = Teacher_pst.substring(1);
			double Teacher_pst_2 = Double.parseDouble(Teacher_pst);
			double value = 0.0;
			Assert.assertEquals(Teacher_pst_2, value, "PST value is displayed for Teacher_Catalogues_Subtotal");
			/*
			 * }else if (HST_Teacher_Subtotal().isDisplayed()) { String
			 * Teacher_hst=HST_Teacher_Subtotal().getText(); Teacher_hst =
			 * Teacher_hst.substring(1); double
			 * Teacher_hst_2=Double.parseDouble(Teacher_hst); double value=0.0;
			 * Assert.assertNotEquals(value, Teacher_hst_2,
			 * "HST value is displayed for Teacher_Catalogues_Subtotal"); }else
			 * if (QST_Teacher_Catalogues_Subtotal().isDisplayed()) { String
			 * Teacher_qst=QST_Teacher_Catalogues_Subtotal().getText();
			 * Teacher_qst = Teacher_qst.substring(1); double
			 * Teacher_qst_2=Double.parseDouble(Teacher_qst); double value=0.0;
			 * Assert.assertNotEquals(value, Teacher_qst_2,
			 * "QST value is displayed for Teacher_Catalogues_Subtotal");
			 */
		} else if (GST_Teacher_Catalogues_Subtotal().isDisplayed()) {
			String Teacher_gst = GST_Teacher_Catalogues_Subtotal().getText();
			Teacher_gst = Teacher_gst.substring(1);
			double Teacher_gst_2 = Double.parseDouble(Teacher_gst);
			double value = 0.0;
			Assert.assertEquals(Teacher_gst_2, value, "GST value is displayed for Teacher_Catalogues_Subtotal");
		} else {
			System.out.println("no_taxes_are_charged_on_Student_and_Teacher_club_Subtotal_Total_amount");

		}

		PauseUtil.pause(4000);
		String value1 = item1_price_SubmitPage().getText();
		value1 = value1.trim();

		String ele1 = item1_qty_SubmitPage().getText();
		ele1 = ele1.trim();

		value1 = value1.substring(1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############studentsubtotal>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item1_price = d1 * a1;
		item1_price = Double.parseDouble(new DecimalFormat("##.##").format(item1_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item1_price);

		String StudentClbSubTot = subTotal_StudentClubs().getText();
		StudentClbSubTot = StudentClbSubTot.substring(1);
		double Student_SubTotal = Double.parseDouble(StudentClbSubTot);
		// Assert.assertEquals(Student_SubTotal, item1_price, "Student Clubs
		// Subtotal value is incorrect");

		String StudentClubsTotal_Expected = Total_StudentClubs_SubmitPage().getText();
		StudentClubsTotal_Expected = StudentClubsTotal_Expected.substring(1);
		double StudentClubsTotal_exp = Double.parseDouble(StudentClubsTotal_Expected);
		System.out.println("StudentClubsTotalexp :::::::: " + StudentClubsTotal_exp);

		String studentClubbluebarprice = Total_StudentClubs_SubmitPage_For_all_Items().getText();
		studentClubbluebarprice = studentClubbluebarprice.substring(1);
		double StudentClubsTotal_Actualtemp = Double.parseDouble(studentClubbluebarprice);

		double StudentClubsTotal_Actual = StudentClubsTotal_Actualtemp;
		System.out.println("StudentClubsTotal_Actual :::::::: " + StudentClubsTotal_Actual);
		StudentClubsTotal_Actual = Double.parseDouble(new DecimalFormat("##.##").format(StudentClubsTotal_Actual));

		Assert.assertEquals(StudentClubsTotal_exp, StudentClubsTotal_Actual, "Student Clubs Total value is incorrect");

		////////////////////////////////////////////////////////
		String value2 = item2_price_SubmitPage().getText();
		value2 = value2.trim();
		String ele2 = item2_qty_SubmitPage().getText();
		ele2 = ele2.trim();
		value2 = value2.substring(1);
		double d2 = Double.parseDouble(value2);
		System.out.println("#############>" + d2);
		int a2 = Integer.parseInt(ele2);
		System.out.println("%%%%%%%%%%%%>" + a2);
		double item2_price = d2 * a2;
		item2_price = Double.parseDouble(new DecimalFormat("##.##").format(item2_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item2_price);

		String value3 = item3_price_SubmitPage().getText();
		value3 = value3.trim();
		String ele3 = item3_qty_SubmitPage().getText();
		ele3 = ele3.trim();
		value3 = value3.substring(1);
		double d3 = Double.parseDouble(value3);
		System.out.println("#############>" + d3);
		int a3 = Integer.parseInt(ele3);
		System.out.println("%%%%%%%%%%%%>" + a3);
		double item3_price = d3 * a3;
		item3_price = Double.parseDouble(new DecimalFormat("##.##").format(item3_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item3_price);

		double Teacher_Catalogues_Subtotal_Actual = item2_price + item3_price;
		Teacher_Catalogues_Subtotal_Actual = Double
				.parseDouble(new DecimalFormat("##.##").format(Teacher_Catalogues_Subtotal_Actual));

		String TeacherCataloguesClbSubTot = SubTotal_TeacherCatalogues().getText();
		TeacherCataloguesClbSubTot = TeacherCataloguesClbSubTot.substring(1);
		double TeacherCatalogues_SubTotal = Double.parseDouble(TeacherCataloguesClbSubTot);
		System.out.println("TeacherCatalogues_SubTotal" + TeacherCatalogues_SubTotal);
		/*
		 * System.out.println("Teacher_Catalogues_Subtotal_Actual"+
		 * Teacher_Catalogues_Subtotal_Actual);
		 * Assert.assertEquals(TeacherCatalogues_SubTotal,
		 * Teacher_Catalogues_Subtotal_Actual,
		 * "Teacher Catalogues Subtotal value is incorrect");
		 */
		String TeacherClubsTotal_Expected = Total_TeacherCatalogues_SubmitPage().getText();
		TeacherClubsTotal_Expected = TeacherClubsTotal_Expected.substring(1);
		double TeacherClubsTotal_exp = Double.parseDouble(TeacherClubsTotal_Expected);
		System.out.println("Teacher Catalogues :::::::: " + TeacherClubsTotal_exp);

		double TeacherClubsTotal_Actual = Teacher_Catalogues_Subtotal_Actual;
		System.out.println("TeacherClubsTotal_Actual :::::::: " + TeacherClubsTotal_Actual);
		TeacherClubsTotal_Actual = Double.parseDouble(new DecimalFormat("##.##").format(TeacherClubsTotal_Actual));

		Assert.assertEquals(TeacherClubsTotal_exp, TeacherCatalogues_SubTotal,
				"Teacher Catalogues Total value is incorrect");

		int Shipping_tax_gst = stateTaxGST;
		int Shipping_tax_pst = stateTaxPST;

		String Shipping_val = Total_Shipping_SubmitPage().getText();
		Shipping_val = Shipping_val.trim();

		if (Shipping_val.equals("FREE!")) {
			double ShippingValue_is = 0;
			double Total_Amount_Of_Student = StudentClubsTotal_Actual + TeacherClubsTotal_Actual + ShippingValue_is;
			Total_Amount_Of_Student = Double.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Student));
			String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
			Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
			double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
			Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Student,
					"Total owing value is incorrect");

		} else if (!Shipping_val.equals("FREE!")) {
			String Shipping_act = subTotal_PaidShipping_SubmitPage().getText();
			Shipping_act = Shipping_act.trim();
			Shipping_act = Shipping_act.substring(1);
			double Shipping_act_2 = Double.parseDouble(Shipping_act);
			Shipping_act_2 = Double.parseDouble(new DecimalFormat("##.##").format(Shipping_act_2));

			double gst_Shipping_act = (double) (Shipping_tax_gst * Shipping_act_2) / 100;
			gst_Shipping_act = Double.parseDouble(new DecimalFormat("##.##").format(gst_Shipping_act));
			System.out.println("EXPECTED#########" + gst_Shipping_act);

			String gst_Shipping_exp = amount_GST_Shipping_SubmitPage().getText();
				gst_Shipping_exp = gst_Shipping_exp.trim();
				gst_Shipping_exp = gst_Shipping_exp.substring(1);
				double gst_Shipping_exp_2 = Double.parseDouble(gst_Shipping_exp);

				Assert.assertEquals(gst_Shipping_act, gst_Shipping_exp_2,
						"Shipping & Handling GST Tax value is incorrect");
				
				double pst_Shipping_act = (double) (Shipping_tax_pst * Shipping_act_2) / 100;
				pst_Shipping_act = Double.parseDouble(new DecimalFormat("##.##").format(pst_Shipping_act));
				System.out.println("EXPECTED#########" + pst_Shipping_act);

				String pst_Shipping_exp = amount_PST_Shipping_SubmitPage().getText();
				pst_Shipping_exp = pst_Shipping_exp.trim();
				pst_Shipping_exp = pst_Shipping_exp.substring(1);
				double pst_Shipping_exp_2 = Double.parseDouble(pst_Shipping_exp);

				Assert.assertEquals(pst_Shipping_act, pst_Shipping_exp_2,
						"Shipping & Handling PST Tax value is incorrect");

				double ShippingTotValue_act = Shipping_act_2 + gst_Shipping_act + pst_Shipping_act;
				ShippingTotValue_act = TaxRoundOff_of(ShippingTotValue_act);

				String ShippingTotValue_exp = Total_Shipping_SubmitPage().getText();
				ShippingTotValue_exp = ShippingTotValue_exp.trim();
				ShippingTotValue_exp = ShippingTotValue_exp.substring(1);
				double ShippingTotValue_exp_2 = Double.parseDouble(ShippingTotValue_exp);

				Assert.assertEquals(ShippingTotValue_act, ShippingTotValue_exp_2,
						"Shipping & Handling Total value is incorrect");
				///////////////////////////////////////
				double Total_Amount_Of_Student_And_Teacher = StudentClubsTotal_Actual + TeacherClubsTotal_Actual
						+ ShippingTotValue_act;
				Total_Amount_Of_Student_And_Teacher = Double
						.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Student_And_Teacher));

				String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
				Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
				double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
				Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Student_And_Teacher,
						"Total owing value is incorrect");
		}
	}

	@Override
	public void Validation_of_no_taxes_are_charged_on_Student_and_Teacher_club_Subtotal_Total_amount_in_OrderRefPage() {
		int stateTaxGST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxGST");
		int stateTaxPST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxPST");
		PauseUtil.pause(8000);
		Assert.assertTrue(msg_order_reference().isDisplayed(), "Ordere reference message is not displayed");
		if (GST_Student_Clubs_Subtotal().isDisplayed()) {
			String Student_gst = GST_Student_Clubs_Subtotal().getText();
			Student_gst = Student_gst.substring(1);
			double Student_gst_2 = Double.parseDouble(Student_gst);
			System.out.println("################:" + Student_gst_2);
			double value = 0.0;
			System.out.println("%%%%%%%%%%%%%%%:" + value);
			Assert.assertEquals(value, Student_gst_2, "GST value is displayed for Student_Clubs_Subtotal");

		} else if (PST_Student_Clubs_Subtotal().isDisplayed()) {
			String Student_pst = PST_Student_Clubs_Subtotal().getText();
			Student_pst = Student_pst.substring(1);
			double Student_gst_2 = Double.parseDouble(Student_pst);
			double value = 0.0;
			Assert.assertEquals(value, Student_gst_2, "PST value is displayed for Student_Clubs_Subtotal");
			/*
			 * }else if (HST_Student_Clubs_Subtotal().isDisplayed()) { String
			 * Student_hst=HST_Student_Clubs_Subtotal().getText(); Student_hst =
			 * Student_hst.substring(1); double
			 * Student_hst_2=Double.parseDouble(Student_hst); double value=0.0;
			 * Assert.assertNotEquals(value, Student_hst_2,
			 * "HST value is displayed for Student_Clubs_Subtotal"); }else if
			 * (QST_Student_Clubs_Subtotal().isDisplayed()) { String
			 * Student_qst=QST_Student_Clubs_Subtotal().getText(); Student_qst =
			 * Student_qst.substring(1); double
			 * Student_qst_2=Double.parseDouble(Student_qst); double value=0.0;
			 * Assert.assertNotEquals(value, Student_qst_2,
			 * "QST value is displayed for Student_Clubs_Subtotal");
			 */
		} else if (PST_Teacher_Catalogues_Subtotal().isDisplayed()) {
			String Teacher_pst = PST_Teacher_Catalogues_Subtotal().getText();
			Teacher_pst = Teacher_pst.substring(1);
			double Teacher_pst_2 = Double.parseDouble(Teacher_pst);
			double value = 0.0;
			Assert.assertEquals(value, Teacher_pst_2, "PST value is displayed for Teacher_Catalogues_Subtotal");
			/*
			 * }else if (HST_Teacher_Subtotal().isDisplayed()) { String
			 * Teacher_hst=HST_Teacher_Subtotal().getText(); Teacher_hst =
			 * Teacher_hst.substring(1); double
			 * Teacher_hst_2=Double.parseDouble(Teacher_hst); double value=0.0;
			 * Assert.assertNotEquals(value, Teacher_hst_2,
			 * "HST value is displayed for Teacher_Catalogues_Subtotal"); }else
			 * if (QST_Teacher_Catalogues_Subtotal().isDisplayed()) { String
			 * Teacher_qst=QST_Teacher_Catalogues_Subtotal().getText();
			 * Teacher_qst = Teacher_qst.substring(1); double
			 * Teacher_qst_2=Double.parseDouble(Teacher_qst); double value=0.0;
			 * Assert.assertNotEquals(value, Teacher_qst_2,
			 * "QST value is displayed for Teacher_Catalogues_Subtotal");
			 */
		} else if (GST_Teacher_Catalogues_Subtotal().isDisplayed()) {
			String Teacher_gst = GST_Teacher_Catalogues_Subtotal().getText();
			Teacher_gst = Teacher_gst.substring(1);
			double Teacher_gst_2 = Double.parseDouble(Teacher_gst);
			double value = 0.0;
			Assert.assertEquals(value, Teacher_gst_2, "GST value is displayed for Teacher_Catalogues_Subtotal");
		} else {
			System.out.println("no_taxes_are_charged_on_Student_and_Teacher_club_Subtotal_Total_amount");

		}

		PauseUtil.pause(4000);
		String value1 = item1_price_SubmitPage().getText();
		value1 = value1.trim();

		String ele1 = item1_qty_SubmitPage().getText();
		ele1 = ele1.trim();

		value1 = value1.substring(1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item1_price = d1 * a1;
		item1_price = Double.parseDouble(new DecimalFormat("##.##").format(item1_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item1_price);

		String StudentClbSubTot = subTotal_StudentClubs().getText();
		StudentClbSubTot = StudentClbSubTot.substring(1);
		double Student_SubTotal = Double.parseDouble(StudentClbSubTot);
		Assert.assertEquals(Student_SubTotal, item1_price, "Student Clubs Subtotal value is incorrect");

		String StudentClubsTotal_Expected = Total_StudentClubs_SubmitPage().getText();
		StudentClubsTotal_Expected = StudentClubsTotal_Expected.substring(1);
		double StudentClubsTotal_exp = Double.parseDouble(StudentClubsTotal_Expected);
		System.out.println("StudentClubsTotal :::::::: " + StudentClubsTotal_exp);

		double StudentClubsTotal_Actual = item1_price;
		System.out.println("StudentClubsTotal_Actual :::::::: " + StudentClubsTotal_Actual);
		StudentClubsTotal_Actual = Double.parseDouble(new DecimalFormat("##.##").format(StudentClubsTotal_Actual));

		Assert.assertEquals(StudentClubsTotal_exp, StudentClubsTotal_Actual, "Student Clubs Total value is incorrect");

		////////////////////////////////////////////////////////
		String value2 = item2_price_SubmitPage().getText();
		value2 = value2.trim();
		String ele2 = item2_qty_SubmitPage().getText();
		ele2 = ele2.trim();
		value2 = value2.substring(1);
		double d2 = Double.parseDouble(value2);
		System.out.println("#############>" + d2);
		int a2 = Integer.parseInt(ele2);
		System.out.println("%%%%%%%%%%%%>" + a2);
		double item2_price = d2 * a2;
		item2_price = Double.parseDouble(new DecimalFormat("##.##").format(item2_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item2_price);

		String value3 = item3_price_SubmitPage().getText();
		value3 = value3.trim();
		String ele3 = item3_qty_SubmitPage().getText();
		ele3 = ele3.trim();
		value3 = value3.substring(1);
		double d3 = Double.parseDouble(value3);
		System.out.println("#############>" + d3);
		int a3 = Integer.parseInt(ele3);
		System.out.println("%%%%%%%%%%%%>" + a3);
		double item3_price = d3 * a3;
		item3_price = Double.parseDouble(new DecimalFormat("##.##").format(item3_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item3_price);

		double Teacher_Catalogues_Subtotal_Actual = item2_price + item3_price;
		Teacher_Catalogues_Subtotal_Actual = Double
				.parseDouble(new DecimalFormat("##.##").format(Teacher_Catalogues_Subtotal_Actual));

		String TeacherCataloguesClbSubTot = SubTotal_TeacherCatalogues().getText();
		TeacherCataloguesClbSubTot = TeacherCataloguesClbSubTot.substring(1);
		double TeacherCatalogues_SubTotal = Double.parseDouble(TeacherCataloguesClbSubTot);
		Assert.assertEquals(TeacherCatalogues_SubTotal, Teacher_Catalogues_Subtotal_Actual,
				"Teacher Catalogues Subtotal value is incorrect");

		String TeacherClubsTotal_Expected = Total_TeacherCatalogues_SubmitPage().getText();
		TeacherClubsTotal_Expected = TeacherClubsTotal_Expected.substring(1);
		double TeacherClubsTotal_exp = Double.parseDouble(TeacherClubsTotal_Expected);
		System.out.println("Teacher Catalogues :::::::: " + TeacherClubsTotal_exp);

		double TeacherClubsTotal_Actual = Teacher_Catalogues_Subtotal_Actual;
		TeacherClubsTotal_Actual = Double.parseDouble(new DecimalFormat("##.##").format(TeacherClubsTotal_Actual));
		System.out.println("StudentClubsTotal_Actual :::::::: " + TeacherClubsTotal_Actual);

		Assert.assertEquals(TeacherClubsTotal_exp, TeacherClubsTotal_Actual,
				"Teacher Catalogues Total value is incorrect");

		int Shipping_tax_gst = stateTaxGST;
		int Shipping_tax_pst = stateTaxPST;

		String Shipping_val = Total_Shipping_SubmitPage().getText();
		Shipping_val = Shipping_val.trim();

		if (Shipping_val.equals("FREE!")) {
			double ShippingValue_is = 0;
			double Total_Amount_Of_Student = StudentClubsTotal_Actual + TeacherClubsTotal_Actual + ShippingValue_is;
			Total_Amount_Of_Student = Double.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Student));
			String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
			Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
			double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
			Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Student,
					"Total owing value is incorrect");

		} else if (!Shipping_val.equals("FREE!")) {
			String Shipping_act = subTotal_PaidShipping_SubmitPage().getText();
			Shipping_act = Shipping_act.trim();
			Shipping_act = Shipping_act.substring(1);
			double Shipping_act_2 = Double.parseDouble(Shipping_act);
			Shipping_act_2 = Double.parseDouble(new DecimalFormat("##.##").format(Shipping_act_2));

			double gst_Shipping_act = (double) (Shipping_tax_gst * Shipping_act_2) / 100;
			gst_Shipping_act = Double.parseDouble(new DecimalFormat("##.##").format(gst_Shipping_act));
			System.out.println("EXPECTED#########" + gst_Shipping_act);

			String gst_Shipping_exp = amount_GST_Shipping_SubmitPage().getText();
				gst_Shipping_exp = gst_Shipping_exp.trim();
				gst_Shipping_exp = gst_Shipping_exp.substring(1);
				double gst_Shipping_exp_2 = Double.parseDouble(gst_Shipping_exp);

				Assert.assertEquals(gst_Shipping_act, gst_Shipping_exp_2,
						"Shipping & Handling GST Tax value is incorrect");
				
				double pst_Shipping_act = (double) (Shipping_tax_pst * Shipping_act_2) / 100;
				pst_Shipping_act = Double.parseDouble(new DecimalFormat("##.##").format(pst_Shipping_act));
				System.out.println("EXPECTED#########" + pst_Shipping_act);

				String pst_Shipping_exp = amount_PST_Shipping_SubmitPage().getText();
				pst_Shipping_exp = pst_Shipping_exp.trim();
				pst_Shipping_exp = pst_Shipping_exp.substring(1);
				double pst_Shipping_exp_2 = Double.parseDouble(pst_Shipping_exp);

				Assert.assertEquals(pst_Shipping_act, pst_Shipping_exp_2,
						"Shipping & Handling PST Tax value is incorrect");

				double ShippingTotValue_act = Shipping_act_2 + gst_Shipping_act + pst_Shipping_act;
				ShippingTotValue_act = TaxRoundOff_of(ShippingTotValue_act);

				String ShippingTotValue_exp = Total_Shipping_SubmitPage().getText();
				ShippingTotValue_exp = ShippingTotValue_exp.trim();
				ShippingTotValue_exp = ShippingTotValue_exp.substring(1);
				double ShippingTotValue_exp_2 = Double.parseDouble(ShippingTotValue_exp);

				Assert.assertEquals(ShippingTotValue_act, ShippingTotValue_exp_2,
						"Shipping & Handling Total value is incorrect");
				///////////////////////////////////////
				double Total_Amount_Of_Student_And_Teacher = StudentClubsTotal_Actual + TeacherClubsTotal_Actual
						+ ShippingTotValue_act;
				Total_Amount_Of_Student_And_Teacher = Double
						.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Student_And_Teacher));

				String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
				Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
				double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
				Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Student_And_Teacher,
						"Total owing value is incorrect");
		}
	}

	@Override
	public void Validation_of_Student_club_SubTotal_and_Total() {
		int stateTaxGST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxGST");
		int stateTaxPST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxPST");

		PauseUtil.pause(8000);
		String value1 = cart_item1_price().getText();
		String ele1 = cart_qty_item1().getAttribute("value");
		value1 = value1.substring(1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item1_price = d1 * a1;
		item1_price = Double.parseDouble(new DecimalFormat("##.##").format(item1_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item1_price);

		String value2 = cart_item2_price().getText();
		String ele2 = cart_qty_item2().getAttribute("value");
		value2 = value2.substring(1);
		double d2 = Double.parseDouble(value2);
		System.out.println("#############>" + d2);
		int a2 = Integer.parseInt(ele2);
		System.out.println("%%%%%%%%%%%%>" + a2);
		double item2_price = d2 * a2;
		item2_price = Double.parseDouble(new DecimalFormat("##.##").format(item2_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item2_price);

		String value3 = cart_item3_price().getText();
		String ele3 = cart_qty_item3().getAttribute("value");
		value3 = value3.substring(1);
		double d3 = Double.parseDouble(value3);
		System.out.println("#############>" + d3);
		int a3 = Integer.parseInt(ele3);
		System.out.println("%%%%%%%%%%%%>" + a3);
		double item3_price = d3 * a3;
		item3_price = Double.parseDouble(new DecimalFormat("##.##").format(item3_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item3_price);

		double Student_SubTotal_exp = item1_price + item2_price + item3_price;
		Student_SubTotal_exp = Double.parseDouble(new DecimalFormat("##.##").format(Student_SubTotal_exp));

		String StudentClbSubTot = subTotal_StudentClubs().getText();
		StudentClbSubTot = StudentClbSubTot.substring(1);
		double Student_SubTotal = Double.parseDouble(StudentClbSubTot);
		Assert.assertEquals(Student_SubTotal, Student_SubTotal_exp, "Student Clubs Subtotal value is incorrect");

		double Student_gst_act = Student_GST();
		double Student_gst_exp = TaxRoundOff_item_1_Tax(stateTaxGST, d1, a1)
				+ TaxRoundOff_item_2_Tax(stateTaxGST, d2, a2) + TaxRoundOff_item_3_Tax(stateTaxGST, d3, a3);
		Student_gst_exp = Double.parseDouble(new DecimalFormat("##.##").format(Student_gst_exp));

		Assert.assertEquals(Student_gst_act, Student_gst_exp, "Student Clubs Subtotal GST value is incorrect");

		double Student_pst_act = Student_PST();
		double Student_pst_exp = TaxRoundOff_item_1_Tax(stateTaxPST, d1, a1)
				+ TaxRoundOff_item_2_Tax(stateTaxPST, d2, a2) + TaxRoundOff_item_3_Tax(stateTaxPST, d3, a3);
		Student_pst_exp = Double.parseDouble(new DecimalFormat("##.##").format(Student_pst_exp));
		Assert.assertEquals(Student_pst_act, Student_pst_exp, "Student Clubs Subtotal PST value is incorrect");

		String StudentClubsTotal_Expected = Student_Clubs_Total().getText();
		StudentClubsTotal_Expected = StudentClubsTotal_Expected.substring(1);
		double StudentClubsTotal_exp = Double.parseDouble(StudentClubsTotal_Expected);
		System.out.println("StudentClubsTotal :::::::: " + StudentClubsTotal_exp);

		double StudentClubsTotal_Actual = Student_SubTotal_exp + Student_gst_exp + Student_pst_exp;
		StudentClubsTotal_Actual = Double.parseDouble(new DecimalFormat("##.##").format(StudentClubsTotal_Actual));
		System.out.println("StudentClubsTotal_Actual :::::::: " + StudentClubsTotal_Actual);
		Assert.assertEquals(StudentClubsTotal_exp, StudentClubsTotal_Actual, "Student Clubs Total value is incorrect");

		String Total_Expected = Total_Amount_Owing().getText();
		Total_Expected = Total_Expected.substring(1);
		double Total_Expected_2 = Double.parseDouble(Total_Expected);
		Assert.assertEquals(Total_Expected_2, StudentClubsTotal_Actual, "Student Clubs Total owing value is incorrect");
	}

	@Override
	public void Validation_of_Teacher_club_SubTotal_and_Total_3() {
		int stateTaxGST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxGST");
		double stateTaxQST = TestBaseProvider.getTestBase().getTestData().getDouble("stateTaxQST");

		PauseUtil.pause(8000);
		String value1 = cart_item1_price().getText();
		String ele1 = cart_qty_item1().getAttribute("value");
		value1 = value1.substring(1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item1_price = d1 * a1;
		item1_price = Double.parseDouble(new DecimalFormat("##.##").format(item1_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item1_price);

		String value2 = cart_item2_price().getText();
		String ele2 = cart_qty_item2().getAttribute("value");
		value2 = value2.substring(1);
		double d2 = Double.parseDouble(value2);
		System.out.println("#############>" + d2);
		int a2 = Integer.parseInt(ele2);
		System.out.println("%%%%%%%%%%%%>" + a2);
		double item2_price = d2 * a2;
		item2_price = Double.parseDouble(new DecimalFormat("##.##").format(item2_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item2_price);

		String value3 = cart_item3_price().getText();
		String ele3 = cart_qty_item3().getAttribute("value");
		value3 = value3.substring(1);
		double d3 = Double.parseDouble(value3);
		System.out.println("#############>" + d3);
		int a3 = Integer.parseInt(ele3);
		System.out.println("%%%%%%%%%%%%>" + a3);
		double item3_price = d3 * a3;
		item3_price = Double.parseDouble(new DecimalFormat("##.##").format(item3_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item3_price);

		double Teacher_SubTotal_exp = item1_price + item2_price + item3_price;
		Teacher_SubTotal_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_SubTotal_exp));

		String TeacherClbSubTot = SubTotal_TeacherCataloguesOnly().getText();
		TeacherClbSubTot = TeacherClbSubTot.substring(1);
		double Teacher_SubTotal = Double.parseDouble(TeacherClbSubTot);
		Assert.assertEquals(Teacher_SubTotal, Teacher_SubTotal_exp, "Teacher Catalogues Subtotal value is incorrect");

		double Teacher_GST_act = Teacher_GST();
		double Teacher_GST_exp = TaxRoundOff_item_1_Tax(stateTaxGST, d1, a1)
				+ TaxRoundOff_item_2_Tax(stateTaxGST, d2, a2) + TaxRoundOff_item_3_Tax(stateTaxGST, d3, a3);
		Teacher_GST_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_GST_exp));
		Assert.assertEquals(Teacher_GST_act, Teacher_GST_exp, "Teacher Catalogues Subtotal GST value is incorrect");

		double Teacher_QST_act = Teacher_QST();
		double Teacher_QST_exp = TaxRoundOff_item_1_Tax(stateTaxQST, d1, a1)
				+ TaxRoundOff_item_2_Tax(stateTaxQST, d2, a2) + TaxRoundOff_item_3_Tax(stateTaxQST, d3, a3);
		Teacher_QST_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_QST_exp));
		Assert.assertEquals(Teacher_QST_act, Teacher_QST_exp, "Teacher Catalogues Subtotal QST value is incorrect");

		String TeacherCataloguesTotal_Expected = Teacher_Catalogues_Total().getText();
		TeacherCataloguesTotal_Expected = TeacherCataloguesTotal_Expected.substring(1);
		double TeacherCataloguesTotal_exp = Double.parseDouble(TeacherCataloguesTotal_Expected);
		System.out.println("TeacherCatalogues Total :::::::: " + TeacherCataloguesTotal_exp);

		double TeacherCataloguesTotal_Actual = Teacher_SubTotal_exp + Teacher_GST_exp + Teacher_QST_exp;
		TeacherCataloguesTotal_Actual = Double
				.parseDouble(new DecimalFormat("##.##").format(TeacherCataloguesTotal_Actual));
		System.out.println("StudentClubsTotal_Actual :::::::: " + TeacherCataloguesTotal_Actual);
		Assert.assertEquals(TeacherCataloguesTotal_exp, TeacherCataloguesTotal_Actual,
				"Teacher Catalogues Total value is incorrect");

		String Total_Expected = Total_Amount_Owing().getText();
		Total_Expected = Total_Expected.substring(1);
		double Total_Expected_2 = Double.parseDouble(Total_Expected);
		Assert.assertEquals(Total_Expected_2, TeacherCataloguesTotal_Actual,
				"Teacher Catalogues Total owing value is incorrect");
	}

	@Override
	public void Validation_of_Student_club_SubTotal_and_Total_2() {
		int stateTaxGST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxGST");
		double stateTaxQST = TestBaseProvider.getTestBase().getTestData().getDouble("stateTaxQST");

		PauseUtil.pause(8000);
		String value1 = cart_item1_price().getText();
		String ele1 = cart_qty_item1().getAttribute("value");
		value1 = value1.substring(1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item1_price = d1 * a1;
		item1_price = Double.parseDouble(new DecimalFormat("##.##").format(item1_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item1_price);

		String value2 = cart_item2_price().getText();
		String ele2 = cart_qty_item2().getAttribute("value");
		value2 = value2.substring(1);
		double d2 = Double.parseDouble(value2);
		System.out.println("#############>" + d2);
		int a2 = Integer.parseInt(ele2);
		System.out.println("%%%%%%%%%%%%>" + a2);
		double item2_price = d2 * a2;
		item2_price = Double.parseDouble(new DecimalFormat("##.##").format(item2_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item2_price);

		String value3 = cart_item3_price().getText();
		String ele3 = cart_qty_item3().getAttribute("value");
		value3 = value3.substring(1);
		double d3 = Double.parseDouble(value3);
		System.out.println("#############>" + d3);
		int a3 = Integer.parseInt(ele3);
		System.out.println("%%%%%%%%%%%%>" + a3);
		double item3_price = d3 * a3;
		item3_price = Double.parseDouble(new DecimalFormat("##.##").format(item3_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item3_price);

		double Student_SubTotal_exp = item1_price + item2_price + item3_price;

		String StudentClbSubTot = subTotal_StudentClubs().getText();
		StudentClbSubTot = StudentClbSubTot.substring(1);
		double Student_SubTotal = Double.parseDouble(StudentClbSubTot);
		Assert.assertEquals(Student_SubTotal, Student_SubTotal_exp, "Student Clubs Subtotal value is incorrect");

		double Student_gst_act = Student_GST();
		double Student_gst_exp = TaxRoundOff_item_1_Tax(stateTaxGST, d1, a1)
				+ TaxRoundOff_item_2_Tax(stateTaxGST, d2, a2) + TaxRoundOff_item_3_Tax(stateTaxGST, d3, a3);
		Student_gst_exp = Double.parseDouble(new DecimalFormat("##.##").format(Student_gst_exp));

		Assert.assertEquals(Student_gst_act, Student_gst_exp, "Student Clubs Subtotal GST value is incorrect");

		double Student_qst_act = Student_QST();
		double Student_qst_exp = TaxRoundOff_item_1_Tax(stateTaxQST, d1, a1)
				+ TaxRoundOff_item_2_Tax(stateTaxQST, d2, a2) + TaxRoundOff_item_3_Tax(stateTaxQST, d3, a3);
		Student_qst_exp = Double.parseDouble(new DecimalFormat("##.##").format(Student_qst_exp));

		Assert.assertEquals(Student_qst_act, Student_qst_exp, "Student Clubs Subtotal QST value is incorrect");

		String StudentClubsTotal_Expected = Student_Clubs_Total().getText();
		StudentClubsTotal_Expected = StudentClubsTotal_Expected.substring(1);
		double StudentClubsTotal_exp = Double.parseDouble(StudentClubsTotal_Expected);
		System.out.println("StudentClubsTotal :::::::: " + StudentClubsTotal_exp);

		double StudentClubsTotal_Actual = Student_SubTotal_exp + Student_gst_exp + Student_qst_exp;
		StudentClubsTotal_Actual = Double.parseDouble(new DecimalFormat("##.##").format(StudentClubsTotal_Actual));
		System.out.println("StudentClubsTotal_Actual :::::::: " + StudentClubsTotal_Actual);
		Assert.assertEquals(StudentClubsTotal_exp, StudentClubsTotal_Actual, "Student Clubs Total value is incorrect");

		String Total_Expected = Total_Amount_Owing().getText();
		Total_Expected = Total_Expected.substring(1);
		double Total_Expected_2 = Double.parseDouble(Total_Expected);
		Assert.assertEquals(Total_Expected_2, StudentClubsTotal_Actual, "Student Clubs Total owing value is incorrect");
	}

	@Override
	public void Validation_of_Student_club_SubTotal_and_Total_3() {
		int stateTaxHST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxHST");

		PauseUtil.pause(8000);
		String value1 = cart_item1_price().getText();
		String ele1 = cart_qty_item1().getAttribute("value");
		value1 = value1.substring(1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item1_price = d1 * a1;
		item1_price = Double.parseDouble(new DecimalFormat("##.##").format(item1_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item1_price);

		String value2 = cart_item2_price().getText();
		String ele2 = cart_qty_item2().getAttribute("value");
		value2 = value2.substring(1);
		double d2 = Double.parseDouble(value2);
		System.out.println("#############>" + d2);
		int a2 = Integer.parseInt(ele2);
		System.out.println("%%%%%%%%%%%%>" + a2);
		double item2_price = d2 * a2;
		item2_price = Double.parseDouble(new DecimalFormat("##.##").format(item2_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item2_price);

		String value3 = cart_item3_price().getText();
		String ele3 = cart_qty_item3().getAttribute("value");
		value3 = value3.substring(1);
		double d3 = Double.parseDouble(value3);
		System.out.println("#############>" + d3);
		int a3 = Integer.parseInt(ele3);
		System.out.println("%%%%%%%%%%%%>" + a3);
		double item3_price = d3 * a3;
		item3_price = Double.parseDouble(new DecimalFormat("##.##").format(item3_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item3_price);

		double Student_SubTotal_exp = item1_price + item2_price + item3_price;
		Student_SubTotal_exp = Double.parseDouble(new DecimalFormat("##.##").format(Student_SubTotal_exp));

		String StudentClbSubTot = subTotal_StudentClubs().getText();
		StudentClbSubTot = StudentClbSubTot.substring(1);
		double Student_SubTotal = Double.parseDouble(StudentClbSubTot);
		Assert.assertEquals(Student_SubTotal, Student_SubTotal_exp, "Student Clubs Subtotal value is incorrect");

		double Student_hst_act = Student_HST();
		double Student_hst_exp = TaxRoundOff_item_1_Tax(stateTaxHST, d1, a1)
				+ TaxRoundOff_item_2_Tax(stateTaxHST, d2, a2) + TaxRoundOff_item_3_Tax(stateTaxHST, d3, a3);
		Student_hst_exp = Double.parseDouble(new DecimalFormat("##.##").format(Student_hst_exp));
		Assert.assertEquals(Student_hst_act, Student_hst_exp, "Student Clubs Subtotal HST value is incorrect");

		String StudentClubsTotal_Expected = Student_Clubs_Total().getText();
		StudentClubsTotal_Expected = StudentClubsTotal_Expected.substring(1);
		double StudentClubsTotal_exp = Double.parseDouble(StudentClubsTotal_Expected);
		System.out.println("StudentClubsTotal :::::::: " + StudentClubsTotal_exp);

		double StudentClubsTotal_Actual = Student_SubTotal_exp + Student_hst_exp;
		StudentClubsTotal_Actual = Double.parseDouble(new DecimalFormat("##.##").format(StudentClubsTotal_Actual));
		System.out.println("StudentClubsTotal_Actual :::::::: " + StudentClubsTotal_Actual);
		Assert.assertEquals(StudentClubsTotal_exp, StudentClubsTotal_Actual, "Student Clubs Total value is incorrect");

		String Total_Expected = Total_Amount_Owing().getText();
		Total_Expected = Total_Expected.substring(1);
		double Total_Expected_2 = Double.parseDouble(Total_Expected);
		Assert.assertEquals(Total_Expected_2, StudentClubsTotal_Actual, "Student Clubs Total owing value is incorrect");
	}

	@Override
	public void Validation_of_Student_club_SubTotal_and_Total_4() {
		int stateTaxGST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxGST");

		PauseUtil.pause(8000);
		String value1 = cart_item1_price().getText();
		String ele1 = cart_qty_item1().getAttribute("value");
		value1 = value1.substring(1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item1_price = d1 * a1;
		item1_price = Double.parseDouble(new DecimalFormat("##.##").format(item1_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item1_price);

		String value2 = cart_item2_price().getText();
		String ele2 = cart_qty_item2().getAttribute("value");
		value2 = value2.substring(1);
		double d2 = Double.parseDouble(value2);
		System.out.println("#############>" + d2);
		int a2 = Integer.parseInt(ele2);
		System.out.println("%%%%%%%%%%%%>" + a2);
		double item2_price = d2 * a2;
		item2_price = Double.parseDouble(new DecimalFormat("##.##").format(item2_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item2_price);

		String value3 = cart_item3_price().getText();
		String ele3 = cart_qty_item3().getAttribute("value");
		value3 = value3.substring(1);
		double d3 = Double.parseDouble(value3);
		System.out.println("#############>" + d3);
		int a3 = Integer.parseInt(ele3);
		System.out.println("%%%%%%%%%%%%>" + a3);
		double item3_price = d3 * a3;
		item3_price = Double.parseDouble(new DecimalFormat("##.##").format(item3_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item3_price);

		double Student_SubTotal_exp = item1_price + item2_price + item3_price;
		Student_SubTotal_exp = Double.parseDouble(new DecimalFormat("##.##").format(Student_SubTotal_exp));

		String StudentClbSubTot = subTotal_StudentClubs().getText();
		StudentClbSubTot = StudentClbSubTot.substring(1);
		double Student_SubTotal = Double.parseDouble(StudentClbSubTot);
		Assert.assertEquals(Student_SubTotal, Student_SubTotal_exp, "Student Clubs Subtotal value is incorrect");

		double Student_gst_act = Student_GST();
		double Student_gst_exp = TaxRoundOff_item_1_Tax(stateTaxGST, d1, a1)
				+ TaxRoundOff_item_2_Tax(stateTaxGST, d2, a2) + TaxRoundOff_item_3_Tax(stateTaxGST, d3, a3);
		Student_gst_exp = Double.parseDouble(new DecimalFormat("##.##").format(Student_gst_exp));
		Assert.assertEquals(Student_gst_act, Student_gst_exp, "Student Clubs Subtotal GST value is incorrect");

		String StudentClubsTotal_Expected = Student_Clubs_Total().getText();
		StudentClubsTotal_Expected = StudentClubsTotal_Expected.substring(1);
		double StudentClubsTotal_exp = Double.parseDouble(StudentClubsTotal_Expected);
		System.out.println("StudentClubsTotal :::::::: " + StudentClubsTotal_exp);

		double StudentClubsTotal_Actual = Student_SubTotal_exp + Student_gst_exp;
		StudentClubsTotal_Actual = Double.parseDouble(new DecimalFormat("##.##").format(StudentClubsTotal_Actual));
		System.out.println("StudentClubsTotal_Actual :::::::: " + StudentClubsTotal_Actual);
		Assert.assertEquals(StudentClubsTotal_exp, StudentClubsTotal_Actual, "Student Clubs Total value is incorrect");

		String Total_Expected = Total_Amount_Owing().getText();
		Total_Expected = Total_Expected.substring(1);
		double Total_Expected_2 = Double.parseDouble(Total_Expected);
		Assert.assertEquals(Total_Expected_2, StudentClubsTotal_Actual, "Student Clubs Total owing value is incorrect");
	}

	@Override
	public void Validation_of_Teacher_Catalogues_SubTotal_and_Total() {
		int stateTaxHST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxHST");

		PauseUtil.pause(8000);
		String value1 = cart_item1_price().getText();
		String ele1 = cart_qty_item1().getAttribute("value");
		value1 = value1.substring(1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item1_price = d1 * a1;
		item1_price = Double.parseDouble(new DecimalFormat("##.##").format(item1_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item1_price);

		String value2 = cart_item2_price().getText();
		String ele2 = cart_qty_item2().getAttribute("value");
		value2 = value2.substring(1);
		double d2 = Double.parseDouble(value2);
		System.out.println("#############>" + d2);
		int a2 = Integer.parseInt(ele2);
		System.out.println("%%%%%%%%%%%%>" + a2);
		double item2_price = d2 * a2;
		item2_price = Double.parseDouble(new DecimalFormat("##.##").format(item2_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item2_price);

		String value3 = cart_item3_price().getText();
		String ele3 = cart_qty_item3().getAttribute("value");
		value3 = value3.substring(1);
		double d3 = Double.parseDouble(value3);
		System.out.println("#############>" + d3);
		int a3 = Integer.parseInt(ele3);
		System.out.println("%%%%%%%%%%%%>" + a3);
		double item3_price = d3 * a3;
		item3_price = Double.parseDouble(new DecimalFormat("##.##").format(item3_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item3_price);

		double Teacher_SubTotal_exp = item1_price + item2_price + item3_price;
		Teacher_SubTotal_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_SubTotal_exp));

		String TeacherCatSubTot = SubTotal_TeacherCataloguesOnly().getText();
		TeacherCatSubTot = TeacherCatSubTot.substring(1);
		double Teacher_Catalogues_SubTotal = Double.parseDouble(TeacherCatSubTot);
		Assert.assertEquals(Teacher_Catalogues_SubTotal, Teacher_SubTotal_exp,
				"Teacher Catalogues Subtotal value is incorrect");

		double Teacher_HST_act = Teacher_HST();
		double Teacher_HST_exp = TaxRoundOff_item_1_Tax(stateTaxHST, d1, a1)
				+ TaxRoundOff_item_2_Tax(stateTaxHST, d2, a2) + TaxRoundOff_item_3_Tax(stateTaxHST, d3, a3);
		Teacher_HST_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_HST_exp));
		Assert.assertEquals(Teacher_HST_act, Teacher_HST_exp, "Teacher Catalogues Subtotal HST value is incorrect");

		String TeacherCataloguesTotal_Expected = Teacher_Catalogues_Total().getText();
		TeacherCataloguesTotal_Expected = TeacherCataloguesTotal_Expected.substring(1);
		double TeacherCataloguesTotal_exp = Double.parseDouble(TeacherCataloguesTotal_Expected);
		System.out.println("TeacherCataloguesTotal :::::::: " + TeacherCataloguesTotal_exp);

		double TeacherCataloguesTotal_Actual = Teacher_SubTotal_exp + Teacher_HST_exp;
		TeacherCataloguesTotal_Actual = Double
				.parseDouble(new DecimalFormat("##.##").format(TeacherCataloguesTotal_Actual));
		System.out.println("TeacherCataloguesTotal_Actual :::::::: " + TeacherCataloguesTotal_Actual);
		Assert.assertEquals(TeacherCataloguesTotal_exp, TeacherCataloguesTotal_Actual,
				"Teacher Catalogues Total value is incorrect");

		String Total_Expected = Total_Amount_Owing().getText();
		Total_Expected = Total_Expected.substring(1);
		double Total_Expected_2 = Double.parseDouble(Total_Expected);
		Assert.assertEquals(Total_Expected_2, TeacherCataloguesTotal_Actual,
				"Teacher Catalogues Total owing value is incorrect");
	}

	@Override
	public void Validation_of_Teacher_Catalogues_SubTotal_and_Total_2() {
		int stateTaxGST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxGST");

		PauseUtil.pause(8000);
		String value1 = cart_item1_price().getText();
		String ele1 = cart_qty_item1().getAttribute("value");
		value1 = value1.substring(1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item1_price = d1 * a1;
		item1_price = Double.parseDouble(new DecimalFormat("##.##").format(item1_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item1_price);

		String value2 = cart_item2_price().getText();
		String ele2 = cart_qty_item2().getAttribute("value");
		value2 = value2.substring(1);
		double d2 = Double.parseDouble(value2);
		System.out.println("#############>" + d2);
		int a2 = Integer.parseInt(ele2);
		System.out.println("%%%%%%%%%%%%>" + a2);
		double item2_price = d2 * a2;
		item2_price = Double.parseDouble(new DecimalFormat("##.##").format(item2_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item2_price);

		String value3 = cart_item3_price().getText();
		String ele3 = cart_qty_item3().getAttribute("value");
		value3 = value3.substring(1);
		double d3 = Double.parseDouble(value3);
		System.out.println("#############>" + d3);
		int a3 = Integer.parseInt(ele3);
		System.out.println("%%%%%%%%%%%%>" + a3);
		double item3_price = d3 * a3;
		item3_price = Double.parseDouble(new DecimalFormat("##.##").format(item3_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item3_price);

		double Teacher_SubTotal_exp = item1_price + item2_price + item3_price;
		Teacher_SubTotal_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_SubTotal_exp));

		String TeacherCatSubTot = SubTotal_TeacherCataloguesOnly().getText();
		TeacherCatSubTot = TeacherCatSubTot.substring(1);
		double Teacher_Catalogues_SubTotal = Double.parseDouble(TeacherCatSubTot);
		Assert.assertEquals(Teacher_Catalogues_SubTotal, Teacher_SubTotal_exp,
				"Teacher Catalogues Subtotal value is incorrect");

		double Teacher_GST_act = Teacher_GST();
		double Teacher_GST_exp = TaxRoundOff_item_1_Tax(stateTaxGST, d1, a1)
				+ TaxRoundOff_item_2_Tax(stateTaxGST, d2, a2) + TaxRoundOff_item_3_Tax(stateTaxGST, d3, a3);
		Teacher_GST_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_GST_exp));
		Assert.assertEquals(Teacher_GST_act, Teacher_GST_exp, "Teacher Catalogues Subtotal GST value is incorrect");

		String TeacherCataloguesTotal_Expected = Teacher_Catalogues_Total().getText();
		TeacherCataloguesTotal_Expected = TeacherCataloguesTotal_Expected.substring(1);
		double TeacherCataloguesTotal_exp = Double.parseDouble(TeacherCataloguesTotal_Expected);
		System.out.println("TeacherCataloguesTotal :::::::: " + TeacherCataloguesTotal_exp);

		double TeacherCataloguesTotal_Actual = Teacher_SubTotal_exp + Teacher_GST_exp;
		TeacherCataloguesTotal_Actual = Double
				.parseDouble(new DecimalFormat("##.##").format(TeacherCataloguesTotal_Actual));
		System.out.println("TeacherCataloguesTotal_Actual :::::::: " + TeacherCataloguesTotal_Actual);
		Assert.assertEquals(TeacherCataloguesTotal_exp, TeacherCataloguesTotal_Actual,
				"Teacher Catalogues Total value is incorrect");

		String Total_Expected = Total_Amount_Owing().getText();
		Total_Expected = Total_Expected.substring(1);
		double Total_Expected_2 = Double.parseDouble(Total_Expected);
		Assert.assertEquals(Total_Expected_2, TeacherCataloguesTotal_Actual,
				"Teacher Catalogues Total owing value is incorrect");
	}

	@Override
	public void Validation_of_Teacher_club_SubTotal_and_Total() {
		int stateTaxGST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxGST");
		int stateTaxPST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxPST");

		PauseUtil.pause(8000);
		String value1 = cart_item1_price().getText();
		String ele1 = cart_qty_item1().getAttribute("value");
		value1 = value1.substring(1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item1_price = d1 * a1;
		item1_price = Double.parseDouble(new DecimalFormat("##.##").format(item1_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item1_price);

		String value2 = cart_item2_price().getText();
		String ele2 = cart_qty_item2().getAttribute("value");
		System.out.println("value2" + value2);
		System.out.println("ele2" + ele2);
		value2 = value2.substring(1);
		System.out.println("substringvalue2" + value2);
		double d2 = Double.parseDouble(value2);
		System.out.println("#############>" + d2);
		int a2 = Integer.parseInt(ele2);
		System.out.println("%%%%%%%%%%%%>" + a2);
		double item2_price = d2 * a2;
		item2_price = Double.parseDouble(new DecimalFormat("##.##").format(item2_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item2_price);

		String value3 = cart_item3_price().getText();
		System.out.println("value3" + value3);
		// value3=value3.replaceAll("\\s","");
		String ele3 = cart_qty_item3().getAttribute("value");
		System.out.println("ele3" + ele3);
		value3 = value3.substring(1);
		System.out.println("SubstrintValue3" + value3);
		double d3 = Double.parseDouble(value3);
		System.out.println("#############>" + d3);
		int a3 = Integer.parseInt(ele3);
		System.out.println("%%%%%%%%%%%%>" + a3);
		double item3_price = d3 * a3;
		item3_price = Double.parseDouble(new DecimalFormat("##.##").format(item3_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item3_price);

		double TeacherCatalogues_SubTotal_exp = item1_price + item2_price + item3_price;
		TeacherCatalogues_SubTotal_exp = Double
				.parseDouble(new DecimalFormat("##.##").format(TeacherCatalogues_SubTotal_exp));

		String TeacherCataloguesClbSubTot = SubTotal_TeacherCataloguesOnly().getText();
		TeacherCataloguesClbSubTot = TeacherCataloguesClbSubTot.substring(1);
		double TeacherCatalogues_SubTotal = Double.parseDouble(TeacherCataloguesClbSubTot);
		Assert.assertEquals(TeacherCatalogues_SubTotal, TeacherCatalogues_SubTotal_exp,
				"Teacher Catalogues Subtotal value is incorrect");

		double Teacher_GST_act = Teacher_GST();
		double Teacher_GST_exp = TaxRoundOff_item_1_Tax(stateTaxGST, d1, a1)
				+ TaxRoundOff_item_2_Tax(stateTaxGST, d2, a2) + TaxRoundOff_item_3_Tax(stateTaxGST, d3, a3);
		Teacher_GST_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_GST_exp));
		Assert.assertEquals(Teacher_GST_act, Teacher_GST_exp, "Teacher Catalogues Subtotal GST value is incorrect");

		double Teacher_PST_act = Teacher_PST();
		double Teacher_PST_exp = TaxRoundOff_item_1_Tax(stateTaxPST, d1, a1)
				+ TaxRoundOff_item_2_Tax(stateTaxPST, d2, a2) + TaxRoundOff_item_3_Tax(stateTaxPST, d3, a3);
		Teacher_PST_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_PST_exp));
		Assert.assertEquals(Teacher_PST_act, Teacher_PST_exp, "Teacher Catalogues Subtotal PST value is incorrect");

		String TeacherCataloguesTotal_Expected = Teacher_Catalogues_Total().getText();
		TeacherCataloguesTotal_Expected = TeacherCataloguesTotal_Expected.substring(1);
		double TeacherCataloguesTotal_exp = Double.parseDouble(TeacherCataloguesTotal_Expected);
		System.out.println("TeacherCatalogues Clubs Total :::::::: " + TeacherCataloguesTotal_exp);

		double TeacherCataloguesTotal_Actual = TeacherCatalogues_SubTotal_exp + Teacher_GST_exp + Teacher_PST_exp;
		TeacherCataloguesTotal_Actual = Double
				.parseDouble(new DecimalFormat("##.##").format(TeacherCataloguesTotal_Actual));
		System.out.println("TeacherCataloguesTotal_Actual :::::::: " + TeacherCataloguesTotal_Actual);
		Assert.assertEquals(TeacherCataloguesTotal_exp, TeacherCataloguesTotal_Actual,
				"TeacherCatalogues Total value is incorrect");

		String Total_Expected = Total_Amount_Owing().getText();
		Total_Expected = Total_Expected.substring(1);
		double Total_Expected_2 = Double.parseDouble(Total_Expected);
		Assert.assertEquals(Total_Expected_2, TeacherCataloguesTotal_Actual,
				"TeacherCatalogues Total owing value is incorrect");
	}

	@Override
	public void Validation_of_Student_club_And_Teacher_Catalogues_Total_SubmittedPage() {
		int stateTaxGST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxGST");
		int stateTaxPST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxPST");

		PauseUtil.pause(8000);
		String value1 = item1_price_SubmitPage().getText();
		value1 = value1.trim();

		String ele1 = item1_qty_SubmitPage().getText();
		ele1 = ele1.trim();

		value1 = value1.substring(1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item1_price = d1 * a1;
		System.out.println("^^^^^^^^^^^^^^^^^" + item1_price);
		double item1_price_1 = Math.round(item1_price);

		String StudentClbSubTot = subTotal_StudentClubs().getText();
		StudentClbSubTot = StudentClbSubTot.substring(1);
		double Student_SubTotal = Double.parseDouble(StudentClbSubTot);
		Assert.assertEquals(Student_SubTotal, item1_price,
				"Student Clubs Subtotal value is incorrect in Submitted page");

		String Student_gst = GST_Student_Clubs_Subtotal().getText();
		Student_gst = Student_gst.substring(1);
		double Student_gst_2 = Double.parseDouble(Student_gst);
		System.out.println("Student_gst###########" + Student_gst_2);
		double expected = (double) (stateTaxGST * item1_price_1) / 100;
		System.out.println("EXPECTED#########" + expected);
		Assert.assertEquals(Student_gst_2, expected, "Student Clubs Subtotal GST value is incorrect in Submitted page");

		String Student_pst = PST_Student_Clubs_Subtotal().getText();
		Student_pst = Student_pst.substring(1);
		double Student_pst_3 = Double.parseDouble(Student_pst);

		System.out.println("Student_pst###########" + Student_pst_3);
		double expected2 = (double) (stateTaxPST * item1_price_1) / 100;
		System.out.println("EXPECTED#########" + expected2);
		Assert.assertEquals(Student_pst_3, expected2,
				"Student Clubs Subtotal PST value is incorrect in Submitted page");

		String StudentClubsTotal_Expected = Total_StudentClubs_SubmitPage().getText();
		StudentClubsTotal_Expected = StudentClubsTotal_Expected.substring(1);
		double StudentClubsTotal_exp = Double.parseDouble(StudentClubsTotal_Expected);
		System.out.println("StudentClubsTotal :::::::: " + StudentClubsTotal_exp);

		double StudentClubsTotal_Actual = item1_price + expected + expected2;
		System.out.println("StudentClubsTotal_Actual :::::::: " + StudentClubsTotal_Actual);
		StudentClubsTotal_Actual = Double.parseDouble(new DecimalFormat("##.##").format(StudentClubsTotal_Actual));

		Assert.assertEquals(StudentClubsTotal_exp, StudentClubsTotal_Actual,
				"Student Clubs Total value is incorrect in Submitted page");

		////////////////////////////////////////////////////////
		String value2 = item2_price_SubmitPage().getText();
		value2 = value2.trim();
		String ele2 = item2_qty_SubmitPage().getText();
		ele2 = ele2.trim();
		value2 = value2.substring(1);
		double d2 = Double.parseDouble(value2);
		System.out.println("#############>" + d2);
		int a2 = Integer.parseInt(ele2);
		System.out.println("%%%%%%%%%%%%>" + a2);
		double item2_price = d2 * a2;
		System.out.println("^^^^^^^^^^^^^^^^^" + item2_price);
		double item2_price_2 = Math.round(item2_price);

		String value3 = item3_price_SubmitPage().getText();
		value3 = value3.trim();
		String ele3 = item3_qty_SubmitPage().getText();
		ele3 = ele3.trim();
		value3 = value3.substring(1);
		double d3 = Double.parseDouble(value3);
		System.out.println("#############>" + d3);
		int a3 = Integer.parseInt(ele3);
		System.out.println("%%%%%%%%%%%%>" + a3);
		double item3_price = d3 * a3;
		System.out.println("^^^^^^^^^^^^^^^^^" + item3_price);
		double item3_price_3 = Math.round(item3_price);

		double Teacher_Catalogues_Subtotal_Actual = item2_price + item3_price;
		Teacher_Catalogues_Subtotal_Actual = Double
				.parseDouble(new DecimalFormat("##.##").format(Teacher_Catalogues_Subtotal_Actual));
		double Teacher_Catalogues_Subtotal_Actual_round = item2_price_2 + item3_price_3;

		String TeacherCataloguesClbSubTot = SubTotal_TeacherCatalogues().getText();
		TeacherCataloguesClbSubTot = TeacherCataloguesClbSubTot.substring(1);
		double TeacherCatalogues_SubTotal = Double.parseDouble(TeacherCataloguesClbSubTot);
		Assert.assertEquals(TeacherCatalogues_SubTotal, Teacher_Catalogues_Subtotal_Actual,
				"Teacher Catalogues Subtotal value is incorrect in Submitted page");

		String Teacher_gst = GST_Teacher_Catalogues_Subtotal().getText();
		Teacher_gst = Teacher_gst.substring(1);
		double Teacher_gst_2 = Double.parseDouble(Teacher_gst);
		System.out.println("Teacher_gst###########" + Teacher_gst_2);
		double expected_2 = (double) (stateTaxGST * Teacher_Catalogues_Subtotal_Actual_round) / 100;
		System.out.println("EXPECTED#########" + expected_2);
		Assert.assertEquals(Teacher_gst_2, expected_2,
				"Teacher Catalogues Subtotal GST value is incorrect in Submitted page");

		String Teacher_pst = PST_Teacher_Catalogues_Subtotal().getText();
		Teacher_pst = Teacher_pst.substring(1);
		double Teacher_pst_3 = Double.parseDouble(Teacher_pst);

		System.out.println("Teacher_pst###########" + Teacher_pst_3);
		double expected_3 = (double) (stateTaxPST * Teacher_Catalogues_Subtotal_Actual_round) / 100;
		System.out.println("EXPECTED#########" + expected_3);
		Assert.assertEquals(Teacher_pst_3, expected_3,
				"Teacher Catalogues Subtotal PST value is incorrect in Submitted page");

		String TeacherClubsTotal_Expected = Total_TeacherCatalogues_SubmitPage().getText();
		TeacherClubsTotal_Expected = TeacherClubsTotal_Expected.substring(1);
		double TeacherClubsTotal_exp = Double.parseDouble(TeacherClubsTotal_Expected);
		System.out.println("Teacher Catalogues :::::::: " + TeacherClubsTotal_exp);

		double TeacherClubsTotal_Actual = Teacher_Catalogues_Subtotal_Actual + expected_2 + expected_3;
		System.out.println("StudentClubsTotal_Actual :::::::: " + TeacherClubsTotal_Actual);
		TeacherClubsTotal_Actual = Double.parseDouble(new DecimalFormat("##.##").format(TeacherClubsTotal_Actual));

		Assert.assertEquals(TeacherClubsTotal_exp, TeacherClubsTotal_Actual,
				"Teacher Catalogues Total value is incorrect in Submitted page");

		int Shipping_tax_gst = stateTaxGST;
		int Shipping_tax_pst = stateTaxPST;

		String Shipping_act = subTotal_Shipping_SubmitPage().getText();
		Shipping_act = Shipping_act.trim();
		Shipping_act = Shipping_act.substring(1);
		double Shipping_act_2 = Double.parseDouble(Shipping_act);
		double Shipping_act_3 = Math.round(Shipping_act_2);

		double gst_Shipping_act = (double) (Shipping_tax_gst * Shipping_act_3) / 100;
		System.out.println("EXPECTED#########" + gst_Shipping_act);

		String gst_Shipping_exp = amount_GST_Shipping_SubmitPage().getText();
		gst_Shipping_exp = gst_Shipping_exp.trim();
		gst_Shipping_exp = gst_Shipping_exp.substring(1);
		double gst_Shipping_exp_2 = Double.parseDouble(gst_Shipping_exp);

		Assert.assertEquals(gst_Shipping_act, gst_Shipping_exp_2,
				"Shipping & Handling GST value is incorrect in Submitted page");

		double pst_Shipping_act = (double) (Shipping_tax_pst * Shipping_act_3) / 100;
		System.out.println("EXPECTED#########" + pst_Shipping_act);

		String pst_Shipping_exp = amount_PST_Shipping_SubmitPage().getText();
		pst_Shipping_exp = pst_Shipping_exp.trim();
		pst_Shipping_exp = pst_Shipping_exp.substring(1);
		double pst_Shipping_exp_2 = Double.parseDouble(pst_Shipping_exp);

		Assert.assertEquals(pst_Shipping_act, pst_Shipping_exp_2,
				"Shipping & Handling PST value is incorrect in Submitted page");

		double ShippingTotValue_act = Shipping_act_2 + gst_Shipping_act + pst_Shipping_act;
		ShippingTotValue_act = TaxRoundOff_of(ShippingTotValue_act);

		String ShippingTotValue_exp = Total_Shipping_SubmitPage().getText();
		ShippingTotValue_exp = ShippingTotValue_exp.trim();
		ShippingTotValue_exp = ShippingTotValue_exp.substring(1);
		double ShippingTotValue_exp_2 = Double.parseDouble(ShippingTotValue_exp);

		Assert.assertEquals(ShippingTotValue_act, ShippingTotValue_exp_2,
				"Shipping & Handling Total value is incorrect in Submitted page");
		///////////////////////////////////////
		double Total_Amount_Of_Student_And_Teacher = StudentClubsTotal_Actual + TeacherClubsTotal_Actual
				+ ShippingTotValue_act;
		Total_Amount_Of_Student_And_Teacher = Double
				.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Student_And_Teacher));

		String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
		Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
		double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
		Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Student_And_Teacher,
				"Total owing value is incorrect in Submitted page");
	}

	@Override
	public void edit_item_qty1_in_reviewcartPage() {
		PauseUtil.pause(8000);
		cart_qty_item1().click();
		cart_qty_item1().clear();
		PauseUtil.pause(2000);
		cart_qty_item1().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("EditQty1"));
		click_outside_in_ReviewCartPage().click();
		PauseUtil.pause(15000);
	}

	@Override
	public void edit_item_qty1_tabout_in_reviewcartPage(String value) {
		PauseUtil.pause(8000);
		cart_qty_item1().click();
		cart_qty_item1().clear();
		PauseUtil.pause(2000);
		cart_qty_item1().sendKeys(value);
		cart_qty_item1().sendKeys(Keys.TAB);
		PauseUtil.pause(15000);
	}

	@Override
	public void edit_item_qty2_in_reviewcartPage() {
		PauseUtil.pause(2000);
		cart_qty_item2().click();
		cart_qty_item2().clear();
		PauseUtil.pause(2000);
		cart_qty_item2().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("EditQty2"));
		click_outside_in_ReviewCartPage().click();
		PauseUtil.pause(15000);
	}

	@Override
	public void edit_item_qty3_in_reviewcartPage() {
		PauseUtil.pause(2000);
		cart_qty_item3().click();
		cart_qty_item3().clear();
		PauseUtil.pause(2000);
		cart_qty_item3().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("EditQty3"));
		click_outside_in_ReviewCartPage().click();
		PauseUtil.pause(15000);
	}

	@Override
	public void edit_student1_name_field_in_reviewcartPage() {
		PauseUtil.pause(13000);
		reviewCart_field_student1().click();
		PauseUtil.pause(3000);
		studentZoomField_in_reviewCart().clear();
		PauseUtil.pause(3000);
		studentZoomField_in_reviewCart().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("EditName1"));
		PauseUtil.pause(2000);
		click_outside_in_ReviewCartPage().click();
		PauseUtil.waitForAjaxToComplete(2500);
		// WaitUtils.waitForDisplayed(select_arrow());
		// select_arrow().click();
		PauseUtil.pause(10000);
		// click_outside_in_ReviewCartPage().click();

	}

	@Override
	public void verify_flyer_field_in_reviewcartPage(Configuration testData) {
		PauseUtil.pause(2500);

		String actual_grade = getlblflyerreviewcart().getText();
		System.out.println("act_grade" + actual_grade);
		String expected_grade = testData.getString("exp_grade");
		System.out.println("expected_grade" + expected_grade);
		Assert.assertEquals(actual_grade, expected_grade, "Hightlighted Grade in Review page is not correct");

	}

	@Override
	public void edit_student2_name_field_in_reviewcartPage() {
		PauseUtil.pause(3000);
		reviewCart_field_student2().click();
		PauseUtil.pause(2000);
		studentZoomField_in_reviewCart().clear();
		PauseUtil.pause(3000);
		studentZoomField_in_reviewCart().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("EditName2"));
		PauseUtil.pause(2000);
		click_outside_in_ReviewCartPage().click();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(10000);

	}

	@Override
	public void edit_student3_name_field_in_reviewcartPage() {
		PauseUtil.pause(3000);
		reviewCart_field_student3().click();
		PauseUtil.pause(2000);
		studentZoomField_in_reviewCart().clear();
		PauseUtil.pause(3000);
		studentZoomField_in_reviewCart().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("EditName3"));
		PauseUtil.pause(2000);
		click_outside_in_ReviewCartPage().click();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(10000);
	}

	@Override
	public boolean Validation_alternate_shipping_header_displayed_in_ConfirmSubmit_Page() {
		PauseUtil.pause(6000);
		if (header_Shipping_Addr_ConfirmSubmit().isDisplayed())
			return true;
		else
			return false;
	}

	@Override
	public void search_for_any_item() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		fld_Search_home().click();
		fld_Search_home().clear();
		fld_Search_home().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("SearchData"));
		PauseUtil.pause(2000);
		button_search_homePage().click();
	}

	@Override
	public boolean Validation_alternate_shipping_Address_field_displayed_in_ConfirmSubmit_Page() {
		PauseUtil.pause(6000);
		if (Addr_fld_School_Shipping_ConfirmSubmit().isDisplayed())
			return true;
		else
			return false;
	}

	@Override
	public void Validation_of_shipping_Address_field_displayed_in_ConfirmSubmit_Page() {
		PauseUtil.waitForAjaxToComplete(2000);
		PauseUtil.pause(6000);
		try {
			Addr_fld_School_Shipping_ConfirmSubmit().isDisplayed();
			System.out.println("Shipping mail section is displayed");
		} catch (Exception e) {
			Assert.fail("Shipping mail section is not displayed");
		}
	}

	@Override
	public boolean Validation_the_TEXT_Alternate_Shipping_Address_displayed() {
		PauseUtil.pause(6000);
		if (TEXT_Alternate_Shipping_Address().isDisplayed())
			return true;
		else
			return false;
	}

	@Override
	public void Validation_of_Amount_paid_by_Credit_Card_and_Cheques_ConfirmSubmit_Page() {
		PauseUtil.pause(8000);
		String Amt_paid_cc = Amt_paid_by_creditCard_submitPage().getText();
		Amt_paid_cc = Amt_paid_cc.substring(1);
		double Amt_paid_by_cc = Double.parseDouble(Amt_paid_cc);

		double Amt_paid_by_cc_exp = TestBaseProvider.getTestBase().getTestData().getDouble("paymentAmt");

		Assert.assertEquals(Amt_paid_by_cc, Amt_paid_by_cc_exp, "Amount paid by credit card is incorrect");

		String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
		Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
		double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);

		String Amt_paid_cheque = Amt_paid_by_cheques_submitPage().getText();
		Amt_paid_cheque = Amt_paid_cheque.substring(1);
		double Amt_paid_by_cheque = Double.parseDouble(Amt_paid_cheque);

		double Amt_paid_cheque_exp = Total_Owing_Amount_Expected_2 - Amt_paid_by_cc_exp;
		Amt_paid_cheque_exp = Double.parseDouble(new DecimalFormat("##.##").format(Amt_paid_cheque_exp));

		Assert.assertEquals(Amt_paid_by_cheque, Amt_paid_cheque_exp, "Amount paid by cheques is incorrect");
	}

	@Override
	public void Validation_of_Amount_paid_by_Credit_Card_ConfirmSubmit_Page() {
		PauseUtil.pause(8000);
		Assert.assertTrue(Amt_paid_by_creditCard_submitPage().isDisplayed(),
				"Amount paid by creditCard in submitPage is not displayed");
	}

	@Override
	public void fillStudentFlyerOrder_Eligible_Promotions(double itemprice, String studentName, String itemQty) {
		// TODO Auto-generated method stub
		// need to check the method and implement
	}

	public double TaxRoundOff(double taxvalue) {
		double r11 = (double) Math.round(taxvalue * 10000);
		double expected11 = r11 / 10000.0;

		System.out.println("EXPECTED 4th #########" + expected11);

		double r12 = (double) Math.round(expected11 * 1000);
		double expected12 = r12 / 1000.0;

		System.out.println("EXPECTED 3th #########" + expected12);

		double r13 = (double) Math.round(expected12 * 100);
		double expected = r13 / 100.0;

		System.out.println("EXPECTED 2nd #########" + expected);

		return expected;
	}

	/*
	 * <<<<<<< Updated upstream
	 * 
	 * public double TaxCalculation(double baseprice, int tax, double quantity)
	 * {
	 * 
	 * double taxcalc11 = baseprice*(tax/100)*quantity;
	 * 
	 * double r11 = (double) Math.round(taxcalc11*10000); double expected11 =
	 * r11 / 10000.0;
	 * 
	 * System.out.println("EXPECTED 4th #########" +expected11);
	 * 
	 * double r12 = (double) Math.round(expected11*1000); double expected12 =
	 * r12 / 1000.0;
	 * 
	 * System.out.println("EXPECTED 3th #########" +expected12);
	 * 
	 * double r13 = (double) Math.round(expected12*100); double expected = r13 /
	 * 100.0;
	 * 
	 * System.out.println("EXPECTED 2nd #########" +expected);
	 * 
	 * return expected; =======
	 */
	public double TaxRoundOff_of(double value) {
		/*
		 * value=Double.parseDouble(new
		 * DecimalFormat("##.#####").format(value));
		 * value=Double.parseDouble(new DecimalFormat("##.####").format(value));
		 * value=Double.parseDouble(new DecimalFormat("##.###").format(value));
		 * value=Double.parseDouble(new DecimalFormat("##.##").format(value));
		 * System.out.println("####################:"+value); return value;
		 */

		double r11 = (double) Math.round(value * 10000);
		double expected11 = r11 / 10000.0;

		System.out.println("EXPECTED 4th #########" + expected11);

		double r12 = (double) Math.round(expected11 * 1000);
		double expected12 = r12 / 1000.0;

		System.out.println("EXPECTED 3th #########" + expected12);

		double r13 = (double) Math.round(expected12 * 100);
		double expected = r13 / 100.0;

		System.out.println("EXPECTED 2nd #########" + expected);

		return expected;

	}

	public double TaxRoundOff_item_1_Tax(double taxType, double d1, int a1) {
		// ---> code for baseprice*tax*qty then roundoff
		/*
		 * double item_1_Tax=(double)(taxType * d1 * a1) / 100; return
		 * item_1_Tax=TaxRoundOff_of(item_1_Tax);
		 */

		// ---> code for roundoff(baseprice*tax)*qty
		double item_11_Tax = (double) (taxType * d1) / 100;

		System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>" + item_11_Tax);

		double item_12_Tax = TaxRoundOff_of(item_11_Tax);
		System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>" + item_12_Tax);
		double item_13_Tax = item_12_Tax * a1;
		System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>" + item_13_Tax);
		double item_1_Tax = TaxRoundOff_of(item_13_Tax);
		System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>" + item_1_Tax);

		return item_1_Tax;
	}

	public double TaxRoundOff_item_2_Tax(double taxType, double d2, int a2) {
		// ---> code for baseprice*tax*qty then roundoff
		/*
		 * double item_2_Tax=(double)(taxType * d2 * a2) / 100; return
		 * item_2_Tax=TaxRoundOff_of(item_2_Tax);
		 */

		// ---> code for roundoff(baseprice*tax)*qty
		double item_11_Tax = (double) (taxType * d2) / 100;
		double item_12_Tax = TaxRoundOff_of(item_11_Tax);
		double item_13_Tax = item_12_Tax * a2;
		double item_2_Tax = TaxRoundOff_of(item_13_Tax);
		return item_2_Tax;
	}

	public double TaxRoundOff_item_3_Tax(double taxType, double d3, int a3) {
		// ---> code for baseprice*tax*qty then roundoff
		/*
		 * double item_3_Tax=(double)(taxType * d3 * a3) / 100; return
		 * item_3_Tax=TaxRoundOff_of(item_3_Tax);
		 */

		// ---> code for roundoff(baseprice*tax)*qty
		double item_11_Tax = (double) (taxType * d3) / 100;
		double item_12_Tax = TaxRoundOff_of(item_11_Tax);
		double item_13_Tax = item_12_Tax * a3;
		double item_3_Tax = TaxRoundOff_of(item_13_Tax);
		return item_3_Tax;
	}

	public double TaxRoundOff_item_4_Tax(double taxType, double d4, int a4) {
		double item_11_Tax = (double) (taxType * d4) / 100;
		double item_12_Tax = TaxRoundOff_of(item_11_Tax);
		double item_13_Tax = item_12_Tax * a4;
		double item_4_Tax = TaxRoundOff_of(item_13_Tax);
		return item_4_Tax;
	}

	public double Student_GST() {
		String Student_gst = GST_Student_Clubs_Subtotal().getText();
		Student_gst = Student_gst.substring(1);
		double Student_gst_2 = Double.parseDouble(Student_gst);
		System.out.println("Student_GST###########" + Student_gst_2);
		return Student_gst_2;
	}

	public double Student_PST() {
		String Student_pst = PST_Student_Clubs_Subtotal().getText();
		Student_pst = Student_pst.substring(1);
		double Student_pst_2 = Double.parseDouble(Student_pst);
		System.out.println("Student_PST###########" + Student_pst_2);
		return Student_pst_2;
	}

	public double Student_QST() {
		String Student_qst = QST_Student_Clubs_Subtotal().getText();
		Student_qst = Student_qst.substring(1);
		double Student_qst_2 = Double.parseDouble(Student_qst);
		System.out.println("Student_QST###########" + Student_qst_2);
		return Student_qst_2;
	}

	public double Student_HST() {
		String Student_hst = HST_Student_Clubs_Subtotal().getText();
		Student_hst = Student_hst.substring(1);
		double Student_hst_2 = Double.parseDouble(Student_hst);
		System.out.println("Student_HST###########" + Student_hst_2);
		return Student_hst_2;
	}

	public double Teacher_GST() {
		String Teacher_gst = GST_Teacher_Catalogues_Subtotal().getText();
		Teacher_gst = Teacher_gst.substring(1);
		double Teacher_gst_2 = Double.parseDouble(Teacher_gst);
		System.out.println("Teacher_GST###########" + Teacher_gst_2);
		return Teacher_gst_2;
	}

	public double Teacher_PST() {
		String Teacher_pst = PST_Teacher_Catalogues_Subtotal().getText();
		Teacher_pst = Teacher_pst.substring(1);
		double Teacher_pst_2 = Double.parseDouble(Teacher_pst);
		System.out.println("Teacher_PST###########" + Teacher_pst_2);
		return Teacher_pst_2;
	}

	public double Teacher_QST() {
		String Teacher_qst = QST_Teacher_Catalogues_Subtotal().getText();
		Teacher_qst = Teacher_qst.substring(1);
		double Teacher_qst_2 = Double.parseDouble(Teacher_qst);
		System.out.println("Teacher_QST###########" + Teacher_qst_2);
		return Teacher_qst_2;
	}

	public double Teacher_HST() {
		String Teacher_hst = HST_Teacher_Subtotal().getText();
		Teacher_hst = Teacher_hst.substring(1);
		double Teacher_hst_2 = Double.parseDouble(Teacher_hst);
		System.out.println("Teacher_HST###########" + Teacher_hst_2);
		return Teacher_hst_2;
	}

	@Override
	public void Validation_of_Teacher_club_SubTotal_and_Total_3123() {
		System.out.println("pending");

	}

	@Override
	public void user_navigates_to_Home_page_from_Order_ref_page() {
		WebDriver driver = TestBaseProvider.getTestBase().getDriver();
		PauseUtil.waitForAjaxToComplete(7000);
		PauseUtil.pause(9900);

		String currentUrl = driver.getCurrentUrl();
		if (currentUrl.contains("development")) {

			driver.get("https://development-rco-scholastic.demandware.net/s/rco-ca/home");
			System.out.println("################r home icon clicked");
		}

		if (currentUrl.contains("dev35")) {

			driver.get("https://dev35-rco-scholastic.demandware.net/s/rco-ca/home");
			System.out.println("################r home icon clicked");
		}

		if (currentUrl.contains("dev36")) {

			driver.get("https://dev36-rco-scholastic.demandware.net/s/rco-ca/home");
			System.out.println("################r home icon clicked");
		}
		// btn_Home_Order_ref_Page().click();
	}

	@Override
	public void GlobalSearch(String itemName) {
		PauseUtil.waitForAjaxToComplete(1000);
		TeachersHomePage tchhomepage = new TeachersHomePage();

		if (tchhomepage.chkTutorial_DontShowAgain_Link().size() != 0) {
			SCHUtils.clickUsingJavaScript(tchhomepage.getTutorial_DontShowAgain_Link());
			PauseUtil.pause(3000);
		}

		if (tchhomepage.chkBtnEnterOrderClosePopup().size() != 0) {
			SCHUtils.clickUsingJavaScript(tchhomepage.getBtnEnterOrderClosePopup());
			PauseUtil.pause(3000);
		}

		PauseUtil.pause(1500);

		SCHUtils.isPresent(getteacherHomeSearchTextField());
		getteacherHomeSearchTextField().click();
		getteacherHomeSearchTextField().clear();
		getteacherHomeSearchTextField().sendKeys(itemName);
		getteacherHomeSearchBtn().click();
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
	}

	@Override
	public void clickItemNoReviewCartPage(String itemNo) {
		List<WebElement> cartTable1 = getTableReviewCartTable();
		for (WebElement cartTable : cartTable1) {
			List<WebElement> cartTabletr1 = cartTable.findElements(By.tagName("tr"));
			for (WebElement cartTabletd1 : cartTabletr1) {
				List<WebElement> cartTabletd = cartTabletd1.findElements(By.tagName("td"));
				cartTabletd.get(0).findElement(By.tagName("a")).click();
			}
		}
	}

	@Override
	public void displayedItemNoConfirmSubmitPage(String itemNo) {
		boolean flag = true;
		List<WebElement> cartTable1 = getTableReviewCartTable();
		for (WebElement cartTable : cartTable1) {
			List<WebElement> cartTabletr1 = cartTable.findElements(By.tagName("tr"));
			for (WebElement cartTabletd1 : cartTabletr1) {
				List<WebElement> cartTabletd = cartTabletd1.findElements(By.tagName("td"));
				String readitemNo = cartTabletd.get(1).getText().trim();

				if (readitemNo.trim().equals(itemNo)) {
					flag = true;
					break;
				}
			}
		}
		Assert.assertEquals(true, flag, "check book name in submit page");
	}

	@Override
	public void verifyItemNoPDPpage(String itemNo) {
		getteacherHomeSearchTextField().click();
		String readitem = readitemNo_PDPpage().getText().trim();
		if (!readitem.contains(itemNo)) {
			Assert.fail("test case failed " + readitem + "    " + itemNo);
		}
	}

	@Override
	public void csr_verifyItemSourcePage() {
		PauseUtil.pause(3000);
		SCHUtils.isPresent(getcsr_orderConfirmation_popup());
	}

	@Override
	public void csr_verifyItemSourceDialogueTitle() {
		System.out.println("================> " + getcsr_orderConfirmation_popup_title().getText().trim());
		if (!getcsr_orderConfirmation_popup_title().getText().trim().equalsIgnoreCase("Order Confirmation")) {
			// System.out.println("================>
			// "+getcsr_orderConfirmation_popup.getText().trim());
			Assert.fail("Title does not match");
		}
	}

	@Override
	public void csr_verifyItemSourceDialogue_closeIcon() {
		SCHUtils.isPresent(getcsr_orderConfirmation_popup_closeIcon());
	}

	@Override
	public void csr_verifyItemSourceDialogue_refNo() {
		String ord = getcsr_orderConfirmation_popup().getText();
		if (!ord.contains("#")) {
			Assert.assertEquals(false, true, "Order Refrence No is not displayed");
		}
	}

	@Override
	public void csr_popupOrderConfirmationIsPresent() {
		int sizePopup = chkCsrorderConfirmation_popup().size();
		if (sizePopup > 0) {
			Assert.fail("Order Confirmation popup is displayed");
		}
	}

	@Override
	public void clickSearchOnbGlobalSearchBar() {
		getteacherHomeSearchBtn().click();
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);

	}

	@Override
	public void GlobalSearchUniqueItemID(String itemNo) {
		// waitForPageToload();
		PauseUtil.waitForAjaxToComplete(1000);
		TeachersHomePage tchhomepage = new TeachersHomePage();

		if (tchhomepage.chkTutorial_DontShowAgain_Link().size() != 0) {
			SCHUtils.clickUsingJavaScript(tchhomepage.getTutorial_DontShowAgain_Link());
			PauseUtil.pause(3000);
		}

		if (tchhomepage.chkBtnEnterOrderClosePopup().size() != 0) {
			SCHUtils.clickUsingJavaScript(tchhomepage.getBtnEnterOrderClosePopup());
			PauseUtil.pause(3000);
		}

		PauseUtil.pause(1500);

		SCHUtils.isPresent(getteacherHomeSearchTextField());
		getteacherHomeSearchTextField().click();
		getteacherHomeSearchTextField().clear();
		getteacherHomeSearchTextField().sendKeys(itemNo);
		PauseUtil.waitForAjaxToComplete(2500);

	}

	@Override
	public void verifyOnlyOneSearchResultDisplaysHomePage(String itemNo) {
		PauseUtil.waitForAjaxToComplete(1000);
		TeachersHomePage tchhomepage = new TeachersHomePage();
		SCHUtils.isPresent(getteacherHomeSearchTextField());
		if (getteacherHomeSearchResults().size() == 1) {
			Assert.assertEquals(getteacherHomeSearchResults().size(), 1, "Only One Search Result is present");
			String booknameSearchResult = getteacherHomeSearchResults().get(0).getText();
			System.out.println("booknameSearchResult" + booknameSearchResult);

		}

	}

	@Override
	public void uniqueItemDisplayProductDetailPage(String bookTitle) {
		List<WebElement> ele = sizebooktitlefromPDPpage();
		boolean flag = false;
		for(int i=0;i<ele.size();i++){
			String bookTitlePDPpage= ele.get(i).getText().trim();
			if (bookTitlePDPpage.equals(bookTitle)) {
				flag = true;
				break;
			}
		}
		if(flag=false){
			Assert.fail("PDP page does not display proper booktitle -> " + bookTitle);
		}
	}

	@Override
	public void verifyReviewYourCartpageSingleItemShow(String bookTitle) {

		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		// verify reveiw cart page displayed
		reviewCartPageisDisplayed().getText().equalsIgnoreCase("Review Your Cart");
		getbooktitlefromReviewCartPage().getText().trim().equals(bookTitle);

		// get the book title and match
	}

	@Override
	public void ResultsGreater_ViewAllLink(int prodcount) {
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(3000);

		int productSize = sizeSearchProductCount().size();

		System.out.println("product count is: " + productSize);

		getTestBase().getContext().setProperty("testexecution.productcount", String.valueOf(productSize));

		if (productSize >= prodcount) {
			System.err.println("Product count is more than 15 which is good to go");
		} else {
			Assert.fail("No enough product count in search page");
		}
		AssertUtils.assertDisplayed(getViewAllLinkSearchPage());

	}

	@Override
	public void ResultsLesser_ViewAllLink(int prodcount) {
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(3000);

		int productSize = sizeSearchProductCount().size();

		System.out.println("product count is: " + productSize);

		getTestBase().getContext().setProperty("testexecution.productcount", String.valueOf(productSize));

		if (productSize <= prodcount) {
			System.err.println("Product count is less than 15 which is good to go");
		} else {
			Assert.fail("More products present in search page");
		}

	}

	@Override
	public void ClickViewAllLink() {
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(3000);

		getViewAllLinkSearchPage().click();
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(10000);
	}

	@Override
	public void verify_YTO_page_displayed() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(3000);
		Assert.assertTrue(header_YourClassRoomOrder_YTO().isDisplayed(), "YTO page is not displayed");
	}

	@Override
	public void verify_BooksResources_page_displayed() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(3000);

		AssertUtils.assertTextMatches(header_BooksResources(),
				Matchers.containsString(ConstantUtils.BOOKSRESOURCESTITLE));
	}

	@Override
	public void verify_TeachersDesk_page_displayed() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(3000);

		AssertUtils.assertTextMatches(header_TeachersDesk(), Matchers.containsString(ConstantUtils.TEACHERSDESKTITLE));
	}

	@Override
	public void verify_AllFlyers_page_displayed() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(3000);
		Assert.assertTrue(sizecontainer_AllFlyers().size() > 0);
	}

	@Override
	public void CheckProductCountAfterClickViewAll() {

		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(10000);

		WebDriver driver = TestBaseProvider.getTestBase().getDriver();

		((JavascriptExecutor) driver).executeScript("window.scrollBy(0,250)");
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(3000);

		((JavascriptExecutor) driver).executeScript("window.scrollBy(250,500)");
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(3000);

		((JavascriptExecutor) driver).executeScript("window.scrollBy(500,750)");
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(5000);

		((JavascriptExecutor) driver).executeScript("window.scrollBy(750,1000)");
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(5000);

		((JavascriptExecutor) driver).executeScript("window.scrollBy(1000,1500)");
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(5000);

		String productCountBefore1 = getTestBase().getContext().getProperty("testexecution.productcount").toString();

		System.out.println("Count of products before string ############# " + productCountBefore1);

		int productCountBefore = Integer.parseInt(productCountBefore1);

		System.out.println("Count of products before Int############# " + productCountBefore);

		int productCountAfterViewAll = sizeSearchProductCount().size();

		System.out.println("Count of products after ############# " + productCountAfterViewAll);

		if (productCountAfterViewAll > productCountBefore) {
			System.out.println("View All link is working fine and able to see all the products");
		} else {
			Assert.fail("View All link is not working");
		}

		if (sizegetViewAllLinkSearchPage().size() != 0) {
			Assert.fail("Application Issue. View All link should not be present");
		}

		// AssertUtils.assertNotDisplayed(getViewAllLinkSearchPage());

	}

	@Override
	public void user_deletes_item1_in_reviewCart() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		delete_item1_reviewcart().click();
		PauseUtil.pause(1000);
		YES_to_delete_item1_reviewcart().click();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

	}

	@Override
	public void user_deletes_item2_in_reviewCart() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		delete_item2_reviewcart().click();
		PauseUtil.pause(1000);
		YES_to_delete_item1_reviewcart.click();
	}

	@Override
	public void user_deletes_item3_in_reviewCart() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		delete_item3_reviewcart().click();
		PauseUtil.pause(1000);
		YES_to_delete_item3_reviewcart().click();
	}

	@Override
	public void clicks_on_EnterOrders_ReviewCartPage() {
		/*PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		WebElement linktoHover = enter_Orders_ReviewCart_Page();
		Actions actions = new Actions(TestBaseProvider.getTestBase().getDriver());
		actions.moveToElement(linktoHover).build().perform();*/
		
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);
		Enter_ClassRoom_Order().click();
		Wait_for_invisibility_of_locator();

	}

	@Override
	public void click_SFO() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		//getlinkSFO().get(0).click();
		
		Wait_for_invisibility_of_locator();
		PauseUtil.waitForAjaxToComplete(2500);
		tab_SFO().click();
		Wait_for_invisibility_of_locator();

	}

	@Override
	public void verify_SFO_YTO_linksDisplayed() {
		PauseUtil.pause(2000);
		enter_Orders_ReviewCart_Page().click();
		if (getlinkSFO().size() == 0) {
			Assert.fail("SFO Link is not present");
		}
		if (getlinkYTO().size() == 0) {
			Assert.fail("YTO Link is not present");
		}

	}

	@Override
	public void verifySFOPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		String w = sfopageTitle().getText();
		if (!w.equals("Student Flyer Orders")) {
			Assert.fail("SFO>><<< page is not displayed");

		}

	}

	@Override
	public void validatedefaultSFOcouponmodal() {
		// validate StudentName, Coupon fields and Apply button

		if (!(getsfocouponmodal_labelstudentName().size() > 0)) {
			Assert.fail("Label Student name is not displayed");
		}
		if (!(getsfocoupon_labelcoupon().size() > 0)) {
			Assert.fail("Label Coupon is not displayed");
		}
		if (!(getsfocoupon_buttonApply().size() > 0)) {
			Assert.fail("Button Apply is not present");
		}

	}

	@Override
	public void getsfo_coupon_labelstudentName_text() {
		String apptxtSname = appgettext_sfocoupon_sname_text().getAttribute("placeholder");
        System.out.println("**********SFOCOUPON TEXT*******"+apptxtSname);
        if(!(apptxtSname.equals("e.g. John S, J.S., or alias"))){
			Assert.fail("Student Name text is not as expected");
		}
	}

	@Override
	public void getsfo_coupon_labelcoupon_text() {
		String apptxtcpn = appgettext_sfocoupon_couponfield_text().getAttribute("placeholder");

        System.out.println("#####################COUPON EX TXT########"+apptxtcpn);
        if(!(apptxtcpn.equals("e.g.3P3RW"))){

			Assert.fail("Coupon text is not as expected");
		}
	}

	@Override
	public void getsfo_coupon_ApplyButton_State() {

		if(!appget_sfomodal_applybutton_state().isEnabled()){
		    Assert.fail("Apply button should not be Enabled by default");

		}
	}

    @Override
    public void getsfo_coupon_ApplyButton_State_disabled() {
        if(appget_sfomodal_applybutton_state().isEnabled()){
            Assert.fail("Apply button should not be Enabled ");
        }
    }

	@Override
	public void click_sfo_coupon_ApplyButton_State() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		appget_sfomodal_applybutton_state().click();

	}

	@Override
	public void sfopage_appliedCoupondisplayed() {
		int totalrows = get_sfocoupon_redeemed_sfopage().size();

		for (int i = 1; i <= totalrows; i++) {
			String couponValxpath = "//table[@id='sfo-data-table']/tbody/tr[" + i + "]" + "/td[6]/span";
			String couponval = TestBaseProvider.getTestBase().getDriver().findElement(By.xpath(couponValxpath))
					.getText();

			// System.out.println(couponval);
			try {
				if (couponval.equals(TestBaseProvider.getTestBase().getTestData().getString("sfofreepick"))) {
					Assert.assertEquals(true, true, "SFO coupon displayed");
					break;
				}
			} catch (Exception e) {
				e.printStackTrace();
			}

		}
	}

	@Override
	public void getsfocoupon_Sname_getError() {
		if (!appgetsfo_sname_errorMsg().getText().equals("Please enter a valid Student Name.")) {
			Assert.fail("Error message not displayed or text does not match");
		}

	}

	@Override
	public void get_sfocoupon_modal_couponcode_getError() {
		if (!appget_sfomodal_couponcode_errorMsg().getText().equals(ConstantUtils.SFOCOUPON_INVALID_COUPON)) {
			Assert.fail("Incorrect error message is displayed");
		}
	}

	@Override
	public void get_sfocoupon_modal_couponcode_NoError() {
		try {
			String val = appget_sfomodal_couponcode_errorMsg().getText();
			if (!(val.isEmpty() || val == null))
				Assert.fail("This is not Error condition");
		} catch (Exception e) {

		}

	}

	@Override
	public void get_sfocoupon_modal_couponcode_expiredcoupon_getError() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		
		String act_text=appget_sfomodal_couponcode_errorMsg().getText().trim();
		String exp_text=ConstantUtils.SFOCOUPON_EXPIRED_COUPON;
		
		Assert.assertEquals(act_text, exp_text, "Incorrect error message is displayed for expired SFO freePick coupon");
	}

	@Override
	public void get_sfocoupon_modal_couponcode_redeemedcoupon_getError() {
		String act_text=appget_sfomodal_couponcode_errorMsg().getText().trim();
		String exp_text=ConstantUtils.SFOCOUPON_REDEEMED_COUPON;
		
		Assert.assertEquals(act_text, exp_text, "Incorrect error message is displayed for redeemed SFO FreePick coupon");
	}

	@Override
	public void get_sfo_infolink_aboutEnterStudentname() {
		get_sfopage_link_aboutenterstudentname().click();
	}

	@Override
	public void validate_sfo_studentname_infopopupmodal() {
		if (!(get_sfo_message_infopopup_studentName().size() > 0)) {
			Assert.fail("Message popup for Student name is not displayed");
		}
	}

	@Override
	public void validate_sfo_studentname_infopopupmodal_closed() {
		if (get_sfo_message_infopopup_studentName().size() > 0) {
			Assert.fail("Message popup for Student name is not displayed");
		}
	}

	@Override
	public void validate_sfo_studentname_infopopupmodalMessage() {
		int i;
		if (!(get_sfo_message_infopopup_studentName_textcontant().size() > 0)) {
			Assert.fail("Message popup for Student name is not displayed");
		} else {
			for (i = 0; i < get_sfo_message_infopopup_studentName_textcontant().size(); i++) {
				String msg = get_sfo_message_infopopup_studentName_textcontant().get(i).getText();
				if (i == 0) {
					Assert.assertEquals(get_sfo_message_infopopup_studentName_textcontant().get(i).getText(),
							"Enter student’s name, initials, or alias so that your packing slip matches each student with the right books for quick distribution");
				}
				if (i == 1) {
					Assert.assertEquals(get_sfo_message_infopopup_studentName_textcontant().get(i).getText(),
							"Student names are stored in the drop-down menu for the school year and can be selected for future orders.");
				}
				if (i == 2) {
					Assert.assertEquals(get_sfo_message_infopopup_studentName_textcontant().get(i).getText(),
							"Any item #s you enter are stored in the item drop-down menu until you submit your order.");

				}
			}
		}
	}

	@Override
	public void clicks_on_shop_Books_Resources_ReviewCartPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		shop_Books_Resources_ReviewCart_Page().click();
	}

	@Override
	public void validate_sfo_studentname_infopopupmodalMessage_link() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		if (!(get_link_inmessage_popup_studentname().size() > 0)) {
			Assert.fail("Link Not Displayed");
		} /*else if (!(get_link_inmessage_popup_studentname().get(0).getText().equals("LEARN MORE "))) {
			Assert.fail("Link Name- Learn More");
		}*/
	}

	@Override
	public void clicks_on_First_item_in_a_Flyer() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		first_item_in_Flyer().click();

	}

	@Override
	public void clicks_on_SeeFullDetails_for_item() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(5000);
		SeeFullDetails_for_item().click();

	}

	@Override
	public void verify_the_same_flyer_and_month_displayed() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		/*
		 * String gradeVal=tab_grade_second().getAttribute("class"); String
		 * monthVal=tab_month_June().getAttribute("class");
		 */

		String gradeVal = tab_grade_second().getText();
		String monthVal = tab_month_June().getText();

		String act_Val = "active";

		Assert.assertEquals(act_Val, gradeVal, "Same grade is not enabled");
		Assert.assertEquals(act_Val, monthVal, "Same month is not enabled");
	}

	@Override
	public void verify_the_default_flyer_displayed() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String exp_highlightedgrade = "SeeSaw (K & Gr. 1)";
		String actual_highlightedgrade = getLblSelectedGrade().getText().trim();

		Assert.assertEquals(actual_highlightedgrade, exp_highlightedgrade, "Default Grade is not highlighted");
	}

	@Override
	public void verify_the_grade_flyer_month_displayed(Configuration testData) {
		ILoginPage homePage = getFactory().getILoginPage();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		homePage.DontShowAgainButton_in_LoginPage();
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2500);

		String exp_highlightedgrade = TestBaseProvider.getTestBase().getContext()
				.getProperty("testexecution.yto.highlightedgrade").toString().toLowerCase();
		
        String actual_highlightedgrade = getlblSelectedGradeflyer().getText().toLowerCase();
        System.out.println("grade is: "+actual_highlightedgrade);
		//String actual_highlightedgrade = getLblSelectedGrade().getText().toLowerCase();
		String actual_highlightedmonth = getlblSelectedMonth().getText();
		String exp_highlightedmonth = testData.getString("month_highlighted");
		
		if(!actual_highlightedgrade.contains(exp_highlightedgrade)){
			Assert.fail("Hightlighted Grade is not correct");
		}
        //commented this because in all flyers page the flyer is ELF and in YTO it is ELF (Preschool)
		//Assert.assertEquals(actual_highlightedgrade, exp_highlightedgrade, "Hightlighted Grade is not correct");
		Assert.assertEquals(actual_highlightedmonth, exp_highlightedmonth, "Hightlighted Month is not correct");
	}

	@Override
	public void verify_the_same_flyer_and_month_displayed1() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String gradeVal = tab_grade_second().getAttribute("class");
		String monthVal = tab_month_June1().getAttribute("class");

		String act_Val = "active";

		Assert.assertEquals(act_Val, gradeVal, "Same grade is not enabled");
		Assert.assertEquals(act_Val, monthVal, "Same month is not enabled");
	}

	@Override
	public void navigate_to_back_from_currentPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		WebDriver driver = TestBaseProvider.getTestBase().getDriver();
		driver.navigate().back();
		System.out.println("we have clicked on back button");

		PauseUtil.waitForAjaxToComplete(2500);
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.pause(10000);

	}

	@Override
	public void verify_page_shop_books_Flyers_displayed() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		Assert.assertTrue(page_shop_books_Flyers().isDisplayed(), "shop Books and Flyers page is not displayed");

	}

	@Override
	public void verifyViewAllLinkNotPresent() {

		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(10000);

		if (sizegetViewAllLinkSearchPage().size() != 0) {
			Assert.fail("Application Issue. View All link should not be present");
		}

		// AssertUtils.assertNotDisplayed(getViewAllLinkSearchPage());

	}

	@Override
	public void checkIteminPDP_clicked() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		WebDriver driver = TestBaseProvider.getTestBase().getDriver();
		driver.navigate().back();

		PauseUtil.waitForAjaxToComplete(2500);
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.pause(10000);

	}

	@Override
	public void fillStudentFlyerOrder_items_Safari() {
		// SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(10000);
		Wait_for_invisibility_of_locator();
		grade_Seesaw().click();
		// SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(8000);
		Wait_for_invisibility_of_locator();
		field_student1().click();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		studentZoomField().clear();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		studentZoomField().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("sname1"));
		WaitUtils.waitForDisplayed(select_arrow());
		select_arrow().click();
		// SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(6000);
		Wait_for_invisibility_of_locator();
		field_qty1().click();
		field_qty1().clear();
		PauseUtil.pause(3000);
		Wait_for_invisibility_of_locator();
		field_qty1().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("qty1"));
		click_outside().click();
		// SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(10000);
		Wait_for_invisibility_of_locator();
	}

	@Override
	public void Validation_of_TGAT_coupon_info_diaplyed_in_Confirm_Submit_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		try {
			TGAT_coupon_info_section().isDisplayed();
			System.out.println("TGAT_coupon_info section is displayed");
		} catch (Exception e) {
			Assert.fail("TGAT_coupon_info section is not displayed");
		}

	}

	@Override
	public void CSR_selects_orderType_as_PhoneOrder() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		SCHUtils.waitForElementToBeClickable(CSR_Order_Type_Phone_Order(), 60);
		CSR_Order_Type_Phone_Order().click();

	}

	/*
	 * @Override public void CSR_selects_orderType_as_PhoneOrder() {
	 * //PauseUtil.waitForAjaxToComplete(2500); PauseUtil.pause(30000);
	 * 
	 * try { System.out.println("######################");
	 * Runtime.getRuntime().exec("src/Exec/Auth6.exe"); } catch (IOException e)
	 * { // TODO Auto-generated catch block e.printStackTrace(); }
	 * 
	 * //SCHUtils.waitForElementToBeClickable(CSR_Order_Type_Phone_Order(), 60);
	 * //CSR_Order_Type_Phone_Order().click();
	 * 
	 * PauseUtil.pause(5000);
	 * SCHUtils.clickUsingJavaScript(CSR_Order_Type_Phone_Order());
	 * System.out.println("@@@@@@@@@@@@@@@@@@@@@");
	 * 
	 * }
	 */

	@Override
	public void Clicks_on_Continue_To_verify_Account_in_LocateAccountPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		Btn_Continue_To_Verify_Account().click();

	}

	@Override
	public void CSR_enters_the_Ac_Num_and_select_in_Search_Results() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(3000);

		fld_Ac_Num_LocateAccountPage().click();
		fld_Ac_Num_LocateAccountPage().clear();
		PauseUtil.pause(1000);
		fld_Ac_Num_LocateAccountPage().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("AcNum"));
		// fld_Ac_Num_LocateAccountPage().sendKeys("5539377");
		PauseUtil.pause(1000);
		fld_Ac_Num_LocateAccountPage().sendKeys(Keys.TAB);
		hdr_LocateCustomerAccountBy_LocateAccountPage().click();
		PauseUtil.pause(3000);

		WebDriver driver = TestBaseProvider.getTestBase().getDriver();
		WebDriverWait wait = new WebDriverWait(driver, 60);
		WebElement element1 = wait.until(ExpectedConditions.elementToBeClickable(Btn_Search_LocateAccountPage()));
		element1.click();

		// Btn_Search_LocateAccountPage().click();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		fld_Teacher_Name_in_SearchResults().click();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		/*
		 * try { PauseUtil.waitForAjaxToComplete(5000); PauseUtil.pause(3000);
		 * popUp_btn_Close_Introduction_To_CSR().isDisplayed();
		 * popUp_btn_Close_Introduction_To_CSR().click(); } catch (Exception e)
		 * { System.out.println("Introduction to CSR popUp is not displayed"); }
		 */

		if (list_popUp_btn_Close_Introduction_To_CSR().size() != 0) {
			popUp_btn_Close_Introduction_To_CSR().click();
			System.out.println("Introduction to CSR popUp is displayed and clicked on close button");
		} else {
			System.out.println("Introduction to CSR popUp is not displayed");
		}

	}

	@Override
	public void CSR_enters_Item_num_Item_Qty_and_proceedToCheckout() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		fld1_FlyerCode_in_OrderEntryPage().click();
		fld1_FlyerCode_in_OrderEntryPage()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("FlyerCode"));

		Item_Num_field_in_OrderEntryPage().click();
		Item_Num_field_in_OrderEntryPage().clear();
		Item_Num_field_in_OrderEntryPage().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ItemNum"));

		Paid_QTY_field_in_OrderEntryPage().click();
		Paid_QTY_field_in_OrderEntryPage().clear();
		Paid_QTY_field_in_OrderEntryPage().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ItemQty"));

		btn_ProceedToCheckout_OrderEntryPage().click();

	}

	@Override
	public void validate_Verify_Account_Page_is_displayed() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		try {
			Btn_Continue_To_Order_Entry().isDisplayed();
			System.out.println("Verify Account page is displayed");
		} catch (Exception e) {
			Assert.fail("Verify Account page is not displayed");
		}
	}

	@Override
	public void validate_Order_Entry_Page_is_displayed() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		try {
			txt_Enter_New_Order_OrderEntryPage().isDisplayed();
			txt_Teacher_Order_OrderEntryPage().isDisplayed();

			System.out.println("Order Entry page is displayed");
		} catch (Exception e) {
			Assert.fail("Order Entry page is not displayed");
		}
	}

	@Override
	public void Clicks_on_Continue_To_Order_Entry_in_VerifyAccountPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(4000);
		//WaitUtils.waitForDisplayed(Btn_Continue_To_Order_Entry());

        if(loginPage.sizeiconCloseHomePageProd().size()!=0){
        	loginPage.geticonCloseHomePageProd().click();
            SCHUtils.waitForLoaderToDismiss();
            PauseUtil.waitForAjaxToComplete(2500);
            PauseUtil.pause(10000);

        }
		Btn_Continue_To_Order_Entry().click();
	}

	@Override
	public void validate_Order_Entry_tab_is_highlighted() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		String act_text = tab_ORDER_ENTRY().getAttribute("class");
		String exp_text = "step-3 active";
		Assert.assertEquals(act_text, exp_text, "Order Entry Tab is not highlighted");
	}

	@Override
	public void validate_Review_cart_tab_is_highlighted() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_text = tab_REVIEW_CART().getAttribute("class");
		String exp_text = "step-4 active";

		Assert.assertEquals(act_text, exp_text, "Review Cart Tab is not highlighted");
	}

	@Override
	public void validate_Review_cart_page_Num_in_StepHeader_Bubble() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_val = Num_REVIEW_CART_StepHeader().getText();
		act_val = act_val.trim();

		String exp_val = "4";

		Assert.assertEquals(act_val, exp_val, "Review Cart page number is invalid in Step header");
	}

	@Override
	public void validate_Order_Entry_form_is_displayed() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		try {
			section_Teacher_Order_OrderEntryPage().isDisplayed();
			section_Teacher_and_Student_Order_OrderEntryPage().isDisplayed();

			System.out.println("Order Entry form is displayed in OrderEntry page");
		} catch (Exception e) {
			Assert.fail("Order Entry form is not displayed in OrderEntry page");
		}
	}

	@Override
	public void verify_Proceed_To_Checkout_btn_is_displayed() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			btn_ProceedToCheckout_OrderEntryPage().isDisplayed();
			System.out.println("Proceed To Checkout button is displayed");
		} catch (Exception e) {
			Assert.fail("Proceed To Checkout button is not displayed");
		}
	}

	@Override
	public void CSR_clicks_on_Proceed_To_Checkout_btn() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		btn_ProceedToCheckout_OrderEntryPage().click();

	}

	@Override
	public void CSR_selects_ContinueCheckout_in_Rewards_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		WaitUtils.waitForDisplayed(btn_ContinueCheckout_RewardsPage());
		btn_ContinueCheckout_RewardsPage().click();
	}

	@Override
	public void CSR_selects_ContinueCheckout_in_Payments_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		WaitUtils.waitForDisplayed(btn_ContinueCheckout_ShippingRewardsPage());
		SCHUtils.waitForElementToBeClickable(btn_ContinueCheckout_ShippingRewardsPage(), 20);
		btn_ContinueCheckout_ShippingRewardsPage().click();
	}

	@Override
	public void validate_locate_account_is_displayed() {
		PauseUtil.waitForAjaxToComplete(2500);
		AssertUtils.assertDisplayed(getlbl_locateaccount_locate_account());

	}

	@Override
	public void validate_active_progress_tab() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		String activeprogress_tab = gettabcsrprogresssectionactive().getText();
		System.out.println("active progress tab is: " + activeprogress_tab);
		AssertUtils.assertTextMatches(gettabcsrprogresssectionactive(),
				Matchers.containsString(TestBaseProvider.getTestBase().getTestData().getString("active_progresstab")));
	}

	@Override
	public void validate_progresstabs_order() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		String csrprogresstabs[] = { "LOCATE ACCOUNT", "VERIFY ACCOUNT", "ORDER ENTRY", "REVIEW CART",
				"REWARDS & COUPONS", "SHIPPING & PAYMENT", "CONFIRM & SUBMIT" };
		System.out.println("tabs are: ############:" + gettabscsrprogresssection().getText().substring(1));
		for (int i = 0; i < csrprogresstabs.length; i++) {
			if (!gettabscsrprogresssection().getText().contains(csrprogresstabs[i])) {
				Assert.fail("Application Issue." + csrprogresstabs[i] + "is not present in csr progresss bar");
			}
		}
	}

	@Override
	public void verify_two_layers_displayed_in_Order_Entry_Page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		AssertUtils.assertDisplayed(layer_One_in_OrderEntryPage());
		AssertUtils.assertDisplayed(layer_Two_in_OrderEntryPage());
	}

	@Override
	public void verify_two_tabs_displayed_in_first_layer_Order_Entry_Page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		int act_size = tabs_in_firstlayer_in_OrderEntryPage().size();
		System.out.println("####################:" + act_size);
		int exp_size = 2;
		Assert.assertEquals(act_size, exp_size, "Tabs for the First layer in Order Entry page are incorrect");
	}

	@Override
	public void verify_Eight_rows_displayed_under_the_header_in_Item_Entry_layer_form() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		int act_size = Rows_default_in_Item_Entry_Form_in_OrderEntryPage().size();
		System.out.println("####################:" + act_size);

		int exp_size = 8;
		Assert.assertEquals(act_size, exp_size, "Default Rows for the Order Entry form are incorrect");
	}

	@Override
	public void verify_Three_text_boxes_in_each_row_displayed_under_the_header_in_Item_Entry_layer_form() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		int exp_size = 3;

		int act_size = TextBoxes_Row_default_inForm1_Item_Entry_Form_in_OrderEntryPage().size();
		System.out.println("####################:" + act_size);
		Assert.assertEquals(act_size, exp_size, "TextBoxes in a Row in Form1 in OrderEntry form are incorrect");

		int act_size2 = TextBoxes_Row_default_inForm2_Item_Entry_Form_in_OrderEntryPage().size();
		System.out.println("####################:" + act_size);
		Assert.assertEquals(act_size2, exp_size, "TextBoxes in a Row in Form1 in OrderEntry form are incorrect");

		int act_size3 = TextBoxes_Row_default_inForm3_Item_Entry_Form_in_OrderEntryPage().size();
		System.out.println("####################:" + act_size);
		Assert.assertEquals(act_size3, exp_size, "TextBoxes in a Row in Form1 in OrderEntry form are incorrect");

	}

	@Override
	public void verify_StudentsOrders_tab_disabled_in_first_layer_Order_Entry_Page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_text = StudentsOrders_tab_in_OrderEntryPage().getAttribute("class");
		String exp_text = "disable-student-tab";

		Assert.assertEquals(act_text, exp_text, "Student Orders tab is enabled in Order Entry module form");
	}

	@Override
	public void verify_Bonus_QTY_textboxes_disabled_Order_Entry_Page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		if (Bonus_QTY_text_boxes_in_OrderEntryPage().isEnabled()) {
			Assert.fail("Bonus QTY textboxes are enabled in Order Entry page");
		} else {
			System.out.println("Bonus QTY textboxes are disabled in Order Entry page");
		}
	}

	@Override
	public void verify_TeacherOrders_tab_selected_in_first_layer_Order_Entry_Page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_text = TeacherOrders_tab_in_OrderEntryPage().getAttribute("class");
		String exp_text = "arrow-up-orange";
		Assert.assertEquals(act_text, exp_text, "Teacher Orders tab is not selected in Order Entry module form");
	}

	@Override
	public void verify_default_forms_displayed_in_Second_layer_Order_Entry_Page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		int act_size = forms_default_in_secondLayer_in_OrderEntryPage().size();
		System.out.println("####################:" + act_size);

		int exp_size = 3;
		Assert.assertEquals(act_size, exp_size, "Default forms for the second layer in Order Entry page are incorrect");
	}

	@Override
	public void verify_additional_8rows_displayed_in_Order_Entry_forms() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		int act_size = rows_additional_in_secondLayer_in_OrderEntryPage().size();
		System.out.println("####################:" + act_size);

		int exp_size = 48;
		Assert.assertEquals(act_size, exp_size, "Rows count is incorrect when CSR clicks on Form expansion button");
	}

	@Override
	public void verify_additional_8rows_displayed_when_perform_Tab_in_Order_Entry_forms() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		int act_size = rows_additional_in_secondLayer_in_OrderEntryPage().size();
		System.out.println("####################:" + act_size);

		int exp_size = 48;
		Assert.assertEquals(act_size, exp_size, "Additional 8 rows are not displayed when CSR perform Tab key");

	}

	@Override
	public void verify_Flyer_Code_field_is_displayed_in_Order_Entry_Page() {
		PauseUtil.waitForAjaxToComplete(2500);
		AssertUtils.assertDisplayed(fld1_FlyerCode_in_OrderEntryPage());
	}

	@Override
	public void verify_items_Entry_fields_is_displayed_in_Order_Entry_Page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			items_Entry_fields_in_OrderEntryPage_form().isDisplayed();
			System.out.println("Item Entry fields are displayed in Order Entry page");
		} catch (Exception e) {
			Assert.fail("Item Entry fields are not displayed in Order Entry page");
		}
	}

	@Override
	public void verify_Form_expansion_buttons_is_displayed_in_Order_Entry_Page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		try {
			Form_expansion_buttons_in_three_forms_in_OrderEntryPage().isDisplayed();
			System.out.println("Form_expansion_buttons are displayed in Order Entry page");
		} catch (Exception e) {
			Assert.fail("Form_expansion_buttons are not displayed in Order Entry page");
		}

		int act_val = Form_expansion_buttons_count_in_three_forms_in_OrderEntryPage().size();
		System.out.println("############:" + act_val);
		int exp_val = 3;

		Assert.assertEquals(act_val, exp_val, "Form expansion buttons are not displayed correctly in Order Entry form");
	}

	@Override
	public void Form_expansion_button_form1_in_Order_Entry_Page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		Form_expansion_button_first_form_in_OrderEntryPage().click();

	}

	@Override
	public void CSR_selects_the_last_textbox_in_form1_in_Order_Entry_Page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		Last_textbox_in_OrderEntryPage().click();

	}

	@Override
	public void CSR_perform_Tab_key_in_Order_Entry_Page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		Last_textbox_in_OrderEntryPage().sendKeys(Keys.TAB);

	}

	@Override
	public void verify_the_label_of_FLYER_CODE_in_Order_Entry_Page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_text = label_FLYER_CODE_field_in_OrderEntryPage().getText();
		act_text = act_text.trim();
		System.out.println("################:" + act_text);
		String exp_text = "FLYER CODE #";

		Assert.assertEquals(act_text, exp_text, "FLYER CODE # field label is incorrect in Order Entry page");

	}

	@Override
	public void verify_the_header_of_first_column_entry_in_Order_Entry_from() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_text = label_ITEM_header_in_OrderEntryPage().getText();
		act_text = act_text.trim();
		System.out.println("################:" + act_text);
		String exp_text = "ITEM #";

		Assert.assertEquals(act_text, exp_text, "ITEM # header label is incorrect in Order Entry page form");

	}

	@Override
	public void verify_the_header_of_second_column_entry_in_Order_Entry_from() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_text = label_PAID_QTY_header_in_OrderEntryPage().getText();
		act_text = act_text.trim();
		System.out.println("################:" + act_text);
		String exp_text = "PAID QTY.";

		Assert.assertEquals(act_text, exp_text, "PAID QTY. header label is incorrect in Order Entry page form");

	}

	@Override
	public void verify_the_header_of_third_column_entry_in_Order_Entry_from() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_text = label_BONUS_QTY_header_in_OrderEntryPage().getText();
		act_text = act_text.trim();
		System.out.println("################:" + act_text);
		String exp_text = "BONUS QTY.";

		Assert.assertEquals(act_text, exp_text, "BONUS QTY. header label is incorrect in Order Entry page form");

	}

	@Override
	public void verify_the_placeholder_text_in_FLYER_CODE_in_Order_Entry_Page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_text = fld1_FlyerCode_in_OrderEntryPage().getAttribute("placeholder");
		String expt_text = "e.g. L78000";

		Assert.assertEquals(act_text, expt_text, "placeholder text for the FLYER CODE field is incorrect");

	}

	@Override
	public void CSR_enters_FLYER_CODE_in_Order_Entry_form() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		fld1_FlyerCode_in_OrderEntryPage().click();
		fld1_FlyerCode_in_OrderEntryPage()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("FlyerCode"));

	}

	@Override
	public void CSR_enters_Item_Number_in_Order_Entry_form() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		Item_Num_field_in_OrderEntryPage().click();
		Item_Num_field_in_OrderEntryPage()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ItemNumber"));

	}

	@Override
	public void CSR_enters_Paid_QTY_in_Order_Entry_form() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		Paid_QTY_field_in_OrderEntryPage().click();
		Paid_QTY_field_in_OrderEntryPage().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("PaidQTY"));

	}

	@Override
	public void Verify_the_Item_Number_in_Order_Entry_form() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		/*
		 * WebDriver driver=TestBaseProvider.getTestBase().getDriver();
		 * JavascriptExecutor executor = (JavascriptExecutor)driver; String
		 * entireSelected = (String) executor.executeScript(
		 * "$($('.flyer-table')[0]).find('tbody tr:eq(0) td:eq(0) input').val()"
		 * ); System.out.println("######################"+entireSelected);
		 * 
		 * String
		 * ItemNumber=TestBaseProvider.getTestBase().getTestData().getString(
		 * "ItemNumber");
		 * 
		 * Assert.assertEquals(entireSelected, ItemNumber,
		 * "Item Number is not taking the entered value");
		 */

	}

	@Override
	public void Verify_the_Paid_QTY_in_Order_Entry_form() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

	}

	@Override
	public void verify_entered_FLYER_CODE_in_Order_Entry_form() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_text = fld1_FlyerCode_in_OrderEntryPage().getText();
		System.out.println("################:" + act_text);

	}

	@Override
	public void verify_Teacher_Fullname_in_container1_in_Order_Entry_Page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_text = fld_FullName_in_Container1_OrderEntryPage().getText();
		act_text = act_text.trim();
		System.out.println("##############:" + act_text);
		String exp_text = TestBaseProvider.getTestBase().getTestData().getString("TeacherFullName");

		Assert.assertEquals(act_text, exp_text, "Teacher FullName is incorrect in Container One");

	}

	@Override
	public void verify_School_Info_displayed_in_container2_in_CustProfile() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			fld_School_Info1_in_Container2_CustProfile().isDisplayed();
			System.out.println("Teacher's full school address line1 is displayed in 2nd container");
		} catch (Exception e) {
			Assert.fail("Teacher's full school address line1 is not displayed in 2nd container");
		}

		try {
			fld_School_Info2_in_Container2_CustProfile().isDisplayed();
			System.out.println("Teacher's full school address line2 is displayed in 2nd container");
		} catch (Exception e) {
			Assert.fail("Teacher's full school address line2 is not displayed in 2nd container");
		}

		try {
			fld_School_Info3_in_Container2_CustProfile().isDisplayed();
			System.out.println("Teacher's full school address line3 is displayed in 2nd container");
		} catch (Exception e) {
			Assert.fail("Teacher's full school address line3 is not displayed in 2nd container");
		}

		try {
			fld_School_Info4_in_Container2_CustProfile().isDisplayed();
			System.out.println("Teacher's full school address line4 is displayed in 2nd container");
		} catch (Exception e) {
			Assert.fail("Teacher's full school address line4 is not displayed in 2nd container");
		}

	}

	@Override
	public void verify_Teacher_Ac_num_in_container3_in_CustProfile() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_text = fld_ac_num_in_Container3_CustProfile().getText();
		String act_text_is = String.valueOf(act_text.replaceAll("[^\\d.]+|\\.(?!\\d)", ""));
		System.out.println("@@@@@@@@@@@@@@@@@@@@@" + act_text_is);

		String exp_val = TestBaseProvider.getTestBase().getTestData().getString("AcNum");

		Assert.assertEquals(act_text_is, exp_val, "Teacher Account number is incorrect in Third Container");
	}

	@Override
	public void verify_CAC_info_displayed_in_container3_in_CustProfile() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			fld_CAC_info_in_Container3_CustProfile().isDisplayed();
			Assert.fail("CAC info is displayed in 3rd container of customer profile");
		} catch (Exception e) {
			System.out.println("CAC info is not displayed in 3rd container of customer profile");
		}

	}

	@Override
	public void verify_the_active_Teacher_status_in_container3_of_CustProfile() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_text = fld_status_of_Teacher_Container2_CustProfile().getText();
		act_text = act_text.trim();

		String exp_text = "Active : true";

		Assert.assertEquals(act_text, exp_text, "Status of the Teacher is incorrect in Cust profile section");

	}

	@Override
	public void verify_the_Inactive_Teacher_status_in_container3_of_CustProfile() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_text = fld_status_of_Teacher_Container2_CustProfile().getText();
		act_text = act_text.trim();

		String exp_text = "Inactive";

		Assert.assertEquals(act_text, exp_text, "Status of the Teacher is incorrect in Cust profile section");

	}

	@Override
	public void verify_the_Temporary_Hold_Teacher_status_in_container3_of_CustProfile() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_text = fld_status_of_Teacher_Container3_CustProfile().getText();

		String exp_text = "Account Temporary on Hold (T)";

		Assert.assertEquals(act_text, exp_text,
				"Status of the Teacher is incorrect in Third Container of Cust profile");

	}

	@Override
	public void verify_the_PrePaid_Teacher_status_in_container3_of_CustProfile() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_text = fld_status_of_Teacher_Container3_CustProfile().getText();

		String exp_text = "Pre-Pay (P)";

		Assert.assertEquals(act_text, exp_text,
				"Status of the Teacher is incorrect in Third Container of Cust profile");

	}

	@Override
	public void verify_the_Held_by_AR_Teacher_status_in_container3_of_CustProfile() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_text = fld_status_of_Teacher_Container3_CustProfile().getText();

		String exp_text = "Account Hold (H)";

		Assert.assertEquals(act_text, exp_text,
				"Status of the Teacher is incorrect in Third Container of Cust profile");

	}

	@Override
	public void verify_the_label_of_BonusPoints_in_container4_of_CustProfile() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		String act_text = lbl_BonusPoints_Container4_CustProfile().getText();
		act_text = act_text.trim();

		String exp_text = "BONUS BANK";
		Assert.assertEquals(act_text, exp_text, "BONUS BANK label is incorrect in 4th container of customer profile");
	}

	@Override
	public void verify_the_BonusPoints_Amt_in_container4_of_CustProfile() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			fld_BonusPoints_amt_Container4_CustProfile().isDisplayed();
			System.out.println("Bonus Points amt field is displayed in 4th container of customer profile");
		} catch (Exception e) {
			Assert.fail("Bonus Points amt field is not displayed in 4th container of customer profile");
		}
	}

	@Override
	public void CSR_clicks_on_BonusBank_in_container4_of_CustProfile() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		lbl_BonusPoints_Container4_CustProfile().click();
	}

	@Override
	public void verify_BonusBank_Amt_is_zero_in_container4_of_CustProfile() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_val = fld_BonusPoints_amt_Container4_CustProfile().getText();
		act_val = act_val.trim();

		String exp_val = "$0.00";

		Assert.assertEquals(act_val, exp_val, "Bonus Bank amt is incorrect in 4th container of customer profile");

	}

	@Override
	public void verify_BonusBank_Amt_is_correct_in_container4_of_CustProfile() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_val = fld_BonusPoints_amt_Container4_CustProfile().getText();
		act_val = act_val.trim();
		act_val = act_val.substring(1);

		String exp_val = TestBaseProvider.getTestBase().getTestData().getString("BonusBankAmt");

		Assert.assertEquals(act_val, exp_val, "Bonus Bank amt is incorrect in 4th container of customer profile");

	}

	@Override
	public void verify_popUp_msg_with_YES_NO_btns_when_CSR_enters_3digits_in_Qty_fld_OrderEntryPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_text = popUp_for_3digits_inQty_fld().getText();
		act_text = act_text.trim();

		String exp_text = "Is this the correct number of items?";
		Assert.assertEquals(act_text, exp_text,
				"Incorrect text has displayed in a confirmation popUp when CSR enters 3digit number in Qty field");

		try {
			btn_YES_in_popUp_for_3digits_inQty_fld().isDisplayed();
			System.out.println("YES button is displayed in Qty confirmation popUp");
		} catch (Exception e) {
			Assert.fail("YES button is not displayed in Qty confirmation popUp");
		}

		try {
			btn_NO_in_popUp_for_3digits_inQty_fld().isDisplayed();
			System.out.println("NO button is displayed in Qty confirmation popUp");
		} catch (Exception e) {
			Assert.fail("NO button is not displayed in Qty confirmation popUp");
		}

	}

	@Override
	public void CSR_clicks_on_YES_in_Confirmation_PopUp_PaidQty() {
		//PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1500);

		btn_YES_in_popUp_for_3digits_inQty_fld().click();

		/*
		 * WebDriver driver=TestBaseProvider.getTestBase().getDriver();
		 * WebElement element = driver.findElement(By.xpath(
		 * "(//button[@class='grey removeYes'])[2]")); JavascriptExecutor
		 * executor = (JavascriptExecutor)driver;
		 * executor.executeScript("arguments[0].click();", element);
		 */

	}

	@Override
	public void CSR_clicks_on_NO_in_Confirmation_PopUp_PaidQty() {
		//PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1500);

		btn_NO_in_popUp_for_3digits_inQty_fld().click();

	}

	@Override
	public void verify_Confirmation_PopUp_PaidQty() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			popUp_for_3digits_inQty_fld().isDisplayed();
			Assert.fail("Confirmation PopUp is displayed even CSR clicks on YES/NO button");
		} catch (Exception e) {
			System.out.println("Confirmation PopUp is disappeared when CSR clicks on YES/NO button");
		}

	}

	@Override
	public void CSR_enters_flyerCode_and_Tab_to_moveOut_OrderEntryPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		fld1_FlyerCode_in_OrderEntryPage().click();
		fld1_FlyerCode_in_OrderEntryPage()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("FlyerCode"));
		fld1_FlyerCode_in_OrderEntryPage().sendKeys(Keys.TAB);

	}

	@Override
	public void CSR_enters_Item_Num_filed1_in_OrderEntryPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		Item_Num_field_in_OrderEntryPage().click();
		Item_Num_field_in_OrderEntryPage().clear();
		Item_Num_field_in_OrderEntryPage().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ItemNum"));

	}

	@Override
	public void CSR_enters_Paid_Qty_filed1_in_OrderEntryPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		Paid_QTY_field_in_OrderEntryPage().click();
		Paid_QTY_field_in_OrderEntryPage().clear();
		Paid_QTY_field_in_OrderEntryPage().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ItemQty"));

	}

	@Override
	public void CSR_enters_Item_Num_filed2_in_OrderEntryPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		Item_Num_field2_in_OrderEntryPage().click();
		Item_Num_field2_in_OrderEntryPage().clear();
		Item_Num_field2_in_OrderEntryPage()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ItemNum2"));

	}

	@Override
	public void CSR_enters_Item_Num_filed3_in_OrderEntryPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		Item_Num_field3_in_OrderEntryPage().click();
		Item_Num_field3_in_OrderEntryPage().clear();
		Item_Num_field3_in_OrderEntryPage()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ItemNum3"));

	}

	@Override
	public void CSR_enters_Item_Num_filed4_in_OrderEntryPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		Item_Num_field4_in_OrderEntryPage().click();
		Item_Num_field4_in_OrderEntryPage().clear();
		Item_Num_field4_in_OrderEntryPage()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ItemNum4"));

	}

	@Override
	public void CSR_enters_Paid_Qty_filed2_in_OrderEntryPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		Paid_QTY_field2_in_OrderEntryPage().click();
		Paid_QTY_field2_in_OrderEntryPage().clear();
		Paid_QTY_field2_in_OrderEntryPage()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ItemQty2"));

	}

	@Override
	public void CSR_enters_Paid_Qty_filed3_in_OrderEntryPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		Paid_QTY_field3_in_OrderEntryPage().click();
		Paid_QTY_field3_in_OrderEntryPage().clear();
		Paid_QTY_field3_in_OrderEntryPage()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ItemQty3"));

	}

	@Override
	public void CSR_enters_Paid_Qty_filed4_in_OrderEntryPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		Paid_QTY_field4_in_OrderEntryPage().click();
		Paid_QTY_field4_in_OrderEntryPage().clear();
		Paid_QTY_field4_in_OrderEntryPage()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ItemQty4"));

	}

	@Override
	public void verify_error_msg_for_Invalid_FlyerCode_OrderEntryPage() {
		// PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		String act_text = popUp_ErrorMsg_in_OrderEntryPage().getText();
		act_text = act_text.trim();

		String exp_text = "Flyer is invalid. No items from this flyer can be added to cart.";
		Assert.assertEquals(act_text, exp_text,
				"Incorrect error message is displyed when CSR enters special char's in Flyer code field");
	}

	@Override
	public void verify_error_msg_for_ItemNum_fld_OrderEntryPage() {
		// PauseUtil.waitForAjaxToComplete(2500);
		// PauseUtil.pause(2000);

		try {
			popUp_ErrorMsg_in_OrderEntryPage().isDisplayed();
			System.out.println("Error message is displayed for the Item Number field");
		} catch (Exception e) {
			Assert.fail("Error message is not displayed for the Item Number field");
		}

		String act_text = popUp_ErrorMsg_in_OrderEntryPage().getText();
		act_text = act_text.trim();

		String exp_text = "You must enter an item number";
		Assert.assertEquals(act_text, exp_text,
				"Incorrect error message is displyed when CSR doesn't enter Item num and Proceed to checkout");

	}

	@Override
	public void verify_the_Flyout_with_BBank_rangeList() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			popUp_FlyOut_for_BonusBank().isDisplayed();
			System.out.println("Flyout popUp with Bonus Bank range list is displayed when CSR clicks on Bonus Bank");
		} catch (Exception e) {
			Assert.fail("Flyout popUp with Bonus Bank range list is not displayed when CSR clicks on Bonus Bank");
		}

	}

	@Override
	public void verify_error_msg_for_ItemQty_fld_OrderEntryPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			popUp_ErrorMsg_in_OrderEntryPage().isDisplayed();
			System.out.println("Error message is displayed for the Item Qty field");
		} catch (Exception e) {
			Assert.fail("Error message is not displayed for the Item Qty field");
		}

		String act_text = popUp_ErrorMsg_in_OrderEntryPage().getText();
		act_text = act_text.trim();

		String exp_text = "You must enter a quantity";
		Assert.assertEquals(act_text, exp_text,
				"Incorrect error message is displyed when CSR doesn't enter Item Qty and Proceed to checkout");

	}

	@Override
	public void verify_the_PopUp_for_InvalidItems_and_the_Continue_Cancel_buttons_in_OrderEntryPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_text = popUp_ErrorMsg_for_Invalid_Items_OrderEntryPage().getText();
		act_text = act_text.trim();

		String exp_text = "Invalid Items";
		Assert.assertEquals(act_text, exp_text,
				"Incorrect header text has displayed in popUp when CSR enters Invalid Item number");

		try {
			btn_Continue_popUp_ErrorMsg_for_Invalid_Items().isDisplayed();
			System.out.println("Continue button is displayed in Invalid items error popUp");
		} catch (Exception e) {
			Assert.fail("Continue button is not displayed in Invalid items error popUp");
		}

		try {
			btn_Cancel_popUp_ErrorMsg_for_Invalid_Items().isDisplayed();
			System.out.println("Cancel button is displayed in Invalid items error popUp");
		} catch (Exception e) {
			Assert.fail("Cancel button is not displayed in Invalid items error popUp");
		}

	}

	@Override
	public void verify_the_PopUp_for_InvalidItems_and_the_OK_button_in_OrderEntryPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_text = popUp_ErrorMsg_for_Invalid_Items_OrderEntryPage().getText();
		act_text = act_text.trim();

		String exp_text = "Invalid Items";
		Assert.assertEquals(act_text, exp_text,
				"Incorrect header text has displayed in popUp when CSR enters Invalid Item number");

		try {
			btn_OK_popUp_ErrorMsg_for_Invalid_Items().isDisplayed();
			System.out.println("OK button is displayed in Invalid items error popUp");
		} catch (Exception e) {
			Assert.fail("OK button is not displayed in Invalid items error popUp");
		}

	}

	@Override
	public void verify_the_InvalidItem_PopUp_disappeared_OrderEntryPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			popUp_ErrorMsg_for_Invalid_Items_OrderEntryPage().isDisplayed();
			Assert.fail("Error Message for the Invalid items is not disappeared when CSR clicks on Cancel button");
		} catch (Exception e) {
			System.out.println("Error Message for the Invalid items is disappeared when CSR clicks on Cancel button");
		}

	}

	@Override
	public void verify_the_InvalidItem_nums_in_PopUp_in_OrderEntryPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_text = ItemList_in_popUp_for_Invalid_Item1().getText();
		act_text = act_text.trim();

		String exp_text = TestBaseProvider.getTestBase().getTestData().getString("ItemNum");

		Assert.assertEquals(act_text, exp_text,
				"Incorrect item number displayed in popUp when CSR enters Invalid Item number");

	}

	@Override
	public void verify_the_InvalidItem_nums_2_in_PopUp_in_OrderEntryPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_text = ItemList_in_popUp_for_Invalid_Item1().getText();
		act_text = act_text.trim();

		String exp_text = TestBaseProvider.getTestBase().getTestData().getString("ItemNum2");

		Assert.assertEquals(act_text, exp_text,
				"Incorrect item number displayed in popUp when CSR enters Invalid Item number");

	}

	@Override
	public void verify_the_InvalidItem_nums_3_in_PopUp_in_OrderEntryPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_text = ItemList_in_popUp_for_Invalid_Item1().getText();
		act_text = act_text.trim();

		String exp_text = TestBaseProvider.getTestBase().getTestData().getString("ItemNum3");

		Assert.assertEquals(act_text, exp_text,
				"Incorrect item number displayed in popUp when CSR enters Invalid Item number");

	}

	@Override
	public void verify_the_InvalidItem_nums_3_4_in_PopUp_in_OrderEntryPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_text = ItemList_in_popUp_for_Invalid_Item1().getText();
		act_text = act_text.trim();
		String exp_text = TestBaseProvider.getTestBase().getTestData().getString("ItemNum3");
		Assert.assertEquals(act_text, exp_text,
				"Incorrect item number displayed in popUp when CSR enters Invalid Item number");

		String act_text2 = ItemList_in_popUp_for_Invalid_Item2().getText();
		act_text2 = act_text2.trim();
		String exp_text2 = TestBaseProvider.getTestBase().getTestData().getString("ItemNum4");
		Assert.assertEquals(act_text2, exp_text2,
				"Incorrect item number displayed in popUp when CSR enters Invalid Item number");

	}

	@Override
	public void enteritemcodeQty() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		gettextboxitemEnter().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ITEMCODE"));
		gettextboxqtyEnter().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("Qty"));

	}

	@Override
	public void clickProceedToCheckout() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		SCHUtils.waitForElementToBeClickable(getbuttonProceedcheckout(), 60).click();
	}

	@Override
	public void verify_ReviewCartPageDiplayed() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
	}

	@Override
	public void csr_add_multiple_items_qty_orderentrypage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		gettextboxitemEnter().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ITEMCODE1"));
		gettextboxqtyEnter().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("Qty1"));
		PauseUtil.pause(1000);
		gettextboxitemEnter().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ITEMCODE2"));
		gettextboxqtyEnter().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("Qty2"));
		PauseUtil.pause(1000);
		gettextboxitemEnter().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ITEMCODE3"));
		gettextboxqtyEnter().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("Qty3"));
		PauseUtil.pause(1000);
		gettextboxitemEnter().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ITEMCODE4"));
		gettextboxqtyEnter().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("Qty4"));

	}

	@Override
	public void csr_verify_TotalQty() {
		int q1 = Integer.parseInt(TestBaseProvider.getTestBase().getTestData().getString("Qty1"));
		int q2 = Integer.parseInt(TestBaseProvider.getTestBase().getTestData().getString("Qty2"));
		int q3 = Integer.parseInt(TestBaseProvider.getTestBase().getTestData().getString("Qty3"));
		int q4 = Integer.parseInt(TestBaseProvider.getTestBase().getTestData().getString("Qty3"));
		int expected_qty = q1 + q2 + q3 + q4;
		String valuefromApp = gettextboxqtyEnter().getText();
		int actValue = Integer.parseInt(valuefromApp);
		if (actValue != expected_qty) {
			Assert.fail("Items not combined");
		}

	}

	@Override
	public void csr_add_mulitple_item_sameQty_differentflyer() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		fld1_FlyerCode_in_OrderEntryPage().click();
		fld1_FlyerCode_in_OrderEntryPage().clear();
		fld1_FlyerCode_in_OrderEntryPage()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("FlyerCode"));
		Item_Num_field_in_OrderEntryPage().clear();
		Item_Num_field_in_OrderEntryPage().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ItemNum"));
		PauseUtil.pause(1000);
		Paid_QTY_field_in_OrderEntryPage().click();
		Paid_QTY_field_in_OrderEntryPage().clear();
		Paid_QTY_field_in_OrderEntryPage().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ItemQty"));
		PauseUtil.pause(1000);
		Item_Num_field2_in_OrderEntryPage().click();
		Item_Num_field2_in_OrderEntryPage().clear();
		Item_Num_field2_in_OrderEntryPage()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ItemNum2"));
		PauseUtil.pause(1000);
		Paid_QTY_field2_in_OrderEntryPage().click();
		Paid_QTY_field2_in_OrderEntryPage().clear();
		Paid_QTY_field2_in_OrderEntryPage()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ItemQty2"));
		PauseUtil.pause(1000);
		Item_Num_field3_in_OrderEntryPage().click();
		Item_Num_field3_in_OrderEntryPage().clear();
		Item_Num_field3_in_OrderEntryPage()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ItemNum3"));
		PauseUtil.pause(1000);
		Paid_QTY_field3_in_OrderEntryPage().click();
		Paid_QTY_field3_in_OrderEntryPage().clear();
		Paid_QTY_field3_in_OrderEntryPage()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ItemQty3"));
		fld2_FlyerCode_in_OrderEntryPage().click();
		fld2_FlyerCode_in_OrderEntryPage()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("FlyerCode1"));
		fld2_FlyerCode_in_OrderEntryPage().sendKeys(Keys.TAB);
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		Item_Num_field_in_OrderEntryPage2().clear();
		Item_Num_field_in_OrderEntryPage2()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ItemNum4"));
		PauseUtil.pause(1000);
		Paid_QTY_field_in_OrderEntryPage2().click();
		Paid_QTY_field_in_OrderEntryPage2().clear();
		Paid_QTY_field_in_OrderEntryPage2()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ItemQty4"));
		PauseUtil.pause(1000);
		Item_Num_field2_in_OrderEntryPage2().click();
		Item_Num_field2_in_OrderEntryPage2().clear();
		Item_Num_field2_in_OrderEntryPage2()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ItemNum5"));
		PauseUtil.pause(1000);
		Paid_QTY_field2_in_OrderEntryPage2().click();
		Paid_QTY_field2_in_OrderEntryPage2().clear();
		Paid_QTY_field2_in_OrderEntryPage2()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ItemQty5"));
		PauseUtil.pause(1000);

	}

	@Override
	public void csr_update_multiple_items_qty_orderentrypage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		gettextboxitemEnter().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ITEMCODE1_Update"));
		gettextboxqtyEnter().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("Qty1_update"));
		PauseUtil.pause(1000);
		gettextboxitemEnter().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ITEMCODE2_Update"));
		gettextboxqtyEnter().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("Qty2_update"));
		PauseUtil.pause(1000);
		gettextboxitemEnter().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ITEMCODE3_Update"));
		gettextboxqtyEnter().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("Qty3_update"));
		PauseUtil.pause(1000);
		gettextboxitemEnter().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ITEMCODE4_Update"));
		gettextboxqtyEnter().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("Qty4_update"));

	}

	public double item1_price_reviewcart() {
		// calculating item1 total in review cart
		String value1 = cart_item1_price().getText();
		String ele1 = cart_qty_item1().getAttribute("value");
		value1 = value1.substring(1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item1_price = d1 * a1;
		item1_price = Double.parseDouble(new DecimalFormat("##.##").format(item1_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item1_price);

		return item1_price;
	}

	public double item2_price_reviewcart() {
		// calculating item2 total in review cart
		String value2 = cart_item2_price().getText();
		String ele2 = cart_qty_item2().getAttribute("value");
		value2 = value2.substring(1);
		double d2 = Double.parseDouble(value2);
		System.out.println("#############>" + d2);
		int a2 = Integer.parseInt(ele2);
		System.out.println("%%%%%%%%%%%%>" + a2);
		double item2_price = d2 * a2;
		item2_price = Double.parseDouble(new DecimalFormat("##.##").format(item2_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item2_price);

		return item2_price;
	}

	public double item3_price_reviewcart() {
		// calculating item3 total in review cart
		String value3 = cart_item3_price().getText();
		String ele3 = cart_qty_item3().getAttribute("value");
		value3 = value3.substring(1);
		double d3 = Double.parseDouble(value3);
		System.out.println("#############>" + d3);
		int a3 = Integer.parseInt(ele3);
		System.out.println("%%%%%%%%%%%%>" + a3);
		double item3_price = d3 * a3;
		item3_price = Double.parseDouble(new DecimalFormat("##.##").format(item3_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item3_price);

		return item3_price;
	}

	public double item4_price_reviewcart() {
		// calculating item4 total in review cart
		String value4 = cart_item4_price().getText();
		String ele4 = cart_qty_item4().getAttribute("value");
		value4 = value4.substring(1);
		double d4 = Double.parseDouble(value4);
		System.out.println("#############>" + d4);
		int a4 = Integer.parseInt(ele4);
		System.out.println("%%%%%%%%%%%%>" + a4);
		double item4_price = d4 * a4;
		item4_price = Double.parseDouble(new DecimalFormat("##.##").format(item4_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item4_price);

		return item4_price;
	}

	public int item1_qty() {
		// calculating item1 total qty in review cart

		String ele3 = cart_qty_item1().getAttribute("value");
		int item1_qty = Integer.parseInt(ele3);
		System.out.println("%%%%%%%%%%%%>" + item1_qty);
		return item1_qty;
	}

	public int item2_qty() {
		// calculating item2 total qty in review cart

		String ele3 = cart_qty_item2().getAttribute("value");
		int item2_qty = Integer.parseInt(ele3);
		System.out.println("%%%%%%%%%%%%>" + item2_qty);
		return item2_qty;
	}

	public int item3_qty() {
		// calculating item3 total qty in review cart

		String ele3 = cart_qty_item3().getAttribute("value");
		int item3_qty = Integer.parseInt(ele3);
		System.out.println("%%%%%%%%%%%%>" + item3_qty);
		return item3_qty;
	}

	public int item4_qty() {
		// calculating item4 total qty in review cart

		String ele3 = cart_qty_item4().getAttribute("value");
		int item4_qty = Integer.parseInt(ele3);
		System.out.println("%%%%%%%%%%%%>" + item4_qty);
		return item4_qty;
	}

	public double item1_unitprice() {
		// getting item1 unit price in review cart

		String value2 = cart_item1_price().getText();
		value2 = value2.substring(1);
		double d2 = Double.parseDouble(value2);
		System.out.println("#############>" + d2);
		return d2;
	}

	public double item2_unitprice() {
		// getting item2 unit price in review cart

		String value2 = cart_item2_price().getText();
		value2 = value2.substring(1);
		double d2 = Double.parseDouble(value2);
		System.out.println("#############>" + d2);
		return d2;
	}

	public double item3_unitprice() {
		// getting item1 unit price in review cart

		String value2 = cart_item3_price().getText();
		value2 = value2.substring(1);
		double d2 = Double.parseDouble(value2);
		System.out.println("#############>" + d2);
		return d2;
	}

	public double item4_unitprice() {
		// getting item1 unit price in review cart

		String value2 = cart_item4_price().getText();
		value2 = value2.substring(1);
		double d2 = Double.parseDouble(value2);
		System.out.println("#############>" + d2);
		return d2;
	}

	@Override
	public void csr_Student_club_subtotalprice_qty() {

		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		// calculating item1 total
		double item1_price = item1_price_reviewcart();

		// calculating item2 total
		double item2_price = item2_price_reviewcart();

		// calculating item3 total
		double item3_price = item3_price_reviewcart();

		// calculating item4 total
		double item4_price = item4_price_reviewcart();

		double StudentClub_Subtotal_Actual = item1_price + item2_price + item3_price + item4_price;
		StudentClub_Subtotal_Actual = Double
				.parseDouble(new DecimalFormat("##.##").format(StudentClub_Subtotal_Actual));

		String StudentClbSubTot = subTotal_StudentClubs().getText();
		StudentClbSubTot = StudentClbSubTot.substring(1);
		double Student_SubTotal = Double.parseDouble(StudentClbSubTot);
		Assert.assertEquals(Student_SubTotal, StudentClub_Subtotal_Actual, "Student Clubs Subtotal value is incorrect");

		int item1_qty = item1_qty();
		int item2_qty = item2_qty();
		int item3_qty = item3_qty();
		int item4_qty = item4_qty();
		int studentclub_totalqty = item1_qty + item2_qty + item3_qty + item4_qty;

		String StudentClub_Qty1 = qty_StudentClubs().getText();
		int StudentClub_Qty = Integer.parseInt(StudentClub_Qty1);
		Assert.assertEquals(studentclub_totalqty, StudentClub_Qty, "Student Clubs qty value is incorrect");

	}

	@Override
	public void csr_student_club_gst_pst() {
		int stateTaxGST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxGST");
		int stateTaxPST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxPST");

		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		double item1_unitprice = item1_unitprice();
		double item2_unitprice = item2_unitprice();
		double item3_unitprice = item3_unitprice();
		double item4_unitprice = item4_unitprice();

		int item1_qty = item1_qty();
		int item2_qty = item2_qty();
		int item3_qty = item3_qty();
		int item4_qty = item4_qty();

		double Student_GST_act = Student_GST();
		double Student_GST_exp = TaxRoundOff_item_1_Tax(stateTaxGST, item1_unitprice, item1_qty)
				+ TaxRoundOff_item_2_Tax(stateTaxGST, item2_unitprice, item2_qty)
				+ TaxRoundOff_item_3_Tax(stateTaxGST, item3_unitprice, item3_qty)
				+ TaxRoundOff_item_4_Tax(stateTaxGST, item4_unitprice, item4_qty);
		Student_GST_exp = Double.parseDouble(new DecimalFormat("##.##").format(Student_GST_exp));

		Assert.assertEquals(Student_GST_act, Student_GST_exp, "Student Club Subtotal GST value is incorrect");

		double Student_PST_act = Student_PST();
		System.out.println("Actual PST Value#############:" + Student_PST_act);
		double Student_PST_exp = TaxRoundOff_item_1_Tax(stateTaxPST, item1_unitprice, item1_qty)
				+ TaxRoundOff_item_2_Tax(stateTaxPST, item2_unitprice, item2_qty)
				+ TaxRoundOff_item_3_Tax(stateTaxPST, item3_unitprice, item3_qty)
				+ TaxRoundOff_item_4_Tax(stateTaxPST, item4_unitprice, item4_qty);
		Student_PST_exp = Double.parseDouble(new DecimalFormat("##.##").format(Student_PST_exp));

		Assert.assertEquals(Student_PST_act, Student_PST_exp, "Student Club Subtotal PST value is incorrect");
	}

	@Override
	public void csr_student_club_gst_qst() {
		int stateTaxGST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxGST");
		int stateTaxQST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxQST");

		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		double item1_unitprice = item1_unitprice();
		double item2_unitprice = item2_unitprice();
		double item3_unitprice = item3_unitprice();
		double item4_unitprice = item4_unitprice();

		int item1_qty = item1_qty();
		int item2_qty = item2_qty();
		int item3_qty = item3_qty();
		int item4_qty = item4_qty();

		double Student_GST_act = Student_GST();
		double Student_GST_exp = TaxRoundOff_item_1_Tax(stateTaxGST, item1_unitprice, item1_qty)
				+ TaxRoundOff_item_2_Tax(stateTaxGST, item2_unitprice, item2_qty)
				+ TaxRoundOff_item_3_Tax(stateTaxGST, item3_unitprice, item3_qty)
				+ TaxRoundOff_item_4_Tax(stateTaxGST, item4_unitprice, item4_qty);
		Student_GST_exp = Double.parseDouble(new DecimalFormat("##.##").format(Student_GST_exp));

		Assert.assertEquals(Student_GST_act, Student_GST_exp, "Student Club Subtotal GST value is incorrect");

		double Student_QST_act = Student_QST();
		System.out.println("Actual PST Value#############:" + Student_QST_act);
		double Student_QST_exp = TaxRoundOff_item_1_Tax(stateTaxQST, item1_unitprice, item1_qty)
				+ TaxRoundOff_item_2_Tax(stateTaxQST, item2_unitprice, item2_qty)
				+ TaxRoundOff_item_3_Tax(stateTaxQST, item3_unitprice, item3_qty)
				+ TaxRoundOff_item_4_Tax(stateTaxQST, item4_unitprice, item4_qty);
		Student_QST_exp = Double.parseDouble(new DecimalFormat("##.##").format(Student_QST_exp));

		Assert.assertEquals(Student_QST_act, Student_QST_exp, "Student Club Subtotal QST value is incorrect");
	}

	@Override
	public void csr_student_club_hst() {
		int stateTaxHST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxHST");

		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		double item1_unitprice = item1_unitprice();
		double item2_unitprice = item2_unitprice();
		double item3_unitprice = item3_unitprice();
		double item4_unitprice = item4_unitprice();

		int item1_qty = item1_qty();
		int item2_qty = item2_qty();
		int item3_qty = item3_qty();
		int item4_qty = item4_qty();

		double Student_HST_act = Student_HST();
		double Student_HST_exp = TaxRoundOff_item_1_Tax(stateTaxHST, item1_unitprice, item1_qty)
				+ TaxRoundOff_item_2_Tax(stateTaxHST, item2_unitprice, item2_qty)
				+ TaxRoundOff_item_3_Tax(stateTaxHST, item3_unitprice, item3_qty)
				+ TaxRoundOff_item_4_Tax(stateTaxHST, item4_unitprice, item4_qty);
		Student_HST_exp = Double.parseDouble(new DecimalFormat("##.##").format(Student_HST_exp));

		Assert.assertEquals(Student_HST_act, Student_HST_exp, "Student Club Subtotal HST value is incorrect");
	}

	@Override
	public void csr_student_club_gst() {
		int stateTaxGST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxGST");

		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		double item1_unitprice = item1_unitprice();
		double item2_unitprice = item2_unitprice();
		double item3_unitprice = item3_unitprice();
		double item4_unitprice = item4_unitprice();

		int item1_qty = item1_qty();
		int item2_qty = item2_qty();
		int item3_qty = item3_qty();
		int item4_qty = item4_qty();

		double Student_GST_act = Student_GST();
		double Student_GST_exp = TaxRoundOff_item_1_Tax(stateTaxGST, item1_unitprice, item1_qty)
				+ TaxRoundOff_item_2_Tax(stateTaxGST, item2_unitprice, item2_qty)
				+ TaxRoundOff_item_3_Tax(stateTaxGST, item3_unitprice, item3_qty)
				+ TaxRoundOff_item_4_Tax(stateTaxGST, item4_unitprice, item4_qty);
		Student_GST_exp = Double.parseDouble(new DecimalFormat("##.##").format(Student_GST_exp));

		Assert.assertEquals(Student_GST_act, Student_GST_exp, "Student Club Subtotal GST value is incorrect");
	}

	@Override
	public void csr_studentclub_teachercatalogues_notaxes() {
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		if (GST_Student_Clubs_Subtotal().isDisplayed()) {
			String Student_gst = GST_Student_Clubs_Subtotal().getText();
			Student_gst = Student_gst.substring(1);
			double Student_gst_2 = Double.parseDouble(Student_gst);
			System.out.println("################:" + Student_gst_2);
			double value = 0.0;
			System.out.println("%%%%%%%%%%%%%%%:" + value);
			Assert.assertEquals(Student_gst_2, value, "GST value is displayed for Student_Clubs_Subtotal");

		} else if (PST_Student_Clubs_Subtotal().isDisplayed()) {
			String Student_pst = PST_Student_Clubs_Subtotal().getText();
			Student_pst = Student_pst.substring(1);
			double Student_gst_2 = Double.parseDouble(Student_pst);
			double value = 0.0;
			Assert.assertEquals(value, Student_gst_2, "PST value is displayed for Student_Clubs_Subtotal");
		} else if (HST_Student_Clubs_Subtotal().isDisplayed()) {
			String Student_hst = HST_Student_Clubs_Subtotal().getText();
			Student_hst = Student_hst.substring(1);
			double Student_hst_2 = Double.parseDouble(Student_hst);
			double value = 0.0;
			Assert.assertNotEquals(value, Student_hst_2, "HST value is displayed for Student_Clubs_Subtotal");
		} else if (QST_Student_Clubs_Subtotal().isDisplayed()) {
			String Student_qst = QST_Student_Clubs_Subtotal().getText();
			Student_qst = Student_qst.substring(1);
			double Student_qst_2 = Double.parseDouble(Student_qst);
			double value = 0.0;
			Assert.assertNotEquals(value, Student_qst_2, "QST value is displayed for Student_Clubs_Subtotal");
		} else if (PST_Teacher_Catalogues_Subtotal().isDisplayed()) {
			String Teacher_pst = PST_Teacher_Catalogues_Subtotal().getText();
			Teacher_pst = Teacher_pst.substring(1);
			double Teacher_pst_2 = Double.parseDouble(Teacher_pst);
			double value = 0.0;
			Assert.assertEquals(value, Teacher_pst_2, "PST value is displayed for Teacher_Catalogues_Subtotal");
		} else if (HST_Teacher_Subtotal().isDisplayed()) {
			String Teacher_hst = HST_Teacher_Subtotal().getText();
			Teacher_hst = Teacher_hst.substring(1);
			double Teacher_hst_2 = Double.parseDouble(Teacher_hst);
			double value = 0.0;
			Assert.assertNotEquals(value, Teacher_hst_2, "HST value is displayed for Teacher_Catalogues_Subtotal");
		} else if (QST_Teacher_Catalogues_Subtotal().isDisplayed()) {
			String Teacher_qst = QST_Teacher_Catalogues_Subtotal().getText();
			Teacher_qst = Teacher_qst.substring(1);
			double Teacher_qst_2 = Double.parseDouble(Teacher_qst);
			double value = 0.0;
			Assert.assertNotEquals(value, Teacher_qst_2, "QST value is displayed for Teacher_Catalogues_Subtotal");
		} else if (GST_Teacher_Catalogues_Subtotal().isDisplayed()) {
			String Teacher_gst = GST_Teacher_Catalogues_Subtotal().getText();
			Teacher_gst = Teacher_gst.substring(1);
			double Teacher_gst_2 = Double.parseDouble(Teacher_gst);
			double value = 0.0;
			Assert.assertEquals(value, Teacher_gst_2, "GST value is displayed for Teacher_Catalogues_Subtotal");
		} else {
			System.out.println("no_taxes_are_charged_on_Student_and_Teacher_club_Subtotal_Total_amount");

		}

	}

	@Override
	public void csr_studentclub_total_posttax() {
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		// calculating item1 total
		double item1_price = item1_price_reviewcart();

		// calculating item2 total
		double item2_price = item2_price_reviewcart();

		// calculating item3 total
		double item3_price = item3_price_reviewcart();

		// calculating item4 total
		double item4_price = item4_price_reviewcart();

		double items_price = item1_price + item2_price + item3_price + item4_price;

		double Student_gst_act = Student_GST();
		double Student_pst_act = Student_PST();
		double Student_qst_act = Student_QST();
		double Student_hst_act = Student_HST();

		double total_tax = Student_gst_act + Student_pst_act + Student_qst_act + Student_hst_act;

		String StudentClubsTotal_Expected = Student_Clubs_Total().getText();
		StudentClubsTotal_Expected = StudentClubsTotal_Expected.substring(1);
		double StudentClubsTotal_exp = Double.parseDouble(StudentClubsTotal_Expected);
		System.out.println("StudentClubsTotal :::::::: " + StudentClubsTotal_exp);

		double StudentClubsTotal_Actual = items_price + total_tax;
		System.out.println("StudentClubsTotal_Actual :::::::: " + StudentClubsTotal_Actual);
		StudentClubsTotal_Actual = Double.parseDouble(new DecimalFormat("##.##").format(StudentClubsTotal_Actual));

		Assert.assertEquals(StudentClubsTotal_exp, StudentClubsTotal_Actual,
				"Student Clubs Post Tax Total value is incorrect");

	}

	@Override
	public void csr_studentclub_totalamt_owing_qty() {
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		// calculating item1 total
		double item1_price = item1_price_reviewcart();

		// calculating item2 total
		double item2_price = item2_price_reviewcart();

		// calculating item3 total
		double item3_price = item3_price_reviewcart();

		// calculating item4 total
		double item4_price = item4_price_reviewcart();

		double items_price = item1_price + item2_price + item3_price + item4_price;

		double Student_gst_act = Student_GST();
		double Student_pst_act = Student_PST();
		double Student_qst_act = Student_QST();
		double Student_hst_act = Student_HST();

		int item1_qty = item1_qty();
		int item2_qty = item2_qty();
		int item3_qty = item3_qty();
		int item4_qty = item4_qty();
		int studentclub_totalqty = item1_qty + item2_qty + item3_qty + item4_qty;

		double total_tax = Student_gst_act + Student_pst_act + Student_qst_act + Student_hst_act;

		String StudentClubsTotal_Expected = Student_Clubs_Total().getText();
		StudentClubsTotal_Expected = StudentClubsTotal_Expected.substring(1);
		double StudentClubsTotal_exp = Double.parseDouble(StudentClubsTotal_Expected);
		System.out.println("StudentClubsTotal :::::::: " + StudentClubsTotal_exp);

		double StudentClubsTotal_Actual = items_price + total_tax;
		System.out.println("StudentClubsTotal_Actual :::::::: " + StudentClubsTotal_Actual);
		StudentClubsTotal_Actual = Double.parseDouble(new DecimalFormat("##.##").format(StudentClubsTotal_Actual));

		Assert.assertEquals(StudentClubsTotal_exp, StudentClubsTotal_Actual,
				"Student Clubs Post Tax Total value is incorrect");

		String StudentClub_Qty1 = qty_StudentClubs().getText();
		int StudentClub_Qty = Integer.parseInt(StudentClub_Qty1);
		Assert.assertEquals(studentclub_totalqty, StudentClub_Qty, "Student Clubs qty value is incorrect");

	}

	@Override
	public void Browser_Close() {
		WebDriver driver = TestBaseProvider.getTestBase().getDriver();
		driver.close();

	}

	@Override
	public void CSR_adds_mul_Teacher_cat_items_to_cart_OrderEntryPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		fld1_FlyerCode_in_OrderEntryPage().click();
		fld1_FlyerCode_in_OrderEntryPage().clear();
		fld1_FlyerCode_in_OrderEntryPage()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("FlyerCode"));

		Item_Num_field_in_OrderEntryPage().click();
		Item_Num_field_in_OrderEntryPage().clear();
		Item_Num_field_in_OrderEntryPage().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ItemNum"));
		// Item_Num_field_in_OrderEntryPage().sendKeys("4B7");
		PauseUtil.pause(1000);
		Paid_QTY_field_in_OrderEntryPage().click();
		Paid_QTY_field_in_OrderEntryPage().clear();
		Paid_QTY_field_in_OrderEntryPage().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ItemQty"));
		PauseUtil.pause(1000);
		Item_Num_field2_in_OrderEntryPage().click();
		Item_Num_field2_in_OrderEntryPage().clear();
		Item_Num_field2_in_OrderEntryPage()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ItemNum2"));
		// Item_Num_field2_in_OrderEntryPage().sendKeys("5B7");
		PauseUtil.pause(1000);
		Paid_QTY_field2_in_OrderEntryPage().click();
		Paid_QTY_field2_in_OrderEntryPage().clear();
		Paid_QTY_field2_in_OrderEntryPage()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ItemQty2"));
		PauseUtil.pause(1000);
		Item_Num_field3_in_OrderEntryPage().click();
		Item_Num_field3_in_OrderEntryPage().clear();
		Item_Num_field3_in_OrderEntryPage()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ItemNum3"));
		// Item_Num_field3_in_OrderEntryPage().sendKeys("6B7");
		PauseUtil.pause(1000);
		Paid_QTY_field3_in_OrderEntryPage().click();
		Paid_QTY_field3_in_OrderEntryPage().clear();
		Paid_QTY_field3_in_OrderEntryPage()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ItemQty3"));

		PauseUtil.pause(1000);
		/*Item_Num_field4_in_OrderEntryPage().click();
		Item_Num_field4_in_OrderEntryPage().clear();
		PauseUtil.pause(1000);
		Paid_QTY_field4_in_OrderEntryPage().click();
		Paid_QTY_field4_in_OrderEntryPage().clear();*/

	}

	@Override
	public void CSR_adds_mul_Teacher_cat_items_from_diff_flyers_OrderEntryPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		fld1_FlyerCode_in_OrderEntryPage().click();
		fld1_FlyerCode_in_OrderEntryPage().clear();
		fld1_FlyerCode_in_OrderEntryPage()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("FlyerCode"));

		Item_Num_field_in_OrderEntryPage().click();
		Item_Num_field_in_OrderEntryPage().clear();
		Item_Num_field_in_OrderEntryPage().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ItemNum"));
		PauseUtil.pause(1000);
		Paid_QTY_field_in_OrderEntryPage().click();
		Paid_QTY_field_in_OrderEntryPage().clear();
		Paid_QTY_field_in_OrderEntryPage().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ItemQty"));
		PauseUtil.pause(1000);
		Item_Num_field2_in_OrderEntryPage().click();
		Item_Num_field2_in_OrderEntryPage().clear();
		Item_Num_field2_in_OrderEntryPage()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ItemNum2"));
		PauseUtil.pause(1000);
		Paid_QTY_field2_in_OrderEntryPage().click();
		Paid_QTY_field2_in_OrderEntryPage().clear();
		Paid_QTY_field2_in_OrderEntryPage()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ItemQty2"));
		PauseUtil.pause(1000);

		Item_Num_field3_in_OrderEntryPage().click();
		Item_Num_field3_in_OrderEntryPage().clear();
		Paid_QTY_field3_in_OrderEntryPage().click();
		Paid_QTY_field3_in_OrderEntryPage().clear();
		PauseUtil.pause(1000);
		/*Item_Num_field4_in_OrderEntryPage().click();
		Item_Num_field4_in_OrderEntryPage().clear();
		PauseUtil.pause(1000);
		Paid_QTY_field4_in_OrderEntryPage().click();
		Paid_QTY_field4_in_OrderEntryPage().clear();*/

		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);
		fld2_FlyerCode_in_OrderEntryPage().click();
		fld2_FlyerCode_in_OrderEntryPage().clear();
		fld2_FlyerCode_in_OrderEntryPage()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("FlyerCode2"));

		frm2_Item_Num_field1_in_OrderEntryPage().click();
		frm2_Item_Num_field1_in_OrderEntryPage().clear();
		frm2_Item_Num_field1_in_OrderEntryPage()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ItemNum3"));
		PauseUtil.pause(1000);
		frm2_Paid_QTY_field1_in_OrderEntryPage().click();
		frm2_Paid_QTY_field1_in_OrderEntryPage().clear();
		frm2_Paid_QTY_field1_in_OrderEntryPage()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ItemQty3"));

	}

	@Override
	public void CSR_adds_Teacher_cat_items_from_diff_flyers_to_cart_OrderEntryPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		fld1_FlyerCode_in_OrderEntryPage().click();
		fld1_FlyerCode_in_OrderEntryPage().clear();
		fld1_FlyerCode_in_OrderEntryPage()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("FlyerCode"));

		Item_Num_field_in_OrderEntryPage().click();
		Item_Num_field_in_OrderEntryPage().clear();
		Item_Num_field_in_OrderEntryPage().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ItemNum"));
		PauseUtil.pause(1000);
		Paid_QTY_field_in_OrderEntryPage().click();
		Paid_QTY_field_in_OrderEntryPage().clear();
		Paid_QTY_field_in_OrderEntryPage().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ItemQty"));
		PauseUtil.pause(1000);
		Item_Num_field2_in_OrderEntryPage().click();
		Item_Num_field2_in_OrderEntryPage().clear();
		Item_Num_field2_in_OrderEntryPage()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ItemNum2"));
		PauseUtil.pause(1000);
		Paid_QTY_field2_in_OrderEntryPage().click();
		Paid_QTY_field2_in_OrderEntryPage().clear();
		Paid_QTY_field2_in_OrderEntryPage()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ItemQty2"));
		PauseUtil.pause(1000);

		fld2_FlyerCode_in_OrderEntryPage().click();
		fld2_FlyerCode_in_OrderEntryPage().clear();
		fld2_FlyerCode_in_OrderEntryPage()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("FlyerCode2"));

		frm2_Item_Num_field1_in_OrderEntryPage().click();
		frm2_Item_Num_field1_in_OrderEntryPage().clear();
		frm2_Item_Num_field1_in_OrderEntryPage()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ItemNum3"));
		PauseUtil.pause(1000);
		frm2_Paid_QTY_field1_in_OrderEntryPage().click();
		frm2_Paid_QTY_field1_in_OrderEntryPage().clear();
		frm2_Paid_QTY_field1_in_OrderEntryPage()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ItemQty3"));

	}

	@Override
	public void CSR_adds_mul_Student_clubs_items_to_cart_OrderEntryPage() {
		/*
		 * PauseUtil.waitForAjaxToComplete(2500); PauseUtil.pause(2000);
		 * 
		 * tab_Student_Orders_OrderEntryPage().click();
		 * 
		 * fld_FlyerCode_in_OrderEntryPage().click();
		 * fld_FlyerCode_in_OrderEntryPage().clear();
		 * fld_FlyerCode_in_OrderEntryPage().sendKeys(TestBaseProvider.
		 * getTestBase().getTestData().getString("FlyerCode"));
		 * 
		 * Item_Num_field_Student_in_OrderEntryPage().click();
		 * Item_Num_field_Student_in_OrderEntryPage().clear();
		 * Item_Num_field_Student_in_OrderEntryPage().sendKeys(TestBaseProvider.
		 * getTestBase().getTestData().getString("S_ItemNum"));
		 * PauseUtil.pause(1000);
		 * Paid_QTY_field_Student_in_OrderEntryPage().click();
		 * Paid_QTY_field_Student_in_OrderEntryPage().clear();
		 * Paid_QTY_field_Student_in_OrderEntryPage().sendKeys(TestBaseProvider.
		 * getTestBase().getTestData().getString("S_ItemQty"));
		 * PauseUtil.pause(1000);
		 * Item_Num_field2_Student_in_OrderEntryPage().click();
		 * Item_Num_field2_Student_in_OrderEntryPage().clear();
		 * Item_Num_field2_Student_in_OrderEntryPage().sendKeys(TestBaseProvider
		 * .getTestBase().getTestData().getString("S_ItemNum2"));
		 * PauseUtil.pause(1000);
		 * Paid_QTY_field2_Student_in_OrderEntryPage().click();
		 * Paid_QTY_field2_Student_in_OrderEntryPage().clear();
		 * Paid_QTY_field2_Student_in_OrderEntryPage().sendKeys(TestBaseProvider
		 * .getTestBase().getTestData().getString("S_ItemQty2"));
		 * PauseUtil.pause(1000);
		 * Item_Num_field3_Student_in_OrderEntryPage().click();
		 * Item_Num_field3_Student_in_OrderEntryPage().clear();
		 * Item_Num_field3_Student_in_OrderEntryPage().sendKeys(TestBaseProvider
		 * .getTestBase().getTestData().getString("S_ItemNum3"));
		 * PauseUtil.pause(1000);
		 * Paid_QTY_field3_Student_in_OrderEntryPage().click();
		 * Paid_QTY_field3_Student_in_OrderEntryPage().clear();
		 * Paid_QTY_field3_Student_in_OrderEntryPage().sendKeys(TestBaseProvider
		 * .getTestBase().getTestData().getString("S_ItemQty3"));
		 */

		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		fld1_FlyerCode_in_OrderEntryPage().click();
		fld1_FlyerCode_in_OrderEntryPage().clear();
		fld1_FlyerCode_in_OrderEntryPage()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("FlyerCode"));

		Item_Num_field_in_OrderEntryPage().click();
		Item_Num_field_in_OrderEntryPage().clear();
		Item_Num_field_in_OrderEntryPage().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ItemNum"));
		PauseUtil.pause(1000);
		Paid_QTY_field_in_OrderEntryPage().click();
		Paid_QTY_field_in_OrderEntryPage().clear();
		Paid_QTY_field_in_OrderEntryPage().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ItemQty"));
		PauseUtil.pause(1000);
		Item_Num_field2_in_OrderEntryPage().click();
		Item_Num_field2_in_OrderEntryPage().clear();
		Item_Num_field2_in_OrderEntryPage()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ItemNum2"));
		PauseUtil.pause(1000);
		Paid_QTY_field2_in_OrderEntryPage().click();
		Paid_QTY_field2_in_OrderEntryPage().clear();
		Paid_QTY_field2_in_OrderEntryPage()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ItemQty2"));
		PauseUtil.pause(1000);
		Item_Num_field3_in_OrderEntryPage().click();
		Item_Num_field3_in_OrderEntryPage().clear();
		Item_Num_field3_in_OrderEntryPage()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ItemNum3"));
		PauseUtil.pause(1000);
		Paid_QTY_field3_in_OrderEntryPage().click();
		Paid_QTY_field3_in_OrderEntryPage().clear();
		Paid_QTY_field3_in_OrderEntryPage()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ItemQty3"));

	}

	@Override
	public void verify_Teacher_Cat_table_expanded_ReviewCartPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			btn_Minus_YTO_section_ReviewCartPage().isDisplayed();
			System.out.println("Teacher Exclusives table is expanded by default in Review Cart page");
		} catch (Exception e) {
			Assert.fail("Teacher Exclusives table is not expanded by default in Review Cart page");
		}

		try {
			items_YTO_ReviewCartPage_CSR().isDisplayed();
			System.out.println("Teacher Exclusives items are displayed in Review Cart page");
		} catch (Exception e) {
			Assert.fail("Teacher Exclusives items are not displayed in Review Cart page");
		}

	}

	@Override
	public void verify_Teacher_Cat_table_is_not_displayed_ReviewCartPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			hdr_section_TeacherCatalogues_ReviewCartPage().isDisplayed();
			Assert.fail(
					"Teacher Catalogues table is displayed in Review cart page when CSR adds Students items to the cart");
		} catch (Exception e) {
			System.out.println("Teacher Catalogues table is not displayed in Review cart page");
		}

	}

	@Override
	public void CSR_clicks_on_minus_btn_YTO_in_ReviewCartPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		btn_Minus_YTO_section_ReviewCartPage().click();
	}

	@Override
	public void CSR_clicks_on_Plus_btn_YTO_in_ReviewCartPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		btn_Plus_YTO_section_ReviewCartPage().click();
	}

	@Override
	public void verify_YTO_table_is_hidden_in_ReviewCartPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			btn_Plus_YTO_section_ReviewCartPage().isDisplayed();
			System.out.println("Teacher Orders table is hidden in Review Cart page");
		} catch (Exception e) {
			Assert.fail("Teacher Orders table is not hidden in Review Cart page");
		}

	}

	@Override
	public void verify_the_added_items_header_order_in_ReviewCartPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_text = header_ITEM_YTO_CSR_ReviewCartPage().getText();
		act_text = act_text.trim();
		String exp_text = "ITEM #";
		Assert.assertEquals(act_text, exp_text, "ITEM # header is not in order in Review Cart page");

		String act_text2 = header_TITLE_YTO_CSR_ReviewCartPage().getText();
		act_text2 = act_text2.trim();
		String exp_text2 = "TITLE";
		Assert.assertEquals(act_text2, exp_text2, "TITLE header is not in order in Review Cart page");

		String act_text3 = header_FLYER_YTO_CSR_ReviewCartPage().getText();
		act_text3 = act_text3.trim();
		String exp_text3 = "FLYER";
		Assert.assertEquals(act_text3, exp_text3, "FLYER header is not in order in Review Cart page");

		String act_text4 = header_PRICE_YTO_CSR_ReviewCartPage().getText();
		act_text4 = act_text4.trim();
		String exp_text4 = "PRICE";
		Assert.assertEquals(act_text4, exp_text4, "PRICE header is not in order in Review Cart page");

		String act_text5 = header_QTY_YTO_CSR_ReviewCartPage().getText();
		act_text5 = act_text5.trim();
		String exp_text5 = "QUANTITY";
		Assert.assertEquals(act_text5, exp_text5, "QTY. header is not in order in Review Cart page");

	}

	@Override
	public void verify_the_added_items_details_displayed_correctly_in_ReviewCartPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_Item = fld1_Item_num_YTO_CSR_ReviewCartPage().getText();
		act_Item = act_Item.trim();
		String exp_Item = TestBaseProvider.getTestBase().getTestData().getString("ItemNum");
		exp_Item=exp_Item+"B1";
		Assert.assertEquals(act_Item, exp_Item, "Item number is incorrect for YTO in Review cart page");

		String act_Title = fld1_Title_YTO_CSR_ReviewCartPage().getText();
		act_Title = act_Title.trim();
		String exp_Title = TestBaseProvider.getTestBase().getTestData().getString("Title");
		Assert.assertEquals(act_Title, exp_Title, "Item Title is incorrect for YTO in Review cart page");

		String act_Flyer = fld1_Flyer_YTO_CSR_ReviewCartPage().getText();
		act_Flyer = act_Flyer.trim();
		String exp_Flyer = TestBaseProvider.getTestBase().getTestData().getString("FlyerName");
		Assert.assertEquals(act_Flyer, exp_Flyer, "Item Flyer name is incorrect for YTO in Review cart page");

		String act_Price = fld1_Price_YTO_CSR_ReviewCartPage().getText();
		act_Price = act_Price.trim();
		act_Price = act_Price.substring(1);
		Double actualPrice = Double.parseDouble(act_Price);
		Double exp_Price = TestBaseProvider.getTestBase().getTestData().getDouble("ItemPrice");
		Assert.assertEquals(actualPrice, exp_Price, "Item Price is incorrect for YTO in Review cart page");

		String act_Qty = fld1_Qty_YTO_CSR_ReviewCartPage().getAttribute("value");
		act_Qty = act_Qty.trim();
		String exp_Qty = TestBaseProvider.getTestBase().getTestData().getString("ItemQty");
		Assert.assertEquals(act_Qty, exp_Qty, "Item Qty is incorrect for YTO in Review cart page");

	}

	@Override
	public void verify_the_items_list_is_in_ascending_order_in_ReviewCartPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		int list_Size = List_all_YTO_items_CSR_ReviewCartPage().size();
		List<String> scores = new ArrayList<String>();
		for (int i = 0; i < list_Size; i++) {
			WebElement list = List_all_YTO_items_CSR_ReviewCartPage().get(i);
			String list_text = list.getText();
			System.out.println("##########:" + list_text);

			scores.add(list_text);
		}
		System.out.println("@@@@@@@@@@@@@@" + scores);

		List<String> scores2 = new ArrayList<String>(scores);
		Collections.sort(scores2);
		System.out.println("^^^^^^^^^^^^^:" + scores2);

		Assert.assertEquals(scores2, scores, "Items list is not in acsending order");

	}

	@Override
	public void verify_Single_table_displays_with_all_items_under_TeacherCatalogues_in_ReviewCartPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			table_YTO_items_ReviewCartPage().isDisplayed();
			System.out.println("Single table is displayed under Teacher Catalogues in Review Cart page");
		} catch (Exception e) {
			Assert.fail("Single table is not displayed under Teacher Catalogues in Review Cart page");
		}

		try {
			items_YTO_ReviewCartPage_CSR().isDisplayed();
			System.out.println("All the items are listed under Teacher Catalogues in Review Cart page");
		} catch (Exception e) {
			Assert.fail("All the items are not listed under Teacher Catalogues in Review Cart page");
		}

	}

	@Override
	public void Validation_of_CSR_Teacher_club_SubTotal_GST_QST_and_TotalOwing() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		int stateTaxGST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxGST");
		double stateTaxQST = TestBaseProvider.getTestBase().getTestData().getDouble("stateTaxQST");

		String value1 = cart_item1_price().getText();
		String ele1 = cart_qty_item1().getAttribute("value");
		value1 = value1.trim();
		value1 = value1.substring(1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item1_price = d1 * a1;
		item1_price = Double.parseDouble(new DecimalFormat("##.##").format(item1_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item1_price);

		String value2 = cart_item2_price().getText();
		String ele2 = cart_qty_item2().getAttribute("value");
		value2 = value2.trim();
		value2 = value2.substring(1);
		double d2 = Double.parseDouble(value2);
		System.out.println("#############>" + d2);
		int a2 = Integer.parseInt(ele2);
		System.out.println("%%%%%%%%%%%%>" + a2);
		double item2_price = d2 * a2;
		item2_price = Double.parseDouble(new DecimalFormat("##.##").format(item2_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item2_price);

		String value3 = cart_item3_price().getText();
		String ele3 = cart_qty_item3().getAttribute("value");
		value3 = value3.trim();
		value3 = value3.substring(1);
		double d3 = Double.parseDouble(value3);
		System.out.println("#############>" + d3);
		int a3 = Integer.parseInt(ele3);
		System.out.println("%%%%%%%%%%%%>" + a3);
		double item3_price = d3 * a3;
		item3_price = Double.parseDouble(new DecimalFormat("##.##").format(item3_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item3_price);

		double Teacher_SubTotal_exp = item1_price + item2_price + item3_price;
		Teacher_SubTotal_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_SubTotal_exp));

		String TeacherClbSubTot = SubTotal_TeacherCatalogues_CSR().getText();
		TeacherClbSubTot = TeacherClbSubTot.substring(1);
		double Teacher_SubTotal = Double.parseDouble(TeacherClbSubTot);
		Assert.assertEquals(Teacher_SubTotal, Teacher_SubTotal_exp, "Teacher Catalogues Subtotal value is incorrect");

		double Teacher_GST_act = Teacher_GST();
		double Teacher_GST_exp = TaxRoundOff_item_1_Tax(stateTaxGST, d1, a1)
				+ TaxRoundOff_item_2_Tax(stateTaxGST, d2, a2) + TaxRoundOff_item_3_Tax(stateTaxGST, d3, a3);
		Teacher_GST_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_GST_exp));
		Assert.assertEquals(Teacher_GST_act, Teacher_GST_exp, "Teacher Catalogues Subtotal GST value is incorrect");

		double Teacher_QST_act = Teacher_QST();
		double Teacher_QST_exp = TaxRoundOff_item_1_Tax(stateTaxQST, d1, a1)
				+ TaxRoundOff_item_2_Tax(stateTaxQST, d2, a2) + TaxRoundOff_item_3_Tax(stateTaxQST, d3, a3);
		Teacher_QST_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_QST_exp));
		Assert.assertEquals(Teacher_QST_act, Teacher_QST_exp, "Teacher Catalogues Subtotal QST value is incorrect");

		String TeacherCataloguesTotal_Actual = Teacher_Catalogues_Total().getText();
		TeacherCataloguesTotal_Actual = TeacherCataloguesTotal_Actual.substring(1);
		double TeacherCataloguesTotal_Act = Double.parseDouble(TeacherCataloguesTotal_Actual);
		System.out.println("TeacherCataloguesTotal_Actual :::::::: " + TeacherCataloguesTotal_Act);

		double TeacherCataloguesTotal_Expected = Teacher_SubTotal_exp + Teacher_GST_exp + Teacher_QST_exp;
		TeacherCataloguesTotal_Expected = Double
				.parseDouble(new DecimalFormat("##.##").format(TeacherCataloguesTotal_Expected));
		System.out.println("TeacherCataloguesTotal_Expected :::::::: " + TeacherCataloguesTotal_Expected);
		Assert.assertEquals(TeacherCataloguesTotal_Act, TeacherCataloguesTotal_Expected,
				"Teacher Catalogues Total value is incorrect");

		String Total_Amt_Owing_Actual = Total_Amount_Owing().getText();
		Total_Amt_Owing_Actual = Total_Amt_Owing_Actual.substring(1);
		double Total_Amt_Owing_Act = Double.parseDouble(Total_Amt_Owing_Actual);
		Assert.assertEquals(Total_Amt_Owing_Act, TeacherCataloguesTotal_Expected,
				"Teacher Catalogues Total owing value is incorrect");
	}

	@Override
	public void Validation_of_CSR_Teacher_club_SubTotal_GST_PST_and_TotalOwing() {
		PauseUtil.waitForAjaxToComplete(5000);
		PauseUtil.pause(2000);

		int stateTaxGST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxGST");
		int stateTaxPST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxPST");

		String value1 = cart_item1_price().getText();
		String ele1 = cart_qty_item1().getAttribute("value");
		value1 = value1.trim();
		value1 = value1.substring(1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item1_price = d1 * a1;
		item1_price = Double.parseDouble(new DecimalFormat("##.##").format(item1_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item1_price);

		String value2 = cart_item2_price().getText();
		String ele2 = cart_qty_item2().getAttribute("value");
		value2 = value2.trim();
		value2 = value2.substring(1);
		double d2 = Double.parseDouble(value2);
		System.out.println("#############>" + d2);
		int a2 = Integer.parseInt(ele2);
		System.out.println("%%%%%%%%%%%%>" + a2);
		double item2_price = d2 * a2;
		item2_price = Double.parseDouble(new DecimalFormat("##.##").format(item2_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item2_price);

		String value3 = cart_item3_price().getText();
		String ele3 = cart_qty_item3().getAttribute("value");
		value3 = value3.trim();
		value3 = value3.substring(1);
		double d3 = Double.parseDouble(value3);
		System.out.println("#############>" + d3);
		int a3 = Integer.parseInt(ele3);
		System.out.println("%%%%%%%%%%%%>" + a3);
		double item3_price = d3 * a3;
		item3_price = Double.parseDouble(new DecimalFormat("##.##").format(item3_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item3_price);

		double Teacher_SubTotal_exp = item1_price + item2_price + item3_price;
		Teacher_SubTotal_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_SubTotal_exp));

		String TeacherClbSubTot = SubTotal_TeacherCatalogues_CSR().getText();
		TeacherClbSubTot = TeacherClbSubTot.substring(1);
		double Teacher_SubTotal = Double.parseDouble(TeacherClbSubTot);
		Assert.assertEquals(Teacher_SubTotal, Teacher_SubTotal_exp, "Teacher Catalogues Subtotal value is incorrect");

		double Teacher_GST_act = Teacher_GST();
		double Teacher_GST_exp = TaxRoundOff_item_1_Tax(stateTaxGST, d1, a1)
				+ TaxRoundOff_item_2_Tax(stateTaxGST, d2, a2) + TaxRoundOff_item_3_Tax(stateTaxGST, d3, a3);
		Teacher_GST_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_GST_exp));
		Assert.assertEquals(Teacher_GST_act, Teacher_GST_exp, "Teacher Catalogues Subtotal GST value is incorrect");

		double Teacher_PST_act = Teacher_PST();
		double Teacher_PST_exp = TaxRoundOff_item_1_Tax(stateTaxPST, d1, a1)
				+ TaxRoundOff_item_2_Tax(stateTaxPST, d2, a2) + TaxRoundOff_item_3_Tax(stateTaxPST, d3, a3);
		Teacher_PST_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_PST_exp));
		Assert.assertEquals(Teacher_PST_act, Teacher_PST_exp, "Teacher Catalogues Subtotal PST value is incorrect");

		String TeacherCataloguesTotal_Actual = Teacher_Catalogues_Total().getText();
		TeacherCataloguesTotal_Actual = TeacherCataloguesTotal_Actual.substring(1);
		double TeacherCataloguesTotal_Act = Double.parseDouble(TeacherCataloguesTotal_Actual);
		System.out.println("TeacherCataloguesTotal_Actual :::::::: " + TeacherCataloguesTotal_Act);

		double TeacherCataloguesTotal_Expected = Teacher_SubTotal_exp + Teacher_GST_exp + Teacher_PST_exp;
		TeacherCataloguesTotal_Expected = Double
				.parseDouble(new DecimalFormat("##.##").format(TeacherCataloguesTotal_Expected));
		System.out.println("TeacherCataloguesTotal_Expected :::::::: " + TeacherCataloguesTotal_Expected);
		Assert.assertEquals(TeacherCataloguesTotal_Act, TeacherCataloguesTotal_Expected,
				"Teacher Catalogues Total value is incorrect");

		String Total_Amt_Owing_Actual = Total_Amount_Owing().getText();
		Total_Amt_Owing_Actual = Total_Amt_Owing_Actual.substring(1);
		double Total_Amt_Owing_Act = Double.parseDouble(Total_Amt_Owing_Actual);
		Assert.assertEquals(Total_Amt_Owing_Act, TeacherCataloguesTotal_Expected,
				"Teacher Catalogues Total owing value is incorrect");
	}

	@Override
	public void Validation_of_CSR_Teacher_club_SubTotal_HST_and_TotalOwing() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		double stateTaxHST = TestBaseProvider.getTestBase().getTestData().getDouble("stateTaxHST");

		String value1 = cart_item1_price().getText();
		String ele1 = cart_qty_item1().getAttribute("value");
		value1 = value1.trim();
		value1 = value1.substring(1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item1_price = d1 * a1;
		item1_price = Double.parseDouble(new DecimalFormat("##.##").format(item1_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item1_price);

		String value2 = cart_item2_price().getText();
		String ele2 = cart_qty_item2().getAttribute("value");
		value2 = value2.trim();
		value2 = value2.substring(1);
		double d2 = Double.parseDouble(value2);
		System.out.println("#############>" + d2);
		int a2 = Integer.parseInt(ele2);
		System.out.println("%%%%%%%%%%%%>" + a2);
		double item2_price = d2 * a2;
		item2_price = Double.parseDouble(new DecimalFormat("##.##").format(item2_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item2_price);

		String value3 = cart_item3_price().getText();
		String ele3 = cart_qty_item3().getAttribute("value");
		value3 = value3.trim();
		value3 = value3.substring(1);
		double d3 = Double.parseDouble(value3);
		System.out.println("#############>" + d3);
		int a3 = Integer.parseInt(ele3);
		System.out.println("%%%%%%%%%%%%>" + a3);
		double item3_price = d3 * a3;
		item3_price = Double.parseDouble(new DecimalFormat("##.##").format(item3_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item3_price);

		double Teacher_SubTotal_exp = item1_price + item2_price + item3_price;
		Teacher_SubTotal_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_SubTotal_exp));

		String TeacherClbSubTot = SubTotal_TeacherCatalogues_CSR().getText();
		TeacherClbSubTot = TeacherClbSubTot.substring(1);
		double Teacher_SubTotal = Double.parseDouble(TeacherClbSubTot);
		Assert.assertEquals(Teacher_SubTotal, Teacher_SubTotal_exp, "Teacher Catalogues Subtotal value is incorrect");

		double Teacher_HST_act = Teacher_HST();
		double Teacher_HST_exp = TaxRoundOff_item_1_Tax(stateTaxHST, d1, a1)
				+ TaxRoundOff_item_2_Tax(stateTaxHST, d2, a2) + TaxRoundOff_item_3_Tax(stateTaxHST, d3, a3);
		Teacher_HST_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_HST_exp));
		Assert.assertEquals(Teacher_HST_act, Teacher_HST_exp, "Teacher Catalogues Subtotal HST value is incorrect");

		String TeacherCataloguesTotal_Actual = Teacher_Catalogues_Total().getText();
		TeacherCataloguesTotal_Actual = TeacherCataloguesTotal_Actual.substring(1);
		double TeacherCataloguesTotal_Act = Double.parseDouble(TeacherCataloguesTotal_Actual);
		System.out.println("TeacherCataloguesTotal_Actual :::::::: " + TeacherCataloguesTotal_Act);

		double TeacherCataloguesTotal_Expected = Teacher_SubTotal_exp + Teacher_HST_exp;
		TeacherCataloguesTotal_Expected = Double
				.parseDouble(new DecimalFormat("##.##").format(TeacherCataloguesTotal_Expected));
		System.out.println("TeacherCataloguesTotal_Expected :::::::: " + TeacherCataloguesTotal_Expected);
		Assert.assertEquals(TeacherCataloguesTotal_Act, TeacherCataloguesTotal_Expected,
				"Teacher Catalogues Total value is incorrect");

		String Total_Amt_Owing_Actual = Total_Amount_Owing().getText();
		Total_Amt_Owing_Actual = Total_Amt_Owing_Actual.substring(1);
		double Total_Amt_Owing_Act = Double.parseDouble(Total_Amt_Owing_Actual);
		Assert.assertEquals(Total_Amt_Owing_Act, TeacherCataloguesTotal_Expected,
				"Teacher Catalogues Total owing value is incorrect");

	}

	@Override
	public void Validation_of_CSR_Teacher_club_SubTotal_GST_and_TotalOwing() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		double stateTaxGST = TestBaseProvider.getTestBase().getTestData().getDouble("stateTaxGST");

		String value1 = cart_item1_price().getText();
		String ele1 = cart_qty_item1().getAttribute("value");
		value1 = value1.trim();
		value1 = value1.substring(1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item1_price = d1 * a1;
		item1_price = Double.parseDouble(new DecimalFormat("##.##").format(item1_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item1_price);

		String value2 = cart_item2_price().getText();
		String ele2 = cart_qty_item2().getAttribute("value");
		value2 = value2.trim();
		value2 = value2.substring(1);
		double d2 = Double.parseDouble(value2);
		System.out.println("#############>" + d2);
		int a2 = Integer.parseInt(ele2);
		System.out.println("%%%%%%%%%%%%>" + a2);
		double item2_price = d2 * a2;
		item2_price = Double.parseDouble(new DecimalFormat("##.##").format(item2_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item2_price);

		String value3 = cart_item3_price().getText();
		String ele3 = cart_qty_item3().getAttribute("value");
		value3 = value3.trim();
		value3 = value3.substring(1);
		double d3 = Double.parseDouble(value3);
		System.out.println("#############>" + d3);
		int a3 = Integer.parseInt(ele3);
		System.out.println("%%%%%%%%%%%%>" + a3);
		double item3_price = d3 * a3;
		item3_price = Double.parseDouble(new DecimalFormat("##.##").format(item3_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item3_price);

		double Teacher_SubTotal_exp = item1_price + item2_price + item3_price;
		Teacher_SubTotal_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_SubTotal_exp));

		String TeacherClbSubTot = SubTotal_TeacherCatalogues_CSR().getText();
		TeacherClbSubTot = TeacherClbSubTot.substring(1);
		double Teacher_SubTotal = Double.parseDouble(TeacherClbSubTot);
		Assert.assertEquals(Teacher_SubTotal, Teacher_SubTotal_exp, "Teacher Catalogues Subtotal value is incorrect");

		double Teacher_GST_act = Teacher_GST();
		double Teacher_GST_exp = TaxRoundOff_item_1_Tax(stateTaxGST, d1, a1)
				+ TaxRoundOff_item_2_Tax(stateTaxGST, d2, a2) + TaxRoundOff_item_3_Tax(stateTaxGST, d3, a3);
		Teacher_GST_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_GST_exp));
		Assert.assertEquals(Teacher_GST_act, Teacher_GST_exp, "Teacher Catalogues Subtotal GST value is incorrect");

		String TeacherCataloguesTotal_Actual = Teacher_Catalogues_Total().getText();
		TeacherCataloguesTotal_Actual = TeacherCataloguesTotal_Actual.substring(1);
		double TeacherCataloguesTotal_Act = Double.parseDouble(TeacherCataloguesTotal_Actual);
		System.out.println("TeacherCataloguesTotal_Actual :::::::: " + TeacherCataloguesTotal_Act);

		double TeacherCataloguesTotal_Expected = Teacher_SubTotal_exp + Teacher_GST_exp;
		TeacherCataloguesTotal_Expected = Double
				.parseDouble(new DecimalFormat("##.##").format(TeacherCataloguesTotal_Expected));
		System.out.println("TeacherCataloguesTotal_Expected :::::::: " + TeacherCataloguesTotal_Expected);
		Assert.assertEquals(TeacherCataloguesTotal_Act, TeacherCataloguesTotal_Expected,
				"Teacher Catalogues Total value is incorrect");

		String Total_Amt_Owing_Actual = Total_Amount_Owing().getText();
		Total_Amt_Owing_Actual = Total_Amt_Owing_Actual.substring(1);
		double Total_Amt_Owing_Act = Double.parseDouble(Total_Amt_Owing_Actual);
		Assert.assertEquals(Total_Amt_Owing_Act, TeacherCataloguesTotal_Expected,
				"Teacher Catalogues Total owing value is incorrect");

	}

	@Override
	public void Validation_of_no_taxes_are_charged_on_CSR_Teacher_club_Subtotal_Total_amount() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		if (GST_Teacher_Catalogues_Subtotal().isDisplayed()) {
			String Teacher_gst = GST_Teacher_Catalogues_Subtotal().getText();
			Teacher_gst = Teacher_gst.substring(1);
			double Teacher_gst_2 = Double.parseDouble(Teacher_gst);
			double value = 0.0;
			Assert.assertEquals(value, Teacher_gst_2, "GST value is displayed for Teacher_Catalogues_Subtotal");
		} else if (PST_Teacher_Catalogues_Subtotal().isDisplayed()) {
			String Teacher_pst = PST_Teacher_Catalogues_Subtotal().getText();
			Teacher_pst = Teacher_pst.substring(1);
			double Teacher_pst_2 = Double.parseDouble(Teacher_pst);
			double value = 0.0;
			Assert.assertEquals(value, Teacher_pst_2, "PST value is displayed for Teacher_Catalogues_Subtotal");

		} else {
			Assert.fail("No taxes are displayed");

		}

		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String value1 = cart_item1_price().getText();
		String ele1 = cart_qty_item1().getAttribute("value");
		value1 = value1.trim();
		value1 = value1.substring(1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item1_price = d1 * a1;
		item1_price = Double.parseDouble(new DecimalFormat("##.##").format(item1_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item1_price);

		String value2 = cart_item2_price().getText();
		String ele2 = cart_qty_item2().getAttribute("value");
		value2 = value2.trim();
		value2 = value2.substring(1);
		double d2 = Double.parseDouble(value2);
		System.out.println("#############>" + d2);
		int a2 = Integer.parseInt(ele2);
		System.out.println("%%%%%%%%%%%%>" + a2);
		double item2_price = d2 * a2;
		item2_price = Double.parseDouble(new DecimalFormat("##.##").format(item2_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item2_price);

		String value3 = cart_item3_price().getText();
		String ele3 = cart_qty_item3().getAttribute("value");
		value3 = value3.trim();
		value3 = value3.substring(1);
		double d3 = Double.parseDouble(value3);
		System.out.println("#############>" + d3);
		int a3 = Integer.parseInt(ele3);
		System.out.println("%%%%%%%%%%%%>" + a3);
		double item3_price = d3 * a3;
		item3_price = Double.parseDouble(new DecimalFormat("##.##").format(item3_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item3_price);

		double Teacher_SubTotal_exp = item1_price + item2_price + item3_price;
		Teacher_SubTotal_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_SubTotal_exp));

		String TeacherClbSubTot = SubTotal_TeacherCatalogues_CSR().getText();
		TeacherClbSubTot = TeacherClbSubTot.substring(1);
		double Teacher_SubTotal = Double.parseDouble(TeacherClbSubTot);
		Assert.assertEquals(Teacher_SubTotal, Teacher_SubTotal_exp, "Teacher Catalogues Subtotal value is incorrect");

		String TeacherCataloguesTotal_Actual = Teacher_Catalogues_Total().getText();
		TeacherCataloguesTotal_Actual = TeacherCataloguesTotal_Actual.substring(1);
		double TeacherCataloguesTotal_Act = Double.parseDouble(TeacherCataloguesTotal_Actual);
		System.out.println("TeacherCataloguesTotal_Actual :::::::: " + TeacherCataloguesTotal_Act);

		double TeacherCataloguesTotal_Expected = Teacher_SubTotal_exp;
		TeacherCataloguesTotal_Expected = Double
				.parseDouble(new DecimalFormat("##.##").format(TeacherCataloguesTotal_Expected));
		System.out.println("TeacherCataloguesTotal_Expected :::::::: " + TeacherCataloguesTotal_Expected);
		Assert.assertEquals(TeacherCataloguesTotal_Act, TeacherCataloguesTotal_Expected,
				"Teacher Catalogues Total value is incorrect");

		String Total_Amt_Owing_Actual = Total_Amount_Owing().getText();
		Total_Amt_Owing_Actual = Total_Amt_Owing_Actual.substring(1);
		double Total_Amt_Owing_Act = Double.parseDouble(Total_Amt_Owing_Actual);
		Assert.assertEquals(Total_Amt_Owing_Act, TeacherCataloguesTotal_Expected,
				"Teacher Catalogues Total owing value is incorrect");

	}

	@Override
	public void additems_submitorder() {
		System.out.println("CALLING ITEMINFO STATEMENT" + System.currentTimeMillis());
		IStudentFlyerOrdersPage iStudentFlyerOrdersPage = getFactory().getIStudentFlyerOrdersPage();
		iStudentFlyerOrdersPage.fillStudentFlyerOrder(
				TestBaseProvider.getTestBase().getTestData().getString("studentname"),
				TestBaseProvider.getTestBase().getTestData().getString("itemQty"));

	}

	public void click_Elf() {
		Wait_for_invisibility_of_locator();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		waitForPageToload();
		WaitUtils.waitForNotDisplayed(getapplicationLoader());
		SCHUtils.waitForElementToBeClickable(grade_Elf(), 15);
		SCHUtils.clickUsingJavaScript(grade_Elf());
		WaitUtils.waitForNotDisplayed(getapplicationLoader());
		PauseUtil.pause(3000);

		SCHUtils.waitForElementToBeClickable(getimgFirstCatalogue(), 15);
		SCHUtils.clickUsingJavaScript(getimgFirstCatalogue());
		WaitUtils.waitForNotDisplayed(getapplicationLoader());
		PauseUtil.waitForAjaxToComplete(3000);
	}

	public void click_Grade4And5() {
		Wait_for_invisibility_of_locator();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		waitForPageToload();
		WaitUtils.waitForNotDisplayed(getapplicationLoader());
		SCHUtils.waitForElementToBeClickable(grade_Arrow(), 15);
		SCHUtils.clickUsingJavaScript(grade_Arrow());
		WaitUtils.waitForNotDisplayed(getapplicationLoader());
		PauseUtil.pause(3000);

		SCHUtils.waitForElementToBeClickable(getimgFirstCatalogue(), 15);
		SCHUtils.clickUsingJavaScript(getimgFirstCatalogue());
		WaitUtils.waitForNotDisplayed(getapplicationLoader());
		PauseUtil.waitForAjaxToComplete(3000);
	}

	public void click_TeacherCatalogue() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		waitForPageToload();
		WaitUtils.waitForNotDisplayed(getapplicationLoader());
		SCHUtils.waitForElementToBeClickable(getlblTeacherCatalogues(), 15);
		SCHUtils.clickUsingJavaScript(getlblTeacherCatalogues());
		WaitUtils.waitForNotDisplayed(getapplicationLoader());
		PauseUtil.pause(3000);

		SCHUtils.waitForElementToBeClickable(getimgFirstCatalogue(), 15);
		SCHUtils.clickUsingJavaScript(getimgFirstCatalogue());
		WaitUtils.waitForNotDisplayed(getapplicationLoader());
		PauseUtil.waitForAjaxToComplete(3000);
	}

	public void verify_studentflyer_teacherpagedownloadlinks() {
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2500);
		AssertUtils.assertTextMatches(getlnkstudentflyerdownload(),
				Matchers.containsString(ConstantUtils.STUDENTFLYERDOWNLOADLLINK));
		AssertUtils.assertTextMatches(getlnkteacherpagedownload(),
				Matchers.containsString(ConstantUtils.TEACHERPAGEDOWNLOADLLINK));

	}

	public void click_studentflyer_downloadlink() {
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2500);
		SCHUtils.waitForElementToBeClickable(getlnkstudentflyerdownload(), 15);
		SCHUtils.clickUsingJavaScript(getlnkstudentflyerdownload());
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(5000);
	}

	public void verify_pagetitle() {
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(15000);
		WebDriver driver = TestBaseProvider.getTestBase().getDriver();
		// String title = driver.switchTo().Window(handle).Title;
		// String title = driver.getTitle();

		String title = driver.getTitle();
		System.out.println("page title is: " + title);

		if (!title.equals("ELF_10_flyer.pdf")) {
			Assert.fail("Fail");
		}
	}

	public void click_teacherpages_downloadlink() {
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2500);
		SCHUtils.waitForElementToBeClickable(getlnkteacherpagedownload(), 15);
		SCHUtils.clickUsingJavaScript(getlnkteacherpagedownload());
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(5000);
	}

	@Override
	public void Validation_of_callOut_msg_disappeares_PaidQty() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			popUp_for_3digits_inQty_fld().isDisplayed();
			Assert.fail("CallOut popup is not disappeared after 3 seconds");
		} catch (Exception e) {
			System.out.println("CallOut popup is disappeared after 3 seconds");
		}

	}

	@Override
	public void CSR_clicks_on_Continue_btn_Invalid_items_popup() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		btn_Continue_popUp_ErrorMsg_for_Invalid_Items().click();
	}

	@Override
	public void CSR_clicks_on_Cancel_btn_Invalid_items_popup() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		btn_Cancel_popUp_ErrorMsg_for_Invalid_Items().click();
	}

	@Override
	public void CSR_verify_ReviewCart_is_displayed() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			CSR_hdr_ReviewCart_Page().isDisplayed();
			System.out.println("Review Cart page is displayed");
		} catch (Exception e) {
			Assert.fail("Review Cart page is not displayed");
		}
	}

	@Override
	public void CSR_verify_OrderEntry_page_is_displayed() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			CSR_hdr_Enter_New_Order_Page().isDisplayed();
			System.out.println("Order Entry page is displayed");
		} catch (Exception e) {
			Assert.fail("Order Entry page is not displayed");
		}
	}

	@Override
	public void CSR_verify_invalid_item_is_not_displayed_in_ReviewCartPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		int act_val = items_TeacherCatalogues_ReviewCart_page().size();
		int exp_val = 1;

		Assert.assertEquals(act_val, exp_val, "Invalid items are displayed in Review Cart page");

	}

	@Override
	public void CSR_verify_valid_item_is_displayed_in_ReviewCartPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_text = item1_TeacherCat_items_ReviewCart_page().getText();
		String exp_text = TestBaseProvider.getTestBase().getTestData().getString("ItemNum");

		Assert.assertEquals(act_text, exp_text, "Valid items are not displayed in Review Cart page");
	}

	@Override
	public void CSR_clicks_on_OrderEntry_tab() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		tab_ORDER_ENTRY().click();
	}

	@Override
	public void verify_item_nums_Qty_displays_correctly_OrderEntryPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_itemVal = Item_Num_field_in_OrderEntryPage().getAttribute("value");
		System.out.println("#############:" + act_itemVal);
		String exp_itemVal = TestBaseProvider.getTestBase().getTestData().getString("ItemNum");
		Assert.assertEquals(act_itemVal, exp_itemVal, "Incorrect item number is displayed in Order Entry form");
		PauseUtil.pause(2000);

		String act_itemQty = Paid_QTY_field_in_OrderEntryPage().getAttribute("value");
		System.out.println("@@@@@@@@@@@@@:" + act_itemQty);
		String exp_itemQty = TestBaseProvider.getTestBase().getTestData().getString("ItemQty");
		Assert.assertEquals(act_itemQty, exp_itemQty, "Incorrect item Qty is displayed in Order Entry form");

	}

	@Override
	public void CSR_enter_FlyerCode_And_click_on_ProceedToCheckout_OrderEntryPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		fld1_FlyerCode_in_OrderEntryPage().click();
		fld1_FlyerCode_in_OrderEntryPage().clear();
		fld1_FlyerCode_in_OrderEntryPage()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("FlyerCode"));
		PauseUtil.pause(2000);
		getbuttonProceedcheckout().click();

	}

	@Override
	public void CSR_verify_the_items_list_in_ReviewCart_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		int act_val = List_all_YTO_items_CSR_ReviewCartPage().size();
		int exp_val = 3;

		Assert.assertEquals(act_val, exp_val, "Incorrect items list is displayed in Review Cart page");

	}

	@Override
	public void CSR_clicks_on_btn_X_to_delete_the_item1_ReviewCartPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		delete_item1_reviewcart().click();

	}

	@Override
	public void CSR_verify_CallOut_msg_and_YES_NO_btns_ReviewCartPage() {
		// PauseUtil.waitForAjaxToComplete(2500);
		// PauseUtil.pause(500);

		String act_text = CSR_txt_popup_to_delete_the_item_ReviewCartPage().getText();
		String exp_text = "Delete this item";
		Assert.assertEquals(act_text, exp_text,
				"Incorrect text is displayed for the item to delete it in Review Cart page");

		String act_text2 = CSR_btn_YES_to_delete_item1_ReviewCartPage().getText();
		String exp_text2 = "YES";
		Assert.assertEquals(act_text2, exp_text2,
				"Incorrect text is displayed for YES button to delete the item in Review Cart page");

		String act_text3 = CSR_btn_NO_in_popup_to_delete_the_item1_ReviewCartPage().getText();
		String exp_text3 = "NO";
		Assert.assertEquals(act_text3, exp_text3,
				"Incorrect text is displayed for NO button to delete the item in Review Cart page");

	}

	@Override
	public void CSR_wait_for_3secs() {
		PauseUtil.waitForAjaxToComplete(2000);
		PauseUtil.pause(3000);

	}

	@Override
	public void CSR_verify_the_label_of_ProceedToCheckout() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			btn_ProceedToCheckout_OrderEntryPage().isDisplayed();
			System.out.println("Proceed To Checkout button is displayed in the Review Cart page");

			String act_text = btn_ProceedToCheckout_OrderEntryPage().getText();
			act_text = act_text.trim();
			String exp_text = "PROCEED TO CHECKOUT";
			Assert.assertEquals(act_text, exp_text,
					"Incorrect text is displayed for Proceed to Checkout in Review Cart page");

		} catch (Exception e) {
			Assert.fail("Proceed to Checkout button text is incorrect in Review Cart page");
		}

	}

	@Override
	public void CSR_clicks_on_ProceedToCheckout_ReviewCartPage() {
		PauseUtil.waitForAjaxToComplete(5000);
		PauseUtil.pause(2000);
		SCHUtils.waitForElementToBeClickable(btn_ProceedToCheckout_OrderEntryPage(), 60);
		btn_ProceedToCheckout_OrderEntryPage().click();
	}

	@Override
	public void CSR_clicks_on_ProceedToCheckout_in_RewardsCoupons_popup_window() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		btn_ProceedToCheckout_RewardsCoupons_popup().click();
	}

	@Override
	public void CSR_changes_item_Qty_and_Tab_to_moveOut_ReviewCartPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		fld1_Qty_YTO_CSR_ReviewCartPage().click();
		fld1_Qty_YTO_CSR_ReviewCartPage().clear();
		fld1_Qty_YTO_CSR_ReviewCartPage().sendKeys("0");
		PauseUtil.pause(1000);
		fld1_Qty_YTO_CSR_ReviewCartPage().sendKeys(Keys.TAB);
	}

	@Override
	public void CSR_verify_Rewards_Coupons_page_not_displayed() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_text = tab_REWARDS_AND_COUPONS().getAttribute("class");
		String exp_text = "step-5 inactive";

		Assert.assertEquals(act_text, exp_text, "Rewards & Coupons page is displayed");
	}

	@Override
	public void CSR_validate_text_of_OrderEntryPage_header() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_text = txt_Enter_New_Order_OrderEntryPage().getText();
		act_text = act_text.trim();

		String exp_text = "Enter New Order";
		Assert.assertEquals(act_text, exp_text,
				"Incorrect text is displayed for Enter New Order header in Order Entry page");

	}

	@Override
	public void CSR_verify_the_blue_script_icon_displays_OrderEntryPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			blue_strip_in_OrderEntryPage().isDisplayed();
			System.out.println("Blue script icon is displayed in the Order Entry page");
		} catch (Exception e) {
			Assert.fail("Blue script icon is not displayed in the Order Entry page");
		}
	}

	@Override
	public void CSR_clicks_on_blue_script_icon_OrderEntryPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(7000);

		blue_strip_in_OrderEntryPage().click();

	}

	@Override
	public void CSR_verify_OrderEntryScript_popup_displayed() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			popup_OrderEntryScript_OrderEntryPage().isDisplayed();
			System.out.println("Order Entry Script popup is displayed in Order Entry page");
		} catch (Exception e) {
			Assert.fail("Order Entry Script popup is not displayed in Order Entry page");
		}

		String act_text = popup_OrderEntryScript_OrderEntryPage().getText();
		act_text = act_text.trim();
		String exp_text = "Order Entry Script";
		Assert.assertEquals(act_text, exp_text,
				"Incorrect text is displayed for OrderEntryScript popup when CSR clicks on blue script icon in Order Entry page");
	}

	@Override
	public void CSR_verify_close_btn_displays_in_OrderEntryScript_popup() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			btn_close_popup_OrderEntryScript_OrderEntryPage().isDisplayed();
			System.out.println("Close button is displayed in OrderEntryScript popup");
		} catch (Exception e) {
			Assert.fail("Close button is not displayed in OrderEntryScript popup");
		}

	}

	@Override
	public void CSR_closes_the_OrderEntryScript_popup_window_OrderEntryPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		btn_close_popup_OrderEntryScript_OrderEntryPage().click();

	}

	@Override
	public void CSR_clicks_on_NO_btn_in_Delete_popup_ReviewCartPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		CSR_btn_NO_in_popup_to_delete_the_item1_ReviewCartPage().click();

	}

	@Override
	public void CSR_verify_delete_confirmation_popup_disappear() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		try {
			CSR_txt_popup_to_delete_the_item_ReviewCartPage().isDisplayed();
			Assert.fail("Delete confirmation popup is not disappeared");
		} catch (Exception e) {
			System.out.println("Delete confirmation popup is disappeared");
		}

	}

	@Override
	public void CSR_clicks_on_YES_btn_in_Delete_popup_ReviewCartPage() {
		WaitUtils.waitForDisplayed(CSR_btn_YES_to_delete_item1_ReviewCartPage());
		CSR_btn_YES_to_delete_item1_ReviewCartPage().click();
	}

	@Override
	public void CSR_verify_deleted_item_not_displayed_in_ReviewCartPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		int act_val = items_TeacherCatalogues_ReviewCart_page().size();
		int exp_val = 2;

		Assert.assertEquals(act_val, exp_val,
				"Item is not deleted when CSR clicks on YES button in confirmation popup");
	}

	@Override
	public void CSR_verify_label_of_TotalAmountOwing_in_ReviewCartPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_text = label_Total_Amount_Owing_ReviewCartPage().getText();
		act_text = act_text.trim();

		String exp_text="CART TOTAL";

		Assert.assertEquals(act_text, exp_text,
				"Incorrect text is displayed for the label of Total Amount Owing in the Review Cart page");
	}

	@Override
	public void CSR_verify_total_cost_of_all_items_displays_in_ReviewCartPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			Total_Amount_Owing().isDisplayed();
			System.out.println("Total cost of all items is displayed in ReviewCartPage");
		} catch (Exception e) {
			Assert.fail("Total cost of all items is not displayed in ReviewCartPage");
		}

	}

	@Override
	public void CSR_verify_Total_Qty_and_Items_displays_in_ReviewCartPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			section_Total_Items_ReviewCartPage().isDisplayed();
			System.out.println("Total Items section is displayed in Review Cart page");
		} catch (Exception e) {
			Assert.fail("Total Items section is not displayed in Review Cart page");
		}

		String act_text = section_Total_Items_ReviewCartPage().getText();
		act_text = act_text.trim();

		int act_val = (TestBaseProvider.getTestBase().getTestData().getInt("ItemQty")
				+ TestBaseProvider.getTestBase().getTestData().getInt("ItemQty2")
				+ TestBaseProvider.getTestBase().getTestData().getInt("ItemQty3"));
		String exp_text = act_val + " Items";

		Assert.assertEquals(act_text, exp_text, "Incorrect total items/text are displayed in Review Cart page");

	}

	@Override
	public void CSR_verify_hyperlink_of_BackToShop_in_ReviewCartPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_text = hyperLink_BackToShop_ReviewCartPage().getText();
		act_text = act_text.trim();

		String exp_text = "EDIT CART";

		Assert.assertEquals(act_text, exp_text,
				"Incorrect text is displayed for Back To Shop hyperlink in Review Cart page");
	}

	@Override
	public void CSR_clicks_on_hyperlink_BackToShop_in_ReviewCartPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		hyperLink_BackToShop_ReviewCartPage().click();
	}

	@Override
	public void CSR_verify_blue_script_icon_displays_in_ReviewCartPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			Blue_script_icon_ReviewCartPage().isDisplayed();
			System.out.println("Blue script icon is displayed in ReviewCart page");
		} catch (Exception e) {
			Assert.fail("Blue script icon is not displayed in ReviewCart page");
		}

	}

	@Override
	public void CSR_clicks_on_blue_script_icon_in_ReviewCartPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		Blue_script_icon_ReviewCartPage().click();
	}

	@Override
	public void CSR_verify_modal_window_text_in_ReviewCartPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			modal_window_ConfirmYourOrder_ReviewCartPage().isDisplayed();
			System.out.println("Modal window is displayed in Review Cart page");
		} catch (Exception e) {
			Assert.fail("Modal window is not displayed in Review Cart page");
		}

		String act_text = modal_window_ConfirmYourOrder_ReviewCartPage().getText();
		act_text = act_text.trim();

		String exp_text = "To confirm your order:";
		Assert.assertEquals(act_text, exp_text,
				"Incorrect text is displayed for the modal window in Review Cart page when CSR clicks on blue script icon");

	}

	@Override
	public void CSR_verify_close_btn_displays_in_modal_window_ReviewCart_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			btn_close_in_modal_window_ConfirmYourOrder_ReviewCartPage().isDisplayed();
			System.out.println("Close button is displayed in modal window of ReviewCart page");
		} catch (Exception e) {
			Assert.fail("Close button is not displayed in modal window of ReviewCart page");
		}

	}

	@Override
	public void CSR_clicks_on_close_btn_in_modal_window_in_ReviewCartPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		btn_close_in_modal_window_ConfirmYourOrder_ReviewCartPage().click();
	}

	@Override
	public void CSR_verify_ReviewCartPage_displays() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			hdr_ReviewYourCart_in_ReviewCartPage().isDisplayed();
			System.out.println("Review Cart Page is displayed");
		} catch (Exception e) {
			Assert.fail("Review Cart Page is not displayed");
		}
	}

	@Override
	public void CSR_verify_blue_script_icon_displays_in_RedemptionsRewards_Page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			Blue_script_icon_RedemptionsRewards_Page().isDisplayed();
			System.out.println("Blue script icon is displayed in RedemptionsRewards Page");
		} catch (Exception e) {
			Assert.fail("Blue script icon is not displayed in RedemptionsRewards Page");
		}

	}

	@Override
	public void CSR_clicks_on_blue_script_icon_in_RedemptionsRewards_Page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		Blue_script_icon_RedemptionsRewards_Page().click();
	}

	@Override
	public void CSR_verify_modal_window_text_in_RedemptionsRewards_Page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			modal_window_WHAT_RedemptionsRewards_Page().isDisplayed();
			System.out.println("Modal window is displayed in RedemptionsRewards Page");
		} catch (Exception e) {
			Assert.fail("Modal window is not displayed in RedemptionsRewards Page");
		}

		String act_text = modal_window_WHAT_RedemptionsRewards_Page().getText();
		act_text = act_text.trim();

		String exp_text = "To apply redemptions:";
		Assert.assertEquals(act_text, exp_text,
				"Incorrect text is displayed for the modal window in RedemptionsRewards Page when CSR clicks on blue script icon");

	}

	@Override
	public void CSR_verify_close_btn_displays_in_modal_window_RedemptionsRewards_Page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			btn_close_in_modal_window_WHAT_RedemptionsRewards_Page().isDisplayed();
			System.out.println("Close button is displayed in modal window of RedemptionsRewards Page");
		} catch (Exception e) {
			Assert.fail("Close button is not displayed in modal window of RedemptionsRewards Page");
		}

	}

	@Override
	public void CSR_clicks_on_close_btn_in_modal_window_in_RedemptionsRewards_Page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		btn_close_in_modal_window_WHAT_RedemptionsRewards_Page().click();
	}

	@Override
	public void CSR_validate_RedemptionsRewards_popup_displayed() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			btn_ProceedToCheckout_RewardsCoupons_popup().isDisplayed();
			System.out.println(
					"Redemptions & Rewards_popup is displayed when CSR clicks on Proceed To Checkout button in Review Cart page");
		} catch (Exception e) {
			Assert.fail(
					"Redemptions & Rewards_popup is not displayed when CSR clicks on Proceed To Checkout button in Review Cart page");
		}
	}

	@Override
	public void CSR_verify_ContinueCheckout_btn_enabled_RedemptionsRewardsPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		if (btn_ContinueCheckout_RewardsPage().isEnabled()) {
			System.out.println("CONTINUE CHECKOUT button is enabled in Redemptions & Rewards Page");
		} else {
			Assert.fail("CONTINUE CHECKOUT button is disabled in Redemptions & Rewards Page");
		}
	}

	@Override
	public void CSR_validate_Rewards_And_Coupons_tab_is_highlighted() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_text = tab_REWARDS_AND_COUPONS().getAttribute("class");
		String exp_text = "step-5 active";

		Assert.assertEquals(act_text, exp_text, "Rewards & Coupons Tab is not highlighted");
	}

	@Override
	public void CSR_validate_Rewards_And_Coupons_page_Num_in_StepHeader_Bubble() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_val = Num_REWARDS_AND_COUPONS_StepHeader().getText();
		act_val = act_val.trim();

		String exp_val = "5";

		Assert.assertEquals(act_val, exp_val, "Rewards & Coupons page number is invalid in Step header");
	}

	@Override
	public void CSR_validate_Rewards_And_Coupons_page_displayed() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			CSR_hdr_Coupons_And_Rewards().isDisplayed();
			System.out.println("Coupons & Rewards page is displayed");
		} catch (Exception e) {
			Assert.fail("Coupons & Rewards page is not displayed");
		}
	}

	@Override
	public void verify_autoformatted_postalcode_Confirmsubmitpage(Configuration testData) {
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(3000);
		String correctpostalcode = getlblconfirmsubmitalternativeshipping().getText();
		String exp_correctpostalcode = testData.getString("correct_postalcode");
		System.out.println("postal code value is :" + getlblconfirmsubmitalternativeshipping().getText());
		System.out.println("postal code is :" + correctpostalcode);
		System.out.println("postal code is actual:" + exp_correctpostalcode);
		if (!correctpostalcode.contains(exp_correctpostalcode)) {
			Assert.fail("Postal code is not auto formatting");
		}
	}

	@Override
	public void validate_Shipping_And_Payment_tab_is_highlighted() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_text = tab_SHIPPING_PAYMENT().getAttribute("class");
		String exp_text = "step-6 active";

		Assert.assertEquals(act_text, exp_text, "Payment Tab is not highlighted");
	}

	@Override
	public void CSR_clicks_on_ReviewCart_tab() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		SCHUtils.waitForElementToBeClickable(tab_REVIEW_CART(), 20);
		tab_REVIEW_CART().click();
	}

	@Override
	public void verify_error_msg_for_missing_FlyerCode_OrderEntryPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_text = popUp_ErrorMsg_in_OrderEntryPage().getText();
		act_text = act_text.trim();

		String exp_text = "Missing Flyer Code";
		Assert.assertEquals(act_text, exp_text, "Incorrect error message is displyed for missing Flyer code field");
	}

	@Override
	public void verify_ContinueCheckout_btn_disabled_PaymentPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		if (btn_ContinueCheckout_ShippingRewardsPage().isEnabled()) {
			Assert.fail("Continue Checkout button is enabled in Payment page");
		} else {
			System.out.println("Continue Checkout button is disabled in Payment page");
		}
	}

	@Override
	public void verify_alternate_shipping_section_displayed_PaymentPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			section_Alternate_ship_ShippingRewardsPage().isDisplayed();
			System.out.println("Alternate shipping Address section is displayed in Payment Page");
		} catch (Exception e) {
			Assert.fail("Alternate shipping Address section is not displayed in Payment Page");
		}
	}

	@Override
	public void CSR_validate_Payment_page_Num_in_StepHeader_Bubble() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_val = Num_PAYMENT_StepHeader().getText();
		act_val = act_val.trim();

		String exp_val = "6";

		Assert.assertEquals(act_val, exp_val, "Payment page number is invalid in Step header");
	}

	@Override
	public void CSR_verify_the_error_msg_displayed_when_coupon_not_qualify_ReviewCartPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			fld_error_msg_coupon_invalid_at_this_time().isDisplayed();
			System.out.println("Error message is displayed when cart value doesn't qualify for the coupon amount");
		} catch (Exception e) {
			Assert.fail("Error message is not displayed when cart value doesn't qualify for the coupon amount");
		}
	}

	@Override
	public void CSR_verify_blue_script_icon_displays_in_Payment_Page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			Blue_script_icon_Payment_Page().isDisplayed();
			System.out.println("Blue script icon is displayed in Payment Page");
		} catch (Exception e) {
			Assert.fail("Blue script icon is not displayed in Payment Page");
		}
	}

	@Override
	public void CSR_clicks_on_blue_script_icon_in_Payment_Page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		Blue_script_icon_Payment_Page().click();
	}

	@Override
	public void CSR_clicks_on_blue_script_icon_in_ConfirmSubmit_Page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		Blue_script_icon_ConfirmSubmit_Page().click();
	}

	@Override
	public void CSR_verify_modal_window_text_in_Payment_Page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			modal_window_Shipping_Payment_Page().isDisplayed();
			System.out.println("Modal window is displayed in Payment Page");
		} catch (Exception e) {
			Assert.fail("Modal window is not displayed in Payment Page");
		}

		String act_text = modal_window_Shipping_Payment_Page().getText();
		act_text = act_text.trim();

		String exp_text = "Shipping & Payment:";
		Assert.assertEquals(act_text, exp_text,
				"Incorrect text is displayed for the modal window in Payment Page when CSR clicks on blue script icon");

	}

	@Override
	public void CSR_verify_modal_window_text_in_ConfirmSubmit_Page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			modal_window_ConfirmSubmit_Page().isDisplayed();
			System.out.println("Modal window is displayed in Confirm & Submit Page");
		} catch (Exception e) {
			Assert.fail("Modal window is not displayed in Confirm & Submit Page");
		}

		String act_text = modal_window_ConfirmSubmit_Page().getText();
		act_text = act_text.trim();

		String exp_text = "Confirm & Submit";
		Assert.assertEquals(act_text, exp_text,
				"Incorrect text is displayed for the modal window in Confirm & Submit Page when CSR clicks on blue script icon");

	}

	@Override
	public void CSR_verify_close_btn_displays_in_modal_window_Payment_Page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			btn_close_in_modal_window_Payment_Page().isDisplayed();
			System.out.println("Close button is displayed in modal window of Payment Page");
		} catch (Exception e) {
			Assert.fail("Close button is not displayed in modal window of Payment Page");
		}
	}

	@Override
	public void CSR_verify_close_btn_displays_in_modal_window_ConfirmSubmit_Page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			btn_close_in_modal_window_ConfirmSubmit_Page().isDisplayed();
			System.out.println("Close button is displayed in modal window of Confirm & Submit Page");
		} catch (Exception e) {
			Assert.fail("Close button is not displayed in modal window of Confirm & Submit Page");
		}
	}

	@Override
	public void CSR_validate_Payment_page_displayed() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			CSR_hdr_Payment().isDisplayed();
			System.out.println("Payment page is displayed");
		} catch (Exception e) {
			Assert.fail("Payment page is not displayed");
		}
	}

	@Override
	public void CSR_validate_ConfirmSubmit_page_displayed() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			CSR_hdr_ConfirmSubmit().isDisplayed();
			System.out.println("Confirm & Submit page is displayed");
		} catch (Exception e) {
			Assert.fail("Confirm & Submit page is not displayed");
		}
	}

	@Override
	public void CSR_clicks_on_close_btn_in_modal_window_in_Payment_Page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		btn_close_in_modal_window_Payment_Page().click();
	}

	@Override
	public void CSR_clicks_on_close_btn_in_modal_window_in_ConfirmSubmit_Page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		btn_close_in_modal_window_ConfirmSubmit_Page().click();
	}

	@Override
	public void verify_ContinueCheckout_btn_enabled_PaymentPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		if (btn_ContinueCheckout_ShippingRewardsPage().isEnabled()) {
			System.out.println("Continue Checkout button is enabled in Payment page");
		} else {
			Assert.fail("Continue Checkout button is disabled in Payment page");
		}
	}

	@Override
	public void validate_Confirm_And_Submit_tab_is_highlighted() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_text = tab_CONFIRM_and_SUBMIT().getAttribute("class");
		String exp_text = "step-7 active";

		Assert.assertEquals(act_text, exp_text, "Confirm & Submit Tab is not highlighted");
	}

	@Override
	public void CSR_verify_SavedCard_displayed_correct_in_PaymentPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		AssertUtils.assertDisplayed(fld_first_SavedCard_in_list_PaymentPage());

		String act_text = fld_first_SavedCard_in_list_PaymentPage().getText();
		String exp_text = TestBaseProvider.getTestBase().getTestData().getString("SavedCard");

		Assert.assertEquals(act_text, exp_text, "Incorrect Saved Card is displayed in list in Payment Page");
	}

	@Override
	public void CSR_validate_selected_SavedCard_info_displayed_correct_in_PaymentPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_text = selected_SavedCard_name_in_section_PaymentPage().getText();
		String exp_text = TestBaseProvider.getTestBase().getTestData().getString("cardname");

		Assert.assertEquals(act_text, exp_text, "Incorrect Card information is displayed in a selected card section");
	}

	@Override
	public void CSR_validate_Confirm_and_Submit_page_Num_in_StepHeader_Bubble() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_val = Num_CONFIRM_and_SUBMIT_StepHeader().getText();
		act_val = act_val.trim();

		String exp_val = "7";

		Assert.assertEquals(act_val, exp_val, "Confirm & Submit page number is invalid in Step header");
	}

	@Override
	public void CSR_verify_blue_script_icon_displays_in_ConfirmSubmit_Page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			Blue_script_icon_ConfirmSubmit_Page().isDisplayed();
			System.out.println("Blue script icon is displayed in Confirm & Submit Page");
		} catch (Exception e) {
			Assert.fail("Blue script icon is not displayed in Confirm & Submit Page");
		}
	}

	@Override
	public void CSR_verify_PO_Number_text_box_fld_displayed_in_PaymentPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			PO_Number_text_box_PaymentPage().isDisplayed();
			System.out.println("PO Number text box is displayed in Payment page");
		} catch (Exception e) {
			Assert.fail("PO Number text box is not displayed in Payment page");
		}
	}

	@Override
	public void validate_mailing_address_section_displayed_Payment_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			section_mailing_address_PaymentPage().isDisplayed();
			System.out.println("Scholastic mailing address section is displayed in Payment Page");
		} catch (Exception e) {
			Assert.fail("Scholastic mailing address section is not displayed in Payment Page");
		}
	}

	@Override
	public void validate_mailing_address_text_displayed_correct_Payment_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_text = section_mailing_address_PaymentPage().getText();
		String exp_text = "No postage paid envelope? Mail cheques to:Scholastic Canada Payment Processing 175 Hillmount Road Markham ON L6C 1Z7";
		exp_text = exp_text.replaceAll("\\s", "");
		System.out.println("Expected" + exp_text);
		act_text = act_text.replaceAll("\\s", "");
		System.out.println("actual from Page" + act_text);
		Assert.assertEquals(act_text, exp_text, "Incorrect mailing address is displayed in Payment Page");
	}

	@Override
	public void CSR_enters_PO_Number_in_PaymentPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		PO_Number_text_box_PaymentPage().click();
		PO_Number_text_box_PaymentPage().clear();
		PO_Number_text_box_PaymentPage().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("POnumber"));
	}

	@Override
	public void CSR_verify_PO_Number_fld_accepts_entered_val_in_PaymentPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_text = PO_Number_text_box_PaymentPage().getAttribute("value");
		String exp_text = TestBaseProvider.getTestBase().getTestData().getString("POnumber");

		Assert.assertEquals(act_text, exp_text, "PO Number text box field is not accepted the entered value");

	}

	@Override
	public void CSR_verify_PO_Number_fld_not_accept_entered_val_in_PaymentPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_text = PO_Number_text_box_PaymentPage().getAttribute("value");
		String exp_text = TestBaseProvider.getTestBase().getTestData().getString("POnumber");

		Assert.assertNotEquals(act_text, exp_text, "CSR is able to enter more than 20 numbers in PO Number field");

	}

	@Override
	public void CSR_verify_Student_Clubs_table_Items_displayed() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			CSR_table_StudentClubs_items().isDisplayed();
			System.out.println("Student Clubs table and items are displayed");
		} catch (Exception e) {
			Assert.fail("Student Clubs table and items are not displayed");
		}
	}

	@Override
	public void CSR_verify_Student_Clubs_items_displays_in_a_separate_tables() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		int act_val = CSR_table_StudentClubs_items_list().size();
		int exp_val = 2;

		Assert.assertEquals(act_val, exp_val, "Student Clubs items are not displayed in a separate tables");
	}

	@Override
	public void CSR_verify_Student_Clubs_items_displays_in_a_separate_row() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		int act_val = items_YTO_ReviewCartPage_CSR_list().size();
		int exp_val = 3;

		Assert.assertEquals(act_val, exp_val, "Each Student Clubs item is not displayed in a separate row");
	}

	@Override
	public void CSR_enters_PO_Number_directly_in_PaymentPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		PO_Number_text_box_PaymentPage().click();
		PO_Number_text_box_PaymentPage().clear();
		PO_Number_text_box_PaymentPage().sendKeys("123456789");
	}

	@Override
	public void CSR_Validation_of_Teacher_Catalogue_Total_ShippingFee_GST_PST_ConfirmSubmit_Page() {
		int stateTaxGST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxGST");
		double stateTaxPST = TestBaseProvider.getTestBase().getTestData().getDouble("stateTaxPST");
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String value1 = item1_price_SubmitPage().getText();
		value1 = value1.trim();
		String ele1 = item1_qty_SubmitPage().getText();
		ele1 = ele1.trim();
		value1 = value1.substring(1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item1_price = d1 * a1;
		item1_price = Double.parseDouble(new DecimalFormat("##.##").format(item1_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item1_price);

		String value2 = item2_price_SubmitPage().getText();
		value2 = value2.trim();
		String ele2 = item2_qty_SubmitPage().getText();
		ele2 = ele2.trim();
		value2 = value2.substring(1);
		double d2 = Double.parseDouble(value2);
		System.out.println("#############>" + d2);
		int a2 = Integer.parseInt(ele2);
		System.out.println("%%%%%%%%%%%%>" + a2);
		double item2_price = d2 * a2;
		item2_price = Double.parseDouble(new DecimalFormat("##.##").format(item2_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item2_price);

		String value3 = item3_price_SubmitPage().getText();
		value3 = value3.trim();
		String ele3 = item3_qty_SubmitPage().getText();
		ele3 = ele3.trim();
		value3 = value3.substring(1);
		double d3 = Double.parseDouble(value3);
		System.out.println("#############>" + d3);
		int a3 = Integer.parseInt(ele3);
		System.out.println("%%%%%%%%%%%%>" + a3);
		double item3_price = d3 * a3;
		item3_price = Double.parseDouble(new DecimalFormat("##.##").format(item3_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item3_price);

		double Teacher_SubTotal_exp = item1_price + item2_price + item3_price;
		Teacher_SubTotal_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_SubTotal_exp));

		String TeacherCatSubTot = SubTotal_TeacherCatalogues().getText();
		PauseUtil.waitForAjaxToComplete(2000);
		TeacherCatSubTot = TeacherCatSubTot.substring(1);
		double Teacher_SubTotal = Double.parseDouble(TeacherCatSubTot);
		Assert.assertEquals(Teacher_SubTotal, Teacher_SubTotal_exp, "Teacher Catalogues Subtotal value is incorrect");

		double Teacher_GST_act = Teacher_GST();
		double Teacher_GST_exp = TaxRoundOff_item_1_Tax(stateTaxGST, d1, a1)
				+ TaxRoundOff_item_2_Tax(stateTaxGST, d2, a2) + TaxRoundOff_item_3_Tax(stateTaxGST, d3, a3);
		Teacher_GST_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_GST_exp));
		Assert.assertEquals(Teacher_GST_act, Teacher_GST_exp, "Teacher Catalogues Subtotal GST value is incorrect");

		double Teacher_PST_act = Teacher_PST();
		double Teacher_PST_exp = TaxRoundOff_item_1_Tax(stateTaxPST, d1, a1)
				+ TaxRoundOff_item_2_Tax(stateTaxPST, d2, a2) + TaxRoundOff_item_3_Tax(stateTaxPST, d3, a3);
		Teacher_PST_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_PST_exp));
		Assert.assertEquals(Teacher_PST_act, Teacher_PST_exp, "Teacher Catalogues Subtotal PST value is incorrect");

		String TeacherCataloguesTotal_Actual = Total_TeacherCatalogues_SubmitPage_For_all_Items().getText();
		TeacherCataloguesTotal_Actual = TeacherCataloguesTotal_Actual.substring(1);
		double TeacherCataloguesTotal_Act = Double.parseDouble(TeacherCataloguesTotal_Actual);
		System.out.println("StudentClubsTotal :::::::: " + TeacherCataloguesTotal_Act);

		double TeacherCataloguesTotal_Exp = Teacher_SubTotal_exp + Teacher_GST_exp + Teacher_PST_exp;
		System.out.println("Teacher Catalogues Total_Actual :::::::: " + TeacherCataloguesTotal_Exp);
		TeacherCataloguesTotal_Exp = Double.parseDouble(new DecimalFormat("##.##").format(TeacherCataloguesTotal_Exp));

		Assert.assertEquals(TeacherCataloguesTotal_Act, TeacherCataloguesTotal_Exp,
				"Teacher Catalogues Total value is incorrect");

		////////////////////////////////////////////////////////

		double Shipping_tax_gst = stateTaxGST;
		double Shipping_tax_pst = stateTaxPST;

		String Shipping_val = Total_Shipping_SubmitPage().getText();
		Shipping_val = Shipping_val.trim();

		if (Shipping_val.equals("FREE!")) {
			double ShippingValue_is = 0;
			double Total_Amount_Of_Teacher = TeacherCataloguesTotal_Exp + ShippingValue_is;
			Total_Amount_Of_Teacher = Double.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Teacher));

			String Total_Owing_Amount_Actual = Total_Amount_Owing_submitPage().getText();
			Total_Owing_Amount_Actual = Total_Owing_Amount_Actual.substring(1);
			double Total_Owing_Amount_Act = Double.parseDouble(Total_Owing_Amount_Actual);
			Assert.assertEquals(Total_Owing_Amount_Act, Total_Amount_Of_Teacher, "Total owing value is incorrect");

		} else if (!Shipping_val.equals("FREE!")) {
			String Shipping_act = subTotal_Shipping_SubmitPage().getText();
			Shipping_act = Shipping_act.trim();
			Shipping_act = Shipping_act.substring(1);
			double Shipping_act_2 = Double.parseDouble(Shipping_act);
			Shipping_act_2 = Double.parseDouble(new DecimalFormat("##.##").format(Shipping_act_2));

			double gst_Shipping_exp = (double) (Shipping_tax_gst * Shipping_act_2) / 100;
			gst_Shipping_exp = Double.parseDouble(new DecimalFormat("##.##").format(gst_Shipping_exp));
			System.out.println("EXPECTED#########" + gst_Shipping_exp);

			String gst_Shipping_act = amount_GST_Shipping_SubmitPage().getText();
			gst_Shipping_act = gst_Shipping_act.trim();
			gst_Shipping_act = gst_Shipping_act.substring(1);
			double gst_Shipping_act_2 = Double.parseDouble(gst_Shipping_act);

			Assert.assertEquals(gst_Shipping_act_2, gst_Shipping_exp, "Shipping & Handling GST Tax value is incorrect");

			double pst_Shipping_exp = (double) (Shipping_tax_pst * Shipping_act_2) / 100;
			pst_Shipping_exp = Double.parseDouble(new DecimalFormat("##.##").format(pst_Shipping_exp));
			System.out.println("EXPECTED#########" + pst_Shipping_exp);

			String pst_Shipping_act = amount_PST_Shipping_SubmitPage().getText();
			pst_Shipping_act = pst_Shipping_act.trim();
			pst_Shipping_act = pst_Shipping_act.substring(1);
			double pst_Shipping_act_2 = Double.parseDouble(pst_Shipping_act);

			Assert.assertEquals(pst_Shipping_act_2, pst_Shipping_exp, "Shipping & Handling PST Tax value is incorrect");

			double ShippingTotValue_exp = Shipping_act_2 + gst_Shipping_exp + pst_Shipping_exp;
			ShippingTotValue_exp = TaxRoundOff_of(ShippingTotValue_exp);

			String ShippingTotValue_act = Total_Shipping_SubmitPage().getText();
			ShippingTotValue_act = ShippingTotValue_act.trim();
			ShippingTotValue_act = ShippingTotValue_act.substring(1);
			double ShippingTotValue_act_2 = Double.parseDouble(ShippingTotValue_act);

			Assert.assertEquals(ShippingTotValue_act_2, ShippingTotValue_exp,
					"Shipping & Handling Total value is incorrect");
			///////////////////////////////////////
			double Total_Amount_Of_Teacher = TeacherCataloguesTotal_Exp + ShippingTotValue_exp;
			Total_Amount_Of_Teacher = Double.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Teacher));

			String Total_Owing_Amount_Actual = Total_Amount_Owing_submitPage().getText();
			Total_Owing_Amount_Actual = Total_Owing_Amount_Actual.substring(1);
			double Total_Owing_Amount_Act = Double.parseDouble(Total_Owing_Amount_Actual);
			Assert.assertEquals(Total_Owing_Amount_Act, Total_Amount_Of_Teacher, "Total owing value is incorrect");
		}
	}

	@Override
	public void CSR_Validation_of_Teacher_Catalogue_Total_ShippingFee_GST_QST_ConfirmSubmit_Page() {
		int stateTaxGST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxGST");
		double stateTaxQST = TestBaseProvider.getTestBase().getTestData().getDouble("stateTaxQST");
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String value1 = item1_price_SubmitPage().getText();
		value1 = value1.trim();
		String ele1 = item1_qty_SubmitPage().getText();
		ele1 = ele1.trim();
		value1 = value1.substring(1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item1_price = d1 * a1;
		item1_price = Double.parseDouble(new DecimalFormat("##.##").format(item1_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item1_price);

		String value2 = item2_price_SubmitPage().getText();
		value2 = value2.trim();
		String ele2 = item2_qty_SubmitPage().getText();
		ele2 = ele2.trim();
		value2 = value2.substring(1);
		double d2 = Double.parseDouble(value2);
		System.out.println("#############>" + d2);
		int a2 = Integer.parseInt(ele2);
		System.out.println("%%%%%%%%%%%%>" + a2);
		double item2_price = d2 * a2;
		item2_price = Double.parseDouble(new DecimalFormat("##.##").format(item2_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item2_price);

		String value3 = item3_price_SubmitPage().getText();
		value3 = value3.trim();
		String ele3 = item3_qty_SubmitPage().getText();
		ele3 = ele3.trim();
		value3 = value3.substring(1);
		double d3 = Double.parseDouble(value3);
		System.out.println("#############>" + d3);
		int a3 = Integer.parseInt(ele3);
		System.out.println("%%%%%%%%%%%%>" + a3);
		double item3_price = d3 * a3;
		item3_price = Double.parseDouble(new DecimalFormat("##.##").format(item3_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item3_price);

		double Teacher_SubTotal_exp = item1_price + item2_price + item3_price;
		Teacher_SubTotal_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_SubTotal_exp));

		String TeacherCatSubTot = SubTotal_TeacherCatalogues().getText();
		PauseUtil.waitForAjaxToComplete(2000);
		TeacherCatSubTot = TeacherCatSubTot.substring(1);
		double Teacher_SubTotal = Double.parseDouble(TeacherCatSubTot);
		Assert.assertEquals(Teacher_SubTotal, Teacher_SubTotal_exp, "Teacher Catalogues Subtotal value is incorrect");

		double Teacher_GST_act = Teacher_GST();
		double Teacher_GST_exp = TaxRoundOff_item_1_Tax(stateTaxGST, d1, a1)
				+ TaxRoundOff_item_2_Tax(stateTaxGST, d2, a2) + TaxRoundOff_item_3_Tax(stateTaxGST, d3, a3);
		Teacher_GST_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_GST_exp));
		Assert.assertEquals(Teacher_GST_act, Teacher_GST_exp, "Teacher Catalogues Subtotal GST value is incorrect");

		double Teacher_QST_act = Teacher_QST();
		double Teacher_QST_exp = TaxRoundOff_item_1_Tax(stateTaxQST, d1, a1)
				+ TaxRoundOff_item_2_Tax(stateTaxQST, d2, a2) + TaxRoundOff_item_3_Tax(stateTaxQST, d3, a3);
		Teacher_QST_exp = Double.parseDouble(new DecimalFormat("##.##").format(Teacher_QST_exp));
		Assert.assertEquals(Teacher_QST_act, Teacher_QST_exp, "Teacher Catalogues Subtotal QST value is incorrect");

		String TeacherCataloguesTotal_Actual = Total_TeacherCatalogues_SubmitPage_For_all_Items().getText();
		TeacherCataloguesTotal_Actual = TeacherCataloguesTotal_Actual.substring(1);
		double TeacherCataloguesTotal_Act = Double.parseDouble(TeacherCataloguesTotal_Actual);
		System.out.println("StudentClubsTotal :::::::: " + TeacherCataloguesTotal_Act);

		double TeacherCataloguesTotal_Exp = Teacher_SubTotal_exp + Teacher_GST_exp + Teacher_QST_exp;
		System.out.println("Teacher Catalogues Total_Actual :::::::: " + TeacherCataloguesTotal_Exp);
		TeacherCataloguesTotal_Exp = Double.parseDouble(new DecimalFormat("##.##").format(TeacherCataloguesTotal_Exp));

		Assert.assertEquals(TeacherCataloguesTotal_Act, TeacherCataloguesTotal_Exp,
				"Teacher Catalogues Total value is incorrect");

		////////////////////////////////////////////////////////

		double Shipping_tax_gst = stateTaxGST;
		double Shipping_tax_qst = stateTaxQST;

		String Shipping_val = Total_Shipping_SubmitPage().getText();
		Shipping_val = Shipping_val.trim();

		if (Shipping_val.equals("FREE!")) {
			double ShippingValue_is = 0;
			double Total_Amount_Of_Teacher = TeacherCataloguesTotal_Exp + ShippingValue_is;
			Total_Amount_Of_Teacher = Double.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Teacher));

			String Total_Owing_Amount_Actual = Total_Amount_Owing_submitPage().getText();
			Total_Owing_Amount_Actual = Total_Owing_Amount_Actual.substring(1);
			double Total_Owing_Amount_Act = Double.parseDouble(Total_Owing_Amount_Actual);
			Assert.assertEquals(Total_Owing_Amount_Act, Total_Amount_Of_Teacher, "Total owing value is incorrect");

		} else if (!Shipping_val.equals("FREE!")) {
			String Shipping_act = subTotal_Shipping_SubmitPage().getText();
			Shipping_act = Shipping_act.trim();
			Shipping_act = Shipping_act.substring(1);
			double Shipping_act_2 = Double.parseDouble(Shipping_act);
			Shipping_act_2 = Double.parseDouble(new DecimalFormat("##.##").format(Shipping_act_2));

			double gst_Shipping_exp = (double) (Shipping_tax_gst * Shipping_act_2) / 100;
			gst_Shipping_exp = Double.parseDouble(new DecimalFormat("##.##").format(gst_Shipping_exp));
			System.out.println("EXPECTED#########" + gst_Shipping_exp);

			String gst_Shipping_act = amount_GST_Shipping_SubmitPage().getText();
			gst_Shipping_act = gst_Shipping_act.trim();
			gst_Shipping_act = gst_Shipping_act.substring(1);
			double gst_Shipping_act_2 = Double.parseDouble(gst_Shipping_act);

			Assert.assertEquals(gst_Shipping_act_2, gst_Shipping_exp, "Shipping & Handling GST Tax value is incorrect");

			double qst_Shipping_exp = (double) (Shipping_tax_qst * Shipping_act_2) / 100;
			qst_Shipping_exp = Double.parseDouble(new DecimalFormat("##.##").format(qst_Shipping_exp));
			System.out.println("EXPECTED#########" + qst_Shipping_exp);

			String qst_Shipping_act = amount_PST_Shipping_SubmitPage().getText();
			qst_Shipping_act = qst_Shipping_act.trim();
			qst_Shipping_act = qst_Shipping_act.substring(1);
			double qst_Shipping_act_2 = Double.parseDouble(qst_Shipping_act);

			Assert.assertEquals(qst_Shipping_act_2, qst_Shipping_exp, "Shipping & Handling QST Tax value is incorrect");

			double ShippingTotValue_exp = Shipping_act_2 + gst_Shipping_exp + qst_Shipping_exp;
			ShippingTotValue_exp = TaxRoundOff_of(ShippingTotValue_exp);

			String ShippingTotValue_act = Total_Shipping_SubmitPage().getText();
			ShippingTotValue_act = ShippingTotValue_act.trim();
			ShippingTotValue_act = ShippingTotValue_act.substring(1);
			double ShippingTotValue_act_2 = Double.parseDouble(ShippingTotValue_act);

			Assert.assertEquals(ShippingTotValue_act_2, ShippingTotValue_exp,
					"Shipping & Handling Total value is incorrect");
			///////////////////////////////////////
			double Total_Amount_Of_Teacher = TeacherCataloguesTotal_Exp + ShippingTotValue_exp;
			Total_Amount_Of_Teacher = Double.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Teacher));

			String Total_Owing_Amount_Actual = Total_Amount_Owing_submitPage().getText();
			Total_Owing_Amount_Actual = Total_Owing_Amount_Actual.substring(1);
			double Total_Owing_Amount_Act = Double.parseDouble(Total_Owing_Amount_Actual);
			Assert.assertEquals(Total_Owing_Amount_Act, Total_Amount_Of_Teacher, "Total owing value is incorrect");
		}
	}

	@Override
	public void CSR_Validation_of_no_taxes_are_charged_on_Teacher_catalogues_Subtotal_Total_amount_ConfirmSubmitPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		if (GST_Teacher_Catalogues_Subtotal().isDisplayed()) {
			String Teacher_gst = GST_Teacher_Catalogues_Subtotal().getText();
			Teacher_gst = Teacher_gst.substring(1);
			double Teacher_gst_2 = Double.parseDouble(Teacher_gst);
			double value = 0.0;
			Assert.assertEquals(Teacher_gst_2, value, "GST value is displayed for Teacher_Catalogues_Subtotal");
		} else if (PST_Teacher_Catalogues_Subtotal().isDisplayed()) {
			String Teacher_pst = PST_Teacher_Catalogues_Subtotal().getText();
			Teacher_pst = Teacher_pst.substring(1);
			double Teacher_pst_2 = Double.parseDouble(Teacher_pst);
			double value = 0.0;
			Assert.assertEquals(Teacher_pst_2, value, "PST value is displayed for Teacher_Catalogues_Subtotal");
		} else {
			System.out.println("no_taxes_are_charged_on_Teacher_club_Subtotal_Total_amount");

		}

		PauseUtil.pause(4000);
		String value1 = item1_price_SubmitPage().getText();
		value1 = value1.trim();
		String ele1 = item1_qty_SubmitPage().getText();
		ele1 = ele1.trim();
		value1 = value1.substring(1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item1_price = d1 * a1;
		item1_price = Double.parseDouble(new DecimalFormat("##.##").format(item1_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item1_price);

		String value2 = item2_price_SubmitPage().getText();
		value2 = value2.trim();
		String ele2 = item2_qty_SubmitPage().getText();
		ele2 = ele2.trim();
		value2 = value2.substring(1);
		double d2 = Double.parseDouble(value2);
		System.out.println("#############>" + d2);
		int a2 = Integer.parseInt(ele2);
		System.out.println("%%%%%%%%%%%%>" + a2);
		double item2_price = d2 * a2;
		item2_price = Double.parseDouble(new DecimalFormat("##.##").format(item2_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item2_price);

		String value3 = item3_price_SubmitPage().getText();
		value3 = value3.trim();
		String ele3 = item3_qty_SubmitPage().getText();
		ele3 = ele3.trim();
		value3 = value3.substring(1);
		double d3 = Double.parseDouble(value3);
		System.out.println("#############>" + d3);
		int a3 = Integer.parseInt(ele3);
		System.out.println("%%%%%%%%%%%%>" + a3);
		double item3_price = d3 * a3;
		item3_price = Double.parseDouble(new DecimalFormat("##.##").format(item3_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item3_price);

		double Teacher_Catalogues_Subtotal_Actual = item1_price + item2_price + item3_price;
		Teacher_Catalogues_Subtotal_Actual = Double
				.parseDouble(new DecimalFormat("##.##").format(Teacher_Catalogues_Subtotal_Actual));

		String TeacherCataloguesClbSubTot = SubTotal_TeacherCatalogues().getText();
		TeacherCataloguesClbSubTot = TeacherCataloguesClbSubTot.substring(1);
		double TeacherCatalogues_SubTotal = Double.parseDouble(TeacherCataloguesClbSubTot);
		Assert.assertEquals(TeacherCatalogues_SubTotal, Teacher_Catalogues_Subtotal_Actual,
				"Teacher Catalogues Subtotal value is incorrect");

		String TeacherCataloguesTotal_Actual = Total_TeacherCatalogues_SubmitPage_For_all_Items().getText();
		TeacherCataloguesTotal_Actual = TeacherCataloguesTotal_Actual.substring(1);
		double TeacherCataloguesTotal_Act = Double.parseDouble(TeacherCataloguesTotal_Actual);
		System.out.println("TeacherCataloguesTotal_act :::::::: " + TeacherCataloguesTotal_Act);

		double TeacherClubsTotal_Exp = Teacher_Catalogues_Subtotal_Actual;
		System.out.println("TeacherClubsTotal_Exp :::::::: " + TeacherClubsTotal_Exp);
		TeacherClubsTotal_Exp = Double.parseDouble(new DecimalFormat("##.##").format(TeacherClubsTotal_Exp));

		Assert.assertEquals(TeacherCataloguesTotal_Act, TeacherClubsTotal_Exp,
				"Teacher Catalogues Total value is incorrect");

		if (amount_GST_Shipping_SubmitPage().isDisplayed()) {
			String gst_Shipping_exp = amount_GST_Shipping_SubmitPage().getText();
			gst_Shipping_exp = gst_Shipping_exp.trim();
			gst_Shipping_exp = gst_Shipping_exp.substring(1);
			double gst_Shipping_exp_2 = Double.parseDouble(gst_Shipping_exp);
			double value = 0.0;
			Assert.assertEquals(gst_Shipping_exp_2, value, "GST value is displayed for Shipping");
		} else if (amount_PST_Shipping_SubmitPage().isDisplayed()) {
			String pst_Shipping_exp = amount_PST_Shipping_SubmitPage().getText();
			pst_Shipping_exp = pst_Shipping_exp.trim();
			pst_Shipping_exp = pst_Shipping_exp.substring(1);
			double pst_Shipping_exp_2 = Double.parseDouble(pst_Shipping_exp);
			double value = 0.0;
			Assert.assertEquals(pst_Shipping_exp_2, value, "PST value is displayed for Shipping");
		} else {
			System.out.println("no_taxes_are_charged_on_Shipping");

		}

		String Shipping_val = Total_Shipping_SubmitPage().getText();
		Shipping_val = Shipping_val.trim();

		if (Shipping_val.equals("FREE!")) {
			double ShippingValue_is = 0;
			
			double Total_Amount_Of_Student_Teacher_Shipping_amt = TeacherClubsTotal_Exp + ShippingValue_is;
			Total_Amount_Of_Student_Teacher_Shipping_amt = Double
					.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Student_Teacher_Shipping_amt));
			
			String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
			Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
			double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
			Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Student_Teacher_Shipping_amt,
					"Total owing value is incorrect");

		} else if (!Shipping_val.equals("FREE!")) {
			String Shipping_act = subTotal_PaidShipping_SubmitPage().getText();
			Shipping_act = Shipping_act.trim();
			Shipping_act = Shipping_act.substring(1);
			double Shipping_act_2 = Double.parseDouble(Shipping_act);
			Shipping_act_2 = Double.parseDouble(new DecimalFormat("##.##").format(Shipping_act_2));

		double Total_Amount_Of_Student_Teacher_Shipping_amt = TeacherClubsTotal_Exp+ Shipping_act_2;
		Total_Amount_Of_Student_Teacher_Shipping_amt = Double
				.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Student_Teacher_Shipping_amt));

		String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
		Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
		double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
		Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Student_Teacher_Shipping_amt,
				"Total owing value is incorrect");
		}
	}

	@Override
	public void CSR_Validation_of_no_taxes_are_charged_on_Student_Clubs_Subtotal_Total_amount_ConfirmSubmitPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		if (GST_Student_Clubs_Subtotal().isDisplayed()) {
			String Student_gst = GST_Student_Clubs_Subtotal().getText();
			Student_gst = Student_gst.substring(1);
			double Student_gst_2 = Double.parseDouble(Student_gst);
			double value = 0.0;
			Assert.assertEquals(Student_gst_2, value, "GST value is displayed for Student_Clubs_Subtotal");

		} else if (PST_Student_Clubs_Subtotal().isDisplayed()) {
			String Student_pst = PST_Student_Clubs_Subtotal().getText();
			Student_pst = Student_pst.substring(1);
			double Student_gst_2 = Double.parseDouble(Student_pst);
			double value = 0.0;
			Assert.assertEquals(value, Student_gst_2, "PST value is displayed for Student_Clubs_Subtotal");
		} else {
			System.out.println("no_taxes_are_charged_on_Student_Subtotal_Total_amount");

		}

		PauseUtil.pause(4000);
		String value1 = item1_price_SubmitPage().getText();
		value1 = value1.trim();
		String ele1 = item1_qty_SubmitPage().getText();
		ele1 = ele1.trim();
		value1 = value1.substring(1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item1_price = d1 * a1;
		item1_price = Double.parseDouble(new DecimalFormat("##.##").format(item1_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item1_price);

		String value2 = item2_price_SubmitPage().getText();
		value2 = value2.trim();
		String ele2 = item2_qty_SubmitPage().getText();
		ele2 = ele2.trim();
		value2 = value2.substring(1);
		double d2 = Double.parseDouble(value2);
		System.out.println("#############>" + d2);
		int a2 = Integer.parseInt(ele2);
		System.out.println("%%%%%%%%%%%%>" + a2);
		double item2_price = d2 * a2;
		item2_price = Double.parseDouble(new DecimalFormat("##.##").format(item2_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item2_price);

		String value3 = item3_price_SubmitPage().getText();
		value3 = value3.trim();
		String ele3 = item3_qty_SubmitPage().getText();
		ele3 = ele3.trim();
		value3 = value3.substring(1);
		double d3 = Double.parseDouble(value3);
		System.out.println("#############>" + d3);
		int a3 = Integer.parseInt(ele3);
		System.out.println("%%%%%%%%%%%%>" + a3);
		double item3_price = d3 * a3;
		item3_price = Double.parseDouble(new DecimalFormat("##.##").format(item3_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item3_price);

		double Student_Clubs_Subtotal_Exp = item1_price + item2_price + item3_price;
		Student_Clubs_Subtotal_Exp = Double.parseDouble(new DecimalFormat("##.##").format(Student_Clubs_Subtotal_Exp));

		String StudentClbSubTot = subTotal_StudentClubs().getText();
		StudentClbSubTot = StudentClbSubTot.substring(1);
		double Student_SubTotal = Double.parseDouble(StudentClbSubTot);
		Assert.assertEquals(Student_SubTotal, Student_Clubs_Subtotal_Exp, "Student Clubs Subtotal value is incorrect");

		String StudentClubsTotal_Actual = Total_StudentClubs_SubmitPage_For_all_Items().getText();
		StudentClubsTotal_Actual = StudentClubsTotal_Actual.substring(1);
		double StudentClubsTotal_Act = Double.parseDouble(StudentClubsTotal_Actual);
		System.out.println("StudentClubsTotal :::::::: " + StudentClubsTotal_Act);

		double StudentClubsTotal_Exp = Student_Clubs_Subtotal_Exp;
		StudentClubsTotal_Exp = Double.parseDouble(new DecimalFormat("##.##").format(StudentClubsTotal_Exp));
		System.out.println("StudentClubsTotal_Exp :::::::: " + StudentClubsTotal_Actual);

		Assert.assertEquals(StudentClubsTotal_Act, StudentClubsTotal_Exp, "Student Clubs Total value is incorrect");

		if (amount_GST_Shipping_SubmitPage().isDisplayed()) {
			String gst_Shipping_exp = amount_GST_Shipping_SubmitPage().getText();
			gst_Shipping_exp = gst_Shipping_exp.trim();
			gst_Shipping_exp = gst_Shipping_exp.substring(1);
			double gst_Shipping_exp_2 = Double.parseDouble(gst_Shipping_exp);
			double value = 0.0;
			Assert.assertEquals(gst_Shipping_exp_2, value, "GST value is displayed for Shipping");
		} else if (amount_PST_Shipping_SubmitPage().isDisplayed()) {
			String pst_Shipping_exp = amount_PST_Shipping_SubmitPage().getText();
			pst_Shipping_exp = pst_Shipping_exp.trim();
			pst_Shipping_exp = pst_Shipping_exp.substring(1);
			double pst_Shipping_exp_2 = Double.parseDouble(pst_Shipping_exp);
			double value = 0.0;
			Assert.assertEquals(pst_Shipping_exp_2, value, "PST value is displayed for Shipping");
		} else {
			System.out.println("no_taxes_are_charged_on_Shipping");

		}

		String Shipping_val = Total_Shipping_SubmitPage().getText();
		Shipping_val = Shipping_val.trim();

		if (Shipping_val.equals("FREE!")) {
			double ShippingValue_is = 0;
			
			double Total_Amount_Of_Student_Teacher_Shipping_amt = StudentClubsTotal_Exp + ShippingValue_is;
			Total_Amount_Of_Student_Teacher_Shipping_amt = Double
					.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Student_Teacher_Shipping_amt));
			
			String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
			Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
			double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
			Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Student_Teacher_Shipping_amt,
					"Total owing value is incorrect");

		} else if (!Shipping_val.equals("FREE!")) {
			String Shipping_act = subTotal_PaidShipping_SubmitPage().getText();
			Shipping_act = Shipping_act.trim();
			Shipping_act = Shipping_act.substring(1);
			double Shipping_act_2 = Double.parseDouble(Shipping_act);
			Shipping_act_2 = Double.parseDouble(new DecimalFormat("##.##").format(Shipping_act_2));

		double Total_Amount_Of_Student_Teacher_Shipping_amt = StudentClubsTotal_Exp + Shipping_act_2;
		Total_Amount_Of_Student_Teacher_Shipping_amt = Double
				.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Student_Teacher_Shipping_amt));

		String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
		Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
		double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
		Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Student_Teacher_Shipping_amt,
				"Total owing value is incorrect");
		}
	}

	@Override
	public void CSR_adds_mul_Student_Teacher_cat_items_from_diff_flyers_OrderEntryPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		fld1_FlyerCode_in_OrderEntryPage().click();
		fld1_FlyerCode_in_OrderEntryPage().clear();
		fld1_FlyerCode_in_OrderEntryPage()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("FlyerCode"));
		PauseUtil.pause(1000);
		Item_Num_field_in_OrderEntryPage().click();
		Item_Num_field_in_OrderEntryPage().clear();
		Item_Num_field_in_OrderEntryPage().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ItemNum"));
		PauseUtil.pause(1000);
		Paid_QTY_field_in_OrderEntryPage().click();
		Paid_QTY_field_in_OrderEntryPage().clear();
		Paid_QTY_field_in_OrderEntryPage().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ItemQty"));
		PauseUtil.pause(1000);

		Item_Num_field2_in_OrderEntryPage().click();
		Item_Num_field2_in_OrderEntryPage().clear();
		Paid_QTY_field2_in_OrderEntryPage().click();
		Paid_QTY_field2_in_OrderEntryPage().clear();
		PauseUtil.pause(1000);
		Item_Num_field3_in_OrderEntryPage().click();
		Item_Num_field3_in_OrderEntryPage().clear();
		Paid_QTY_field3_in_OrderEntryPage().click();
		Paid_QTY_field3_in_OrderEntryPage().clear();
		PauseUtil.pause(1000);
		/*Item_Num_field4_in_OrderEntryPage().click();
		Item_Num_field4_in_OrderEntryPage().clear();
		PauseUtil.pause(1000);
		Paid_QTY_field4_in_OrderEntryPage().click();
		Paid_QTY_field4_in_OrderEntryPage().clear();*/

		PauseUtil.waitForAjaxToComplete(2500);
		fld2_FlyerCode_in_OrderEntryPage().click();
		fld2_FlyerCode_in_OrderEntryPage().clear();
		fld2_FlyerCode_in_OrderEntryPage()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("FlyerCode2"));
		frm2_Item_Num_field1_in_OrderEntryPage().click();
		frm2_Item_Num_field1_in_OrderEntryPage().clear();
		frm2_Item_Num_field1_in_OrderEntryPage()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ItemNum2"));
		PauseUtil.pause(1000);
		frm2_Paid_QTY_field1_in_OrderEntryPage().click();
		frm2_Paid_QTY_field1_in_OrderEntryPage().clear();
		frm2_Paid_QTY_field1_in_OrderEntryPage()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ItemQty2"));
		PauseUtil.pause(1000);
		frm2_Item_Num_field2_in_OrderEntryPage().click();
		frm2_Item_Num_field2_in_OrderEntryPage().clear();
		frm2_Item_Num_field2_in_OrderEntryPage()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ItemNum3"));
		PauseUtil.pause(1000);
		frm2_Paid_QTY_field2_in_OrderEntryPage().click();
		frm2_Paid_QTY_field2_in_OrderEntryPage().clear();
		frm2_Paid_QTY_field2_in_OrderEntryPage()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("ItemQty3"));
		PauseUtil.pause(1000);
	}

	@Override
	public void CSR_Validation_of_no_taxes_are_charged_on_Student_and_Teacher_Clubs_Subtotal_Total_amount_ConfirmSubmitPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		if (GST_Student_Clubs_Subtotal().isDisplayed()) {
			String Student_gst = GST_Student_Clubs_Subtotal().getText();
			Student_gst = Student_gst.substring(1);
			double Student_gst_2 = Double.parseDouble(Student_gst);
			double value = 0.0;
			Assert.assertEquals(Student_gst_2, value, "GST value is displayed for Student_Clubs_Subtotal");

		} else if (PST_Student_Clubs_Subtotal().isDisplayed()) {
			String Student_pst = PST_Student_Clubs_Subtotal().getText();
			Student_pst = Student_pst.substring(1);
			double Student_gst_2 = Double.parseDouble(Student_pst);
			double value = 0.0;
			Assert.assertEquals(value, Student_gst_2, "PST value is displayed for Student_Clubs_Subtotal");
		} else if (GST_Teacher_Catalogues_Subtotal().isDisplayed()) {
			String Teacher_gst = GST_Teacher_Catalogues_Subtotal().getText();
			Teacher_gst = Teacher_gst.substring(1);
			double Teacher_gst_2 = Double.parseDouble(Teacher_gst);
			double value = 0.0;
			Assert.assertEquals(Teacher_gst_2, value, "GST value is displayed for Teacher_Catalogues_Subtotal");
		} else if (PST_Teacher_Catalogues_Subtotal().isDisplayed()) {
			String Teacher_pst = PST_Teacher_Catalogues_Subtotal().getText();
			Teacher_pst = Teacher_pst.substring(1);
			double Teacher_pst_2 = Double.parseDouble(Teacher_pst);
			double value = 0.0;
			Assert.assertEquals(Teacher_pst_2, value, "PST value is displayed for Teacher_Catalogues_Subtotal");
		} else {
			System.out.println("no_taxes_are_charged_on_Student_and_Teacher_Catalogues_Subtotal_Total_amount");

		}

		PauseUtil.pause(4000);
		String value1 = item1_price_SubmitPage().getText();
		value1 = value1.trim();
		String ele1 = item1_qty_SubmitPage().getText();
		ele1 = ele1.trim();
		value1 = value1.substring(1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item1_price = d1 * a1;
		item1_price = Double.parseDouble(new DecimalFormat("##.##").format(item1_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item1_price);

		double Student_Clubs_Subtotal_Exp = item1_price;
		Student_Clubs_Subtotal_Exp = Double.parseDouble(new DecimalFormat("##.##").format(Student_Clubs_Subtotal_Exp));

		String StudentClbSubTot = subTotal_StudentClubs().getText();
		StudentClbSubTot = StudentClbSubTot.substring(1);
		double Student_SubTotal = Double.parseDouble(StudentClbSubTot);
		Assert.assertEquals(Student_SubTotal, Student_Clubs_Subtotal_Exp, "Student Clubs Subtotal value is incorrect");

		String StudentClubsTotal_Actual = Total_StudentClubs_SubmitPage_For_all_Items().getText();
		StudentClubsTotal_Actual = StudentClubsTotal_Actual.substring(1);
		double StudentClubsTotal_Act = Double.parseDouble(StudentClubsTotal_Actual);
		System.out.println("StudentClubsTotal :::::::: " + StudentClubsTotal_Act);

		double StudentClubsTotal_Exp = Student_Clubs_Subtotal_Exp;
		StudentClubsTotal_Exp = Double.parseDouble(new DecimalFormat("##.##").format(StudentClubsTotal_Exp));
		System.out.println("StudentClubsTotal_Exp :::::::: " + StudentClubsTotal_Actual);

		Assert.assertEquals(StudentClubsTotal_Act, StudentClubsTotal_Exp, "Student Clubs Total value is incorrect");

		String value2 = item2_price_SubmitPage().getText();
		value2 = value2.trim();
		String ele2 = item2_qty_SubmitPage().getText();
		ele2 = ele2.trim();
		value2 = value2.substring(1);
		double d2 = Double.parseDouble(value2);
		System.out.println("#############>" + d2);
		int a2 = Integer.parseInt(ele2);
		System.out.println("%%%%%%%%%%%%>" + a2);
		double item2_price = d2 * a2;
		item2_price = Double.parseDouble(new DecimalFormat("##.##").format(item2_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item2_price);

		String value3 = item3_price_SubmitPage().getText();
		value3 = value3.trim();
		String ele3 = item3_qty_SubmitPage().getText();
		ele3 = ele3.trim();
		value3 = value3.substring(1);
		double d3 = Double.parseDouble(value3);
		System.out.println("#############>" + d3);
		int a3 = Integer.parseInt(ele3);
		System.out.println("%%%%%%%%%%%%>" + a3);
		double item3_price = d3 * a3;
		item3_price = Double.parseDouble(new DecimalFormat("##.##").format(item3_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item3_price);

		double Teacher_Catalogues_Subtotal_Actual = item2_price + item3_price;
		Teacher_Catalogues_Subtotal_Actual = Double
				.parseDouble(new DecimalFormat("##.##").format(Teacher_Catalogues_Subtotal_Actual));

		String TeacherCataloguesClbSubTot = SubTotal_TeacherCatalogues().getText();
		TeacherCataloguesClbSubTot = TeacherCataloguesClbSubTot.substring(1);
		double TeacherCatalogues_SubTotal = Double.parseDouble(TeacherCataloguesClbSubTot);
		Assert.assertEquals(TeacherCatalogues_SubTotal, Teacher_Catalogues_Subtotal_Actual,
				"Teacher Catalogues Subtotal value is incorrect");

		String TeacherCataloguesTotal_Actual = Total_TeacherCatalogues_SubmitPage_For_all_Items().getText();
		TeacherCataloguesTotal_Actual = TeacherCataloguesTotal_Actual.substring(1);
		double TeacherCataloguesTotal_Act = Double.parseDouble(TeacherCataloguesTotal_Actual);
		System.out.println("TeacherCataloguesTotal_act :::::::: " + TeacherCataloguesTotal_Act);

		double TeacherClubsTotal_Exp = Teacher_Catalogues_Subtotal_Actual;
		System.out.println("TeacherClubsTotal_Exp :::::::: " + TeacherClubsTotal_Exp);
		TeacherClubsTotal_Exp = Double.parseDouble(new DecimalFormat("##.##").format(TeacherClubsTotal_Exp));

		Assert.assertEquals(TeacherCataloguesTotal_Act, TeacherClubsTotal_Exp,
				"Teacher Catalogues Total value is incorrect");

		if (amount_GST_Shipping_SubmitPage().isDisplayed()) {
			String gst_Shipping_exp = amount_GST_Shipping_SubmitPage().getText();
			gst_Shipping_exp = gst_Shipping_exp.trim();
			gst_Shipping_exp = gst_Shipping_exp.substring(1);
			double gst_Shipping_exp_2 = Double.parseDouble(gst_Shipping_exp);
			double value = 0.0;
			Assert.assertEquals(gst_Shipping_exp_2, value, "GST value is displayed for Shipping");
		} else if (amount_PST_Shipping_SubmitPage().isDisplayed()) {
			String pst_Shipping_exp = amount_PST_Shipping_SubmitPage().getText();
			pst_Shipping_exp = pst_Shipping_exp.trim();
			pst_Shipping_exp = pst_Shipping_exp.substring(1);
			double pst_Shipping_exp_2 = Double.parseDouble(pst_Shipping_exp);
			double value = 0.0;
			Assert.assertEquals(pst_Shipping_exp_2, value, "PST value is displayed for Shipping");
		} else {
			System.out.println("no_taxes_are_charged_on_Shipping");

		}

		/*String ShippingTotValue_exp = Total_Shipping_SubmitPage().getText();
		ShippingTotValue_exp = ShippingTotValue_exp.trim();
		ShippingTotValue_exp = ShippingTotValue_exp.substring(1);
		double ShippingTotValue_exp_2 = Double.parseDouble(ShippingTotValue_exp);*/
		
		String Shipping_val = Total_Shipping_SubmitPage().getText();
		Shipping_val = Shipping_val.trim();

		if (Shipping_val.equals("FREE!")) {
			double ShippingValue_is = 0;
			
			double Total_Amount_Of_Student_Teacher_Shipping_amt = StudentClubsTotal_Exp + TeacherClubsTotal_Exp
					+ ShippingValue_is;
			Total_Amount_Of_Student_Teacher_Shipping_amt = Double
					.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Student_Teacher_Shipping_amt));
			
			String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
			Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
			double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
			Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Student_Teacher_Shipping_amt,
					"Total owing value is incorrect");

		} else if (!Shipping_val.equals("FREE!")) {
			String Shipping_act = subTotal_PaidShipping_SubmitPage().getText();
			Shipping_act = Shipping_act.trim();
			Shipping_act = Shipping_act.substring(1);
			double Shipping_act_2 = Double.parseDouble(Shipping_act);
			Shipping_act_2 = Double.parseDouble(new DecimalFormat("##.##").format(Shipping_act_2));

		double Total_Amount_Of_Student_Teacher_Shipping_amt = StudentClubsTotal_Exp + TeacherClubsTotal_Exp
				+ Shipping_act_2;
		Total_Amount_Of_Student_Teacher_Shipping_amt = Double
				.parseDouble(new DecimalFormat("##.##").format(Total_Amount_Of_Student_Teacher_Shipping_amt));

		String Total_Owing_Amount_Expected = Total_Amount_Owing_submitPage().getText();
		Total_Owing_Amount_Expected = Total_Owing_Amount_Expected.substring(1);
		double Total_Owing_Amount_Expected_2 = Double.parseDouble(Total_Owing_Amount_Expected);
		Assert.assertEquals(Total_Owing_Amount_Expected_2, Total_Amount_Of_Student_Teacher_Shipping_amt,
				"Total owing value is incorrect");
		}
	}

	@Override
	public void CSR_enters_the_Ac_Num_and_clicks_on_Search() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		fld_Ac_Num_LocateAccountPage().click();
		fld_Ac_Num_LocateAccountPage().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("AcNum"));
		PauseUtil.pause(2000);
		Btn_Search_LocateAccountPage().click();
	}

	@Override
	public void CSR_verify_Start_a_New_Search_hyperlink_displayed_in_SearchResults_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			hyperLink_Start_New_Search_SearchResults().isDisplayed();
			System.out.println("Start a New Search hyperlink is displayed in Search results page");
		} catch (Exception e) {
			Assert.fail("Start a New Search hyperlink is not displayed in Search results page");
		}

		String act_text = hyperLink_Start_New_Search_SearchResults().getText();
		act_text = act_text.trim();

		String exp_text = "Start a New Search";
		Assert.assertEquals(act_text, exp_text,
				"Incorrect label is displayed for Start a New Search in Search Results page");
	}

	@Override
	public void CSR_clicks_on_Start_a_New_Search_hyperlink_in_SearchResults_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		hyperLink_Start_New_Search_SearchResults().click();
	}

	@Override
	public void CSR_verify_Locate_Account_page_displayed() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			hdr_Locate_Account_Locate_Page().isDisplayed();
			System.out.println("Locate Account page is displayed");
		} catch (Exception e) {
			Assert.fail("Locate Account page is not displayed");
		}
	}

	@Override
	public void CSR_selects_TeacheName_and_enters_field_and_clicks_on_Search_LocatePage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		dropdown_select_Search_By_LocateAccountPage().click();
		PauseUtil.pause(1000);
		option_TeacherName_SearchBy_LocateAccountPage().click();
		PauseUtil.pause(1000);
		fld_fName_SearchBy_LocateAccountPage().click();
		fld_fName_SearchBy_LocateAccountPage()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("Fname"));
		PauseUtil.pause(1000);
		fld_lName_SearchBy_LocateAccountPage().click();
		fld_lName_SearchBy_LocateAccountPage()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("Lname"));
		PauseUtil.pause(2000);
		Btn_Search_LocateAccountPage().click();
	}

	@Override
	public void CSR_validate_login_section_fields_displayed_LocateAccount_Page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			form_login_LocateAccountPage().isDisplayed();
			hdr_LocateCustomerAccountBy_LocateAccountPage().isDisplayed();
			Btn_Search_LocateAccountPage().isDisplayed();
		} catch (Exception e) {
			Assert.fail("Locate Account form section/ Locate Account By header/ Search button is not displayed");
		}

		String act_text = hdr_LocateCustomerAccountBy_LocateAccountPage().getText();
		act_text = act_text.trim();

		String exp_text = "Locate Customer Account by:";
		Assert.assertEquals(act_text, exp_text,
				"Incorrect header label is displayed for Locate Customer Account By in Locate Account page");
	}

	@Override
	public void CSR_enters_the_Ac_Num_in_LocateAccount_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		fld_Ac_Num_LocateAccountPage().click();
		fld_Ac_Num_LocateAccountPage().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("AcNum"));
	}

	@Override
	public void CSR_validate_the_Ac_num_field_accepts_entered_val_LocateAccount_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_val = fld_Ac_Num_LocateAccountPage().getAttribute("value");
		String exp_val = TestBaseProvider.getTestBase().getTestData().getString("AcNum");

		Assert.assertEquals(act_val, exp_val, "Account Number field is not accepted the entered value");
	}

	@Override
	public void CSR_validate_the_Ac_num_field_mot_accept_entered_val_LocateAccount_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_val = fld_Ac_Num_LocateAccountPage().getAttribute("value");
		String exp_val = TestBaseProvider.getTestBase().getTestData().getString("AcNum");

		Assert.assertNotEquals(act_val, exp_val, "Account Number field is accepted the entered value");
	}

	@Override
	public void CSR_verify_Search_btn_disabled_in_LocateAccount_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		if (Btn_Search_LocateAccountPage().isEnabled()) {
			Assert.fail("Search button is enabled by default in Locate Account page");
		} else {
			System.out.println("Search button is disabled by default in Locate Account page");
		}
	}

	@Override
	public void CSR_verify_Blue_step_script_icon_displayed_in_LocateAccount_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			icon_Blue_script_icon_LocateAccount_page().isDisplayed();
			System.out.println("Blue step script icon is displayed in Locate Account page");
		} catch (Exception e) {
			Assert.fail("Blue step script icon is not displayed in Locate Account page");
		}
	}

	@Override
	public void CSR_clicks_on_Blue_step_script_icon_in_LocateAccount_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		icon_Blue_script_icon_LocateAccount_page().click();
	}

	@Override
	public void CSR_verify_modal_window_is_displayed_in_LocateAccount_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			Modal_window_LocateAccountPage().isDisplayed();
			System.out.println("Modal window is displayed when CSR clicks on Blue step script icon");
		} catch (Exception e) {
			Assert.fail("Modal window is not displayed when CSR clicks on Blue step script icon");
		}

		String act_text = Modal_window_LocateAccountPage().getText();
		String exp_text = "Locate Account";
		Assert.assertEquals(act_text, exp_text, "Incorrect modal window text is displayed in Locate Account page");
	}

	@Override
	public void CSR_verify_close_btn_is_displayed_in_modal_window_LocateAccount_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			Close_btn_Modal_window_LocateAccountPage().isDisplayed();
			System.out.println("Close button is displayed in Locate Account page Modal window");
		} catch (Exception e) {
			Assert.fail("Close button is not displayed in Locate Account page Modal window");
		}
	}

	@Override
	public void CSR_clicks_on_close_btn_modal_window_in_LocateAccount_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		Close_btn_Modal_window_LocateAccountPage().click();
	}

	@Override
	public void validate_LocateAccount_tab_is_highlighted() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_text = tab_LOCATE_ACCOUNT().getAttribute("class");
		String exp_text = "step-1 active";

		Assert.assertEquals(act_text, exp_text, "Locate Account Tab is not highlighted");
	}

	@Override
	public void validate_Locate_Account_page_Num_in_StepHeader_Bubble() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_val = Num_LOCATE_ACCOUNT_StepHeader().getText();
		act_val = act_val.trim();

		String exp_val = "1";

		Assert.assertEquals(act_val, exp_val, "Locate Account page number is invalid in Step header");
	}

	@Override
	public void CSR_verify_Blue_step_script_icon_displayed_in_SearchResults_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			icon_Blue_script_icon_SearchResults_page().isDisplayed();
			System.out.println("Blue step script icon is displayed in Search Results page");
		} catch (Exception e) {
			Assert.fail("Blue step script icon is not displayed in Search Results page");
		}
	}

	@Override
	public void CSR_clicks_on_Blue_step_script_icon_in_SearchResults_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		icon_Blue_script_icon_SearchResults_page().click();
	}

	@Override
	public void CSR_verify_modal_window_is_displayed_in_SearchResults_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			Modal_window_LocateAccountPage().isDisplayed();
			System.out.println("Modal window is displayed when CSR clicks on Blue step script icon");
		} catch (Exception e) {
			Assert.fail("Modal window is not displayed when CSR clicks on Blue step script icon");
		}

		String act_text = Modal_window_LocateAccountPage().getText();
		String exp_text = "Locate Account";
		Assert.assertEquals(act_text, exp_text, "Incorrect modal window text is displayed in Search Results page");
	}

	@Override
	public void CSR_verify_close_btn_is_displayed_in_modal_window_SearchResults_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			Close_btn_Modal_window_LocateAccountPage().isDisplayed();
			System.out.println("Close button is displayed in Search Results page Modal window");
		} catch (Exception e) {
			Assert.fail("Close button is not displayed in Search Results page Modal window");
		}
	}

	@Override
	public void CSR_verify_Search_Results_page_displayed() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			hdr_SearchResults_SearchResultsPage().isDisplayed();
			System.out.println("Search Results page is displayed");
		} catch (Exception e) {
			Assert.fail("Search Results page is not displayed");
		}
	}

	@Override
	public void CSR_verify_hyperlink_School_not_in_system_displayed_in_SearchResults_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			hyperLink_School_not_in_System_SearchResults_page().isDisplayed();
			System.out.println("School is not in the system? hyperlink is displayed in Search Results page");
		} catch (Exception e) {
			Assert.fail("School is not in the system? hyperlink is not displayed in Search Results page");
		}
	}

	@Override
	public void CSR_clicks_on_hyperlink_School_not_in_system_in_SearchResults_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		hyperLink_School_not_in_System_SearchResults_page().click();
	}

	@Override
	public void CSR_verify_modal_window_is_displayed_for_SchoolNotInSystem_SearchResults_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			Modal_window_LocateAccountPage().isDisplayed();
			System.out.println(
					"Modal window is displayed when CSR clicks on School Not In System hyperlink in Search results page");
		} catch (Exception e) {
			Assert.fail(
					"Modal window is not displayed when CSR clicks on School Not In System hyperlink in Search results page");
		}

		String act_text = Modal_window_LocateAccountPage().getText();
		String exp_text = "Instructions for CSR";
		Assert.assertEquals(act_text, exp_text,
				"Incorrect modal window text is displayed for School Not In System hyperlink in Search results page");
	}

	@Override
	public void CSR_verify_paragraph_text_is_displayed_in_SchoolNotInSystem_modalWindow_SearchResults_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			text_fld_in_SchoolNotInSystem_ModalWindow_SearchResults_Page().isDisplayed();
			System.out.println(
					"Paragraph of the text is displayed in the Modal window of School is not in the System in  Search Results page");
		} catch (Exception e) {
			Assert.fail(
					"Paragraph of the text is not displayed in the Modal window of School is not in the System in  Search Results page");
		}
	}

	@Override
	public void CSR_verify_close_btn_is_displayed_in_modal_window_of_SchoolNotInSystem_SearchResults_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			Close_btn_Modal_window_LocateAccountPage().isDisplayed();
			System.out.println("Close button is displayed in School Not In System Modal window");
		} catch (Exception e) {
			Assert.fail("Close button is not displayed in School Not In System Modal window");
		}
	}

	@Override
	public void CSR_verify_Account_Hold_Section_displayed_in_Payment_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			section_Customer_Account_Hold_Status_Payment_page().isDisplayed();
			System.out.println("Account Hold Status Section is displayed in Payment page");
		} catch (Exception e) {
			Assert.fail("Account Hold Status Section is not displayed in Payment page");
		}
	}

	@Override
	public void CSR_verify_the_hdr_text_Account_Hold_Section_in_Payment_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_text = hdr_Customer_Account_Hold_Status_Payment_page().getText();
		String exp_text = "ACCOUNT HOLD STATUS:TEMPORARY ON HOLD";

		Assert.assertEquals(act_text, exp_text, "Incorrect title text is displayed for ACCOUNT HOLD STATUS");
	}

	@Override
	public void CSR_verify_the_radio_btn1_with_text_for_Account_Hold_Section_in_Payment_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		try {
			radio_btn1_Customer_Account_Hold_Status_Payment_page().isDisplayed();
		} catch (Exception e) {
			Assert.fail("Radio button 1 is not displayed in Account Hold Status section in Payment page");
		}

		String radio_btn1_text = section_Customer_Account_Hold_Status_Payment_page().getText();
		radio_btn1_text = radio_btn1_text.trim();
		System.out.println("###########:" + radio_btn1_text);

		String exp_text = "Override order and place on 'Open' Status";
		Assert.assertEquals(radio_btn1_text, exp_text,
				"Incorrect text is displayed for the radio button 1 field in Account Hold Status section");
	}

	@Override
	public void CSR_verify_the_radio_btn2_with_text_for_Account_Hold_Section_in_Payment_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		try {
			radio_btn2_Customer_Account_Hold_Status_Payment_page().isDisplayed();
		} catch (Exception e) {
			Assert.fail("Radio button 2 is not displayed in Account Hold Status section in Payment page");
		}

		String radio_btn2_text = section_Customer_Account_Hold_Status_Payment_page().getText();
		radio_btn2_text = radio_btn2_text.trim();
		System.out.println("@@@@@@@@@@@:" + radio_btn2_text);

		String exp_text2 = "Submit order with 'Hold' Status";
		Assert.assertEquals(radio_btn2_text, exp_text2,
				"Incorrect text is displayed for the radio button 2 field in Account Hold Status section");
	}

	@Override
	public void CSR_verify_the_radio_btns_are_selected_in_Account_Hold_Section_in_Payment_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		boolean val1 = radio_btn1_Customer_Account_Hold_Status_Payment_page().isSelected();

		System.out.println("############:" + val1);
		if (radio_btn1_Customer_Account_Hold_Status_Payment_page().isSelected()) {
			Assert.fail("Radio button 1 is selected by default in Account Hold Status section in Payment page");
		} else {
			System.out.println(
					"Radio button 1 is not selected by default in Account Hold Status section in Payment page");
		}

		if (radio_btn2_Customer_Account_Hold_Status_Payment_page().isSelected()) {
			Assert.fail("Radio button 2 is selected by default in Account Hold Status section in Payment page");
		} else {
			System.out.println(
					"Radio button 2 is not selected by default in Account Hold Status section in Payment page");
		}

	}

	@Override
	public void addmoreItemstoCartforFreeship() {
		getbtn_CouponPage_backtoshop().click();
		PauseUtil.pause(2000);

	}

	@Override
	public void CSR_clicks_on_Province_dropDown_list_alternateShipping_section_Payment_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		selection_Province_alternateShipping_fld_Payment_page().click();
	}

	@Override
	public void CSR_clicks_on_Province_dropDown_list_BillingInfo_section_Payment_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		selection_Province_BillingInfo_fld_Payment_page().click();
	}

	@Override
	public void CSR_validate_the_Province_list_count_alternateShipping_section_Payment_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		int list_Size = list_Province_alternateShipping_fld_Payment_page().size();
		list_Size = list_Size - 1;
		System.out.println("###########:" + list_Size);
		int exp_count = 13;

		Assert.assertEquals(list_Size, exp_count,
				"Incorrect Canadian Province list is displayed in Alternate shipping section");

	}

	@Override
	public void CSR_validate_the_Province_list_count_BillingInfo_section_Payment_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		int list_Size = list_Province_BillingInfo_fld_Payment_page().size() - 1;
		System.out.println("###########:" + list_Size);
		int exp_count = 13;
		Assert.assertEquals(list_Size, exp_count,
				"Incorrect Canadian Province list is displayed in Billing Info Section");
	}

	@Override
	public void CSR_validate_the_Province_list_in_ascending_order_alternateShipping_section_Payment_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		int list_Size = list_Province_alternateShipping_fld_Payment_page().size();
		List<String> scores = new ArrayList<String>();
		for (int i = 1; i < list_Size; i++) {
			WebElement list = list_Province_alternateShipping_fld_Payment_page().get(i);
			String list_text = list.getText();
			System.out.println("##########:" + list_text);

			scores.add(list_text);
		}
		System.out.println("@@@@@@@@@@@@@@" + scores);

		List<String> scores2 = new ArrayList<String>(scores);
		Collections.sort(scores2);
		System.out.println("^^^^^^^^^^^^^:" + scores2);

		Assert.assertEquals(scores2, scores, "Province list is not in acsending order in Alternate shipping section");

	}

	@Override
	public void CSR_validate_the_Province_list_in_ascending_order_BillingInfo_section_Payment_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		int list_Size = list_Province_BillingInfo_fld_Payment_page().size();
		List<String> scores = new ArrayList<String>();
		for (int i = 1; i < list_Size; i++) {
			WebElement list = list_Province_BillingInfo_fld_Payment_page().get(i);
			String list_text = list.getText();
			System.out.println("##########:" + list_text);
			scores.add(list_text);
		}
		System.out.println("@@@@@@@@@@@@@@" + scores);

		List<String> scores2 = new ArrayList<String>(scores);
		Collections.sort(scores2);
		System.out.println("^^^^^^^^^^^^^:" + scores2);

		Assert.assertEquals(scores2, scores, "Province list is not in acsending order in Billing Info section");
	}

	@Override
	public void CSR_navigates_from_Submit_page_to_Payment_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		tab_Payment_in_hdr_section().click();

	}

	@Override
	public void CSR_verify_the_credit_card_lst_count_Payment_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		int act_val = list_CreditCard_Payment_page().size();
		int exp_val = 2;

		Assert.assertEquals(act_val, exp_val, "Incorrect list is displayed in Credit Card saved list");

	}

	@Override
	public void CSR_selects_TeacheName_from_dropDown_LocatePage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		dropdown_select_Search_By_LocateAccountPage().click();
		PauseUtil.pause(1000);
		option_TeacherName_SearchBy_LocateAccountPage().click();
	}

	@Override
	public void CSR_enters_Teacher_Fname_LocatePage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		fld_fName_SearchBy_LocateAccountPage().click();
		fld_fName_SearchBy_LocateAccountPage()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("Fname"));
	}

	@Override
	public void CSR_enters_Teacher_Lname_LocatePage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		fld_lName_SearchBy_LocateAccountPage().click();
		fld_lName_SearchBy_LocateAccountPage()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("Lname"));
		fld_lName_SearchBy_LocateAccountPage().sendKeys(Keys.TAB);
	}

	@Override
	public void CSR_clicks_on_Search_btn_LocatePage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		Btn_Search_LocateAccountPage().click();
	}

	@Override
	public void CSR_validate_Lname_occurence_in_TeacherName_SearchResults_LocatePage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		String Lname = TestBaseProvider.getTestBase().getTestData().getString("Lname");

		int act_val = list_Teacher_Lname_Search_results_Locate_page().size();
		act_val = act_val - 1;
		for (int i = 0; i <= act_val; i++) {
			WebElement list = list_Teacher_Lname_Search_results_Locate_page().get(i);
			String list_text = list.getText();
			System.out.println("#########" + list_text);

			int val = list_text.indexOf(Lname);
			System.out.println("#########:" + val);
			if (val >= 0) {
				System.out.println("Searched character is present in the Teacher's Last name of line num:" + i);
			} else {
				Assert.fail("Searched character is not present in the Teacher's Last name of line num:" + i);
			}
		}
	}

	@Override
	public void CSR_validate_Fname_occurence_in_TeacherName_SearchResults_LocatePage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		String Fname = TestBaseProvider.getTestBase().getTestData().getString("Fname");

		int act_val = list_Teacher_Fname_Search_results_Locate_page().size();
		act_val = act_val - 1;
		for (int i = 0; i <= act_val; i++) {
			WebElement list = list_Teacher_Fname_Search_results_Locate_page().get(i);
			String list_text = list.getText();
			System.out.println("#########" + list_text);

			int val = list_text.indexOf(Fname);
			System.out.println("#########:" + val);
			if (val >= 0) {
				System.out.println("Searched character is present in the Teacher's First name of line num:" + i);
			} else {
				Assert.fail("Searched character is not present in the Teacher's First name of line num:" + i);
			}
		}
	}

	@Override
	public void CSR_selects_SchoolAddress_from_dropDown_LocatePage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		dropdown_select_Search_By_LocateAccountPage().click();
		PauseUtil.pause(1000);
		option_SchoolAddr_SearchBy_LocateAccountPage().click();
	}

	@Override
	public void CSR_enters_SchoolName_in_LocatePage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		fld_SchoolName_LocateAccountPage().click();
		fld_SchoolName_LocateAccountPage().clear();
		fld_SchoolName_LocateAccountPage()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("SchoolName"));
		fld_SchoolName_LocateAccountPage().sendKeys(Keys.TAB);
	}

	@Override
	public void CSR_validate_SchoolName_fld_not_accept_morethan_70_in_LocatePage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_val = fld_SchoolName_LocateAccountPage().getAttribute("value");
		String exp_val = TestBaseProvider.getTestBase().getTestData().getString("SchoolName");

		Assert.assertNotEquals(act_val, exp_val, "School Name field is accepted more than 70 characters");
	}

	@Override
	public void CSR_verify_correct_Ac_num_displayed_in_SearchResults_Page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		try {
			hdr_SearchResults_SearchResultsPage().isDisplayed();
			System.out.println("Search Results page is displayed");
		} catch (Exception e) {
			Assert.fail("Search Results page is not displayed");
		}

		String act_text = Ac_num_in_SearchResults_SearchResultsPage().getText();
		act_text = act_text.trim();

		String exp_text = TestBaseProvider.getTestBase().getTestData().getString("AcNum");

		Assert.assertEquals(act_text, exp_text, "Incorrect Account number is displayed in Search results page");
	}

	@Override
	public void CSR_verify_correct_SearchResults_Page_displayed() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		try {
			hdr_SearchResults_SearchResultsPage().isDisplayed();
			System.out.println("Search Results page is displayed");
		} catch (Exception e) {
			Assert.fail("Search Results page is not displayed");
		}
	}

	@Override
	public void CSR_verify_Error_popUp_displayed_Locate_Page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		try {
			popUp_error_msg_Invalid_Ac_Num_Locate_Page().isDisplayed();
			System.out.println("Error PopUp message is displayed when CSR searches for invalid Ac num");
		} catch (Exception e) {
			Assert.fail("Error PopUp message is not displayed when CSR searches for invalid Ac num");
		}
	}

	@Override
	public void CSR_enters_the_Ac_Num_in_Locate_Account_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		fld_Ac_Num_LocateAccountPage().click();
		fld_Ac_Num_LocateAccountPage().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("AcNum"));
	}

	@Override
	public void CSR_verify_Search_btn_enabled_in_LocateAccount_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		if (Btn_Search_LocateAccountPage().isEnabled()) {
			System.out.println("Search button is enabled in Locate Account page");
		} else {
			Assert.fail("Search button is disabled in Locate Account page");
		}
	}

	@Override
	public void CSR_validate_Teacher_Fname_not_accept_morethan_50_LocatePage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		String act_text = fld_fName_SearchBy_LocateAccountPage().getAttribute("value");
		String exp_text = TestBaseProvider.getTestBase().getTestData().getString("Fname");

		Assert.assertNotEquals(act_text, exp_text, "Teacher's first name field is accepted more than 50 characters");
	}

	@Override
	public void CSR_validate_Teacher_Lname_not_accept_morethan_50_LocatePage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		String act_text = fld_lName_SearchBy_LocateAccountPage().getAttribute("value");
		String exp_text = TestBaseProvider.getTestBase().getTestData().getString("Lname");

		Assert.assertNotEquals(act_text, exp_text, "Teacher's last name field is accepted more than 50 characters");
	}

	@Override
	public void CSR_selects_country_in_LocatePage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		SCHUtils.selectOptionByVisibleText(fld_Country_LocateAccountPage(),
				TestBaseProvider.getTestBase().getTestData().getString("Country"));
	}

	@Override
	public void CSR_enters_PostalCode_in_LocatePage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		fld_PostalCode_LocateAccountPage().click();
		fld_PostalCode_LocateAccountPage().clear();
		fld_PostalCode_LocateAccountPage()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("PostalCode"));
		fld_PostalCode_LocateAccountPage().sendKeys(Keys.TAB);
	}

	@Override
	public void CSR_selects_province_in_LocatePage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		SCHUtils.selectOptionByVisibleText(fld_Province_LocateAccountPage(),
				TestBaseProvider.getTestBase().getTestData().getString("Province"));
	}

	@Override
	public void CSR_selects_SchoolCity_in_LocatePage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		WebDriver driver = TestBaseProvider.getTestBase().getDriver();
		String country = TestBaseProvider.getTestBase().getTestData().getString("SchoolCity");

		selection_dropDown_SchoolCity_LocateAccountPage().click();
		JavascriptExecutor jse = (JavascriptExecutor) driver;
		jse.executeScript("window.scrollBy(0,1000)", "");
		PauseUtil.pause(2000);
		WebElement ele = driver.findElement(By.xpath("//span[text()='" + country + "']"));
		// This will scroll the drop down list until the element is
		// visible/appear
		jse.executeScript("arguments[0].scrollIntoView(true);", ele);

		PauseUtil.pause(2000);
		driver.findElement(By.xpath("//span[text()='" + country + "']")).click();

	}

	@Override
	public void CSR_validate_SchoolAddress_results_search_results_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		String SchoolName = TestBaseProvider.getTestBase().getTestData().getString("SchoolName");
		String SchoolCity = TestBaseProvider.getTestBase().getTestData().getString("SchoolCity");
		String Province = TestBaseProvider.getTestBase().getTestData().getString("Province");
		String PostalCode = TestBaseProvider.getTestBase().getTestData().getString("PostalCode");
		String Country = TestBaseProvider.getTestBase().getTestData().getString("Country");

		String act_text = fld_SchoolAdr_results_in_SearchResults_Page().getText();
		String exp_text = "We found 0 results for " + SchoolName + ", " + SchoolCity + ", " + "MB" + ", " + PostalCode
				+ ", " + "CA";

		Assert.assertEquals(act_text, exp_text, "Incorrect search results displayed");
	}

	@Override
	public void CSR_validate_TeacherName_results_search_results_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		String FName = TestBaseProvider.getTestBase().getTestData().getString("Fname");
		String LName = TestBaseProvider.getTestBase().getTestData().getString("Lname");

		String act_text = fld_SchoolAdr_results_in_SearchResults_Page().getText();
		String exp_text = "We found 0 results for " + FName + " " + LName;

		Assert.assertEquals(act_text, exp_text, "Incorrect search results displayed");

	}

	@Override
	public void CSR_validate_SchoolAddress_results_without_schoolName_search_results_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		String SchoolCity = TestBaseProvider.getTestBase().getTestData().getString("SchoolCity");
		String Province = TestBaseProvider.getTestBase().getTestData().getString("Province");
		String PostalCode = TestBaseProvider.getTestBase().getTestData().getString("PostalCode");
		String Country = TestBaseProvider.getTestBase().getTestData().getString("Country");

		String act_text = fld_SchoolAdr_results_in_SearchResults_Page().getText();
		String exp_text = "We found 0 results for " + SchoolCity + ", " + "MB" + ", " + PostalCode + ", " + "CA";

		Assert.assertEquals(act_text, exp_text, "Incorrect search results displayed");
	}

	@Override
	public void CSR_validate_SchoolAddress_results_without_schoolName_PostalCode_search_results_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		String SchoolCity = TestBaseProvider.getTestBase().getTestData().getString("SchoolCity");
		String Province = TestBaseProvider.getTestBase().getTestData().getString("Province");
		String Country = TestBaseProvider.getTestBase().getTestData().getString("Country");

		String act_text = fld_SchoolAdr_results_in_SearchResults_Page().getText();
		String exp_text = "We found 0 results for " + SchoolCity + ", " + "MB" + ", " + "CA";

		Assert.assertEquals(act_text, exp_text, "Incorrect search results displayed");
	}

	@Override
	public void CSR_validate_SchoolAddress_shows_correct_search_results_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		String SchoolName = TestBaseProvider.getTestBase().getTestData().getString("SchoolName");
		String SchoolCity = TestBaseProvider.getTestBase().getTestData().getString("SchoolCity");
		String Province = TestBaseProvider.getTestBase().getTestData().getString("Province");
		String Country = TestBaseProvider.getTestBase().getTestData().getString("Country");

		String act_text = fld_SchoolAdr_results_in_SearchResults_Page().getText();
		System.out.println("########:" + act_text);
		String exp_text = "We found 0 results for " + SchoolName + ", " + SchoolCity + ", " + "YT" + ", " + "CA";

		Assert.assertNotEquals(act_text, exp_text, "Search results are not displayed for valid data");
	}

	@Override
	public void CSR_validate_SchoolAddress_shows_correct_search_results_page_2() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		String SchoolName = TestBaseProvider.getTestBase().getTestData().getString("SchoolName");
		String SchoolCity = TestBaseProvider.getTestBase().getTestData().getString("SchoolCity");
		String Province = TestBaseProvider.getTestBase().getTestData().getString("Province");
		String PostalCode = TestBaseProvider.getTestBase().getTestData().getString("PostalCode");
		String Country = TestBaseProvider.getTestBase().getTestData().getString("Country");

		String act_text = fld_SchoolAdr_results_in_SearchResults_Page().getText();
		String exp_text = "We found 0 results for " + SchoolName + ", " + SchoolCity + ", " + "NT" + ", " + PostalCode
				+ ", " + "CA";

		Assert.assertNotEquals(act_text, exp_text, "Search results are not displayed for valid data");
	}

	@Override
	public void CSR_selects_first_schoolName_under_search_results_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		fld_1st_SchoolAdr_results_in_SearchResults_Page().click();
	}

	@Override
	public void CSR_verify_New_Search_and_School_listing_hyperlinks_displayed_in_search_results_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			hyperLink_Start_New_Search_SearchResults().isDisplayed();
			System.out.println("Start a New Search hyperlink is displayed in Search Results page");
		} catch (Exception e) {
			Assert.fail("Start a New Search hyperlink is not displayed in Search Results page");
		}

		try {
			hyperLink_Back_To_School_Listing_SearchResults().isDisplayed();
			System.out.println("Back to School Listing hyperlink is displayed in Search Results page");
		} catch (Exception e) {
			Assert.fail("Back to School Listing hyperlink is not displayed in Search Results page");
		}
	}

	@Override
	public void CSR_verify_Back_to_School_listing_hyperlink_not_display_in_search_results_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			hyperLink_Back_To_School_Listing_SearchResults().isDisplayed();
			Assert.fail("Back to School Listing hyperlink is displayed in Search Results page");
		} catch (Exception e) {
			System.out.println("Back to School Listing hyperlink is not displayed in Search Results page");
		}
	}

	@Override
	public void CSR_clicks_on_Back_to_School_listing_hyperlink_in_search_results_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		hyperLink_Back_To_School_Listing_SearchResults().click();
	}

	@Override
	public String CSR_gets_the_value_of_search_results_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_text = fld_Search_results_by_School_Address().getText();
		String exp_val = String.valueOf(act_text.replaceAll("[^\\d.]+|\\.(?!\\d)", ""));
		return exp_val;
	}

	@Override
	public void CSR_verify_the_results_value_displayed_correct_come_form_BackToSchool_in_search_results_page(
			String exp_val) {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_text = fld_Search_results_by_School_Address().getText();
		System.out.println("#############:" + act_text);
		String act_val = String.valueOf(act_text.replaceAll("[^\\d.]+|\\.(?!\\d)", ""));

		System.out.println("@@@@@@@@@@@@:" + act_val);
		System.out.println("############:" + exp_val);

		Assert.assertEquals(act_val, exp_val,
				"Incorrect search results displayed when CSR comes from Back To School listing");
	}

	@Override
	public void CSR_verify_Add_a_Card_text_in_dropDown_in_PaymentPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_text = option_select_A_New_Card().getText();
		String exp_text = "Add a New Card";

		Assert.assertEquals(act_text, exp_text, "Incorrect text is displayed for Add a New Card option in list");
	}

	@Override
	public String CSR_selects_first_schoolName_and_get_it_under_search_results_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String exp_text = fld_1st_SchoolAdr_results_in_SearchResults_Page().getText();

		fld_1st_SchoolAdr_results_in_SearchResults_Page().click();
		return exp_text;
	}

	@Override
	public void CSR_verify_the_School_Name_displays_correctly_2ndPage_search_results_page(String exp_text) {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_text = School_Name_in_paragraph_2ndPage_SearchResults_page().getText();
		act_text = act_text.trim();

		exp_text = exp_text + ",";

		Assert.assertEquals(act_text, exp_text,
				"Incorrect School Name/ Address is displayed in 2nd page of Search results paragrapgh");
	}

	@Override
	public String CSR_selects_first_schoolAddress_and_get_it_under_search_results_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String exp_text = fld_1st_SchoolAddress_results_in_SearchResults_Page().getText();

		fld_1st_SchoolAddress_results_in_SearchResults_Page().click();
		return exp_text;
	}

	@Override
	public void CSR_validate_SName_occurence_in_SchoolName_SearchResults_LocatePage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		String SchoolName = TestBaseProvider.getTestBase().getTestData().getString("SchoolName");

		int act_val = list_SchoolName_Search_results_Locate_page().size();
		act_val = act_val - 1;
		for (int i = 0; i <= act_val; i++) {
			WebElement list = list_SchoolName_Search_results_Locate_page().get(i);
			String list_text = list.getText();
			System.out.println("#########" + list_text);

			int val = list_text.indexOf(SchoolName);
			System.out.println("#########:" + val);
			if (val >= 0) {
				System.out.println("Searched character is present in the School Name of line num:" + i);
			} else {
				Assert.fail("Searched character is not present in the School Name of line num:" + i);
			}
		}
	}

	@Override
	public void CSR_selects_1st_radio_btn_in_Account_Hold_Section_in_Payment_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		radio_btn1_Customer_Account_Hold_Status_Payment_page().click();
	}

	@Override
	public void CSR_verify_Account_Hold_Section_and_radio_btns_not_display_in_Payment_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			radio_btn1_Customer_Account_Hold_Status_Payment_page().isDisplayed();
			radio_btn2_Customer_Account_Hold_Status_Payment_page().isDisplayed();
			Assert.fail("Account Hold Status Section is displayed in Payment page");
		} catch (Exception e) {
			System.out.println("Account Hold Status Section is not displayed in Payment page");
		}
	}

	@Override
	public void CSR_enters_US_PostalCode_in_LocatePage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		fld_PostalCode_US_LocateAccountPage().click();
		fld_PostalCode_US_LocateAccountPage().clear();
		fld_PostalCode_US_LocateAccountPage()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("PostalCode"));
		PauseUtil.pause(1000);
		fld_PostalCode_US_LocateAccountPage().sendKeys(Keys.TAB);
	}

	@Override
	public void CSR_verify_US_PostalCode_fld_not_accept_morethan_10_in_LocatePage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		String act_text = fld_PostalCode_US_LocateAccountPage().getText();
		act_text = act_text.trim();

		String exp_text = TestBaseProvider.getTestBase().getTestData().getString("PostalCode");

		Assert.assertNotEquals(act_text, exp_text, "Postal code field accepts the more than 10 integers");
	}

	@Override
	public void CSR_TabOut_on_US_PostalCode_in_LocatePage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		fld_PostalCode_US_LocateAccountPage().sendKeys(Keys.TAB);
	}

	@Override
	public void CSR_verify_popup_is_displayed_PostalCode_in_LocatePage() {
		//PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(500);

		try {
			popUp_PostalCode_LocateAccountPage().isDisplayed();
			System.out.println("Error popup is displayed for Postal Code field");
		} catch (Exception e) {
			Assert.fail("Error popup is not displayed for Postal Code field");
		}
	}

	@Override
	public void CSR_selects_state_in_LocatePage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		SCHUtils.selectOptionByVisibleText(fld_State_LocateAccountPage(),
				TestBaseProvider.getTestBase().getTestData().getString("State"));
	}

	@Override
	public void CSR_clicks_on_US_State_dropdown_list_in_LocatePage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		fld_State_dropdown_Selection_LocateAccountPage().click();

	}

	@Override
	public void CSR_validate_the_US_State_list_in_ascending_order_Locate_Account_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		int list_Size = list_State_US_Locate_Account_page().size();
		List<String> scores = new ArrayList<String>();
		for (int i = 1; i < list_Size; i++) {
			WebElement list = list_State_US_Locate_Account_page().get(i);
			String list_text = list.getText();
			System.out.println("##########:" + list_text);

			scores.add(list_text);
		}
		System.out.println("@@@@@@@@@@@@@@" + scores);

		List<String> scores2 = new ArrayList<String>(scores);
		Collections.sort(scores2);
		System.out.println("^^^^^^^^^^^^^:" + scores2);

		Assert.assertEquals(scores2, scores,
				"State list is not in acsending order in Locate Account page US country section");

	}

	@Override
	public void CSR_verify_the_popup_is_displayed_PO_num_fld_Payment_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			popup_PO_Number_text_box_PaymentPage().isDisplayed();
			System.out.println("Error popup message is displayed for PO number field");
		} catch (Exception e) {
			Assert.fail("Error popup message is not displayed for PO number field");
		}
	}

	@Override
	public void CSR_verify_the_popup_text_PO_num_fld_Payment_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_text = popup_PO_Number_text_box_PaymentPage().getText();
		act_text = act_text.trim();

		String exp_text = "A PO Number must be provided";

		Assert.assertEquals(act_text, exp_text, "Incorrect error text is displayed for PO number fld popup");
	}

	@Override
	public void CSR_verify_the_popup_is_displayed_Board_SchoolNum_fld_Payment_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			popup_Board_SchoolNum_text_box_PaymentPage().isDisplayed();
			System.out.println("Error popup message is displayed for Board_SchoolNum field");
		} catch (Exception e) {
			Assert.fail("Error popup message is not displayed for Board_SchoolNum field");
		}
	}

	@Override
	public void CSR_verify_the_popup_text_Board_SchoolNum_fld_Payment_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		
		String act_text=popup_Board_SchoolNum_text_box_PaymentPage().getText();
		act_text=act_text.trim();
		
		//String exp_text="We cannot seem to locate the Board/School with the number provided";
		String exp_text="An School Board Account Number must be provided";
		
		Assert.assertEquals(act_text, exp_text, "Incorrect error text is displayed for Board_SchoolNum fld popup");
	}

	@Override
	public void CSR_enters_text_Board_SchoolNum_in_Payment_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		fld_Board_SchoolNum_text_box_PaymentPage()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("SchoolNumber"));
	}

	@Override
	public void CSR_selects_SchoolAdrs_and_enters_Name_and_clicks_on_Search_LocatePage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		dropdown_select_Search_By_LocateAccountPage().click();
		PauseUtil.pause(1000);
		option_SchoolAddr_SearchBy_LocateAccountPage().click();

		fld_SchoolName_LocateAccountPage().click();
		fld_SchoolName_LocateAccountPage().clear();
		fld_SchoolName_LocateAccountPage()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("SchoolName"));
		PauseUtil.pause(2000);
		Btn_Search_LocateAccountPage().click();
	}

	@Override
	public void CSR_clicks_on_CanceOrder_link_in_Payment_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		WaitUtils.waitForDisplayed(hyperlink_Cancel_Order_Payment_Page());
		hyperlink_Cancel_Order_Payment_Page().click();
	}

	@Override
	public void CSR_selects_YES_btn_for_CancelOrder_in_Payment_page() {
		WaitUtils.waitForDisplayed(YES_to_delete_item1_reviewcart());
		YES_to_delete_item1_reviewcart().click();
	}

	@Override
	public void CSR_selects_NO_btn_for_CancelOrder_in_Payment_page() {
		WaitUtils.waitForDisplayed(NO_to_delete_item1_reviewcart());
		NO_to_delete_item1_reviewcart().click();
	}

	@Override
	public void CSR_verify_Order_Source_page_is_displayed() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		AssertUtils.assertDisplayed(CSR_Order_Type_Phone_Order());
	}

	@Override
	public void CSR_verify_cancel_order_callout_not_display() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		String act_text = callOut_CancelOrder().getAttribute("style");
		String exp_text = "display: none;";
		Assert.assertEquals(act_text, exp_text, "Cancel Order Callout is displayed");
	}

	@Override
	public void CSR_clicks_on_Locate_account_tab() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		tab_LOCATE_ACCOUNT().click();
	}

	@Override
	public void CSR_verify_item_nums_Qty_not_display_in_OrderEntryPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_itemVal = Item_Num_field_in_OrderEntryPage().getAttribute("value");
		System.out.println("#############:" + act_itemVal);
		String exp_itemVal = TestBaseProvider.getTestBase().getTestData().getString("ItemNum");
		Assert.assertNotEquals(act_itemVal, exp_itemVal, "Item number is displayed in 1st row of Order Entry form");
		PauseUtil.pause(2000);

		String act_itemQty = Paid_QTY_field_in_OrderEntryPage().getAttribute("value");
		System.out.println("@@@@@@@@@@@@@:" + act_itemQty);
		String exp_itemQty = TestBaseProvider.getTestBase().getTestData().getString("ItemQty");
		Assert.assertNotEquals(act_itemQty, exp_itemQty, "Item Qty is displayed in 1st row of Order Entry form");

		String act_itemVal2 = Item_Num_field2_in_OrderEntryPage().getAttribute("value");
		System.out.println("#############:" + act_itemVal2);
		String exp_itemVal2 = TestBaseProvider.getTestBase().getTestData().getString("ItemNum2");
		Assert.assertNotEquals(act_itemVal2, exp_itemVal2, "Item number is displayed in 2nd row of Order Entry form");
		PauseUtil.pause(2000);

		String act_itemQty2 = Paid_QTY_field2_in_OrderEntryPage().getAttribute("value");
		System.out.println("@@@@@@@@@@@@@:" + act_itemQty2);
		String exp_itemQty2 = TestBaseProvider.getTestBase().getTestData().getString("ItemQty2");
		Assert.assertNotEquals(act_itemQty2, exp_itemQty2, "Item Qty is displayed in 2nd row of Order Entry form");

		String act_itemVal3 = Item_Num_field3_in_OrderEntryPage().getAttribute("value");
		System.out.println("#############:" + act_itemVal3);
		String exp_itemVal3 = TestBaseProvider.getTestBase().getTestData().getString("ItemNum3");
		Assert.assertNotEquals(act_itemVal3, exp_itemVal3, "Item number is displayed in 3rd row of Order Entry form");
		PauseUtil.pause(2000);

		String act_itemQty3 = Paid_QTY_field3_in_OrderEntryPage().getAttribute("value");
		System.out.println("@@@@@@@@@@@@@:" + act_itemQty3);
		String exp_itemQty3 = TestBaseProvider.getTestBase().getTestData().getString("ItemQty3");
		Assert.assertNotEquals(act_itemQty3, exp_itemQty3, "Item Qty is displayed in 3rd row of Order Entry form");

	}

	@Override
	public void CSR_enters_the_Ac_Num2_and_clicks_on_Search() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		fld_Ac_Num_LocateAccountPage().click();
		fld_Ac_Num_LocateAccountPage().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("AcNum2"));
		fld_Ac_Num_LocateAccountPage().sendKeys(Keys.TAB);
		hdr_LocateCustomerAccountBy_LocateAccountPage().click();
		PauseUtil.pause(3000);

		WebDriver driver = TestBaseProvider.getTestBase().getDriver();
		WebDriverWait wait = new WebDriverWait(driver, 60);
		WebElement element1 = wait.until(ExpectedConditions.elementToBeClickable(Btn_Search_LocateAccountPage()));
		element1.click();
	}

	@Override
	public void CSR_clicks_on_1st_teacher_name_in_Search_Results() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		fld_Teacher_Name_in_SearchResults().click();

		if (list_popUp_btn_Close_Introduction_To_CSR().size() != 0) {
			popUp_btn_Close_Introduction_To_CSR().click();
			System.out.println("Introduction to CSR popUp is displayed and clicked on close button");
		} else {
			System.out.println("Introduction to CSR popUp is not displayed");
		}
	}

	@Override
	public void CSR_verify_items_not_display_in_ReviewCart_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			table_YTO_items_ReviewCartPage().isDisplayed();
			Assert.fail("Items are displayed in Review cart page");
		} catch (Exception e) {
			System.out.println("Items are not displayed in Review cart page");
		}
	}

	@Override
	public void CSR_selects_orderType_as_MailOrder() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1500);

		CSR_Order_Type_Mail_Order().click();
	}

	@Override
	public void CSR_selects_orderType_as_FaxOrder() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1500);

		CSR_Order_Type_Fax_Order().click();
	}

	@Override
	public void CSR_delete_all_items_in_ReviewCart_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1500);
		do {
			WaitUtils.waitForDisplayed(delete_item1_reviewcart());
			delete_item1_reviewcart().click();
			WaitUtils.waitForDisplayed(CSR_btn_YES_to_delete_item1_ReviewCartPage());
			CSR_btn_YES_to_delete_item1_ReviewCartPage().click();
			try {
				delete_item1_reviewcart().isDisplayed();
			} catch (Exception e) {
				System.out.println("################Review Cart list is empty");
				break;
			}
		} while (delete_item1_reviewcart().isDisplayed());
	}

	@Override
	public void user_deletes_1st_two_items_and_enter_0_for_3rd_in_reviewCart() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		int delete_item_val = 2;
		for (int i = 1; i <= delete_item_val; i++) {
			WaitUtils.waitForDisplayed(delete_item1_reviewcart());
			delete_item1_reviewcart().click();
			WaitUtils.waitForDisplayed(CSR_btn_YES_to_delete_item1_ReviewCartPage());
			CSR_btn_YES_to_delete_item1_ReviewCartPage().click();
		}
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);
		WaitUtils.waitForDisplayed(fld1_Qty_YTO_CSR_ReviewCartPage);
		fld1_Qty_YTO_CSR_ReviewCartPage().click();
		fld1_Qty_YTO_CSR_ReviewCartPage().clear();
		fld1_Qty_YTO_CSR_ReviewCartPage().sendKeys("0");
		PauseUtil.pause(2000);
		fld1_Qty_YTO_CSR_ReviewCartPage().sendKeys(Keys.TAB);
	}

	@Override
	public void CSR_verify_PostalCode_fld_not_accept_morethan_7_chars_in_LocatePage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		String act_val = fld_PostalCode_LocateAccountPage().getAttribute("value");
		String exp_val = TestBaseProvider.getTestBase().getTestData().getString("PostalCode");

		Assert.assertNotEquals(act_val, exp_val, "Postal Code field accepts more than 7 characters");

	}

	@Override
	public void CSR_TabOut_on_Canada_PostalCode_in_LocatePage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		fld_PostalCode_LocateAccountPage().sendKeys(Keys.TAB);
	}

	@Override
	public void CSR_clicks_on_Canada_Province_dropdown_list_in_LocatePage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		fld_Province_dropdown_Selection_LocateAccountPage().click();

	}

	@Override
	public void CSR_validate_the_Canada_Province_list_in_ascending_order_Locate_Account_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		int list_Size = list_Province_Canada_Locate_Account_page().size();
		List<String> scores = new ArrayList<String>();
		for (int i = 1; i < list_Size; i++) {
			WebElement list = list_Province_Canada_Locate_Account_page().get(i);
			String list_text = list.getText();
			System.out.println("##########:" + list_text);

			scores.add(list_text);
		}
		System.out.println("@@@@@@@@@@@@@@" + scores);

		List<String> scores2 = new ArrayList<String>(scores);
		Collections.sort(scores2);
		System.out.println("^^^^^^^^^^^^^:" + scores2);

		Assert.assertEquals(scores2, scores,
				"Province list is not in acsending order in Locate Account page Canada Province section");
	}

	@Override
	public void CSR_verify_error_msg_for_PostalCode_fld_OrderEntryPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			popUp_ErrorMsg_in_OrderEntryPage().isDisplayed();
			System.out.println("Error message is displayed for Postal Code field");
		} catch (Exception e) {
			Assert.fail("Error message is not displayed for Postal Code field");
		}
	}

	@Override
	public void CSR_verify_error_popUp_msg_disappeared_in_OrderEntryPage() {
		// PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		try {
			popUp_ErrorMsg_in_OrderEntryPage().isDisplayed();
			Assert.fail("Error popUp message is not disappeared");
		} catch (Exception e) {
			System.out.println("Error popUp message is disappeared");
		}
	}

	/*
	 * ################################################## Story 134
	 * ########################################################
	 */
	@FindBy(locator = "dw.studentflyerorder.Account.Number.text.box.PaymentPage")
	private WebElement Account_Number_text_box_PaymentPage;

	@FindBy(locator = "dw.studentflyerorder.Board.School.Number.text.box.PaymentPage")
	private WebElement Board_School_Number_text_box_PaymentPage;

	@FindBy(locator = "dw.studentflyerorder.radio.btn1.Quote.PaymentPage")
	private WebElement radio_btn_Quote_PaymentPage;

	@FindBy(locator = "dw.studentflyerorder.radio.btn2.PUB.PaymentPage")
	private WebElement radio_btn_PUB_PaymentPage;

	@FindBy(locator = "dw.studentflyerorder.radio.btn3.PUR.PaymentPage")
	private WebElement radio_btn_PUR_PaymentPage;

	// @FindBy(locator =
	// "dw.studentflyerorder.btn.Cancel.Purchase.Order.PaymentPage")
	// private WebElement btn_Cancel_Purchase_Order_PaymentPage;

	@FindBy(locator = "dw.studentflyerorder.Purchase.Order.Number.error.msg.PaymentPage")
	private WebElement Purchase_Order_error_msg_PaymentPage;

	@FindBy(locator = "dw.studentflyerorder.Account.Number.error.msg.PaymentPage")
	private WebElement Account_Number_error_msg_PaymentPage;

	@FindBy(locator = "dw.studentflyerorder.Board.School.Number.error.msg.PaymentPage")
	private WebElement Board_School_Number_error_msg_PaymentPage;

	@FindBy(locator = "dw.studentflyerorder.clickoutside.Purchase.Order.layout.PaymentPage")
	private WebElement Click_outside_Purchase_Order;

	@FindBy(locator = "dw.studentflyerorder.Account.Number.error.invalid.character.PaymentPage")
	private WebElement Account_Number_error_invalid_PaymentPage;

	@FindBy(locator = "dw.studentflyerorder.Board.School.Number.error.invalid.character.PaymentPage")
	private WebElement Board_School_Number_error_invalid_PaymentPage;

	@FindBy(locator = "dw.studentflyerorder.Purchase.Order.error.msg.box.PaymentPage")
	private WebElement Purchase_Order_error_msg_box_PaymentPage;

	public WebElement Account_Number_text_box_PaymentPage() {
		return Account_Number_text_box_PaymentPage;
	}

	public WebElement Board_School_Number_text_box_PaymentPage() {
		return Board_School_Number_text_box_PaymentPage;
	}

	public WebElement get_radio_btn_Quote_PaymentPage() {
		return radio_btn_Quote_PaymentPage;
	}

	public WebElement get_radio_btn_PUB_PaymentPage() {
		return radio_btn_PUB_PaymentPage;
	}

	public WebElement get_radio_btn_PUR_PaymentPage() {
		return radio_btn_PUR_PaymentPage;
	}

	// public WebElement get_btn_Cancel_Purchase_Order_PaymentPage(){
	// return btn_Cancel_Purchase_Order_PaymentPage;
	// }

	public WebElement Purchase_Order_error_msg_PaymentPage() {
		return Purchase_Order_error_msg_PaymentPage;
	}

	public WebElement Account_Number_error_msg_PaymentPage() {
		return Account_Number_error_msg_PaymentPage;
	}

	public WebElement Board_School_Number_error_msg_PaymentPage() {
		return Board_School_Number_error_msg_PaymentPage;
	}

	public WebElement Purchase_Order_error_msg_box_PaymentPage() {
		return Purchase_Order_error_msg_box_PaymentPage;
	}

	public WebElement click_outside_Purchase_Order() {
		return Click_outside_Purchase_Order;
	}

	public WebElement Account_Number_error_invalid_PaymentPage() {
		return Account_Number_error_invalid_PaymentPage;
	}

	public WebElement Board_School_Number_error_invalid_PaymentPage() {
		return Board_School_Number_error_invalid_PaymentPage;
	}

	@Override
	public void CSR_verify_Purchase_Order_Number_fld_accepts_entered_val_in_PaymentPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_text = PO_Number_text_box_PaymentPage().getAttribute("value");
		String exp_text = TestBaseProvider.getTestBase().getTestData().getString("POnumber");

		Assert.assertEquals(act_text, exp_text,
				"Purchase Order Number text box field has not accepted the entered value");
	}

	@Override
	public void CSR_enters_invalid_Purchase_Order_Number_in_PaymentPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		PO_Number_text_box_PaymentPage().click();
		PO_Number_text_box_PaymentPage().clear();
		PO_Number_text_box_PaymentPage().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("POnumber"));
	}

	@Override
	public void CSR_verify_Purchase_Order_Number_fld_rejects_entered_val_in_PaymentPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_text = PO_Number_text_box_PaymentPage().getAttribute("value");
		String exp_text = TestBaseProvider.getTestBase().getTestData().getString("POnumber");

		Assert.assertNotEquals(act_text, exp_text,
				"CSR is able to enter more than 20 numbers or accept special characters in Purchase Order Number field");

	}

	@Override
	public void CSR_enters_AC_Number_in_PaymentPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		Account_Number_text_box_PaymentPage().click();
		Account_Number_text_box_PaymentPage().clear();
		Account_Number_text_box_PaymentPage()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("AccountNum"));
		Account_Number_text_box_PaymentPage().sendKeys(Keys.TAB);
	}

	@Override
	public void CSR_verify_Account_Number_fld_accepts_entered_val_in_PaymentPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_text = Account_Number_text_box_PaymentPage().getAttribute("value");
		String exp_text = TestBaseProvider.getTestBase().getTestData().getString("AccountNum");

		Assert.assertEquals(act_text, exp_text, "Account Number text box field has not accepted the entered value");
	}

	@Override
	public void CSR_verify_Account_Number_fld_rejects_entered_val_in_PaymentPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String exp_text = TestBaseProvider.getTestBase().getTestData().getString("AccountNum");

		/*if (exp_text.length() == 1) {
			Boolean error_msg_box_is_displayed = Purchase_Order_error_msg_box_PaymentPage().isDisplayed();
			Assert.assertTrue(error_msg_box_is_displayed, "Error massgae box is not showing");
			// String error_msg_text =
			// Account_Number_error_invalid_PaymentPage().getText();
			String error_msg_text = Purchase_Order_error_msg_box_PaymentPage().getText();
			Assert.assertEquals(error_msg_text, ConstantUtils.INVALIDCHARACTERLENGTH,
					"Error message for invalid length is not showing");
		} else {

			String act_text = Account_Number_text_box_PaymentPage().getAttribute("value");

			Assert.assertNotEquals(act_text, exp_text,
					"CSR is able to enter more than 8 numbers or characters in Account Number field");
		}*/
		
		String act_val=Account_Number_text_box_PaymentPage().getAttribute("value");
		Assert.assertNotEquals(act_val, exp_text, "Ac Number field is accepted the invalid entry");

	}

	@Override
	public void CSR_selects_Purchase_Order_radio_btn_in_PaymentPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		Boolean Quote_is_selected = get_radio_btn_Quote_PaymentPage().isSelected();
		Assert.assertFalse(Quote_is_selected, "Quote radio button is selected initially");

		get_radio_btn_Quote_PaymentPage().click();

	}

	@Override
	public void CSR_verify_other_radio_btns_not_selected_in_PaymentPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		Boolean PUB_is_selected = get_radio_btn_PUB_PaymentPage().isSelected();
		Boolean PUR_is_selected = get_radio_btn_PUR_PaymentPage().isSelected();

		Assert.assertFalse(PUB_is_selected, "PUB is selected instead of Quote");
		Assert.assertFalse(PUR_is_selected, "PUR is selected instead of Quote");
	}

	@Override
	public void CSR_verify_default_radio_btn_is_PUB_in_PaymentPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		Boolean PUB_is_selected = get_radio_btn_PUB_PaymentPage().isSelected();

		Assert.assertTrue(PUB_is_selected, "PUB is not selected the default radio button");
	}

	@Override
	public void CSR_selects_Purchase_Order_textbox_in_PaymentPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		PO_Number_text_box_PaymentPage().click();
		PO_Number_text_box_PaymentPage().clear();
	}

	@Override
	public void CSR_clicks_outside_Purchase_Order_textbox_in_PaymentPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		click_outside_Purchase_Order().click();

	}

	@Override
	public void CSR_sees_Purchase_Order_Error_Message_in_PaymentPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			Purchase_Order_error_msg_PaymentPage().isDisplayed();
			String act_text = Purchase_Order_error_msg_PaymentPage().getText();
			Assert.assertEquals(act_text, ConstantUtils.PURCHASEORDERNUMBERERRORMSG,
					"Incorrect error message is displayed for the PO number field");
		} catch (Exception e) {
			Assert.fail("Error message is not displayed for the PO number field");
		}

	}

	@Override
	public void CSR_selects_Account_Number_textbox_in_PaymentPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		PO_Number_text_box_PaymentPage().click();
		PO_Number_text_box_PaymentPage().clear();
		PO_Number_text_box_PaymentPage().sendKeys("123AR7");
		PauseUtil.pause(2000);

		Account_Number_text_box_PaymentPage().click();
		Account_Number_text_box_PaymentPage().clear();
	}

	@Override
	public void CSR_clicks_outside_Account_Number_textbox_in_PaymentPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		click_outside_Purchase_Order().click();
	}

	@Override
	public void CSR_sees_Account_Number_Error_Message_in_PaymentPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			Account_Number_error_msg_PaymentPage().isDisplayed();
			String act_text = Account_Number_error_msg_PaymentPage().getText();
			Assert.assertEquals(act_text, ConstantUtils.ACCOUNTNUMBERERRORMSG,
					"Incorrect error message is displayed for the Account number field");
		} catch (Exception e) {
			Assert.fail("Error message is not displayed for the Account number field");
		}
	}

	@Override
	public void CSR_selects_Board_School_Number_textbox_in_PaymentPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		PO_Number_text_box_PaymentPage().click();
		PO_Number_text_box_PaymentPage().clear();
		PO_Number_text_box_PaymentPage().sendKeys("123AR7");
		PauseUtil.pause(2000);

		Board_School_Number_text_box_PaymentPage().click();
		Board_School_Number_text_box_PaymentPage().clear();
	}

	@Override
	public void CSR_clicks_outside_Board_School_Number_textbox_in_PaymentPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		click_outside_Purchase_Order().click();
	}

	@Override
	public void CSR_sees_Board_School_Number_Error_Message_in_PaymentPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			Board_School_Number_error_msg_PaymentPage().isDisplayed();
			String act_text = Board_School_Number_error_msg_PaymentPage().getText();
			Assert.assertEquals(act_text, ConstantUtils.BOARDSCHOOLNUMBERERRORMSG,
					"Incorrect error message is displayed for the Board/School Number field");
		} catch (Exception e) {
			Assert.fail("Error message is not displayed for the Board/School Number field");
		}
	}

	@Override
	public void CSR_enters_Board_School_Number_in_PaymentPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		Board_School_Number_text_box_PaymentPage().click();
		Board_School_Number_text_box_PaymentPage().clear();
		Board_School_Number_text_box_PaymentPage()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("BoardSchoolNum"));
		Board_School_Number_text_box_PaymentPage().sendKeys(Keys.TAB);
	}

	@Override
	public void CSR_verify_Board_School_Number_fld_accepts_entered_val_in_PaymentPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_text = Board_School_Number_text_box_PaymentPage().getAttribute("value");
		String exp_text = TestBaseProvider.getTestBase().getTestData().getString("BoardSchoolNum");

		Assert.assertEquals(act_text, exp_text,
				"Board/School Number text box field has not accepted the entered value");
	}

	@Override
	public void CSR_verify_Board_School_Number_fld_rejects_entered_val_in_PaymentPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String exp_text = TestBaseProvider.getTestBase().getTestData().getString("BoardSchoolNum");

		/*if (exp_text.length() == 1) {
			String error_msg_text = Board_School_Number_error_invalid_PaymentPage().getText();
			Assert.assertEquals(error_msg_text, ConstantUtils.INVALIDCHARACTERLENGTH,
					"Error message for invalid length is not showing");
		} else {
			String act_text = Board_School_Number_text_box_PaymentPage().getAttribute("value");
			Assert.assertNotEquals(act_text, exp_text,
					"CSR is able to enter more than 8 numbers or characters in Board/School Number field");
		}*/
		
		String act_val=Board_School_Number_text_box_PaymentPage().getAttribute("value");
		Assert.assertNotEquals(act_val, exp_text, "Board/School Number field is accepted the invalid entry");
	}

	@Override
	public void CSR_verify_the_placeholder_for_US_State_dropdown_list_in_Payment_Page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		String act_text = fld_State_dropdown_Selection_Payment_Page().getText();
		act_text = act_text.trim();

		String exp_text = "Select Province/State";

		Assert.assertEquals(act_text, exp_text, "Incorrect placeholder is displayed for STATE field drop down list");
	}

	@Override
	public void CSR_clicks_on_US_State_dropdown_list_in_Payment_Page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		fld_State_dropdown_Selection_Payment_Page().click();

	}

	@Override
	public void CSR_validate_the_US_State_list_in_ascending_order_Payment_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		int list_Size = list_State_US_Payment_page().size();
		List<String> scores = new ArrayList<String>();
		for (int i = 1; i < list_Size; i++) {
			WebElement list = list_State_US_Payment_page().get(i);
			String list_text = list.getText();
			System.out.println("##########:" + list_text);

			scores.add(list_text);
		}
		System.out.println("@@@@@@@@@@@@@@" + scores);

		List<String> scores2 = new ArrayList<String>(scores);
		Collections.sort(scores2);
		System.out.println("^^^^^^^^^^^^^:" + scores2);

		Assert.assertEquals(scores2, scores, "State list is not in acsending order in Payment page US country section");
	}

	@Override
	public void validate_VerifyAccount_tab_is_highlighted() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_text = tab_VERIFY_ACCOUNT().getAttribute("class");
		String exp_text = "step-2 active";

		Assert.assertEquals(act_text, exp_text, "Verify Account Tab is not highlighted");
	}

	@Override
	public void validate_Verify_Account_page_Num_in_StepHeader_Bubble() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_val = Num_VERIFY_ACCOUNT_StepHeader().getText();
		act_val = act_val.trim();

		String exp_val = "2";

		Assert.assertEquals(act_val, exp_val, "Verify Account page number is invalid in Step header");
	}

	@Override
	public void CSR_verify_Blue_step_script_icon_displayed_in_VerifyAccount_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			icon_Blue_script_icon_VerifyAccount_page().isDisplayed();
			System.out.println("Blue step script icon is displayed in Verify Account page");
		} catch (Exception e) {
			Assert.fail("Blue step script icon is not displayed in Verify Account page");
		}
	}

	@Override
	public void CSR_clicks_on_Blue_step_script_icon_in_VerifyAccount_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		icon_Blue_script_icon_VerifyAccount_page().click();
	}

	@Override
	public void CSR_verify_modal_window_is_displayed_in_VerifyAccount_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			Modal_window_VerifyAccountPage().isDisplayed();
			System.out.println("Modal window is displayed when CSR clicks on Blue step script icon");
		} catch (Exception e) {
			Assert.fail("Modal window is not displayed when CSR clicks on Blue step script icon");
		}

		String act_text = Modal_window_VerifyAccountPage().getText();
		String exp_text = "To verify account:";
		Assert.assertEquals(act_text, exp_text, "Incorrect modal window text is displayed in Verify Account page");
	}

	@Override
	public void CSR_verify_close_btn_is_displayed_in_modal_window_VerifyAccount_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			Close_btn_Modal_window_VerifyAccountPage().isDisplayed();
			System.out.println("Close button is displayed in Verify Account page Modal window");
		} catch (Exception e) {
			Assert.fail("Close button is not displayed in Verify Account page Modal window");
		}
	}

	@Override
	public void CSR_clicks_on_close_btn_modal_window_in_VerifyAccount_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		Close_btn_Modal_window_VerifyAccountPage().click();
	}

	@Override
	public void CSR_verify_VerifyAccount_page_displayed() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			hdr_Verify_Account_Verify_Page().isDisplayed();
			System.out.println("Verify Account page is displayed");
		} catch (Exception e) {
			Assert.fail("Verify Account page is not displayed");
		}
	}

	@Override
	public void CSR_verify_modal_window_for_1st_time_teacher_not_display_in_VerifyAccount_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			modal_window_1st_time_teacher_VerifyAccount_page().isDisplayed();
			Assert.fail("Modal window for the 1st time teacher is displayed in Verify Account page");
		} catch (Exception e) {
			System.out.println("Modal window for the 1st time teacher is not displayed in Verify Account page");
		}
	}

	@Override
	public void CSR_clicks_on_close_btn_modal_window_1st_time_teacher_in_VerifyAccount_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		Close_btn_Modal_window_1st_time_teacher_VerifyAccountPage().click();
	}

	@Override
	public void CSR_verify_modal_window_and_text_for_1st_teacher_is_displayed_in_VerifyAccount_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			modal_window_1st_time_teacher_VerifyAccount_page().isDisplayed();
			System.out.println("Modal window for the 1st time teacher is displayed in Verify Account page");
		} catch (Exception e) {
			Assert.fail("Modal window for the 1st time teacher is not displayed in Verify Account page");
		}

		String act_text = modal_window_1st_time_teacher_VerifyAccount_page().getText();
		String exp_text = "Introduction To CSR";
		Assert.assertEquals(act_text, exp_text,
				"Incorrect modal window text is displayed for the 1st time teacher in Verify Account page");
	}

	@Override
	public void CSR_verify_close_btn_is_displayed_in_modal_window_1st_teacher_VerifyAccount_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			Close_btn_Modal_window_1st_time_teacher_VerifyAccountPage().isDisplayed();
			System.out.println(
					"Close button is displayed for 1st teacher modal window in Verify Account page Modal window");
		} catch (Exception e) {
			Assert.fail(
					"Close button is not displayed for 1st teacher modal window in Verify Account page Modal window");
		}
	}

	@Override
	public void CSR_verify_order_history_hdr_text_and_displayed_in_VerifyAccount_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		
		try {
			hdr_OrderHistory_Status_VerifyAccountPage().isDisplayed();
			System.out.println("Order History & Status header is displayed");
		} catch (Exception e) {
			Assert.fail("Order History & Status header is not displayed");
		}
		
		String act_text=hdr_OrderHistory_Status_VerifyAccountPage().getText();
		act_text=act_text.trim();
		
		String exp_text="ORDER HISTORY";
		
		Assert.assertEquals(act_text, exp_text, "Incorrect header text is displayed for Order History & Status in Verify Account page");
	}

	@Override
	public void CSR_verify_order_number_is_displayed_in_OrderHistory_VerifyAccount_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			fld_Order_Number_VerifyAccountPage().isDisplayed();
			System.out.println("Order Number is displayed in Order History section");
		} catch (Exception e) {
			Assert.fail("Order Number is not displayed in Order History section");
		}
	}

	@Override
	public void CSR_verify_order_placed_date_is_displayed_in_OrderHistory_VerifyAccount_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			fld_Order_placed_date_VerifyAccountPage().isDisplayed();
			System.out.println("Order placed date field is displayed in Order History section");
		} catch (Exception e) {
			Assert.fail("Order placed date field is not displayed in Order History section");
		}
	}

	@Override
	public void CSR_verify_order_type_phone_order_is_displayed_in_OrderHistory_VerifyAccount_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			fld_Order_type_PhoneOrder_in_OrderHistory_VerifyAccountPage().isDisplayed();
			System.out.println("Order type: Phone order is displayed in Order History section");
		} catch (Exception e) {
			Assert.fail("Order type: Phone order is not displayed in Order History section");
		}
	}

	@Override
	public void CSR_verify_order_type_mail_order_is_displayed_in_OrderHistory_VerifyAccount_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			fld_Order_type_MailOrder_in_OrderHistory_VerifyAccountPage().isDisplayed();
			System.out.println("Order type: Mail order is displayed in Order History section");
		} catch (Exception e) {
			Assert.fail("Order type: Mail order is not displayed in Order History section");
		}
	}

	@Override
	public void CSR_verify_order_type_fax_order_is_displayed_in_OrderHistory_VerifyAccount_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			fld_Order_type_FaxOrder_in_OrderHistory_VerifyAccountPage().isDisplayed();
			System.out.println("Order type: Fax order is displayed in Order History section");
		} catch (Exception e) {
			Assert.fail("Order type: Fax order is not displayed in Order History section");
		}
	}

	@Override
	public void CSR_verify_order_type_Online_is_displayed_in_OrderHistory_VerifyAccount_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			fld_Order_type_Online_in_OrderHistory_VerifyAccountPage().isDisplayed();
			System.out.println("Order type: Online is displayed in Order History section");
		} catch (Exception e) {
			Assert.fail("Order type: Online is not displayed in Order History section");
		}
	}

	@Override
	public void CSR_verify_order_status_Held_by_Accounting_in_OrderHistory_VerifyAccount_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_text = fld_order_status_Held_By_Accounting_in_OrderHistory_VerifyAccountPage().getText();
		act_text = act_text.trim();

		String exp_text = "Held by Accounting";
		Assert.assertEquals(act_text, exp_text,
				"Incorrect order status is showing for Held by Accounting in Order History in Verify Account page");
	}

	@Override
	public void CSR_verify_1st_year_teaching_status_YES_in_Additional_info_in_VerifyAccount_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_text = fld_1st_year_teaching_in_Additional_Info_section_VerifyAccountPage().getText();
		act_text = act_text.trim();

		String exp_text = "This is my first year teaching Yes";
		Assert.assertEquals(act_text, exp_text,
				"Incorrect text is displayed for first year teaching status in Additional Info section in Verify Account page");
	}

	@Override
	public void CSR_verify_1st_year_teaching_status_NO_in_Additional_info_in_VerifyAccount_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_text = fld_1st_year_teaching_in_Additional_Info_section_VerifyAccountPage().getText();
		act_text = act_text.trim();

		String exp_text = "This is my first year teaching No";
		Assert.assertEquals(act_text, exp_text,
				"Incorrect text is displayed for existing teacher status in Additional Info section in Verify Account page");
	}

	@Override
	public void CSR_verify_ROLE_section_displayed_and_the_header_in_VerifyAccount_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		try {
			section_ROLE_in_VerifyAccountPage().isDisplayed();
			System.out.println("ROLE section is displayed in Verify Account page");
		} catch (Exception e) {
			Assert.fail("ROLE section is not displayed in Verify Account page");
		}

		String act_text = section_ROLE_in_VerifyAccountPage().getText();
		act_text = act_text.trim();

		String exp_text = "ROLE";

		Assert.assertEquals(act_text, exp_text,
				"Incorrect text is displayed for ROLE section header in Verify Account page");
	}

	@Override
	public void CSR_verify_selected_roles_are_displayed_in_ROLE_section_in_VerifyAccount_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		try {
			fld_selected_roles_in_ROLE_section_in_VerifyAccountPage().isDisplayed();
			System.out.println("Selected roles are displayed in ROLE section of Verify Account page");
		} catch (Exception e) {
			Assert.fail("Selected roles are not displayed in ROLE section of Verify Account page");
		}

		String act_text = fld_selected_roles_in_ROLE_section_in_VerifyAccountPage().getText();
		act_text = act_text.trim();

		String exp_text = "Teacher (By Grade)";

		Assert.assertEquals(act_text, exp_text,
				"Incorrect selected ROLE is displayed in ROLE section in Verify Account page");
	}

	@Override
	public void CSR_verify_Grades_and_Students_fields_are_displayed_in_ROLE_section_in_VerifyAccount_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);
		
		try {
			fld_grades_in_ROLE_section_in_VerifyAccountPage().isDisplayed();
			System.out.println("Grades field is displayed in ROLE section in verify Account page");
		} catch (Exception e) {
			Assert.fail("Grades field is not displayed in ROLE section in verify Account page");
		}
		
		String act_text=fld1_grade_number_of_students_in_ROLE_section_in_VerifyAccountPage().getText();
		act_text=act_text.trim();
		String exp_text="1st Grade, 10 Students";
		Assert.assertEquals(act_text, exp_text, "Incorrect selected grade is displayed in ROLE section in Verify Account page");
		
		String act_text2=fld2_grade_number_of_students_in_ROLE_section_in_VerifyAccountPage().getText();
		act_text2=act_text2.trim();
		String exp_text2="2nd Grade, 10 Students";
		Assert.assertEquals(act_text2, exp_text2, "Incorrect selected grade is displayed in ROLE section in Verify Account page");
		
	}

	@Override
	public void CSR_verify_grades_are_displayed_in_a_row_in_ROLE_section_in_VerifyAccount_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		try {
			fld1_grade_number_of_students_in_ROLE_section_in_VerifyAccountPage().isDisplayed();
			fld2_grade_number_of_students_in_ROLE_section_in_VerifyAccountPage().isDisplayed();
		} catch (Exception e) {
			Assert.fail("Grades are not displayed in a new row in ROLE section in verify Account page");
		}
	}

	@Override
	public void CSR_verify_SCHOOL_section_displayed_and_the_header_in_VerifyAccount_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		try {
			section_SCHOOL_in_VerifyAccountPage().isDisplayed();
			System.out.println("SCHOOL section is displayed in Verify Account page");
		} catch (Exception e) {
			Assert.fail("SCHOOL section is not displayed in Verify Account page");
		}

		String act_text = section_SCHOOL_in_VerifyAccountPage().getText();
		act_text = act_text.trim();

		String exp_text = "SCHOOL";

		Assert.assertEquals(act_text, exp_text,
				"Incorrect text is displayed for SCHOOL section header in Verify Account page");
	}

	@Override
	public void CSR_verify_School_details_displayed_in_each_row_SCHOOL_section_Canada_in_VerifyAccount_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);
		try {
			AssertUtils.assertDisplayed(fld_SchoolName_in_SCHOOL_section_in_VerifyAccountPage());
			AssertUtils.assertDisplayed(fld_SchoolAdr1_in_SCHOOL_section_in_VerifyAccountPage());
			// AssertUtils.assertDisplayed(fld_SchoolAdr2_in_SCHOOL_section_in_VerifyAccountPage());
			AssertUtils.assertDisplayed(fld_City_in_SCHOOL_section_in_VerifyAccountPage());
			AssertUtils.assertDisplayed(fld_Province_in_SCHOOL_section_in_VerifyAccountPage());
			// AssertUtils.assertDisplayed(fld_Country_in_SCHOOL_section_in_VerifyAccountPage());
			// AssertUtils.assertDisplayed(fld_PostalCode_in_SCHOOL_section_in_VerifyAccountPage());
			// AssertUtils.assertDisplayed(fld_PhoneNumber_in_SCHOOL_section_in_VerifyAccountPage());
		} catch (Exception e) {
			Assert.fail("School details are not displayed in a each row in SCHOOL section in Verify Account page");
		}
	}

	@Override
	public void CSR_verify_School_details_displayed_in_each_row_SCHOOL_section_US_in_VerifyAccount_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);
		try {
			AssertUtils.assertDisplayed(fld_SchoolName_in_SCHOOL_section_in_VerifyAccountPage());
			AssertUtils.assertDisplayed(fld_SchoolAdr1_in_SCHOOL_section_in_VerifyAccountPage());
			// AssertUtils.assertDisplayed(fld_SchoolAdr2_in_SCHOOL_section_in_VerifyAccountPage());
			AssertUtils.assertDisplayed(fld_City_in_SCHOOL_section_in_VerifyAccountPage());
			AssertUtils.assertDisplayed(fld_Province_in_SCHOOL_section_in_VerifyAccountPage());
			// AssertUtils.assertDisplayed(fld_Country_in_SCHOOL_section_in_VerifyAccountPage());
			// AssertUtils.assertDisplayed(fld_ZipCode_in_SCHOOL_section_in_VerifyAccountPage());
			// AssertUtils.assertDisplayed(fld_PhoneNumber_in_SCHOOL_section_in_VerifyAccountPage());
		} catch (Exception e) {
			Assert.fail("School details are not displayed in a each row in SCHOOL section in Verify Account page");
		}
	}

	@Override
	public void CSR_enters_the_Ac_Num_and_select_TeacherName_in_Search_Results() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(3000);

		fld_Ac_Num_LocateAccountPage().click();
		fld_Ac_Num_LocateAccountPage().clear();
		PauseUtil.pause(1000);
		fld_Ac_Num_LocateAccountPage().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("AcNum"));
		PauseUtil.pause(1000);
		fld_Ac_Num_LocateAccountPage().sendKeys(Keys.TAB);
		hdr_LocateCustomerAccountBy_LocateAccountPage().click();
		PauseUtil.pause(3000);

		WebDriver driver = TestBaseProvider.getTestBase().getDriver();
		WebDriverWait wait = new WebDriverWait(driver, 60);
		WebElement element1 = wait.until(ExpectedConditions.elementToBeClickable(Btn_Search_LocateAccountPage()));
		element1.click();

		// Btn_Search_LocateAccountPage().click();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		fld_Teacher_Name_in_SearchResults().click();

	}

	@Override
	public void CSR_verify_content_text_for_1st_time_teacher_in_modal_window_VerifyAccount_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_text = content_text_for_1st_time_teacher_Modal_window_VerifyAccountPage().getText();
		act_text = act_text.trim();

		String exp_text = "Welcome to Reading Club!";

		Assert.assertEquals(act_text, exp_text,
				"Incorrect content text is displayed for 1st time Teacher in modal window in Verify Account page");
	}

	/*
	 * ######################################## Story 115
	 * ###########################################
	 */
	@Override
	public void CSR_enters_Flyer_Code_not_mapped_to_US() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		fld1_FlyerCode_in_OrderEntryPage().click();
		fld1_FlyerCode_in_OrderEntryPage().clear();
		fld1_FlyerCode_in_OrderEntryPage()
				.sendKeys(TestBaseProvider.getTestBase().getTestData().getString("FlyerCode"));
		fld1_FlyerCode_in_OrderEntryPage().sendKeys(Keys.TAB);
	}

	@Override
	public void CSR_sees_error_notification_above_the_Flyer_Code() {
		PauseUtil.pause(2500);

		Boolean error_msg_is_displayed = popUp_ErrorMsg_in_OrderEntryPage().isDisplayed();

		Assert.assertTrue(error_msg_is_displayed, "Error message for non-mapped Flyer Code is not displaying.");
	}

	@Override
	public void CSR_sees_error_message_Flyer_Code() {
		PauseUtil.pause(2500);

		String act_text = popUp_ErrorMsg_in_OrderEntryPage().getText();
		act_text = act_text.trim();

		String exp_text = "Club not valid for US customers.";
		Assert.assertEquals(act_text, exp_text,
				"Incorrect error message is displyed when CSR enters non-mapped Flye Codes for US accounts.");
	}

	// #################################### Story 1830
	// ###############################################
	@FindBy(locator = "csr.signout")
	private WebElement csr_singout_link;

	@FindBy(locator = "csr.signout.yes")
	private WebElement csr_signout_link_yes_selected;

	@FindBy(locator = "csr.singout.link.in.allPages")
	private List<WebElement> csr_singout_link_in_allPages;

	public WebElement CSR_SignOut_Link() {
		return csr_singout_link;
	}

	public WebElement CSR_Signout_Yes() {
		return csr_signout_link_yes_selected;
	}

	public List<WebElement> csr_singout_link_in_allPages() {
		return csr_singout_link_in_allPages;
	}

	@Override
	public void CSR_clicks_Sign_Out() {
		PauseUtil.waitForAjaxToComplete(5000);
		PauseUtil.pause(30000);
		CSR_SignOut_Link().click();
		WaitUtils.waitForDisplayed(CSR_Signout_Yes());
		SCHUtils.clickUsingJavaScript(CSR_Signout_Yes());
	}

	@Override
	public void CSR_sees_pending_items_on_Order_Entry_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String expt_flyerCode = TestBaseProvider.getTestBase().getTestData().getString("FlyerCode");
		String act_flyerCode = fld1_FlyerCode_in_OrderEntryPage().getAttribute("value");
		Assert.assertEquals(act_flyerCode, expt_flyerCode, "Flyer Code is not the same.");

		String expt_ItemNum1 = TestBaseProvider.getTestBase().getTestData().getString("ItemNum");
		String act_ItemNum1 = Item_Num_field_in_OrderEntryPage().getAttribute("value");
		Assert.assertEquals(act_ItemNum1, expt_ItemNum1, "Item Number #1 is not the same.");

		String expt_ItemQty1 = TestBaseProvider.getTestBase().getTestData().getString("ItemQty");
		String act_ItemQty1 = Paid_QTY_field_in_OrderEntryPage().getAttribute("value");
		Assert.assertEquals(act_ItemQty1, expt_ItemQty1, "Quantity for Item Number #1 is not the same.");

		String expt_ItemNum2 = TestBaseProvider.getTestBase().getTestData().getString("ItemNum2");
		String act_ItemNum2 = Item_Num_field2_in_OrderEntryPage().getAttribute("value");
		Assert.assertEquals(act_ItemNum2, expt_ItemNum2, "Item Number #2 is not the same.");

		String expt_ItemQty2 = TestBaseProvider.getTestBase().getTestData().getString("ItemQty2");
		String act_ItemQty2 = Paid_QTY_field2_in_OrderEntryPage().getAttribute("value");
		Assert.assertEquals(act_ItemQty2, expt_ItemQty2, "Quantity for Item Number #2 is not the same.");

		String expt_ItemNum3 = TestBaseProvider.getTestBase().getTestData().getString("ItemNum3");
		String act_ItemNum3 = Item_Num_field3_in_OrderEntryPage().getAttribute("value");
		Assert.assertEquals(act_ItemNum3, expt_ItemNum3, "Item Number #3 is not the same.");

		String expt_ItemQty3 = TestBaseProvider.getTestBase().getTestData().getString("ItemQty3");
		String act_ItemQty3 = Paid_QTY_field3_in_OrderEntryPage().getAttribute("value");
		Assert.assertEquals(act_ItemQty3, expt_ItemQty3, "Quantity for Item Number #3 is not the same.");

	}

	// ######################################## Story 2292
	// ################################################
	@FindBy(locator = "dw.studentflyerorder.StudentClubs.flyer1.title.hyperlink")
	private WebElement StudentClubs_flyer_title_item1;

	@FindBy(locator = "dw.studentflyerorder.StudentClubs.review.cart.page")
	private WebElement StudentClubs_review_cart_page;

	public WebElement review_cart_page() {
		return StudentClubs_review_cart_page;
	}

	public WebElement flyer_title_item1() {
		return StudentClubs_flyer_title_item1;
	}

	@Override
	public void CSR_clicks_on_flyer_hyperlink_Review_Cart() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		flyer_title_item1().click();
	}

	@Override
	public void CSR_cannot_click_flyer_hyperlink_Review_Cart() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			review_cart_page().isDisplayed();
			System.out.println("The review cart page is displayed and no redirection occurred");
		} catch (Exception e) {
			System.out.println("The review cart page is not displayed");
		}

		/*
		 * WebDriver driver = TestBaseProvider.getTestBase().getDriver();
		 * 
		 * String act_pageUrl = driver.getCurrentUrl(); String expt_pageUrl =
		 * "https://development-rco-scholastic.demandware.net/s/rco-ca/cart";
		 * 
		 * Assert.assertEquals(act_pageUrl, expt_pageUrl,
		 * "The Flyer hyperlink is enabled and redirects from the Review Cart page."
		 * );
		 */
	}

	// ########################### Story 2293
	// ###########################################################
	@FindBy(locator = "dw.studentflyerorder.StudentClubs.item1.number.hyperlink")
	private WebElement StudentClubs_item1_number_hyperlink;

	@FindBy(locator = "dw.studentflyerorder.StudentClubs.see.full.details.hyperlink")
	private WebElement StudentClubs_item1_see_full_details_hyperlink;

	@FindBy(locator = "dw.studentflyerorder.StudentClubs.see.full.details.item1.title")
	private WebElement StudentClubs_item1_see_full_details_title;

	public WebElement item_number_item1() {
		return StudentClubs_item1_number_hyperlink;
	}

	public WebElement see_full_details_item1() {
		return StudentClubs_item1_see_full_details_hyperlink;
	}

	public WebElement see_full_details_item1_title() {
		return StudentClubs_item1_see_full_details_title;
	}

	@Override
	public void CSR_clicks_item1_num_ReviewCart() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		item_number_item1().click();
	}

	@Override
	public void CSR_clicks_item1_see_full_details_ReviewCart() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		see_full_details_item1().click();
	}

	@Override
	public void CSR_sees_new_tab_item_details_ReviewCart() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		WebDriver driver = TestBaseProvider.getTestBase().getDriver();
		ArrayList<String> tabs = new ArrayList<String>(driver.getWindowHandles());

		Assert.assertEquals(tabs.size(), 2, "A new tab was not created");
		/*
		 * PauseUtil.pause(2000);
		 * 
		 * String act_title_text = see_full_details_item1_title().getText();
		 * String exp_title_text = flyer_title_item1().getText();
		 * 
		 * Assert.assertEquals(act_title_text, exp_title_text,
		 * "Item 1's book title is not the same");
		 */
	}

	@Override
	public void CSR_perform_TabOut_on_Board_SchoolNum_fld_PaymentPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		fld_Board_SchoolNum_text_box_PaymentPage().click();
		fld_Board_SchoolNum_text_box_PaymentPage().clear();
		fld_Board_SchoolNum_text_box_PaymentPage().sendKeys(Keys.TAB);
	}

	@Override
	public void CSR_perform_TabOut_on_AccountNum_fld_PaymentPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		Account_Number_text_box_PaymentPage().click();
		Account_Number_text_box_PaymentPage().clear();
		Account_Number_text_box_PaymentPage().sendKeys(Keys.TAB);
	}

	@Override
	public void CSR_perform_TabOut_on_PONum_fld_PaymentPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		PO_Number_text_box_PaymentPage().click();
		PO_Number_text_box_PaymentPage().clear();
		PO_Number_text_box_PaymentPage().sendKeys(Keys.TAB);
	}

	@Override
	public void CSR_verify_the_popup_error_msg_for_Board_SchoolNum_fld_Payment_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_text = error_msg_Board_SchoolNum_text_box_PaymentPage().getText();
		act_text = act_text.trim();

		String exp_text = "We cannot seem to locate the Board/School with the number provided";

		Assert.assertEquals(act_text, exp_text, "Incorrect error message is displayed for Board/School Number");
	}

	@Override
	public void CSR_mouse_hover_on_1st_item_title_ReviewCart_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		SCHUtils.mouseHoverJScript(fld_1st_item_title_ReviewCart_Page());
		PauseUtil.pause(2000);
	}

	@Override
	public void CSR_verify_CallOut_msg_is_displayed_on_mouse_hover_ReviewCart_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			CallOut_msg_box_on_Item_Title_ReviewCart_page().isDisplayed();
			System.out.println("CallOut message is displayed when CSR mouseover on item title");
		} catch (Exception e) {
			Assert.fail("CallOut message is not displayed when CSR mouseover on item title");
		}
	}

	@Override
	public void CSR_verify_Item_title_is_displayed_in_CallOut_msg_ReviewCart_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			CallOut_box_item_title_ReviewCart_page().isDisplayed();
			System.out.println("Item title is displayed in CallOut message");
		} catch (Exception e) {
			Assert.fail("Item title is not displayed in CallOut message");
		}

		String act_item_title = CallOut_msg_box_on_Item_Title_ReviewCart_page().getText();
		act_item_title = act_item_title.trim();

		String exp_item_title = CallOut_box_item_title_ReviewCart_page().getText();
		exp_item_title = exp_item_title.trim();

		Assert.assertEquals(act_item_title, exp_item_title, "Incorrect item Title is displayed in CallOut message");
	}

	@Override
	public void CSR_verify_Item_base_price_is_displayed_in_CallOut_msg_ReviewCart_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			CallOut_box_item_price_ReviewCart_page().isDisplayed();
			System.out.println("Item base price is displayed in CallOut message");
		} catch (Exception e) {
			Assert.fail("Item base price is not displayed in CallOut message");
		}
	}

	@Override
	public void CSR_verify_tax_is_displayed_for_item_in_CallOut_msg_ReviewCart_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			CallOut_box_GST_val_ReviewCart_page().isDisplayed();
			System.out.println("GST value is displayed for the item in CallOut message");
			try {
				CallOut_box_PST_val_ReviewCart_page().isDisplayed();
				System.out.println("PST value is displayed for the item in CallOut message");
			} catch (Exception e) {
				Assert.fail("PST value is not displayed for the item in CallOut message");
			}
		} catch (Exception e) {
			Assert.fail("GST value is not displayed for the item in CallOut message");
		}
	}

	@Override
	public void CSR_verify_Item_Total_price_is_displayed_in_CallOut_msg_ReviewCart_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			CallOut_box_Total_val_two_taxes_ReviewCart_page().isDisplayed();
			System.out.println("Item Total price with tax is displayed in CallOut message");
		} catch (Exception e) {
			Assert.fail("Item Total price with tax is not displayed in CallOut message");
		}
	}

	@Override
	public void CSR_validation_of_item_basePrice_GST_PST_Total_vals_ReviewCart_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		int stateTaxGST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxGST");
		int stateTaxPST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxPST");

		String exp_base_ItemPrice = cart_item1_price().getText();
		exp_base_ItemPrice = exp_base_ItemPrice.trim().substring(1);
		double exp_base_ItemPrice_is = Double.parseDouble(exp_base_ItemPrice);

		String act_item_basePrice = CallOut_box_item_price_ReviewCart_page().getAttribute("textContent");
		act_item_basePrice = act_item_basePrice.substring(6).replaceAll(" ", "").substring(2);

		double act_item_basePrice_is = Double.parseDouble(act_item_basePrice);
		Assert.assertEquals(act_item_basePrice_is, exp_base_ItemPrice_is,
				"Incorrect Base Item price is displayed in CallOut message");

		String act_itemVal_GST = CallOut_box_GST_val_ReviewCart_page().getAttribute("textContent");
		act_itemVal_GST = act_itemVal_GST.substring(6).replaceAll(" ", "").substring(2);// System.out.println("Value:
																						// "
																						// +
																						// act_itemVal_GST);
		double act_itemVal_GST_is = Double.parseDouble(act_itemVal_GST);

		double exp_itemVal_GST = (exp_base_ItemPrice_is * stateTaxGST) / 100;
		exp_itemVal_GST = Double.parseDouble(new DecimalFormat("##.##").format(exp_itemVal_GST));

		Assert.assertEquals(act_itemVal_GST_is, exp_itemVal_GST,
				"Incorrect GST value is displayed for the Base item price in CallOut message");

		String act_itemVal_PST = CallOut_box_PST_val_ReviewCart_page().getAttribute("textContent");
		act_itemVal_PST = act_itemVal_PST.substring(6).replaceAll(" ", "").substring(2);// System.out.println("Value:
																						// "
																						// +
																						// act_itemVal_PST);
		double act_itemVal_PST_is = Double.parseDouble(act_itemVal_PST);

		double exp_itemVal_PST = (exp_base_ItemPrice_is * stateTaxPST) / 100;
		exp_itemVal_PST = Double.parseDouble(new DecimalFormat("##.##").format(exp_itemVal_PST));

		Assert.assertEquals(act_itemVal_PST_is, exp_itemVal_PST,
				"Incorrect PST value is displayed for the Base item price in CallOut message");

		String act_Total_item_val = CallOut_box_Total_val_two_taxes_ReviewCart_page().getAttribute("textContent");
		act_Total_item_val = act_Total_item_val.substring(6).replaceAll(" ", "").substring(2);// System.out.println("Value:
																								// "
																								// +
																								// act_Total_item_val);
		double act_Total_item_val_is = Double.parseDouble(act_Total_item_val);

		double exp_Total_item_val = exp_base_ItemPrice_is + exp_itemVal_GST + exp_itemVal_PST;
		exp_Total_item_val = Double.parseDouble(new DecimalFormat("##.##").format(exp_Total_item_val));

		Assert.assertEquals(act_Total_item_val_is, exp_Total_item_val,
				"Incorrect Total value is displayed in CallOut message");

	}

	@Override
	public void CSR_validation_of_item_basePrice_GST_QST_Total_vals_ReviewCart_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		int stateTaxGST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxGST");
		double stateTaxQST = TestBaseProvider.getTestBase().getTestData().getDouble("stateTaxQST");

		String exp_base_ItemPrice = cart_item1_price().getText();
		exp_base_ItemPrice = exp_base_ItemPrice.trim().substring(1);
		double exp_base_ItemPrice_is = Double.parseDouble(exp_base_ItemPrice);

		String act_item_basePrice = CallOut_box_item_price_ReviewCart_page().getAttribute("textContent");
		act_item_basePrice = act_item_basePrice.substring(6).replaceAll(" ", "").substring(2);
		double act_item_basePrice_is = Double.parseDouble(act_item_basePrice);
		Assert.assertEquals(act_item_basePrice_is, exp_base_ItemPrice_is,
				"Incorrect Base Item price is displayed in CallOut message");

		String act_itemVal_GST = CallOut_box_GST_val_ReviewCart_page().getAttribute("textContent");
		act_itemVal_GST = act_itemVal_GST.substring(6).replaceAll(" ", "").substring(2);
		double act_itemVal_GST_is = Double.parseDouble(act_itemVal_GST);

		double exp_itemVal_GST = (exp_base_ItemPrice_is * stateTaxGST) / 100;
		exp_itemVal_GST = Double.parseDouble(new DecimalFormat("##.##").format(exp_itemVal_GST));

		Assert.assertEquals(act_itemVal_GST_is, exp_itemVal_GST,
				"Incorrect GST value is displayed for the Base item price in CallOut message");

		String act_itemVal_QST = CallOut_box_QST_val_ReviewCart_page().getAttribute("textContent");
		act_itemVal_QST = act_itemVal_QST.substring(6).replaceAll(" ", "").substring(2);
		double act_itemVal_QST_is = Double.parseDouble(act_itemVal_QST);

		double exp_itemVal_QST = (exp_base_ItemPrice_is * stateTaxQST) / 100;
		exp_itemVal_QST = Double.parseDouble(new DecimalFormat("##.##").format(exp_itemVal_QST));

		Assert.assertEquals(act_itemVal_QST_is, exp_itemVal_QST,
				"Incorrect QST value is displayed for the Base item price in CallOut message");

		String act_Total_item_val = CallOut_box_Total_val_two_taxes_ReviewCart_page().getAttribute("textContent");
		act_Total_item_val = act_Total_item_val.substring(6).replaceAll(" ", "").substring(2);
		double act_Total_item_val_is = Double.parseDouble(act_Total_item_val);

		double exp_Total_item_val = exp_base_ItemPrice_is + exp_itemVal_GST + exp_itemVal_QST;
		exp_Total_item_val = Double.parseDouble(new DecimalFormat("##.##").format(exp_Total_item_val));

		Assert.assertEquals(act_Total_item_val_is, exp_Total_item_val,
				"Incorrect Total value is displayed in CallOut message");

	}

	@Override
	public void CSR_validation_of_item_basePrice_HST_Total_vals_ReviewCart_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		int stateTaxHST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxHST");

		String exp_base_ItemPrice = cart_item1_price().getText();
		exp_base_ItemPrice = exp_base_ItemPrice.trim().substring(1);
		double exp_base_ItemPrice_is = Double.parseDouble(exp_base_ItemPrice);

		String act_item_basePrice = CallOut_box_item_price_ReviewCart_page().getAttribute("textContent");
		act_item_basePrice = act_item_basePrice.substring(6).replaceAll(" ", "").substring(2);
		double act_item_basePrice_is = Double.parseDouble(act_item_basePrice);
		Assert.assertEquals(act_item_basePrice_is, exp_base_ItemPrice_is,
				"Incorrect Base Item price is displayed in CallOut message");

		String act_itemVal_HST = CallOut_box_HST_val_ReviewCart_page().getAttribute("textContent");
		act_itemVal_HST = act_itemVal_HST.substring(6).replaceAll(" ", "").substring(2);
		double act_itemVal_HST_is = Double.parseDouble(act_itemVal_HST);

		double exp_itemVal_HST = (exp_base_ItemPrice_is * stateTaxHST) / 100;
		exp_itemVal_HST = Double.parseDouble(new DecimalFormat("##.##").format(exp_itemVal_HST));

		Assert.assertEquals(act_itemVal_HST_is, exp_itemVal_HST,
				"Incorrect HST value is displayed for the Base item price in CallOut message");

		String act_Total_item_val = CallOut_box_Total_val_one_tax_ReviewCart_page().getAttribute("textContent");
		act_Total_item_val = act_Total_item_val.substring(6).replaceAll(" ", "").substring(2);
		double act_Total_item_val_is = Double.parseDouble(act_Total_item_val);

		double exp_Total_item_val = exp_base_ItemPrice_is + exp_itemVal_HST;
		exp_Total_item_val = Double.parseDouble(new DecimalFormat("##.##").format(exp_Total_item_val));

		Assert.assertEquals(act_Total_item_val_is, exp_Total_item_val,
				"Incorrect Total value is displayed in CallOut message");

	}

	@Override
	public void CSR_validation_of_item_basePrice_GST_Total_vals_ReviewCart_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		int stateTaxGST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxGST");

		String exp_base_ItemPrice = cart_item1_price().getText();
		exp_base_ItemPrice = exp_base_ItemPrice.trim().substring(1);
		double exp_base_ItemPrice_is = Double.parseDouble(exp_base_ItemPrice);

		String act_item_basePrice = CallOut_box_item_price_ReviewCart_page().getAttribute("textContent");
		act_item_basePrice = act_item_basePrice.substring(6).replaceAll(" ", "").substring(2);
		double act_item_basePrice_is = Double.parseDouble(act_item_basePrice);
		Assert.assertEquals(act_item_basePrice_is, exp_base_ItemPrice_is,
				"Incorrect Base Item price is displayed in CallOut message");

		String act_itemVal_GST = CallOut_box_GST_val_ReviewCart_page().getAttribute("textContent");
		act_itemVal_GST = act_itemVal_GST.substring(6).replaceAll(" ", "").substring(2);
		double act_itemVal_GST_is = Double.parseDouble(act_itemVal_GST);

		double exp_itemVal_GST = (exp_base_ItemPrice_is * stateTaxGST) / 100;
		exp_itemVal_GST = Double.parseDouble(new DecimalFormat("##.##").format(exp_itemVal_GST));

		Assert.assertEquals(act_itemVal_GST_is, exp_itemVal_GST,
				"Incorrect GST value is displayed for the Base item price in CallOut message");

		String act_Total_item_val = CallOut_box_Total_val_one_tax_ReviewCart_page().getAttribute("textContent");
		act_Total_item_val = act_Total_item_val.substring(6).replaceAll(" ", "").substring(2);
		double act_Total_item_val_is = Double.parseDouble(act_Total_item_val);

		double exp_Total_item_val = exp_base_ItemPrice_is + exp_itemVal_GST;
		exp_Total_item_val = Double.parseDouble(new DecimalFormat("##.##").format(exp_Total_item_val));

		Assert.assertEquals(act_Total_item_val_is, exp_Total_item_val,
				"Incorrect Total value is displayed in CallOut message");

	}

	@Override
	public void CSR_validation_of_itemPrice_Total_vals_and_noTax_GST_PST_ReviewCart_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String exp_base_ItemPrice = cart_item1_price().getText();
		exp_base_ItemPrice = exp_base_ItemPrice.trim().substring(1);
		double exp_base_ItemPrice_is = Double.parseDouble(exp_base_ItemPrice);

		String act_item_basePrice = CallOut_box_item_price_ReviewCart_page().getAttribute("textContent");
		act_item_basePrice = act_item_basePrice.substring(6).replaceAll(" ", "").substring(2);
		double act_item_basePrice_is = Double.parseDouble(act_item_basePrice);
		Assert.assertEquals(act_item_basePrice_is, exp_base_ItemPrice_is,
				"Incorrect Base Item price is displayed in CallOut message");

		String act_itemVal_GST = CallOut_box_GST_val_ReviewCart_page().getAttribute("textContent");
		act_itemVal_GST = act_itemVal_GST.substring(6).replaceAll(" ", "").substring(2);
		double act_itemVal_GST_is = Double.parseDouble(act_itemVal_GST);

		double exp_itemVal_GST = 0;

		Assert.assertEquals(act_itemVal_GST_is, exp_itemVal_GST,
				"GST value is displayed for the Tax exempted school account in Review cart CallOut message");

		String act_itemVal_PST = CallOut_box_PST_val_ReviewCart_page().getAttribute("textContent");
		act_itemVal_PST = act_itemVal_PST.substring(6).replaceAll(" ", "").substring(2);// System.out.println("Value:
																						// "
																						// +
																						// act_itemVal_PST);
		double act_itemVal_PST_is = Double.parseDouble(act_itemVal_PST);

		double exp_itemVal_PST = 0;

		Assert.assertEquals(act_itemVal_PST_is, exp_itemVal_PST,
				"PST value is displayed for the Tax exempted school account in Review cart CallOut message");

		String act_Total_item_val = CallOut_box_Total_val_two_taxes_ReviewCart_page().getAttribute("textContent");
		act_Total_item_val = act_Total_item_val.substring(6).replaceAll(" ", "").substring(2);
		double act_Total_item_val_is = Double.parseDouble(act_Total_item_val);

		double exp_Total_item_val = exp_base_ItemPrice_is + exp_itemVal_GST + exp_itemVal_PST;
		exp_Total_item_val = Double.parseDouble(new DecimalFormat("##.##").format(exp_Total_item_val));

		Assert.assertEquals(act_Total_item_val_is, exp_Total_item_val,
				"Incorrect Total value is displayed in CallOut message");

	}

	@Override
	public void CSR_validation_of_itemPrice_Total_vals_and_noTax_GST_QST_ReviewCart_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String exp_base_ItemPrice = cart_item1_price().getText();
		exp_base_ItemPrice = exp_base_ItemPrice.trim().substring(1);
		double exp_base_ItemPrice_is = Double.parseDouble(exp_base_ItemPrice);

		String act_item_basePrice = CallOut_box_item_price_ReviewCart_page().getAttribute("textContent");
		act_item_basePrice = act_item_basePrice.substring(6).replaceAll(" ", "").substring(2);
		double act_item_basePrice_is = Double.parseDouble(act_item_basePrice);
		Assert.assertEquals(act_item_basePrice_is, exp_base_ItemPrice_is,
				"Incorrect Base Item price is displayed in CallOut message");

		String act_itemVal_GST = CallOut_box_GST_val_ReviewCart_page().getAttribute("textContent");
		act_itemVal_GST = act_itemVal_GST.substring(6).replaceAll(" ", "").substring(2);
		double act_itemVal_GST_is = Double.parseDouble(act_itemVal_GST);

		double exp_itemVal_GST = 0;

		Assert.assertEquals(act_itemVal_GST_is, exp_itemVal_GST,
				"GST value is displayed for the Tax exempted school account in Review cart CallOut message");

		String act_itemVal_QST = CallOut_box_QST_val_ReviewCart_page().getAttribute("textContent");
		act_itemVal_QST = act_itemVal_QST.substring(6).replaceAll(" ", "").substring(2);
		double act_itemVal_QST_is = Double.parseDouble(act_itemVal_QST);

		double exp_itemVal_QST = 0;

		Assert.assertEquals(act_itemVal_QST_is, exp_itemVal_QST,
				"QST value is displayed for the Tax exempted school account in Review cart CallOut message");

		String act_Total_item_val = CallOut_box_Total_val_two_taxes_ReviewCart_page().getAttribute("textContent");
		act_Total_item_val = act_Total_item_val.substring(6).replaceAll(" ", "").substring(2);
		double act_Total_item_val_is = Double.parseDouble(act_Total_item_val);

		double exp_Total_item_val = exp_base_ItemPrice_is + exp_itemVal_GST + exp_itemVal_QST;
		exp_Total_item_val = Double.parseDouble(new DecimalFormat("##.##").format(exp_Total_item_val));

		Assert.assertEquals(act_Total_item_val_is, exp_Total_item_val,
				"Incorrect Total value is displayed in CallOut message");

	}

	// ######################################### SCSCOD-6177
	// ###############################################################
	@FindBy(locator = "dw.studentflyerorder.btn.update.account")
	private WebElement Verify_update_account_btn;

	@FindBy(locator = "dw.studentflyerorder.account.status.value")
	private WebElement Verify_account_status_value;

	@FindBy(locator = "dw.studentflyerorder.verify.account.page")
	private WebElement Verify_account_page;

	public WebElement get_update_account_btn() {
		return Verify_update_account_btn;
	}

	public WebElement get_account_status() {
		return Verify_account_status_value;
	}

	public WebElement get_verify_account_page() {
		return Verify_account_page;
	}

	@Override
	public void CSR_clicks_update_account_button() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			get_update_account_btn().isDisplayed();
			get_update_account_btn().click();
		} catch (Exception e) {
			System.out.println("Update button is not displayed or it is not clickable");
		}

		PauseUtil.pause(2000);

		if (list_popUp_btn_Close_Introduction_To_CSR().size() != 0) {
			popUp_btn_Close_Introduction_To_CSR().click();
			System.out.println("Introduction to CSR popUp is displayed and clicked on close button (Updated account)");
		} else {
			System.out.println("Introduction to CSR popUp is not displayed (Updated account)");
		}
	}

	@Override
	public void CSR_sees_inactive_account_status() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_text = get_account_status().getText();

		if (act_text == "") {
			System.out.println("No account status is displayed");
			return;
		}

		Assert.assertEquals(act_text, ConstantUtils.INACTIVEACCOUNTSTATUS, "The account status is Active");
	}

	public boolean isContinue_To_OrderEntryButtonDisabled() {

		try {
			Btn_Continue_To_Order_Entry().click();
			System.out.println("Continue to Order Entry button is enabled and clickable");
		} catch (Exception e) {
			System.out.println("Continue to Order Entry button is disabled and non-clickable");
			return true;
		}

		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		return false;
	}

	@Override
	public void verify_CSR_Verify_Account_Page_is_displayed() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		if (isContinue_To_OrderEntryButtonDisabled()) {
			try {
				get_verify_account_page().isDisplayed();
				System.out.println("Verify Account page is displayed");

			} catch (Exception e) {
				System.out.println("Verify Account page not displayed");
			}
		} else {
			Assert.fail("Currently on the Order Entry page");
		}
	}
	// ######################################### SCSCOD-6177
	// ###############################################################

	// ######################################### SCSCOD-6165 CSR
	// ##################################################################
	@FindBy(locator = "dw.studentflyerorder.stepheader.reviewcart.clickable")
	private WebElement clickable_review_cart_stepheader;

	@FindBy(locator = "dw.studentflyerorder.reviewcart.item1.quantity.input")
	private WebElement review_cart_item1_quantity;

	public WebElement getReviewCartLink() {
		return clickable_review_cart_stepheader;
	}

	public WebElement reviewCartItem1Input() {
		return review_cart_item1_quantity;
	}

	@Override
	public void CSR_returns_to_Review_cart_page_using_stepheader() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			getReviewCartLink().isDisplayed();
			getReviewCartLink().click();
			System.out.println("Clicked on the Review Cart step header");
		} catch (Exception e) {
			System.out.println("Review Cart step header not clickable");
		}

	}

	@Override
	public void CSR_increases_quantity_of_first_item_Review_Cart() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		reviewCartItem1Input().click();
		reviewCartItem1Input().clear();
		PauseUtil.pause(3000);

		Wait_for_invisibility_of_locator();

		reviewCartItem1Input().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("Increasedqty1"));
		reviewCartItem1Input().sendKeys(Keys.TAB);
	}

	@Override
	public void CSR_decreases_quantity_of_first_item_Review_Cart() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		reviewCartItem1Input().click();
		reviewCartItem1Input().clear();
		PauseUtil.pause(3000);

		Wait_for_invisibility_of_locator();

		reviewCartItem1Input().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("Decreasedqty1"));
		reviewCartItem1Input().sendKeys(Keys.TAB);
	}
	// ######################################### SCSCOD-6165 CSR
	// ##################################################################

	// ######################################### SCSCOD-6165 TCOD
	// ##################################################################
	@FindBy(locator = "dw.teacher.home.enterorder.studentflyerorder.backtoshop.button")
	private WebElement back_to_shop_link;

	public WebElement getBackToShopLink() {
		return back_to_shop_link;
	}

	@FindBy(locator = "dw.teacher.home.reviewcart.shoppingcart.link")
	private WebElement TCOD_shopping_cart_link;

	public WebElement getShoppingCartLink() {
		return TCOD_shopping_cart_link;
	}

	@Override
	public void Teacher_adds_one_item_grade_2_second_month() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		grade_Seesaw().click();
		PauseUtil.pause(2000);

		getlnkSecondMonthGrade().click();
		PauseUtil.pause(2000);

		field_qty1().click();
		field_qty1().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("YTOqty1"));
		field_qty1().sendKeys(Keys.TAB);

	}

	@Override
	public void Teacher_adds_one_item_teacher_rewards_classroom_reward() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		grade_TeacherCatalogues().click();
		PauseUtil.pause(2000);

		getlnkSecondMonthGrade().click();
		PauseUtil.pause(2000);

		field_qty1().click();
		field_qty1().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("YTOqty1"));
		field_qty1().sendKeys(Keys.TAB);

	}

	@Override
	public void User_selects_back_to_shop_link() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			getBackToShopLink().isDisplayed();
			getBackToShopLink().click();
			System.out.println("Back to Shop Link clicked");
		} catch (Exception e) {
			System.out.println("Back to Shop Link not clicked");
		}
	}

	@Override
	public void User_selects_shopping_cart_link() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			getShoppingCartLink().isDisplayed();
			getShoppingCartLink().click();
			System.out.println("Shopping Cart clicked");
		} catch (Exception e) {
			System.out.println("Shopping Cart not clicked");
		}
	}

	// ######################################### SCSCOD-6165 TCOD
	// ##################################################################

	@Override
	public void verify_popUp_InvalidItem_notDisplay() {

		if (invalidItem_popUp().size() > 0) {
			Assert.fail("Duplicate Item# popup should not be displayed");

		}
	}

	// ######################################### SCSCOD-6119
	// ##################################################################

	@And("^the message  will not be displayed$")
	public void the_message_will_not_be_displayed() throws Throwable {
		StudentFlyerOrdersPage sfop = new StudentFlyerOrdersPage();
		if (sfop.getcsrMessage_Text_OrderConfirm_Popup().size() == 3) {
			String div_value = sfop.getcsrMessage_Text_OrderConfirm_Popup().get(2).getText();
			Assert.fail("Order Confirmation email message should not be displayed  " + div_value);
		}
	}

	@Override
	public void add_TeachercataloguesItems_from_YTO(double itemprice, String studentname, String itemQty) {
		waitForPageToload();
		WaitUtils.waitForNotDisplayed(getapplicationLoader());

		grade_Teacher_Reward_Catalogues().click();
		WaitUtils.waitForNotDisplayed(getapplicationLoader());

		List<WebElement> cartTable1 = getTeacherFlyerOrderTable();
		for (WebElement cartTable : cartTable1) {
			List<WebElement> cartTabletr1 = cartTable.findElements(By.tagName("tr"));
			for (WebElement cartTabletd1 : cartTabletr1) {
				List<WebElement> cartTabletd = cartTabletd1.findElements(By.tagName("td"));

				String actualprice1 = cartTabletd.get(3).getText();
				actualprice1 = actualprice1.substring(1);
				Double actualprice = Double.parseDouble(actualprice1.trim());

				if (actualprice <= (itemprice)) {

					cartTabletd.get(2).findElement(By.tagName("input")).click();
					WaitUtils.waitForNotDisplayed(getapplicationLoader());
					getTxtStudentName().clear();
					getTxtStudentName().sendKeys(studentname);
					getBtnStudentNameClose().click();
					WaitUtils.waitForNotDisplayed(getapplicationLoader());
					cartTabletd.get(4).findElement(By.tagName("input")).clear();
					cartTabletd.get(4).findElement(By.tagName("input")).sendKeys(itemQty);
					PauseUtil.pause(2000);
					getrevieworderPriceLabel().click();
					// WaitUtils.waitForNotDisplayed(getapplicationLoader());
					PauseUtil.waitForAjaxToComplete(1000);
					break;
				}
			}
		}
	}

	@Override
	public void add_TeachercataloguesItems_from_YTO_with_price_limit(double itemprice, double itemprice_limit,
			String studentname, String itemQty) {
		waitForPageToload();
		WaitUtils.waitForNotDisplayed(getapplicationLoader());

		grade_Teacher_Reward_Catalogues().click();
		WaitUtils.waitForNotDisplayed(getapplicationLoader());

		List<WebElement> cartTable1 = getTeacherFlyerOrderTable();
		for (WebElement cartTable : cartTable1) {
			List<WebElement> cartTabletr1 = cartTable.findElements(By.tagName("tr"));
			for (WebElement cartTabletd1 : cartTabletr1) {
				List<WebElement> cartTabletd = cartTabletd1.findElements(By.tagName("td"));

				String actualprice1 = cartTabletd.get(3).getText();
				actualprice1 = actualprice1.substring(1);
				Double actualprice = Double.parseDouble(actualprice1.trim());
				System.out.println("Printing the price from webpage >>>>>>>" + actualprice);

				if ((actualprice > (itemprice)) && (actualprice <= (itemprice_limit))) {
					cartTabletd.get(2).findElement(By.tagName("input")).click();
					WaitUtils.waitForNotDisplayed(getapplicationLoader());
					getTxtStudentName().clear();
					getTxtStudentName().sendKeys(studentname);
					getBtnStudentNameClose().click();
					WaitUtils.waitForNotDisplayed(getapplicationLoader());
					cartTabletd.get(4).findElement(By.tagName("input")).clear();
					cartTabletd.get(4).findElement(By.tagName("input")).sendKeys(itemQty);
					PauseUtil.pause(2000);
					getrevieworderPriceLabel().click();
					// WaitUtils.waitForNotDisplayed(getapplicationLoader());
					PauseUtil.waitForAjaxToComplete(3000);
					break;
				}
			}
		}
	}

	@Override
	public void CSR_signOut_from_Application() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		if (csr_singout_link_in_allPages().size() != 0) {
			CSR_SignOut_Link().click();
			PauseUtil.pause(1000);
			SCHUtils.clickUsingJavaScript(CSR_Signout_Yes());
			loginPage.Verify_LoginPagePresent();
		} /*
			 * else { System.out.println("Sign Out button is not displayed"); }
			 */
	}

	@Override
	public void CSR_Cancel_the_order_and_select_YES() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		link_CancelOrder_AllPages().click();
		PauseUtil.pause(1000);
		btn_YES_CancelOrder_AllPages().click();
	}

	@Override
	public void CSR_verify_Order_Cancellation_modal_window_displays_and_title() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			popUp_window_Order_Cancellation_SourcePage().isDisplayed();
			System.out.println("Order Cancellation modal window displayed in Source Page");
			String act_text = popUp_window_Order_Cancellation_SourcePage().getText();
			act_text = act_text.trim();
			String exp_text = "Order Cancellation";
			Assert.assertEquals(act_text, exp_text, "Incorrect Cancellation window title is displayed");
		} catch (Exception e) {
			Assert.fail("Order Cancellation modal window is not displayed in Source Page");
		}
	}

	@Override
	public void CSR_verify_Close_btn_displays_in_Order_Cancellation_modal_window() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			btn_close_Order_Cancellation_modal_window().isDisplayed();
			System.out.println("Close button is displayed in Order Cancellation window");
		} catch (Exception e) {
			Assert.fail("Close button is not displayed in Order Cancellation window");
		}
	}

	@Override
	public void CSR_clicks_on_Close_btn_in_Order_Cancellation_modal_window() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		btn_close_Order_Cancellation_modal_window().click();
	}

	@Override
	public void CSR_validate_the_paragraph_text_in_Order_Cancellation_modal_window() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		String act_text = paragraph_Order_Cancellation_window().getText();
		act_text = act_text.trim();
		String exp_text = "Your order was successfully cancelled.";
		Assert.assertEquals(act_text, exp_text,
				"Incorrect paragraph text is displayed for 1st line in Order Cancellation window");
	}

	@Override
	public void CSR_verify_RESET_btn_displayed_in_OrderEntry_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		try {
			btn_RESET_OrderEntry_page().isDisplayed();
			System.out.println("RESET button is displayed in bottom of the Order Entry page");
		} catch (Exception e) {
			Assert.fail("RESET button is not displayed in bottom of the Order Entry page");
		}
	}

	@Override
	public void CSR_verify_RESET_btn_disabled_byDefault_in_OrderEntry_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		if (btn_RESET_OrderEntry_page().isEnabled()) {
			Assert.fail("RESET button is enabled by default in Order Entry page");
		} else {
			System.out.println("RESET button is disabled by default in Order Entry page");
		}
	}

	@Override
	public void CSR_verify_RESET_btn_enabled_in_OrderEntry_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		if (btn_RESET_OrderEntry_page().isEnabled()) {
			System.out.println("RESET button is enabled in Order Entry page");
		} else {
			Assert.fail("RESET button is disabled in Order Entry page");
		}
	}

	@Override
	public void CSR_clicks_on_RESET_btn_in_OrderEntry_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		btn_RESET_OrderEntry_page().click();
	}

	@Override
	public void CSR_verify_confirmation_callout_displayed_in_OrderEntry_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		try {
			callout_confirmation_RESET_OrderEntry_page().isDisplayed();
			System.out.println("RESET Confirmation callout message is displayed");
		} catch (Exception e) {
			Assert.fail("RESET Confirmation callout message is not displayed");
		}
	}

	@Override
	public void CSR_verify_the_text_confirmation_callout_and_YES_NO_btns_displayed_in_OrderEntry_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		String act_text = text_callout_confirmation_RESET_OrderEntry_page().getText();
		act_text = act_text.trim();

		String exp_text = "Are you sure?";
		Assert.assertEquals(act_text, exp_text, "Incorrect text message is displayed to reset the data");

		try {
			btn_YES_callout_confirmation_RESET_OrderEntry_page().isDisplayed();
			System.out.println("YES button is displayed in confirmation callout message");
			try {
				btn_NO_callout_confirmation_RESET_OrderEntry_page().isDisplayed();
				System.out.println("NO button is displayed in confirmation callout message");
			} catch (Exception e) {
				Assert.fail("NO button is not displayed in confirmation callout message");
			}
		} catch (Exception e) {
			Assert.fail("YES button is not displayed in confirmation callout message");
		}
	}

	@Override
	public void CSR_clicks_on_YES_btn_in_RESET_Confirmation_popup_OrderEntry_page() {
		PauseUtil.pause(1000);

		btn_YES_callout_confirmation_RESET_OrderEntry_page().click();
	}

	@Override
	public void CSR_clicks_on_NO_btn_in_RESET_Confirmation_popup_OrderEntry_page() {
		PauseUtil.pause(1000);

		btn_NO_callout_confirmation_RESET_OrderEntry_page().click();
	}

	@Override
	public void CSR_verify_confirmation_callout_msg_close_automatically_in_OrderEntry_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		try {
			callout_confirmation_RESET_OrderEntry_page().isDisplayed();
			Assert.fail("Confirmation callout message is not disappeared/closed");
		} catch (Exception e) {
			System.out.println("Confirmation callout message is disappeared/closed");
		}
	}

	@Override
	public void CSR_verify_the_entered_Flyer_data_is_reset_when_CSR_clicks_on_RESET_btn_in_OrderEntry_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		String act_text = fld1_FlyerCode_in_OrderEntryPage().getAttribute("value");
		String exp_text = TestBaseProvider.getTestBase().getTestData().getString("FlyerCode");

		Assert.assertNotEquals(act_text, exp_text,
				"Entered Flyer data in a form is not reset when CSR clicks on RESET button");

	}

	@Override
	public void CSR_verify_the_entered_ItemNum_data_is_reset_when_CSR_clicks_on_RESET_btn_in_OrderEntry_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		String act_text = Item_Num_field_in_OrderEntryPage().getAttribute("value");
		String exp_text = TestBaseProvider.getTestBase().getTestData().getString("ItemNum");

		Assert.assertNotEquals(act_text, exp_text,
				"Entered ItemNum data in a form is not reset when CSR clicks on RESET button");

	}

	@Override
	public void CSR_verify_the_entered_ItemQTY_data_is_reset_when_CSR_clicks_on_RESET_btn_in_OrderEntry_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		String act_text = Paid_QTY_field_in_OrderEntryPage().getAttribute("value");
		String exp_text = TestBaseProvider.getTestBase().getTestData().getString("ItemQty");

		Assert.assertNotEquals(act_text, exp_text,
				"Entered ItemQTY data in a form is not reset when CSR clicks on RESET button");

	}

	@Override
	public void CSR_verify_the_entered_Flyer_data_is_not_reset_when_CSR_clicks_on_RESET_NO_btn_in_OrderEntry_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		String act_text = fld1_FlyerCode_in_OrderEntryPage().getAttribute("value");
		String exp_text = TestBaseProvider.getTestBase().getTestData().getString("FlyerCode");

		Assert.assertEquals(act_text, exp_text,
				"Entered Flyer data in a form is reset when CSR clicks on RESET NO button");

	}

	@Override
	public void CSR_verify_the_entered_ItemNum_data_is_not_reset_when_CSR_clicks_on_RESET_NO_btn_in_OrderEntry_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		String act_text = Item_Num_field_in_OrderEntryPage().getAttribute("value");
		String exp_text = TestBaseProvider.getTestBase().getTestData().getString("ItemNum");

		Assert.assertEquals(act_text, exp_text,
				"Entered ItemNum data in a form is reset when CSR clicks on RESET NO button");

	}

	@Override
	public void validate_get_sfo_invliadItemNO_error() {
		String appData = get_sfo_invliadItemNO_error().getText();
		if (!appData.equals(ConstantUtils.INVLAIDITEMERROR)) {
			Assert.fail("Check Error for Invalid Item#");
		}
	}

	@Override
	public void validate_get_sfo_invalidStudentName_error() {
		String getfromappValue = get_sfo_invalidStudentName_error().getText();
		if (!getfromappValue.equals("Please enter a valid Student Name.")) {
			Assert.fail("Error Message is not as expected for Std name");
		}
	}

	@Override
	public void verify_sfo_freepick_errorMsg(String coupontype) {
		String sfo_coupon_error = get_ErrMsg_sfofreepick().getText();
		switch (coupontype) {
		case "expired":
			if (!sfo_coupon_error.equals("This coupon is no longer valid. Please check the coupon for details.")) {
				Assert.fail("Expired FreePick coupon error message is not correct");
			}
			break;

		case "notsetup":
			if (!sfo_coupon_error.equals(ConstantUtils.SFOCOUPON_INVALID_COUPON)) {
				Assert.fail("Error message for Invalid coupon is not correct");
			}

			break;
		case "alreadyinCart":
			if (!sfo_coupon_error.equals("Coupon code" + "\""
					+ TestBaseProvider.getTestBase().getTestData()
							.getString(TestBaseProvider.getTestBase().getTestData().getString("sfofreepick"))
					+ "\"" + " is already in your cart.")) {
				Assert.fail("Error message for already applied coupon is not correct");
			}
			break;
		}

	}

	@Override
	public void verify_teacherDesk_Classlist() {
		if (!getteacherDesk_classList().getText().equals("Class List")) {
			Assert.fail("Class List under Teacher Desk is not displayed");
		}
	}

	@Override
	public void verify_teacherDesk_linkManage() {
		if (!getteacherDesk_linkManage().getText().equals("Manage")) {
			Assert.fail("Manage hyperlink not found");
		}

	}

	@Override
	public void click_teacherDesk_Manage() {
		getteacherDesk_linkManage().click();
	}

	@Override
	public void verify_teacherDesk_classListmodal() {
		if (!(getteacherDesk_classListModal().size() > 0)) {
			Assert.fail("ClassList Manage Modal is not displayed");
		}
	}

	@Override
	public void verify_title_classListmodal() {
		if (!getteacherDesk_classListModal().get(0).getText().equals("Manage Class List")) {
			Assert.fail("Manage Class List modal");
		}
	}

	@Override
	public void validate_teacherDesk_manageclassListmodal() {
		if (!(getclassListmodal_enterStudentnamebox().size() > 0)) {
			Assert.fail("Student Name Modal is not displayed");
		}

		getclassListmodal_buttonADD();
		// getclasslistmodal_linkadd();
		// getclasslistmodal_linkSave();
	}

	@Override
	public void CSR_verify_the_entered_ItemQTY_data_is_not_reset_when_CSR_clicks_on_RESET_NO_btn_in_OrderEntry_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		String act_text = Paid_QTY_field_in_OrderEntryPage().getAttribute("value");
		String exp_text = TestBaseProvider.getTestBase().getTestData().getString("ItemQty");

		Assert.assertEquals(act_text, exp_text,
				"Entered ItemQTY data in a form is reset when CSR clicks on RESET NO button");

	}

	@Override
	public void verify_SFO_pageText() {
		// TODO Auto-generated method stub

	}

	@Override
	public void verify_SFO_Page_title() {
		// TODO Auto-generated method stub

	}

	@Override
	public void verify_SFO_Page_SFOTab() {
		// This is validated in another Method

	}

	@Override
	public void verify_SFO_Page_YTOTab() {
		String ytoTabtext = getTabYTO().getText();
		if (!ytoTabtext.equals("Your Teacher Order")) {
			Assert.fail("YTO tab is not displayed");
		}

	}

	@Override
	public void verifySFOPage_labels_Display() {
        System.out.println("Labels verified in verifySFOpage");


	}

	@Override
	public void sfo_teacherAdd_studentName_itemNo() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);
		getsfo_page_studentname().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("sName1"));
		getsfo_page_itemNo().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("itemNo1"));
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);
		get_sfo_page_button_Add().click();

	}

	@Override
	public void sfo_page_AddButton() {
		// TODO Auto-generated method stub

	}

	@Override
	public void sfo_page_Name_Item_add_error() {
		// TODO Auto-generated method stub

	}

	@Override
	public void sfo_page_Name_ItemNo_error() {
		// TODO Auto-generated method stub

	}

	@Override
	public void sfo_teacherAdd_1studentName_1itemNo() {
		// TODO Auto-generated method stub

	}

	@Override
	public void doadditemNo_StudentName(String sName1, String sName2, String itemNo1, String itemNo2) {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		// TODO Auto-generated method stub
		// getsfo_page_studentname().clear();
		// System.out.println(">>>>>>>sName1"+sName1);
		getsfo_page_studentname().sendKeys(sName1);
		PauseUtil.pause(2000);
		// getsfo_page_itemNo().clear();
		getsfo_page_itemNo().sendKeys(itemNo1);
		get_sfo_page_button_Add().click();
		PauseUtil.pause(5000);
		getsfo_page_studentname().sendKeys(sName2);
		PauseUtil.pause(2000);
		getsfo_page_itemNo().sendKeys(itemNo2);
		get_sfo_page_button_Add().click();

	}

	@Override
	public void doadditemNo_StudentName_QTY(String sName1, String sName2, String itemNo1, String itemNo2) {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		getsfo_page_studentname().sendKeys(sName1);
		// getsfo_page_itemNo().clear();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(3000);
		getsfo_page_itemNo().sendKeys(itemNo1);
		PauseUtil.pause(2000);
		get_sfo_page_button_Add().click();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(4000);
		getsfo_page_studentname().sendKeys(sName2);
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		getsfo_page_itemNo().sendKeys(itemNo2);
		PauseUtil.pause(2000);
		get_sfo_page_button_Add().click();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(4000);
		getsfo_page_studentname().sendKeys(sName2);
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		getsfo_page_itemNo().sendKeys(itemNo2);
		PauseUtil.pause(2000);
		get_sfo_page_button_Add().click();
		PauseUtil.waitForAjaxToComplete(2500);

	}

	@Override
	public void doadd_1itemNo_1StudentName(String sName1, String itemNo1) {
		getsfo_page_studentname().clear();
		getsfo_page_studentname().sendKeys(sName1);
		getsfo_page_itemNo().clear();
		getsfo_page_itemNo().sendKeys(itemNo1);

	}

	@Override
	public void sfo_grid_Display() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);
		if (!(get_sfo_addedItem_grid().size() > 0)) {
			Assert.fail("SFO Item added table is not displayed");
		}

	}

	@Override
	public void getsfo_table_header_name() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);
		int thead = togetsfo_itemadded_header_grid().size();
		String path = "//table[@id='sfo-data-table']/thead/tr/th[";
		for (int i = 2; i <= thead; i++) {
			String headerName =path+i+"]";
			System.out.println("##########:"+headerName);
			WebDriver driver=TestBaseProvider.getTestBase().getDriver();
			
			String txtheadername = driver.findElement(By.xpath(headerName)).getText();
			System.out.println("@@@@@@@@@@:"+txtheadername);
			
			if ((txtheadername.contains("STUDENT NAME") || txtheadername.contains("ITEM#")
					|| txtheadername.contains("TITLE") || txtheadername.contains("FLYER")
					|| txtheadername.contains("COUPON") || txtheadername.contains("PRICE")
					|| txtheadername.contains("QTY."))) {
				System.out.println("Correct header names are displayed");
			} else {
				Assert.fail("HeaderName Not Displayed");
			}
		}

	}

	@Override
	public void validate_sfo_table_itemdetails_Added() {
		String itemadded = TestBaseProvider.getTestBase().getTestData().getString("itemNo2");
		if (!(readitemfrom_sfogrid().getText().equals(itemadded))) {
			Assert.fail("Item added in order");
		}

	}

	@Override
	public void validate_sfo_table_updated() {
		// TODO Auto-generated method stub

	}

	@Override
	public void validate_sfo_page_ADDbutton() {
		if (get_sfo_page_button_Add().isEnabled()) {
			Assert.fail("Add Button Should not be Enabled");
		}
	}

	@Override
	public void validate_sfo_page_ADDbutton_Enabled() {
		if (!get_sfo_page_button_Add().isEnabled()) {
			Assert.fail("Add Button Should be Enabled");
		}
	}

	@Override
	public void click_sfo_page_ADDbutton() {
		/*if (!get_sfo_page_button_Add().isEnabled()) {
			Assert.fail("Add Button Should be Enabled");
		}*/
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);
		get_sfo_page_button_Add().click();
	}

	@Override
	public void getsfo_applyCoupontxt() {
		if (!getapptxt_sfo_applyCoupon().getText().equals(ConstantUtils.SFOPAGE_APPLYCOUPONTXT)) {
			Assert.fail("The Link text was not expected");
		}
	}

	@Then("^error message is displayed$")
	public void error_message_is_displayed() throws Throwable {
		String getfromappValue = get_sfo_invliadItemNO_error().getText();
		if (!getTestBase().getContext().getProperty(ConstantUtils.INVLAIDITEMERROR).equals(getfromappValue)) {
			Assert.fail("Error Message is not as Expected");
		}
	}

	@Then("^error messsage is displayed “Please enter a valid Student Name.”$")
	public void error_messsage_is_displayed_Please_enter_a_valid_Student_Name_() throws Throwable {
		String getfromappValue = get_sfo_invalidStudentName_error().getText();
		if (!getfromappValue.equals("Please enter a valid Student Name.")) {
			Assert.fail("Error Message is not as expected for Std name");
		}
	}

	@Override
	public void clicklink_sfoapplyCoupon() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		
		if (lst_fld_Applied_SFO_coupon_SFO_section().size()!=0) {
			System.out.println("SFO applied coupon is displayed");
			btn_close_SFO_coupon_SFO_section().click();
			PauseUtil.pause(1000);
			YES_to_delete_item1_reviewcart().click();
			PauseUtil.waitForAjaxToComplete(2500);
			PauseUtil.pause(2000);
		} else {
			System.out.println("No SFO applied coupon displayed");
		}
		
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
	    SCHUtils.waitForElementToBeClickable(getlink_sfoApplycpn(),2000);
		getlink_sfoApplycpn().click();

	}

	@When("^Item# is entered and Student name entered is all alphabets only equal (\\d+) Character$")
	public void Item_is_entered_and_Student_name_entered_is_all_alphabets_only_equal_Character(int arg1)
			throws Throwable {
		IStudentFlyerOrdersPage studentFlyerOrdersPage = getFactory().getIStudentFlyerOrdersPage();
		studentFlyerOrdersPage.sfo_teacherAdd_studentName_itemNo();
	}

	// @Override
	// public void verifySFOmodalisDisplayed() {
	// PauseUtil.pause(2000);
	// if(!(getmodalSFO_coupon_display().size()>0)){
	// //System.out.println("SFO Modal
	// Size"+getmodalSFO_coupon_display().size());
	// Assert.fail("SFO Coupon modal Not found");
	// }
	// }
	//
	// @Override
	// public void verifySFOmodaltitle() {
	// String getapp_sfocoupontitle = getSFOmodletitle().getText();
	// if(!getapp_sfocoupontitle.equals(ConstantUtils.SFOCOUPON_MODAL_TITLE)){
	// Assert.fail("SFO Coupon Modal Title is not correct");
	// }
	// }
	//
	// @Override
	// public void verifySFOmodalSubtitle() {
	// String getapp_sfocoupontitle1 = getSFOmodleSubtitle().getText();
	// if(!getapp_sfocoupontitle1.equals(ConstantUtils.SFOCOUPON_MODAL_SUBTITLE)){
	// Assert.fail("SFO Coupon Modal Title is not correct");
	// }
	// }
	//
	// @Override
	// public void verifySFOmodalcloseIcon() {
	// if(!(getlinktoCloseSFOcouponmodel().size()>0)){
	// Assert.fail("Close Icon Not Present in SFO Coupon Modal");
	// }
	// }
	//
	//
	// @Override
	// public void clicktoCloseSFOCouponModal() {
	// if((getlinktoCloseSFOcouponmodel().size()>0)){
	// getlinktoCloseSFOcouponmodel().get(0).click();
	// }else {
	// Assert.fail("Close Icon Not Present in SFO Coupon Modal");
	// }
	// }

	// ######################################### SCSCOD-7063
	// ##################################################################
	@FindBy(locator = "dw.studentflyerorder.orderentry.redeemcoupon.hyperlink")
	private WebElement redeem_coupon_hyperlink_OrderEntry_page;

	@FindBy(locator = "dw.studentflyerorder.rewardsredemption.page")
	private WebElement rewards_and_redemption_page;

	public WebElement redeem_coupon_hyperlink_OrderEntry_page() {
		return redeem_coupon_hyperlink_OrderEntry_page;
	}

	public WebElement rewards_and_redemption_page() {
		return rewards_and_redemption_page;
	}

	@Override
	public void verify_Rewards_and_Redemption_page_is_displayed() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		try {
			rewards_and_redemption_page().isDisplayed();
			System.out.println("Rewards and Redemption page is displayed");
		} catch (Exception e) {
			System.out.println("Rewards and Redemption page is not displayed");
		}
	}

	@Override
	public void CSR_selects_redeem_your_coupon_hyperlink() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		redeem_coupon_hyperlink_OrderEntry_page().click();

	}

	@Override
	public void verifySFOmodalisDisplayed() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);
		try {
			SFO_modle_Window().isDisplayed();
			System.out.println("SFO modal window is displayed");
		} catch (Exception e) {
			Assert.fail("SFO modal window is not displayed");
		}
		
	}

	@Override
	public void verifySFOmodaltitle() {
		String getapp_sfocoupontitle = getSFOmodletitle().getText();

        System.out.println("title_SFO"+getapp_sfocoupontitle);
        if(!getapp_sfocoupontitle.equals(ConstantUtils.SFOCOUPON_MODAL_TITLE)){

			Assert.fail("SFO Coupon Modal Title is not correct");
		}
	}

	@Override
	public void verifySFOmodalSubtitle() {
		String getapp_sfocoupontitle1 = getSFOmodleSubtitle().getText();

        System.out.println("subtitle_SFO"+getapp_sfocoupontitle1);
        if(!getapp_sfocoupontitle1.equals(ConstantUtils.SFOCOUPON_MODAL_SUBTITLE)){

			Assert.fail("SFO Coupon Modal Title is not correct");
		}
	}

	@Override
	public void verifySFOmodalcloseIcon() {
		if (!(getlinktoCloseSFOcouponmodel().size() > 0)) {
			Assert.fail("Close Icon Not Present in SFO Coupon Modal");
		}
	}

	@Override
	public void clicktoCloseSFOCouponModal() {
		if ((getlinktoCloseSFOcouponmodel().size() > 0)) {
			getlinktoCloseSFOcouponmodel().get(0).click();
		} else {
			Assert.fail("Close Icon Not Present in SFO Coupon Modal");
		}
	}

	@Then("^error message is displayed “Please enter a valid Student Name\\.”$")
	public void errorMessageIsDisplayedPleaseEnterAValidStudentName() throws Throwable {
		getsfocoupon_Sname_getError();
	}

	@Override
	public void CSR_verify_the_item_num_fld_accept_6_characters_length() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		String act_text = Item_Num_field_in_OrderEntryPage().getAttribute("value");
		String exp_text = TestBaseProvider.getTestBase().getTestData().getString("ItemNum");

		Assert.assertEquals(act_text, exp_text, "Item number field is not accepting 6 characters in Order Entry form");
	}

	@Override
	public void CSR_verify_the_item_num_fld_not_accept_morethan_6_characters_length() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		String act_text = Item_Num_field_in_OrderEntryPage().getAttribute("value");
		String exp_text = TestBaseProvider.getTestBase().getTestData().getString("ItemNum");

		Assert.assertNotEquals(act_text, exp_text,
				"Item number field is accepting more than 6 characters in Order Entry form");
	}

	@Override
	public void CSR_verify_the_Invalid_Items_modal_window_displayed_in_OrderEntryPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		try {
			popUp_ErrorMsg_for_Invalid_Items_OrderEntryPage().isDisplayed();
			System.out.println("Modal window is displayed for Invalid items");
		} catch (Exception e) {
			Assert.fail("Modal window is not displayed for Invalid items");
		}

		String act_text = popUp_ErrorMsg_for_Invalid_Items_OrderEntryPage().getText();
		act_text = act_text.trim();

		String exp_text = "Invalid Items";
		Assert.assertEquals(act_text, exp_text,
				"Incorrect header text is displayed for the Invalid Items modal window");
	}

	@Override
	public void CSR_verify_the_Items_are_listed_in_modal_window_in_OrderEntryPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		/*
		 * ArrayList<String> ItemList= new ArrayList<String>();
		 * ItemList.add(TestBaseProvider.getTestBase().getTestData().getString(
		 * "ItemNum"));
		 * ItemList.add(TestBaseProvider.getTestBase().getTestData().getString(
		 * "ItemNum2"));
		 * ItemList.add(TestBaseProvider.getTestBase().getTestData().getString(
		 * "ItemNum3"));
		 * 
		 * int size=ItemList.size(); System.out.println("##########:"+size);
		 * 
		 * for (int i = 0; i <= size; i++) { WebElement
		 * act=modal_window_Invalid_items_OrderEntryPage().get(i); String
		 * text=act.getText(); System.out.println("##########"+text);
		 * 
		 * if (text.equals(ItemList.get(i))) { System.out.println(
		 * "Entered item "+ItemList.get(i)+" is listed in the modal window"); }
		 * else { Assert.fail("Entered item "+ItemList.get(i)+
		 * " is not listed in the modal window"); } }
		 */

		String act_item1 = modal_window_Invalid_item_1_OrderEntryPage().getText();
		act_item1 = act_item1.trim();

		String exp_item1 = TestBaseProvider.getTestBase().getTestData().getString("ItemNum");

		Assert.assertEquals(act_item1, exp_item1,
				"Entered item is not listed (or) Incorrect item is listed in the modal window");

	}

	@Override
	public void verify_sfo_freepick_couponmodal_applybtn_saved() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(8000);
		
		if (!(appget_sfomodal_applybutton_state().getText().equals("SAVED"))) {
			Assert.fail("Apply button state");
		}

	}

	@Override
	public void verify_sfo_input_couponbox_isDisabled() {
		Assert.assertEquals(false, getinputbox_sfocoupon_couponCode().isEnabled());
	}

	@Override
	public void verify_sfo_input_couponmodal_studentname_isEnabled() {
		Assert.assertEquals(true, getinputbox_sfocoupon_sname().isEnabled());
	}

	@Override
	public void verify_sfo_freepick_calloutMsg() {

		try {
			if (get_calloutMsg_sfofreepick().getText().equals(null)
					|| get_calloutMsg_sfofreepick().getText().equals("")) {
				Assert.fail("Call Out Message is not seen");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@Override
	public void teacher_adds_SFO_item_for_single_student() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		fld_Student_name_SFO().click();
		fld_Student_name_SFO().clear();
		fld_Student_name_SFO().sendKeys(ConstantUtils.SFO_Student_name1);
		PauseUtil.pause(1000);
		fld_Student_Item_SFO().click();
		fld_Student_Item_SFO().clear();
		fld_Student_Item_SFO().sendKeys(ConstantUtils.SFO_item1);
		PauseUtil.pause(2000);
		btn_ADD_SFO().click();
	}

    @Override
    public void teacher_adds_SFO_item_for_single_studentXML() {
        PauseUtil.waitForAjaxToComplete(2500);
        PauseUtil.pause(1000);

        fld_Student_name_SFO().click();
        fld_Student_name_SFO().clear();
        fld_Student_name_SFO().sendKeys(ConstantUtils.SFO_Student_name1);
        PauseUtil.pause(1000);
        fld_Student_Item_SFO().click();
        fld_Student_Item_SFO().clear();
        fld_Student_Item_SFO().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("SFO_ITEM"));
        PauseUtil.pause(2000);
        btn_ADD_SFO().click();
    }

    @Override
    public void  getbacktoSFOsection() {
        SCHUtils.waitForElementToBeDisplayed(getlinkReturntoshop(),1000);
        getlinkReturntoshop().click();
        PauseUtil.waitForAjaxToComplete(2500);
        PauseUtil.pause(2000);
        SCHUtils.waitForElementToBeClickable(getLblSFOTabOrderCount(),2000);
        getLblSFOTabOrderCount().click();

    }

    @Override
    public void getlinkEditCart() {
        SCHUtils.waitForElementToBeDisplayed(getthelinkEditCart(),1000);
        getthelinkEditCart().click();


    }



    @Override
	public void teacher_adds_SFO_item_for_single_student_free_shipping() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);
		fld_Student_name_SFO().click();
		fld_Student_name_SFO().clear();
		fld_Student_name_SFO().sendKeys(ConstantUtils.SFO_Student_name2);
		PauseUtil.pause(1000);
		fld_Student_Item_SFO().click();
		fld_Student_Item_SFO().clear();
		fld_Student_Item_SFO().sendKeys(ConstantUtils.YTO_Free_item1);
		PauseUtil.pause(2000);
		btn_ADD_SFO().click();
		PauseUtil.pause(3000);
		fld_Student_Item_SFO().sendKeys(Keys.F5);
		PauseUtil.pause(6000);
	}
	
	
	@Override
	public void teacher_adds_sfo_item_for_single_student() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);
		fld_Student_name_SFO().click();
		fld_Student_name_SFO().clear();
		fld_Student_name_SFO().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("sfo_studentname"));
		PauseUtil.pause(1000);
		fld_Student_Item_SFO().click();
		fld_Student_Item_SFO().clear();
		fld_Student_Item_SFO().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("sfo_Item1"));
		PauseUtil.pause(2000);
		btn_ADD_SFO().click();
		PauseUtil.pause(3000);
		fld_Student_Item_SFO().sendKeys(Keys.F5);
		PauseUtil.pause(6000);
	}

	@Override
	public void teacher_adds_multiple_SFO_items_for_single_student() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		fld_Student_name_SFO().click();
		fld_Student_name_SFO().clear();
		fld_Student_name_SFO().sendKeys(ConstantUtils.SFO_Student_name1);
		PauseUtil.pause(1000);
		fld_Student_Item_SFO().click();
		fld_Student_Item_SFO().clear();
		fld_Student_Item_SFO().sendKeys(ConstantUtils.SFO_item1);
		PauseUtil.pause(2000);
		btn_ADD_SFO().click();

		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(5000);
		fld_Student_name_SFO().click();
		fld_Student_name_SFO().clear();
		fld_Student_name_SFO().sendKeys(ConstantUtils.SFO_Student_name1);
		PauseUtil.pause(1000);
		fld_Student_Item_SFO().click();
		fld_Student_Item_SFO().clear();
		fld_Student_Item_SFO().sendKeys(ConstantUtils.SFO_item2);
		PauseUtil.pause(2000);
		btn_ADD_SFO().click();
	}

	@Override
	public void teacher_adds_multiple_SFO_items_multipleflyers_for_multiple_students() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		fld_Student_name_SFO().click();
		fld_Student_name_SFO().clear();
		fld_Student_name_SFO().sendKeys(ConstantUtils.SFO_Student_name1);
		PauseUtil.pause(1000);
		fld_Student_Item_SFO().click();
		fld_Student_Item_SFO().clear();
		fld_Student_Item_SFO().sendKeys(ConstantUtils.SFO_item1);
		PauseUtil.pause(2000);
		btn_ADD_SFO().click();

		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(5000);
		fld_Student_name_SFO().click();
		fld_Student_name_SFO().clear();
		fld_Student_name_SFO().sendKeys(ConstantUtils.SFO_Student_name2);
		PauseUtil.pause(1000);
		fld_Student_Item_SFO().click();
		fld_Student_Item_SFO().clear();
		fld_Student_Item_SFO().sendKeys(ConstantUtils.SFO_item2);
		PauseUtil.pause(2000);
		btn_ADD_SFO().click();

		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(5000);
		fld_Student_name_SFO().click();
		fld_Student_name_SFO().clear();
		fld_Student_name_SFO().sendKeys(ConstantUtils.SFO_Student_name3);
		PauseUtil.pause(1000);
		fld_Student_Item_SFO().click();
		fld_Student_Item_SFO().clear();
		fld_Student_Item_SFO().sendKeys(ConstantUtils.SFO_item3);
		PauseUtil.pause(2000);
		btn_ADD_SFO().click();
		PauseUtil.pause(3000);
		fld_Student_Item_SFO().sendKeys(Keys.F5);
		PauseUtil.pause(6000);
	}
	
	
	
	@Override
	public void teacher_adds_multiple_sfo_items_multipleflyers_for_multiple_students_xml() {
		CartPage cartpage = new CartPage();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		fld_Student_name_SFO().click();
		fld_Student_name_SFO().clear();
		fld_Student_name_SFO().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("studentname1"));
		PauseUtil.pause(1000);
		fld_Student_Item_SFO().click();
		fld_Student_Item_SFO().clear();
		fld_Student_Item_SFO().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("sfo_Item1"));
		PauseUtil.pause(2000);
		btn_ADD_SFO().click();
		PauseUtil.waitForAjaxToComplete(2500);

		PauseUtil.pause(5000);
		fld_Student_name_SFO().click();
		fld_Student_name_SFO().clear();
		fld_Student_name_SFO().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("studentname2"));
		PauseUtil.pause(1000);
		fld_Student_Item_SFO().click();
		fld_Student_Item_SFO().clear();
		fld_Student_Item_SFO().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("sfo_Item2"));
		PauseUtil.pause(2000);
		btn_ADD_SFO().click();
		PauseUtil.waitForAjaxToComplete(2500);

		PauseUtil.pause(5000);
		fld_Student_name_SFO().click();
		fld_Student_name_SFO().clear();
		fld_Student_name_SFO().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("studentname3"));
		PauseUtil.pause(1000);
		fld_Student_Item_SFO().click();
		fld_Student_Item_SFO().clear();
		fld_Student_Item_SFO().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("sfo_Item3"));
		PauseUtil.pause(2000);
		btn_ADD_SFO().click();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(3000);
		fld_Student_Item_SFO().sendKeys(Keys.F5);
		PauseUtil.pause(6000);
	}
	
	@Override
	public void teacher_adds_multiple_SFO_items_multipleflyers_for_single_student() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		fld_Student_name_SFO().click();
		fld_Student_name_SFO().clear();
		fld_Student_name_SFO().sendKeys(ConstantUtils.SFO_Student_name1);
		PauseUtil.pause(1000);
		fld_Student_Item_SFO().click();
		fld_Student_Item_SFO().clear();
		fld_Student_Item_SFO().sendKeys(ConstantUtils.SFO_item1);
		PauseUtil.pause(2000);
		btn_ADD_SFO().click();

		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(5000);
		fld_Student_name_SFO().click();
		fld_Student_name_SFO().clear();
		fld_Student_name_SFO().sendKeys(ConstantUtils.SFO_Student_name1);
		PauseUtil.pause(1000);
		fld_Student_Item_SFO().click();
		fld_Student_Item_SFO().clear();
		fld_Student_Item_SFO().sendKeys(ConstantUtils.SFO_item2);
		PauseUtil.pause(1000);
		btn_ADD_SFO().click();

		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(5000);
		fld_Student_name_SFO().click();
		fld_Student_name_SFO().clear();
		fld_Student_name_SFO().sendKeys(ConstantUtils.SFO_Student_name1);
		PauseUtil.pause(1000);
		fld_Student_Item_SFO().click();
		fld_Student_Item_SFO().clear();
		fld_Student_Item_SFO().sendKeys(ConstantUtils.SFO_item3);
		PauseUtil.pause(1000);
		btn_ADD_SFO().click();
		PauseUtil.pause(3000);
		fld_Student_Item_SFO().sendKeys(Keys.F5);
		PauseUtil.pause(6000);
	}
	
	
	@Override
	public void teacher_adds_single_SFO_item_for_single_student_another_student() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(4000);

		fld_Student_name_SFO().click();
		fld_Student_name_SFO().clear();
		fld_Student_name_SFO().sendKeys(ConstantUtils.SFO_Student_name1);
		PauseUtil.pause(1000);
		fld_Student_Item_SFO().click();
		fld_Student_Item_SFO().clear();
		fld_Student_Item_SFO().sendKeys(ConstantUtils.SFO_item1);
		PauseUtil.pause(2000);
		btn_ADD_SFO().click();
		
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(5000);
		fld_Student_name_SFO().click();
		fld_Student_name_SFO().clear();
		fld_Student_name_SFO().sendKeys(ConstantUtils.SFO_Student_name2);
		PauseUtil.pause(1000);
		fld_Student_Item_SFO().click();
		fld_Student_Item_SFO().clear();
		fld_Student_Item_SFO().sendKeys(ConstantUtils.SFO_item1);
		PauseUtil.pause(2000);
		btn_ADD_SFO().click();
		PauseUtil.pause(3000);
		fld_Student_Item_SFO().sendKeys(Keys.F5);
		PauseUtil.pause(6000);
	}

	@Override
	public void teacher_adds_single_SFO_item_for_multiple_student() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(4000);
		fld_Student_name_SFO().click();
		fld_Student_name_SFO().clear();
		fld_Student_name_SFO().sendKeys(ConstantUtils.SFO_Student_name1);
		PauseUtil.pause(1000);
		fld_Student_Item_SFO().click();
		fld_Student_Item_SFO().clear();
		fld_Student_Item_SFO().sendKeys(ConstantUtils.SFO_item1);
		PauseUtil.pause(2000);
		btn_ADD_SFO().click();

		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(6000);
		fld_Student_name_SFO().click();
		fld_Student_name_SFO().clear();
		fld_Student_name_SFO().sendKeys(ConstantUtils.SFO_Student_name2);
		PauseUtil.pause(1000);
		fld_Student_Item_SFO().click();
		fld_Student_Item_SFO().clear();
		fld_Student_Item_SFO().sendKeys(ConstantUtils.SFO_item2);
		PauseUtil.pause(2000);
		btn_ADD_SFO().click();
	}

	@Override
	public void teacher_adds_single_YTO_item_to_the_cart() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(4000);
		fld_Student_Item_SFO().click();
		fld_Student_Item_SFO().clear();
		fld_Student_Item_SFO().sendKeys(ConstantUtils.YTO_item1);
		PauseUtil.pause(2000);
		btn_ADD_SFO().click();
	}


    @Override
    public void teacher_add_single_yto_itemXML() {
        PauseUtil.waitForAjaxToComplete(2500);
        PauseUtil.pause(4000);
        fld_Student_Item_SFO().click();
        fld_Student_Item_SFO().clear();
        fld_Student_Item_SFO().sendKeys(TestBaseProvider.getTestBase().getTestData().getString(
                "YTO_IITEM"));
        PauseUtil.pause(2000);
        btn_ADD_SFO().click();
    }


	@Override
	public void teacher_clicks_on_Continue_checkout_in_ReviewCart_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		CartPage cartpage = new CartPage();
		TeachersHomePage teacherhomepage = new TeachersHomePage();
		//if it is in home page, it will click on review cart icon
		if(loginPage.sizeEnter_ClassRoom_Order().size()!=0){
			teacherhomepage.btn_mini_reviewCart().click();
			PauseUtil.waitForAjaxToComplete(2500);
			PauseUtil.pause(2500);
		}
		if(cartpage.sizebtnReviewCart().size()!=0){
			cartpage.btnReviewCart().click();
			PauseUtil.pause(2500);
			}
		cartpage.store_all_information_from_reviewcart_page("SOO");
		cartpage.store_all_information_from_reviewcart_page("SFO");
		cartpage.store_all_information_from_reviewcart_page("YTO");
		cartpage.store_all_information_from_reviewcart_page("TE");
		
		if(size_btn_Continue_checkout_ReviewCart_page().size()!=0){
		btn_Continue_checkout_ReviewCart_page().click();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		btn_Proceed_to_checkout_Promotion_popup().click();
		PauseUtil.pause(2000);
		}
		else{
		cartpage.getLnkRedeemCoupons().click();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		}
	}
	
	/*@Override
	public void teacher_clicks_on_Continue_checkout_in_ReviewCart_page() {
		CartPage cartpage = new CartPage();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		if(cartpage.sizebtnReviewCart().size()!=0){
			cartpage.btnReviewCart().click();
			PauseUtil.pause(2500);
			}
		cartpage.store_all_information_from_reviewcart_page("SOO");
		cartpage.store_all_information_from_reviewcart_page("SFO");
		cartpage.store_all_information_from_reviewcart_page("YTO");
		cartpage.store_all_information_from_reviewcart_page("TE");
		btn_Continue_checkout_ReviewCart_page().click();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		btn_Proceed_to_checkout_Promotion_popup().click();
	}*/

	@Override
	public void teacher_adds_multiple_YTO_items_to_the_cart() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(4000);
		fld_Student_Item_SFO().click();
		fld_Student_Item_SFO().clear();
		fld_Student_Item_SFO().sendKeys(ConstantUtils.YTO_item1);
		PauseUtil.pause(2000);
		btn_ADD_SFO().click();

		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(5000);
		fld_Student_Item_SFO().click();
		fld_Student_Item_SFO().clear();
		fld_Student_Item_SFO().sendKeys(ConstantUtils.YTO_item2);
		PauseUtil.pause(2000);
		btn_ADD_SFO().click();
		PauseUtil.pause(3000);
	}

	@Override
	public void teacher_clicks_on_ReviewCart_btn_in_SFO() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		btn_ReviewCart_SFO_page().click();

	}

	@Override
	public void verify_SFO_section_displayed_in_ReviewCart_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		try {
			section_SFO_ReviewCart_page().isDisplayed();
			String act_text = section_SFO_ReviewCart_page().getText().trim();
			String exp_text = "STUDENT FLYER ORDERS | EARNS YOU REWARDS!";

			Assert.assertEquals(act_text, exp_text, "Incorrect SFO header text is displayed in Review Cart page");
		} catch (Exception e) {
			Assert.fail("SFO section is not displayed in Review Cart page");
		}
	}

	@Override
	public void verify_single_item_grouped_by_Student_name_SFO_in_ReviewCart_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		int act_num = group_by_Student_name_SFO_section_ReviewCart_page().size();
		int exp_num = 1;
		Assert.assertEquals(act_num, exp_num,
				"Items are not grouped by Student name in SFO section in Review Cart page");
	}

	@Override
	public void verify_multiple_items_grouped_by_Student_name_SFO_in_ReviewCart_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		int act_num = group_by_Student_name_SFO_section_ReviewCart_page().size();
		int exp_num = 2;
		Assert.assertEquals(act_num, exp_num,
				"Items are not grouped by Student name in SFO section in Review Cart page");
	}

	@Override
	public void verify_student_name_displays_correctly_in_SFO_section_in_ReviewCart_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		String act_text = name1_SFO_section_ReviewCart_page().getText().trim();
		String exp_text = ConstantUtils.SFO_Student_name1;
		Assert.assertEquals(act_text, exp_text, "Incorrect Student name is displayed in Review Cart page");
	}

	@Override
	public void verify_student_names_displays_correctly_in_SFO_section_in_ReviewCart_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		String act_text = name1_SFO_section_ReviewCart_page().getText().trim();
		String exp_text = ConstantUtils.SFO_Student_name1;
		Assert.assertEquals(act_text, exp_text, "Incorrect Student1 name is displayed in Review Cart page");

		String act_text2 = name2_SFO_section_ReviewCart_page().getText().trim();
		String exp_text2 = ConstantUtils.SFO_Student_name2;
		Assert.assertEquals(act_text2, exp_text2, "Incorrect Student2 name is displayed in Review Cart page");
	}

	public String delete_US_or_Canada_dollar_for_the_value(String val) {
		String val1 = val.substring(0, 1);
		String val2 = val.substring(val.length() - 2);

		if (val1.equals("$")) {
			val = val.substring(1).trim();
		} else if (val2.equals("c$")) {
			val = val.substring(0, val.length() - 2).trim();
		} else {
			Assert.fail("Value doesn't have any price tag symbol");
		}
		return val;

	}

	@Override
	public double item1_price_in_SFO_section_table1_in_ReviewCart_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		String value1 = item1_price_SFO_table1_ReviewCart_Page().getText().trim();
		String ele1 = item1_QTY_SFO_table1_ReviewCart_Page().getAttribute("value").trim();

		value1 = delete_US_or_Canada_dollar_for_the_value(value1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item1_price = d1 * a1;
		item1_price = Double.parseDouble(new DecimalFormat("##.##").format(item1_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item1_price);

		return item1_price;
	}

	@Override
	public double item2_price_in_SFO_section_table1_in_ReviewCart_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		String value1 = item2_price_SFO_table1_ReviewCart_Page().getText().trim();
		String ele1 = item2_QTY_SFO_table1_ReviewCart_Page().getAttribute("value").trim();

		value1 = delete_US_or_Canada_dollar_for_the_value(value1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item2_price = d1 * a1;
		item2_price = Double.parseDouble(new DecimalFormat("##.##").format(item2_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item2_price);

		return item2_price;
	}

	@Override
	public double item1_price_in_SFO_section_table2_in_ReviewCart_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		String value1 = item1_price_SFO_table2_ReviewCart_Page().getText().trim();
		String ele1 = item1_QTY_SFO_table2_ReviewCart_Page().getAttribute("value").trim();

		value1 = delete_US_or_Canada_dollar_for_the_value(value1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item1_price = d1 * a1;
		item1_price = Double.parseDouble(new DecimalFormat("##.##").format(item1_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item1_price);

		return item1_price;
	}

	@Override
	public double item2_price_in_SFO_section_table2_in_ReviewCart_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		String value1 = item2_price_SFO_table2_ReviewCart_Page().getText().trim();
		String ele1 = item2_QTY_SFO_table2_ReviewCart_Page().getAttribute("value").trim();

		value1 = delete_US_or_Canada_dollar_for_the_value(value1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item2_price = d1 * a1;
		item2_price = Double.parseDouble(new DecimalFormat("##.##").format(item2_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item2_price);

		return item2_price;
	}

	@Override
	public double item1_price_in_YTO_section_in_ReviewCart_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		String value1 = item1_price_YTO_section_ReviewCart_page().getText().trim();
		String ele1 = item1_QTY_YTO_section_ReviewCart_page().getAttribute("value").trim();

		value1 = delete_US_or_Canada_dollar_for_the_value(value1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item1_price = d1 * a1;
		item1_price = Double.parseDouble(new DecimalFormat("##.##").format(item1_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item1_price);

		return item1_price;
	}

	@Override
	public double item2_price_in_YTO_section_in_ReviewCart_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		String value1 = item2_price_YTO_section_ReviewCart_page().getText().trim();
		String ele1 = item2_QTY_YTO_section_ReviewCart_page().getAttribute("value").trim();

		value1 = delete_US_or_Canada_dollar_for_the_value(value1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item2_price = d1 * a1;
		item2_price = Double.parseDouble(new DecimalFormat("##.##").format(item2_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item2_price);

		return item2_price;
	}

	@Override
	public double item1_price_in_TE_section_in_ReviewCart_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		String value1 = item1_price_TE_section_ReviewCart_page().getText().trim();
		String ele1 = item1_QTY_TE_section_ReviewCart_page().getAttribute("value").trim();

		value1 = delete_US_or_Canada_dollar_for_the_value(value1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item1_price = d1 * a1;
		item1_price = Double.parseDouble(new DecimalFormat("##.##").format(item1_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item1_price);

		return item1_price;
	}

	@Override
	public double item2_price_in_TE_section_in_ReviewCart_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		String value1 = item2_price_TE_section_ReviewCart_page().getText().trim();
		String ele1 = item2_QTY_TE_section_ReviewCart_page().getAttribute("value").trim();

		value1 = delete_US_or_Canada_dollar_for_the_value(value1);
		double d1 = Double.parseDouble(value1);
		System.out.println("#############>" + d1);
		int a1 = Integer.parseInt(ele1);
		System.out.println("%%%%%%%%%%%%>" + a1);
		double item2_price = d1 * a1;
		item2_price = Double.parseDouble(new DecimalFormat("##.##").format(item2_price));
		System.out.println("^^^^^^^^^^^^^^^^^" + item2_price);

		return item2_price;
	}

	public double GST_SFO_Table1_ReviewCart_page() {
		String Teacher_gst = GST_table1_SFO_ReviewCart_page().getText().trim();
		Teacher_gst = delete_US_or_Canada_dollar_for_the_value(Teacher_gst);
		double Teacher_gst_2 = Double.parseDouble(Teacher_gst);
		System.out.println("Teacher_GST###########:" + Teacher_gst_2);
		return Teacher_gst_2;
	}

	public double PST_SFO_Table1_ReviewCart_page() {
		String Teacher_pst = PST_table1_SFO_ReviewCart_page().getText().trim();
		Teacher_pst = delete_US_or_Canada_dollar_for_the_value(Teacher_pst);
		double Teacher_pst_2 = Double.parseDouble(Teacher_pst);
		System.out.println("Teacher_PST###########:" + Teacher_pst_2);
		return Teacher_pst_2;
	}

	public double QST_SFO_Table1_ReviewCart_page() {
		String Teacher_qst = QST_table1_SFO_ReviewCart_page().getText().trim();
		Teacher_qst = delete_US_or_Canada_dollar_for_the_value(Teacher_qst);
		double Teacher_qst_2 = Double.parseDouble(Teacher_qst);
		System.out.println("Teacher_QST###########:" + Teacher_qst_2);
		return Teacher_qst_2;
	}

	public double HST_SFO_Table1_ReviewCart_page() {
		String Teacher_hst = HST_table1_SFO_ReviewCart_page().getText().trim();
		Teacher_hst = delete_US_or_Canada_dollar_for_the_value(Teacher_hst);
		double Teacher_hst_2 = Double.parseDouble(Teacher_hst);
		System.out.println("Teacher_HST###########:" + Teacher_hst_2);
		return Teacher_hst_2;
	}

	public double GST_SFO_Table2_ReviewCart_page() {
		String Teacher_gst = GST_table2_SFO_ReviewCart_page().getText().trim();
		Teacher_gst = delete_US_or_Canada_dollar_for_the_value(Teacher_gst);
		double Teacher_gst_2 = Double.parseDouble(Teacher_gst);
		System.out.println("Teacher_GST###########:" + Teacher_gst_2);
		return Teacher_gst_2;
	}

	public double PST_SFO_Table2_ReviewCart_page() {
		String Teacher_pst = PST_table2_SFO_ReviewCart_page().getText().trim();
		Teacher_pst = delete_US_or_Canada_dollar_for_the_value(Teacher_pst);
		double Teacher_pst_2 = Double.parseDouble(Teacher_pst);
		System.out.println("Teacher_PST###########:" + Teacher_pst_2);
		return Teacher_pst_2;
	}

	public double QST_SFO_Table2_ReviewCart_page() {
		String Teacher_qst = QST_table2_SFO_ReviewCart_page().getText().trim();
		Teacher_qst = delete_US_or_Canada_dollar_for_the_value(Teacher_qst);
		double Teacher_qst_2 = Double.parseDouble(Teacher_qst);
		System.out.println("Teacher_QST###########:" + Teacher_qst_2);
		return Teacher_qst_2;
	}

	public double HST_SFO_Table2_ReviewCart_page() {
		String Teacher_hst = HST_table2_SFO_ReviewCart_page().getText().trim();
		Teacher_hst = delete_US_or_Canada_dollar_for_the_value(Teacher_hst);
		double Teacher_hst_2 = Double.parseDouble(Teacher_hst);
		System.out.println("Teacher_HST###########:" + Teacher_hst_2);
		return Teacher_hst_2;
	}

	public double GST_YTO_section_ReviewCart_page() {
		String Teacher_gst = GST_val_YTO_section_ReviewCart_page().getText().trim();
		Teacher_gst = delete_US_or_Canada_dollar_for_the_value(Teacher_gst);
		double Teacher_gst_2 = Double.parseDouble(Teacher_gst);
		System.out.println("Teacher_GST###########:" + Teacher_gst_2);
		return Teacher_gst_2;
	}

	public double PST_YTO_section_ReviewCart_page() {
		String Teacher_pst = PST_val_YTO_section_ReviewCart_page().getText().trim();
		Teacher_pst = delete_US_or_Canada_dollar_for_the_value(Teacher_pst);
		double Teacher_pst_2 = Double.parseDouble(Teacher_pst);
		System.out.println("Teacher_pst###########:" + Teacher_pst_2);
		return Teacher_pst_2;
	}

	public double QST_YTO_section_ReviewCart_page() {
		String Teacher_qst = QST_val_YTO_section_ReviewCart_page().getText().trim();
		Teacher_qst = delete_US_or_Canada_dollar_for_the_value(Teacher_qst);
		double Teacher_qst_2 = Double.parseDouble(Teacher_qst);
		System.out.println("Teacher_qst###########:" + Teacher_qst_2);
		return Teacher_qst_2;
	}

	public double HST_YTO_section_ReviewCart_page() {
		String Teacher_hst = HST_val_YTO_section_ReviewCart_page().getText().trim();
		Teacher_hst = delete_US_or_Canada_dollar_for_the_value(Teacher_hst);
		double Teacher_hst_2 = Double.parseDouble(Teacher_hst);
		System.out.println("Teacher_hst###########:" + Teacher_hst_2);
		return Teacher_hst_2;
	}

	public double GST_TE_section_ReviewCart_page() {
		String Teacher_gst = GST_val_TE_section_ReviewCart_page().getText().trim();
		Teacher_gst = delete_US_or_Canada_dollar_for_the_value(Teacher_gst);
		double Teacher_gst_2 = Double.parseDouble(Teacher_gst);
		System.out.println("Teacher_GST###########:" + Teacher_gst_2);
		return Teacher_gst_2;
	}

	public double PST_TE_section_ReviewCart_page() {
		String Teacher_pst = PST_val_TE_section_ReviewCart_page().getText().trim();
		Teacher_pst = delete_US_or_Canada_dollar_for_the_value(Teacher_pst);
		double Teacher_pst_2 = Double.parseDouble(Teacher_pst);
		System.out.println("Teacher_pst###########:" + Teacher_pst_2);
		return Teacher_pst_2;
	}

	public double QST_TE_section_ReviewCart_page() {
		String Teacher_qst = QST_val_TE_section_ReviewCart_page().getText().trim();
		Teacher_qst = delete_US_or_Canada_dollar_for_the_value(Teacher_qst);
		double Teacher_qst_2 = Double.parseDouble(Teacher_qst);
		System.out.println("Teacher_qst###########:" + Teacher_qst_2);
		return Teacher_qst_2;
	}

	public double HST_TE_section_ReviewCart_page() {
		String Teacher_hst = HST_val_TE_section_ReviewCart_page().getText().trim();
		Teacher_hst = delete_US_or_Canada_dollar_for_the_value(Teacher_hst);
		double Teacher_hst_2 = Double.parseDouble(Teacher_hst);
		System.out.println("Teacher_hst###########:" + Teacher_hst_2);
		return Teacher_hst_2;
	}

	@Override
	public void validation_of_single_SFO_item_added_for_one_student_totals_GST_PST() {
		int stateTaxGST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxGST");
		double stateTaxPST = TestBaseProvider.getTestBase().getTestData().getDouble("stateTaxPST");
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		double item1_price = item1_price_in_SFO_section_table1_in_ReviewCart_page();
		double exp_SFO_table1_subTotal = item1_price;
		String act_SFO_table1_subTotal_is = SFO_subtotal_table1_ReviewCart_page().getText().trim();
		act_SFO_table1_subTotal_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table1_subTotal_is);
		double act_SFO_table1_subTotal = Double.parseDouble(act_SFO_table1_subTotal_is);

		Assert.assertEquals(act_SFO_table1_subTotal, exp_SFO_table1_subTotal,
				"Incorrect Student subtotal value is displayed in Table1 Review Cart page");

		double act_GST_SFO_Table1 = GST_SFO_Table1_ReviewCart_page();
		double act_PST_SFO_Table1 = PST_SFO_Table1_ReviewCart_page();

		double exp_GST_SFO_Table1 = (double) (exp_SFO_table1_subTotal * stateTaxGST) / 100;
		exp_GST_SFO_Table1 = Double.parseDouble(new DecimalFormat("##.##").format(exp_GST_SFO_Table1));

		Assert.assertEquals(act_GST_SFO_Table1, exp_GST_SFO_Table1,
				"Incorrect GST value is displayed in SFO Table1 Review Cart page");

		double exp_PST_SFO_Table1 = (double) (exp_SFO_table1_subTotal * stateTaxPST) / 100;
		exp_PST_SFO_Table1 = Double.parseDouble(new DecimalFormat("##.##").format(exp_PST_SFO_Table1));

		Assert.assertEquals(act_PST_SFO_Table1, exp_PST_SFO_Table1,
				"Incorrect PST value is displayed in SFO Table1 Review Cart page");

		String act_SFO_table1_total_is = SFO_total_table1_ReviewCart_page().getText().trim();
		act_SFO_table1_total_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table1_total_is);
		double act_SFO_table1_total = Double.parseDouble(act_SFO_table1_total_is);

		double exp_SFO_table1_total = exp_SFO_table1_subTotal + exp_GST_SFO_Table1 + exp_PST_SFO_Table1;
		exp_SFO_table1_total = Double.parseDouble(new DecimalFormat("##.##").format(exp_SFO_table1_total));

		Assert.assertEquals(act_SFO_table1_total, exp_SFO_table1_total,
				"Incorrect SFO Table1 Total value is displayed in Review Cart page");

		String act_SFO_table1_Total_is = SFO_TOTAL_ReviewCart_page().getText().trim();
		act_SFO_table1_Total_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table1_Total_is);
		double act_SFO_table1_Total = Double.parseDouble(act_SFO_table1_Total_is);

		Assert.assertEquals(act_SFO_table1_Total, exp_SFO_table1_total,
				"Incorrect SFO Total value is displayed in Review Cart page");

		String act_CART_Total_is = CART_TOTAL_ReviewCart_page().getText().trim();
		act_CART_Total_is = delete_US_or_Canada_dollar_for_the_value(act_CART_Total_is);
		double act_CART_Total = Double.parseDouble(act_CART_Total_is);

		double exp_CART_Total = exp_SFO_table1_total;

		Assert.assertEquals(act_CART_Total, exp_CART_Total,
				"Incorrect CART Total value is displayed in Review Cart page");

	}

	@Override
	public void validation_of_multiple_SFO_items_added_for_one_student_totals_GST_PST() {
		int stateTaxGST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxGST");
		double stateTaxPST = TestBaseProvider.getTestBase().getTestData().getDouble("stateTaxPST");
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		double item1_price = item1_price_in_SFO_section_table1_in_ReviewCart_page();
		double item2_price = item2_price_in_SFO_section_table1_in_ReviewCart_page();
		double exp_SFO_table1_subTotal = item1_price + item2_price;
		exp_SFO_table1_subTotal = Double.parseDouble(new DecimalFormat("##.##").format(exp_SFO_table1_subTotal));
		String act_SFO_table1_subTotal_is = SFO_subtotal_table1_ReviewCart_page().getText().trim();
		act_SFO_table1_subTotal_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table1_subTotal_is);
		double act_SFO_table1_subTotal = Double.parseDouble(act_SFO_table1_subTotal_is);

		Assert.assertEquals(act_SFO_table1_subTotal, exp_SFO_table1_subTotal,
				"Incorrect Student subtotal value is displayed in Table1 Review Cart page");

		double act_GST_SFO_Table1 = GST_SFO_Table1_ReviewCart_page();
		double act_PST_SFO_Table1 = PST_SFO_Table1_ReviewCart_page();

		double exp_GST_SFO_Table1 = (double) (exp_SFO_table1_subTotal * stateTaxGST) / 100;
		exp_GST_SFO_Table1 = Double.parseDouble(new DecimalFormat("##.##").format(exp_GST_SFO_Table1));

		Assert.assertEquals(act_GST_SFO_Table1, exp_GST_SFO_Table1,
				"Incorrect GST value is displayed in SFO Table1 Review Cart page");

		double exp_PST_SFO_Table1 = (double) (exp_SFO_table1_subTotal * stateTaxPST) / 100;
		exp_PST_SFO_Table1 = Double.parseDouble(new DecimalFormat("##.##").format(exp_PST_SFO_Table1));

		Assert.assertEquals(act_PST_SFO_Table1, exp_PST_SFO_Table1,
				"Incorrect PST value is displayed in SFO Table1 Review Cart page");

		String act_SFO_table1_total_is = SFO_total_table1_ReviewCart_page().getText().trim();
		act_SFO_table1_total_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table1_total_is);
		double act_SFO_table1_total = Double.parseDouble(act_SFO_table1_total_is);

		double exp_SFO_table1_total = exp_SFO_table1_subTotal + exp_GST_SFO_Table1 + exp_PST_SFO_Table1;
		exp_SFO_table1_total = Double.parseDouble(new DecimalFormat("##.##").format(exp_SFO_table1_total));

		Assert.assertEquals(act_SFO_table1_total, exp_SFO_table1_total,
				"Incorrect SFO Table1 Total value is displayed in Review Cart page");

		String act_SFO_table1_Total_is = SFO_TOTAL_ReviewCart_page().getText().trim();
		act_SFO_table1_Total_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table1_Total_is);
		double act_SFO_table1_Total = Double.parseDouble(act_SFO_table1_Total_is);

		Assert.assertEquals(act_SFO_table1_Total, exp_SFO_table1_total,
				"Incorrect SFO Total value is displayed in Review Cart page");

		String act_CART_Total_is = CART_TOTAL_ReviewCart_page().getText().trim();
		act_CART_Total_is = delete_US_or_Canada_dollar_for_the_value(act_CART_Total_is);
		double act_CART_Total = Double.parseDouble(act_CART_Total_is);

		double exp_CART_Total = exp_SFO_table1_total;

		Assert.assertEquals(act_CART_Total, exp_CART_Total,
				"Incorrect CART Total value is displayed in Review Cart page");

	}

	@Override
	public void validation_of_single_SFO_items_added_for_multiple_students_totals_GST_QST() {
		int stateTaxGST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxGST");
		double stateTaxQST = TestBaseProvider.getTestBase().getTestData().getDouble("stateTaxQST");
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		double item1_price = item1_price_in_SFO_section_table1_in_ReviewCart_page();
		double exp_SFO_table1_subTotal = item1_price;
		exp_SFO_table1_subTotal = Double.parseDouble(new DecimalFormat("##.##").format(exp_SFO_table1_subTotal));
		String act_SFO_table1_subTotal_is = SFO_subtotal_table1_ReviewCart_page().getText().trim();
		act_SFO_table1_subTotal_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table1_subTotal_is);
		double act_SFO_table1_subTotal = Double.parseDouble(act_SFO_table1_subTotal_is);

		Assert.assertEquals(act_SFO_table1_subTotal, exp_SFO_table1_subTotal,
				"Incorrect Student1 subtotal value is displayed in Table1 Review Cart page");

		double act_GST_SFO_Table1 = GST_SFO_Table1_ReviewCart_page();
		double act_QST_SFO_Table1 = QST_SFO_Table1_ReviewCart_page();

		double exp_GST_SFO_Table1 = (double) (exp_SFO_table1_subTotal * stateTaxGST) / 100;
		exp_GST_SFO_Table1 = Double.parseDouble(new DecimalFormat("##.##").format(exp_GST_SFO_Table1));

		Assert.assertEquals(act_GST_SFO_Table1, exp_GST_SFO_Table1,
				"Incorrect GST value is displayed in SFO Table1 Review Cart page");

		double exp_QST_SFO_Table1 = (double) (exp_SFO_table1_subTotal * stateTaxQST) / 100;
		exp_QST_SFO_Table1 = Double.parseDouble(new DecimalFormat("##.##").format(exp_QST_SFO_Table1));

		Assert.assertEquals(act_QST_SFO_Table1, exp_QST_SFO_Table1,
				"Incorrect QST value is displayed in SFO Table1 Review Cart page");

		String act_SFO_table1_total_is = SFO_total_table1_ReviewCart_page().getText().trim();
		act_SFO_table1_total_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table1_total_is);
		double act_SFO_table1_total = Double.parseDouble(act_SFO_table1_total_is);

		double exp_SFO_table1_total = exp_SFO_table1_subTotal + exp_GST_SFO_Table1 + exp_QST_SFO_Table1;
		exp_SFO_table1_total = Double.parseDouble(new DecimalFormat("##.##").format(exp_SFO_table1_total));

		Assert.assertEquals(act_SFO_table1_total, exp_SFO_table1_total,
				"Incorrect SFO Table1 Total value is displayed in Review Cart page");

		//////////////////////

		double item_1_price = item1_price_in_SFO_section_table2_in_ReviewCart_page();
		double exp_SFO_table2_subTotal = item_1_price;
		exp_SFO_table2_subTotal = Double.parseDouble(new DecimalFormat("##.##").format(exp_SFO_table2_subTotal));
		String act_SFO_table2_subTotal_is = SFO_subtotal_table2_ReviewCart_page().getText().trim();
		act_SFO_table2_subTotal_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table2_subTotal_is);
		double act_SFO_table2_subTotal = Double.parseDouble(act_SFO_table2_subTotal_is);

		Assert.assertEquals(act_SFO_table2_subTotal, exp_SFO_table2_subTotal,
				"Incorrect Student2 subtotal value is displayed in Table2 Review Cart page");

		double act_GST_SFO_Table2 = GST_SFO_Table2_ReviewCart_page();
		double act_QST_SFO_Table2 = QST_SFO_Table2_ReviewCart_page();

		double exp_GST_SFO_Table2 = (double) (exp_SFO_table2_subTotal * stateTaxGST) / 100;
		exp_GST_SFO_Table2 = Double.parseDouble(new DecimalFormat("##.##").format(exp_GST_SFO_Table2));

		Assert.assertEquals(act_GST_SFO_Table2, exp_GST_SFO_Table2,
				"Incorrect GST value is displayed in SFO Table2 Review Cart page");

		double exp_QST_SFO_Table2 = (double) (exp_SFO_table2_subTotal * stateTaxQST) / 100;
		exp_QST_SFO_Table2 = Double.parseDouble(new DecimalFormat("##.##").format(exp_QST_SFO_Table2));

		Assert.assertEquals(act_QST_SFO_Table2, exp_QST_SFO_Table2,
				"Incorrect QST value is displayed in SFO Table2 Review Cart page");

		String act_SFO_table2_total_is = SFO_total_table2_ReviewCart_page().getText().trim();
		act_SFO_table2_total_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table2_total_is);
		double act_SFO_table2_total = Double.parseDouble(act_SFO_table2_total_is);

		double exp_SFO_table2_total = exp_SFO_table2_subTotal + exp_GST_SFO_Table2 + exp_QST_SFO_Table2;
		exp_SFO_table2_total = Double.parseDouble(new DecimalFormat("##.##").format(exp_SFO_table2_total));

		Assert.assertEquals(act_SFO_table2_total, exp_SFO_table2_total,
				"Incorrect SFO Table2 Total value is displayed in Review Cart page");

		String act_SFO_Total_is = SFO_TOTAL_ReviewCart_page().getText().trim();
		act_SFO_Total_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_Total_is);
		double act_SFO_Total = Double.parseDouble(act_SFO_Total_is);

		double exp_SFO_Total = exp_SFO_table1_total + exp_SFO_table2_total;
		exp_SFO_Total = Double.parseDouble(new DecimalFormat("##.##").format(exp_SFO_Total));

		Assert.assertEquals(act_SFO_Total, exp_SFO_Total, "Incorrect SFO Total value is displayed in Review Cart page");

		String act_CART_Total_is = CART_TOTAL_ReviewCart_page().getText().trim();
		act_CART_Total_is = delete_US_or_Canada_dollar_for_the_value(act_CART_Total_is);
		double act_CART_Total = Double.parseDouble(act_CART_Total_is);

		double exp_CART_Total = exp_SFO_Total;

		Assert.assertEquals(act_CART_Total, exp_CART_Total,
				"Incorrect CART Total value is displayed in Review Cart page");

	}

	@Override
	public void validation_of_single_SFO_items_added_for_multiple_students_totals_GST_PST() {
		int stateTaxGST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxGST");
		double stateTaxPST = TestBaseProvider.getTestBase().getTestData().getDouble("stateTaxPST");
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		double item1_price = item1_price_in_SFO_section_table1_in_ReviewCart_page();
		double exp_SFO_table1_subTotal = item1_price;
		exp_SFO_table1_subTotal = Double.parseDouble(new DecimalFormat("##.##").format(exp_SFO_table1_subTotal));
		String act_SFO_table1_subTotal_is = SFO_subtotal_table1_ReviewCart_page().getText().trim();
		act_SFO_table1_subTotal_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table1_subTotal_is);
		double act_SFO_table1_subTotal = Double.parseDouble(act_SFO_table1_subTotal_is);

		Assert.assertEquals(act_SFO_table1_subTotal, exp_SFO_table1_subTotal,
				"Incorrect Student1 subtotal value is displayed in Table1 Review Cart page");

		double act_GST_SFO_Table1 = GST_SFO_Table1_ReviewCart_page();
		double act_PST_SFO_Table1 = PST_SFO_Table1_ReviewCart_page();

		double exp_GST_SFO_Table1 = (double) (exp_SFO_table1_subTotal * stateTaxGST) / 100;
		exp_GST_SFO_Table1 = Double.parseDouble(new DecimalFormat("##.##").format(exp_GST_SFO_Table1));

		Assert.assertEquals(act_GST_SFO_Table1, exp_GST_SFO_Table1,
				"Incorrect GST value is displayed in SFO Table1 Review Cart page");

		double exp_PST_SFO_Table1 = (double) (exp_SFO_table1_subTotal * stateTaxPST) / 100;
		exp_PST_SFO_Table1 = Double.parseDouble(new DecimalFormat("##.##").format(exp_PST_SFO_Table1));

		Assert.assertEquals(act_PST_SFO_Table1, exp_PST_SFO_Table1,
				"Incorrect PST value is displayed in SFO Table1 Review Cart page");

		String act_SFO_table1_total_is = SFO_total_table1_ReviewCart_page().getText().trim();
		act_SFO_table1_total_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table1_total_is);
		double act_SFO_table1_total = Double.parseDouble(act_SFO_table1_total_is);

		double exp_SFO_table1_total = exp_SFO_table1_subTotal + exp_GST_SFO_Table1 + exp_PST_SFO_Table1;
		exp_SFO_table1_total = Double.parseDouble(new DecimalFormat("##.##").format(exp_SFO_table1_total));

		Assert.assertEquals(act_SFO_table1_total, exp_SFO_table1_total,
				"Incorrect SFO Table1 Total value is displayed in Review Cart page");

		//////////////////////

		double item_1_price = item1_price_in_SFO_section_table2_in_ReviewCart_page();
		double exp_SFO_table2_subTotal = item_1_price;
		exp_SFO_table2_subTotal = Double.parseDouble(new DecimalFormat("##.##").format(exp_SFO_table2_subTotal));
		String act_SFO_table2_subTotal_is = SFO_subtotal_table2_ReviewCart_page().getText().trim();
		act_SFO_table2_subTotal_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table2_subTotal_is);
		double act_SFO_table2_subTotal = Double.parseDouble(act_SFO_table2_subTotal_is);

		Assert.assertEquals(act_SFO_table2_subTotal, exp_SFO_table2_subTotal,
				"Incorrect Student2 subtotal value is displayed in Table2 Review Cart page");

		double act_GST_SFO_Table2 = GST_SFO_Table2_ReviewCart_page();
		double act_PST_SFO_Table2 = PST_SFO_Table2_ReviewCart_page();

		double exp_GST_SFO_Table2 = (double) (exp_SFO_table2_subTotal * stateTaxGST) / 100;
		exp_GST_SFO_Table2 = Double.parseDouble(new DecimalFormat("##.##").format(exp_GST_SFO_Table2));

		Assert.assertEquals(act_GST_SFO_Table2, exp_GST_SFO_Table2,
				"Incorrect GST value is displayed in SFO Table2 Review Cart page");

		double exp_PST_SFO_Table2 = (double) (exp_SFO_table2_subTotal * stateTaxPST) / 100;
		exp_PST_SFO_Table2 = Double.parseDouble(new DecimalFormat("##.##").format(exp_PST_SFO_Table2));

		Assert.assertEquals(act_PST_SFO_Table2, exp_PST_SFO_Table2,
				"Incorrect PST value is displayed in SFO Table2 Review Cart page");

		String act_SFO_table2_total_is = SFO_total_table2_ReviewCart_page().getText().trim();
		act_SFO_table2_total_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table2_total_is);
		double act_SFO_table2_total = Double.parseDouble(act_SFO_table2_total_is);

		double exp_SFO_table2_total = exp_SFO_table2_subTotal + exp_GST_SFO_Table2 + exp_PST_SFO_Table2;
		exp_SFO_table2_total = Double.parseDouble(new DecimalFormat("##.##").format(exp_SFO_table2_total));

		Assert.assertEquals(act_SFO_table2_total, exp_SFO_table2_total,
				"Incorrect SFO Table2 Total value is displayed in Review Cart page");

		String act_SFO_Total_is = SFO_TOTAL_ReviewCart_page().getText().trim();
		act_SFO_Total_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_Total_is);
		double act_SFO_Total = Double.parseDouble(act_SFO_Total_is);

		double exp_SFO_Total = exp_SFO_table1_total + exp_SFO_table2_total;
		exp_SFO_Total = Double.parseDouble(new DecimalFormat("##.##").format(exp_SFO_Total));

		Assert.assertEquals(act_SFO_Total, exp_SFO_Total, "Incorrect SFO Total value is displayed in Review Cart page");

		String act_CART_Total_is = CART_TOTAL_ReviewCart_page().getText().trim();
		act_CART_Total_is = delete_US_or_Canada_dollar_for_the_value(act_CART_Total_is);
		double act_CART_Total = Double.parseDouble(act_CART_Total_is);

		double exp_CART_Total = exp_SFO_Total;

		Assert.assertEquals(act_CART_Total, exp_CART_Total,
				"Incorrect CART Total value is displayed in Review Cart page");

	}

	@Override
	public void validation_of_single_SFO_items_added_for_multiple_students_totals_HST() {
		double stateTaxHST = TestBaseProvider.getTestBase().getTestData().getDouble("stateTaxHST");
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		double item1_price = item1_price_in_SFO_section_table1_in_ReviewCart_page();
		double exp_SFO_table1_subTotal = item1_price;
		exp_SFO_table1_subTotal = Double.parseDouble(new DecimalFormat("##.##").format(exp_SFO_table1_subTotal));
		String act_SFO_table1_subTotal_is = SFO_subtotal_table1_ReviewCart_page().getText().trim();
		act_SFO_table1_subTotal_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table1_subTotal_is);
		double act_SFO_table1_subTotal = Double.parseDouble(act_SFO_table1_subTotal_is);

		Assert.assertEquals(act_SFO_table1_subTotal, exp_SFO_table1_subTotal,
				"Incorrect Student1 subtotal value is displayed in Table1 Review Cart page");

		double act_HST_SFO_Table1 = HST_SFO_Table1_ReviewCart_page();

		double exp_HST_SFO_Table1 = (double) (exp_SFO_table1_subTotal * stateTaxHST) / 100;
		exp_HST_SFO_Table1 = Double.parseDouble(new DecimalFormat("##.##").format(exp_HST_SFO_Table1));

		Assert.assertEquals(act_HST_SFO_Table1, exp_HST_SFO_Table1,
				"Incorrect HST value is displayed in SFO Table1 Review Cart page");

		String act_SFO_table1_total_is = SFO_total_table1_ReviewCart_page().getText().trim();
		act_SFO_table1_total_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table1_total_is);
		double act_SFO_table1_total = Double.parseDouble(act_SFO_table1_total_is);

		double exp_SFO_table1_total = exp_SFO_table1_subTotal + exp_HST_SFO_Table1;
		exp_SFO_table1_total = Double.parseDouble(new DecimalFormat("##.##").format(exp_SFO_table1_total));

		Assert.assertEquals(act_SFO_table1_total, exp_SFO_table1_total,
				"Incorrect SFO Table1 Total value is displayed in Review Cart page");

		//////////////////////

		double item_1_price = item1_price_in_SFO_section_table2_in_ReviewCart_page();
		double exp_SFO_table2_subTotal = item_1_price;
		exp_SFO_table2_subTotal = Double.parseDouble(new DecimalFormat("##.##").format(exp_SFO_table2_subTotal));
		String act_SFO_table2_subTotal_is = SFO_subtotal_table2_ReviewCart_page().getText().trim();
		act_SFO_table2_subTotal_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table2_subTotal_is);
		double act_SFO_table2_subTotal = Double.parseDouble(act_SFO_table2_subTotal_is);

		Assert.assertEquals(act_SFO_table2_subTotal, exp_SFO_table2_subTotal,
				"Incorrect Student1 subtotal value is displayed in Table2 Review Cart page");

		double act_HST_SFO_Table2 = HST_SFO_Table2_ReviewCart_page();

		double exp_HST_SFO_Table2 = (double) (exp_SFO_table2_subTotal * stateTaxHST) / 100;
		exp_HST_SFO_Table2 = Double.parseDouble(new DecimalFormat("##.##").format(exp_HST_SFO_Table2));

		Assert.assertEquals(act_HST_SFO_Table2, exp_HST_SFO_Table2,
				"Incorrect HST value is displayed in SFO Table2 Review Cart page");

		String act_SFO_table2_total_is = SFO_total_table2_ReviewCart_page().getText().trim();
		act_SFO_table2_total_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table2_total_is);
		double act_SFO_table2_total = Double.parseDouble(act_SFO_table2_total_is);

		double exp_SFO_table2_total = exp_SFO_table2_subTotal + exp_HST_SFO_Table2;
		exp_SFO_table2_total = Double.parseDouble(new DecimalFormat("##.##").format(exp_SFO_table2_total));

		Assert.assertEquals(act_SFO_table2_total, exp_SFO_table2_total,
				"Incorrect SFO Table2 Total value is displayed in Review Cart page");

		String act_SFO_Total_is = SFO_TOTAL_ReviewCart_page().getText().trim();
		act_SFO_Total_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_Total_is);
		double act_SFO_Total = Double.parseDouble(act_SFO_Total_is);

		double exp_SFO_Total = exp_SFO_table1_total + exp_SFO_table2_total;
		exp_SFO_Total = Double.parseDouble(new DecimalFormat("##.##").format(exp_SFO_Total));

		Assert.assertEquals(act_SFO_Total, exp_SFO_Total, "Incorrect SFO Total value is displayed in Review Cart page");

		String act_CART_Total_is = CART_TOTAL_ReviewCart_page().getText().trim();
		act_CART_Total_is = delete_US_or_Canada_dollar_for_the_value(act_CART_Total_is);
		double act_CART_Total = Double.parseDouble(act_CART_Total_is);

		double exp_CART_Total = exp_SFO_Total;

		Assert.assertEquals(act_CART_Total, exp_CART_Total,
				"Incorrect CART Total value is displayed in Review Cart page");

	}

	@Override
	public void validation_of_single_SFO_items_added_for_multiple_students_totals_GST() {
		double stateTaxGST = TestBaseProvider.getTestBase().getTestData().getDouble("stateTaxGST");
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		double item1_price = item1_price_in_SFO_section_table1_in_ReviewCart_page();
		double exp_SFO_table1_subTotal = item1_price;
		exp_SFO_table1_subTotal = Double.parseDouble(new DecimalFormat("##.##").format(exp_SFO_table1_subTotal));
		String act_SFO_table1_subTotal_is = SFO_subtotal_table1_ReviewCart_page().getText().trim();
		act_SFO_table1_subTotal_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table1_subTotal_is);
		double act_SFO_table1_subTotal = Double.parseDouble(act_SFO_table1_subTotal_is);

		Assert.assertEquals(act_SFO_table1_subTotal, exp_SFO_table1_subTotal,
				"Incorrect Student1 subtotal value is displayed in Table1 Review Cart page");

		double act_GST_SFO_Table1 = GST_SFO_Table1_ReviewCart_page();

		double exp_GST_SFO_Table1 = (double) (exp_SFO_table1_subTotal * stateTaxGST) / 100;
		exp_GST_SFO_Table1 = Double.parseDouble(new DecimalFormat("##.##").format(exp_GST_SFO_Table1));

		Assert.assertEquals(act_GST_SFO_Table1, exp_GST_SFO_Table1,
				"Incorrect GST value is displayed in SFO Table1 Review Cart page");

		String act_SFO_table1_total_is = SFO_total_table1_ReviewCart_page().getText().trim();
		act_SFO_table1_total_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table1_total_is);
		double act_SFO_table1_total = Double.parseDouble(act_SFO_table1_total_is);

		double exp_SFO_table1_total = exp_SFO_table1_subTotal + exp_GST_SFO_Table1;
		exp_SFO_table1_total = Double.parseDouble(new DecimalFormat("##.##").format(exp_SFO_table1_total));

		Assert.assertEquals(act_SFO_table1_total, exp_SFO_table1_total,
				"Incorrect SFO Table1 Total value is displayed in Review Cart page");

		//////////////////////

		double item_1_price = item1_price_in_SFO_section_table2_in_ReviewCart_page();
		double exp_SFO_table2_subTotal = item_1_price;
		exp_SFO_table2_subTotal = Double.parseDouble(new DecimalFormat("##.##").format(exp_SFO_table2_subTotal));
		String act_SFO_table2_subTotal_is = SFO_subtotal_table2_ReviewCart_page().getText().trim();
		act_SFO_table2_subTotal_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table2_subTotal_is);
		double act_SFO_table2_subTotal = Double.parseDouble(act_SFO_table2_subTotal_is);

		Assert.assertEquals(act_SFO_table2_subTotal, exp_SFO_table2_subTotal,
				"Incorrect Student1 subtotal value is displayed in Table2 Review Cart page");

		double act_GST_SFO_Table2 = GST_SFO_Table2_ReviewCart_page();

		double exp_GST_SFO_Table2 = (double) (exp_SFO_table2_subTotal * stateTaxGST) / 100;
		exp_GST_SFO_Table2 = Double.parseDouble(new DecimalFormat("##.##").format(exp_GST_SFO_Table2));

		Assert.assertEquals(act_GST_SFO_Table2, exp_GST_SFO_Table2,
				"Incorrect GST value is displayed in SFO Table2 Review Cart page");

		String act_SFO_table2_total_is = SFO_total_table2_ReviewCart_page().getText().trim();
		act_SFO_table2_total_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table2_total_is);
		double act_SFO_table2_total = Double.parseDouble(act_SFO_table2_total_is);

		double exp_SFO_table2_total = exp_SFO_table2_subTotal + exp_GST_SFO_Table2;
		exp_SFO_table2_total = Double.parseDouble(new DecimalFormat("##.##").format(exp_SFO_table2_total));

		Assert.assertEquals(act_SFO_table2_total, exp_SFO_table2_total,
				"Incorrect SFO Table2 Total value is displayed in Review Cart page");

		String act_SFO_Total_is = SFO_TOTAL_ReviewCart_page().getText().trim();
		act_SFO_Total_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_Total_is);
		double act_SFO_Total = Double.parseDouble(act_SFO_Total_is);

		double exp_SFO_Total = exp_SFO_table1_total + exp_SFO_table2_total;
		exp_SFO_Total = Double.parseDouble(new DecimalFormat("##.##").format(exp_SFO_Total));

		Assert.assertEquals(act_SFO_Total, exp_SFO_Total, "Incorrect SFO Total value is displayed in Review Cart page");

		String act_CART_Total_is = CART_TOTAL_ReviewCart_page().getText().trim();
		act_CART_Total_is = delete_US_or_Canada_dollar_for_the_value(act_CART_Total_is);
		double act_CART_Total = Double.parseDouble(act_CART_Total_is);

		double exp_CART_Total = exp_SFO_Total;

		Assert.assertEquals(act_CART_Total, exp_CART_Total,
				"Incorrect CART Total value is displayed in Review Cart page");

	}

	@Override
	public void No_tax_validation_of_single_SFO_items_added_for_multiple_students_totals_GST_QST() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		double item1_price = item1_price_in_SFO_section_table1_in_ReviewCart_page();
		double exp_SFO_table1_subTotal = item1_price;
		exp_SFO_table1_subTotal = Double.parseDouble(new DecimalFormat("##.##").format(exp_SFO_table1_subTotal));
		String act_SFO_table1_subTotal_is = SFO_subtotal_table1_ReviewCart_page().getText().trim();
		act_SFO_table1_subTotal_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table1_subTotal_is);
		double act_SFO_table1_subTotal = Double.parseDouble(act_SFO_table1_subTotal_is);

		Assert.assertEquals(act_SFO_table1_subTotal, exp_SFO_table1_subTotal,
				"Incorrect Student1 subtotal value is displayed in Table1 Review Cart page");

		double act_GST_SFO_Table1 = GST_SFO_Table1_ReviewCart_page();
		double act_QST_SFO_Table1 = QST_SFO_Table1_ReviewCart_page();

		double exp_GST_SFO_Table1 = 0;

		Assert.assertEquals(act_GST_SFO_Table1, exp_GST_SFO_Table1,
				"GST value is displayed in SFO Table1 Review Cart page");

		double exp_QST_SFO_Table1 = 0;

		Assert.assertEquals(act_QST_SFO_Table1, exp_QST_SFO_Table1,
				"QST value is displayed in SFO Table1 Review Cart page");

		String act_SFO_table1_total_is = SFO_total_table1_ReviewCart_page().getText().trim();
		act_SFO_table1_total_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table1_total_is);
		double act_SFO_table1_total = Double.parseDouble(act_SFO_table1_total_is);

		double exp_SFO_table1_total = exp_SFO_table1_subTotal + exp_GST_SFO_Table1 + exp_QST_SFO_Table1;
		exp_SFO_table1_total = Double.parseDouble(new DecimalFormat("##.##").format(exp_SFO_table1_total));

		Assert.assertEquals(act_SFO_table1_total, exp_SFO_table1_total,
				"Incorrect SFO Table1 Total value is displayed in Review Cart page");

		//////////////////////

		double item_1_price = item1_price_in_SFO_section_table2_in_ReviewCart_page();
		double exp_SFO_table2_subTotal = item_1_price;
		exp_SFO_table2_subTotal = Double.parseDouble(new DecimalFormat("##.##").format(exp_SFO_table2_subTotal));
		String act_SFO_table2_subTotal_is = SFO_subtotal_table2_ReviewCart_page().getText().trim();
		act_SFO_table2_subTotal_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table2_subTotal_is);
		double act_SFO_table2_subTotal = Double.parseDouble(act_SFO_table2_subTotal_is);

		Assert.assertEquals(act_SFO_table2_subTotal, exp_SFO_table2_subTotal,
				"Incorrect Student2 subtotal value is displayed in Table2 Review Cart page");

		double act_GST_SFO_Table2 = GST_SFO_Table2_ReviewCart_page();
		double act_QST_SFO_Table2 = QST_SFO_Table2_ReviewCart_page();

		double exp_GST_SFO_Table2 = 0;

		Assert.assertEquals(act_GST_SFO_Table2, exp_GST_SFO_Table2,
				"GST value is displayed in SFO Table2 Review Cart page");

		double exp_QST_SFO_Table2 = 0;

		Assert.assertEquals(act_QST_SFO_Table2, exp_QST_SFO_Table2,
				"QST value is displayed in SFO Table2 Review Cart page");

		String act_SFO_table2_total_is = SFO_total_table2_ReviewCart_page().getText().trim();
		act_SFO_table2_total_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table2_total_is);
		double act_SFO_table2_total = Double.parseDouble(act_SFO_table2_total_is);

		double exp_SFO_table2_total = exp_SFO_table2_subTotal + exp_GST_SFO_Table2 + exp_QST_SFO_Table2;
		exp_SFO_table2_total = Double.parseDouble(new DecimalFormat("##.##").format(exp_SFO_table2_total));

		Assert.assertEquals(act_SFO_table2_total, exp_SFO_table2_total,
				"Incorrect SFO Table2 Total value is displayed in Review Cart page");

		String act_SFO_Total_is = SFO_TOTAL_ReviewCart_page().getText().trim();
		act_SFO_Total_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_Total_is);
		double act_SFO_Total = Double.parseDouble(act_SFO_Total_is);

		double exp_SFO_Total = exp_SFO_table1_total + exp_SFO_table2_total;
		exp_SFO_Total = Double.parseDouble(new DecimalFormat("##.##").format(exp_SFO_Total));

		Assert.assertEquals(act_SFO_Total, exp_SFO_Total, "Incorrect SFO Total value is displayed in Review Cart page");

		String act_CART_Total_is = CART_TOTAL_ReviewCart_page().getText().trim();
		act_CART_Total_is = delete_US_or_Canada_dollar_for_the_value(act_CART_Total_is);
		double act_CART_Total = Double.parseDouble(act_CART_Total_is);

		double exp_CART_Total = exp_SFO_Total;

		Assert.assertEquals(act_CART_Total, exp_CART_Total,
				"Incorrect CART Total value is displayed in Review Cart page");

	}

	@Override
	public void No_tax_validation_of_single_SFO_items_added_for_multiple_students_totals_GST_PST() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		double item1_price = item1_price_in_SFO_section_table1_in_ReviewCart_page();
		double exp_SFO_table1_subTotal = item1_price;
		exp_SFO_table1_subTotal = Double.parseDouble(new DecimalFormat("##.##").format(exp_SFO_table1_subTotal));
		String act_SFO_table1_subTotal_is = SFO_subtotal_table1_ReviewCart_page().getText().trim();
		act_SFO_table1_subTotal_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table1_subTotal_is);
		double act_SFO_table1_subTotal = Double.parseDouble(act_SFO_table1_subTotal_is);

		Assert.assertEquals(act_SFO_table1_subTotal, exp_SFO_table1_subTotal,
				"Incorrect Student1 subtotal value is displayed in Table1 Review Cart page");

		double act_GST_SFO_Table1 = GST_SFO_Table1_ReviewCart_page();
		double act_PST_SFO_Table1 = PST_SFO_Table1_ReviewCart_page();

		double exp_GST_SFO_Table1 = 0;

		Assert.assertEquals(act_GST_SFO_Table1, exp_GST_SFO_Table1,
				"GST value is displayed in SFO Table1 Review Cart page");

		double exp_PST_SFO_Table1 = 0;

		Assert.assertEquals(act_PST_SFO_Table1, exp_PST_SFO_Table1,
				"PST value is displayed in SFO Table1 Review Cart page");

		String act_SFO_table1_total_is = SFO_total_table1_ReviewCart_page().getText().trim();
		act_SFO_table1_total_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table1_total_is);
		double act_SFO_table1_total = Double.parseDouble(act_SFO_table1_total_is);

		double exp_SFO_table1_total = exp_SFO_table1_subTotal + exp_GST_SFO_Table1 + exp_PST_SFO_Table1;
		exp_SFO_table1_total = Double.parseDouble(new DecimalFormat("##.##").format(exp_SFO_table1_total));

		Assert.assertEquals(act_SFO_table1_total, exp_SFO_table1_total,
				"Incorrect SFO Table1 Total value is displayed in Review Cart page");

		//////////////////////

		double item_1_price = item1_price_in_SFO_section_table2_in_ReviewCart_page();
		double exp_SFO_table2_subTotal = item_1_price;
		exp_SFO_table2_subTotal = Double.parseDouble(new DecimalFormat("##.##").format(exp_SFO_table2_subTotal));
		String act_SFO_table2_subTotal_is = SFO_subtotal_table2_ReviewCart_page().getText().trim();
		act_SFO_table2_subTotal_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table2_subTotal_is);
		double act_SFO_table2_subTotal = Double.parseDouble(act_SFO_table2_subTotal_is);

		Assert.assertEquals(act_SFO_table2_subTotal, exp_SFO_table2_subTotal,
				"Incorrect Student2 subtotal value is displayed in Table2 Review Cart page");

		double act_GST_SFO_Table2 = GST_SFO_Table2_ReviewCart_page();
		double act_PST_SFO_Table2 = PST_SFO_Table2_ReviewCart_page();

		double exp_GST_SFO_Table2 = 0;

		Assert.assertEquals(act_GST_SFO_Table2, exp_GST_SFO_Table2,
				"GST value is displayed in SFO Table2 Review Cart page");

		double exp_PST_SFO_Table2 = 0;

		Assert.assertEquals(act_PST_SFO_Table2, exp_PST_SFO_Table2,
				"PST value is displayed in SFO Table2 Review Cart page");

		String act_SFO_table2_total_is = SFO_total_table2_ReviewCart_page().getText().trim();
		act_SFO_table2_total_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table2_total_is);
		double act_SFO_table2_total = Double.parseDouble(act_SFO_table2_total_is);

		double exp_SFO_table2_total = exp_SFO_table2_subTotal + exp_GST_SFO_Table2 + exp_PST_SFO_Table2;
		exp_SFO_table2_total = Double.parseDouble(new DecimalFormat("##.##").format(exp_SFO_table2_total));

		Assert.assertEquals(act_SFO_table2_total, exp_SFO_table2_total,
				"Incorrect SFO Table2 Total value is displayed in Review Cart page");

		String act_SFO_Total_is = SFO_TOTAL_ReviewCart_page().getText().trim();
		act_SFO_Total_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_Total_is);
		double act_SFO_Total = Double.parseDouble(act_SFO_Total_is);

		double exp_SFO_Total = exp_SFO_table1_total + exp_SFO_table2_total;
		exp_SFO_Total = Double.parseDouble(new DecimalFormat("##.##").format(exp_SFO_Total));

		Assert.assertEquals(act_SFO_Total, exp_SFO_Total, "Incorrect SFO Total value is displayed in Review Cart page");

		String act_CART_Total_is = CART_TOTAL_ReviewCart_page().getText().trim();
		act_CART_Total_is = delete_US_or_Canada_dollar_for_the_value(act_CART_Total_is);
		double act_CART_Total = Double.parseDouble(act_CART_Total_is);

		double exp_CART_Total = exp_SFO_Total;

		Assert.assertEquals(act_CART_Total, exp_CART_Total,
				"Incorrect CART Total value is displayed in Review Cart page");

	}

	@Override
	public void No_tax_validation_of_single_SFO_items_added_for_multiple_students_totals_HST() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		double item1_price = item1_price_in_SFO_section_table1_in_ReviewCart_page();
		double exp_SFO_table1_subTotal = item1_price;
		exp_SFO_table1_subTotal = Double.parseDouble(new DecimalFormat("##.##").format(exp_SFO_table1_subTotal));
		String act_SFO_table1_subTotal_is = SFO_subtotal_table1_ReviewCart_page().getText().trim();
		act_SFO_table1_subTotal_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table1_subTotal_is);
		double act_SFO_table1_subTotal = Double.parseDouble(act_SFO_table1_subTotal_is);

		Assert.assertEquals(act_SFO_table1_subTotal, exp_SFO_table1_subTotal,
				"Incorrect Student1 subtotal value is displayed in Table1 Review Cart page");

		double act_HST_SFO_Table1 = HST_SFO_Table1_ReviewCart_page();

		double exp_HST_SFO_Table1 = 0;

		Assert.assertEquals(act_HST_SFO_Table1, exp_HST_SFO_Table1,
				"HST value is displayed in SFO Table1 Review Cart page");

		String act_SFO_table1_total_is = SFO_total_table1_ReviewCart_page().getText().trim();
		act_SFO_table1_total_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table1_total_is);
		double act_SFO_table1_total = Double.parseDouble(act_SFO_table1_total_is);

		double exp_SFO_table1_total = exp_SFO_table1_subTotal + exp_HST_SFO_Table1;
		exp_SFO_table1_total = Double.parseDouble(new DecimalFormat("##.##").format(exp_SFO_table1_total));

		Assert.assertEquals(act_SFO_table1_total, exp_SFO_table1_total,
				"Incorrect SFO Table1 Total value is displayed in Review Cart page");

		//////////////////////

		double item_1_price = item1_price_in_SFO_section_table2_in_ReviewCart_page();
		double exp_SFO_table2_subTotal = item_1_price;
		exp_SFO_table2_subTotal = Double.parseDouble(new DecimalFormat("##.##").format(exp_SFO_table2_subTotal));
		String act_SFO_table2_subTotal_is = SFO_subtotal_table2_ReviewCart_page().getText().trim();
		act_SFO_table2_subTotal_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table2_subTotal_is);
		double act_SFO_table2_subTotal = Double.parseDouble(act_SFO_table2_subTotal_is);

		Assert.assertEquals(act_SFO_table2_subTotal, exp_SFO_table2_subTotal,
				"Incorrect Student2 subtotal value is displayed in Table2 Review Cart page");

		double act_HST_SFO_Table2 = HST_SFO_Table2_ReviewCart_page();

		double exp_HST_SFO_Table2 = 0;

		Assert.assertEquals(act_HST_SFO_Table2, exp_HST_SFO_Table2,
				"HST value is displayed in SFO Table2 Review Cart page");

		String act_SFO_table2_total_is = SFO_total_table2_ReviewCart_page().getText().trim();
		act_SFO_table2_total_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table2_total_is);
		double act_SFO_table2_total = Double.parseDouble(act_SFO_table2_total_is);

		double exp_SFO_table2_total = exp_SFO_table2_subTotal + exp_HST_SFO_Table2;
		exp_SFO_table2_total = Double.parseDouble(new DecimalFormat("##.##").format(exp_SFO_table2_total));

		Assert.assertEquals(act_SFO_table2_total, exp_SFO_table2_total,
				"Incorrect SFO Table2 Total value is displayed in Review Cart page");

		String act_SFO_Total_is = SFO_TOTAL_ReviewCart_page().getText().trim();
		act_SFO_Total_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_Total_is);
		double act_SFO_Total = Double.parseDouble(act_SFO_Total_is);

		double exp_SFO_Total = exp_SFO_table1_total + exp_SFO_table2_total;
		exp_SFO_Total = Double.parseDouble(new DecimalFormat("##.##").format(exp_SFO_Total));

		Assert.assertEquals(act_SFO_Total, exp_SFO_Total, "Incorrect SFO Total value is displayed in Review Cart page");

		String act_CART_Total_is = CART_TOTAL_ReviewCart_page().getText().trim();
		act_CART_Total_is = delete_US_or_Canada_dollar_for_the_value(act_CART_Total_is);
		double act_CART_Total = Double.parseDouble(act_CART_Total_is);

		double exp_CART_Total = exp_SFO_Total;

		Assert.assertEquals(act_CART_Total, exp_CART_Total,
				"Incorrect CART Total value is displayed in Review Cart page");

	}

	@Override
	public void No_tax_validation_of_single_SFO_items_added_for_multiple_students_totals_GST() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		double item1_price = item1_price_in_SFO_section_table1_in_ReviewCart_page();
		double exp_SFO_table1_subTotal = item1_price;
		exp_SFO_table1_subTotal = Double.parseDouble(new DecimalFormat("##.##").format(exp_SFO_table1_subTotal));
		String act_SFO_table1_subTotal_is = SFO_subtotal_table1_ReviewCart_page().getText().trim();
		act_SFO_table1_subTotal_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table1_subTotal_is);
		double act_SFO_table1_subTotal = Double.parseDouble(act_SFO_table1_subTotal_is);

		Assert.assertEquals(act_SFO_table1_subTotal, exp_SFO_table1_subTotal,
				"Incorrect Student1 subtotal value is displayed in Table1 Review Cart page");

		double act_GST_SFO_Table1 = GST_SFO_Table1_ReviewCart_page();

		double exp_GST_SFO_Table1 = 0;

		Assert.assertEquals(act_GST_SFO_Table1, exp_GST_SFO_Table1,
				"GST value is displayed in SFO Table1 Review Cart page");

		String act_SFO_table1_total_is = SFO_total_table1_ReviewCart_page().getText().trim();
		act_SFO_table1_total_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table1_total_is);
		double act_SFO_table1_total = Double.parseDouble(act_SFO_table1_total_is);

		double exp_SFO_table1_total = exp_SFO_table1_subTotal + exp_GST_SFO_Table1;
		exp_SFO_table1_total = Double.parseDouble(new DecimalFormat("##.##").format(exp_SFO_table1_total));

		Assert.assertEquals(act_SFO_table1_total, exp_SFO_table1_total,
				"Incorrect SFO Table1 Total value is displayed in Review Cart page");

		//////////////////////

		double item_1_price = item1_price_in_SFO_section_table2_in_ReviewCart_page();
		double exp_SFO_table2_subTotal = item_1_price;
		exp_SFO_table2_subTotal = Double.parseDouble(new DecimalFormat("##.##").format(exp_SFO_table2_subTotal));
		String act_SFO_table2_subTotal_is = SFO_subtotal_table2_ReviewCart_page().getText().trim();
		act_SFO_table2_subTotal_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table2_subTotal_is);
		double act_SFO_table2_subTotal = Double.parseDouble(act_SFO_table2_subTotal_is);

		Assert.assertEquals(act_SFO_table2_subTotal, exp_SFO_table2_subTotal,
				"Incorrect Student2 subtotal value is displayed in Table2 Review Cart page");

		double act_GST_SFO_Table2 = GST_SFO_Table2_ReviewCart_page();

		double exp_GST_SFO_Table2 = 0;

		Assert.assertEquals(act_GST_SFO_Table2, exp_GST_SFO_Table2,
				"GST value is displayed in SFO Table2 Review Cart page");

		String act_SFO_table2_total_is = SFO_total_table2_ReviewCart_page().getText().trim();
		act_SFO_table2_total_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table2_total_is);
		double act_SFO_table2_total = Double.parseDouble(act_SFO_table2_total_is);

		double exp_SFO_table2_total = exp_SFO_table2_subTotal + exp_GST_SFO_Table2;
		exp_SFO_table2_total = Double.parseDouble(new DecimalFormat("##.##").format(exp_SFO_table2_total));

		Assert.assertEquals(act_SFO_table2_total, exp_SFO_table2_total,
				"Incorrect SFO Table2 Total value is displayed in Review Cart page");

		String act_SFO_Total_is = SFO_TOTAL_ReviewCart_page().getText().trim();
		act_SFO_Total_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_Total_is);
		double act_SFO_Total = Double.parseDouble(act_SFO_Total_is);

		double exp_SFO_Total = exp_SFO_table1_total + exp_SFO_table2_total;
		exp_SFO_Total = Double.parseDouble(new DecimalFormat("##.##").format(exp_SFO_Total));

		Assert.assertEquals(act_SFO_Total, exp_SFO_Total, "Incorrect SFO Total value is displayed in Review Cart page");

		String act_CART_Total_is = CART_TOTAL_ReviewCart_page().getText().trim();
		act_CART_Total_is = delete_US_or_Canada_dollar_for_the_value(act_CART_Total_is);
		double act_CART_Total = Double.parseDouble(act_CART_Total_is);

		double exp_CART_Total = exp_SFO_Total;

		Assert.assertEquals(act_CART_Total, exp_CART_Total,
				"Incorrect CART Total value is displayed in Review Cart page");

	}

	@Override
	public void verify_YTO_section_displayed_in_ReviewCart_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		try {
			section_YTO_ReviewCart_page().isDisplayed();
			String act_text = section_YTO_ReviewCart_page().getText().trim();
			String exp_text = "YOUR TEACHER ORDER | EARNS YOU REWARDS!";

			Assert.assertEquals(act_text, exp_text, "Incorrect YTO header text is displayed in Review Cart page");
		} catch (Exception e) {
			Assert.fail("YTO section is not displayed in Review Cart page");
		}
	}

	@Override
	public void validation_of_multiple_YTO_items_in_ReviewCart_page_and_totals_GST_PST() {
		int stateTaxGST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxGST");
		double stateTaxPST = TestBaseProvider.getTestBase().getTestData().getDouble("stateTaxPST");
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		double item1_price = item1_price_in_YTO_section_in_ReviewCart_page();
		double item2_price = item2_price_in_YTO_section_in_ReviewCart_page();
		double exp_YTO_subTotal = item1_price + item2_price;
		exp_YTO_subTotal = Double.parseDouble(new DecimalFormat("##.##").format(exp_YTO_subTotal));

		String act_YTO_subTotal_is = YTO_section_subtotal_ReviewCart_page().getText().trim();
		act_YTO_subTotal_is = delete_US_or_Canada_dollar_for_the_value(act_YTO_subTotal_is);
		double act_YTO_subTotal = Double.parseDouble(act_YTO_subTotal_is);

		Assert.assertEquals(act_YTO_subTotal, exp_YTO_subTotal,
				"Incorrect YTO subtotal value is displayed in Review Cart page");

		double act_GST_YTO_section = GST_YTO_section_ReviewCart_page();
		double act_PST_YTO_section = PST_YTO_section_ReviewCart_page();

		double exp_GST_YTO_section = (double) (exp_YTO_subTotal * stateTaxGST) / 100;
		exp_GST_YTO_section = Double.parseDouble(new DecimalFormat("##.##").format(exp_GST_YTO_section));

		Assert.assertEquals(act_GST_YTO_section, exp_GST_YTO_section,
				"Incorrect GST value is displayed in YTO section in Review Cart page");

		double exp_PST_YTO_section = (double) (exp_YTO_subTotal * stateTaxPST) / 100;
		exp_PST_YTO_section = Double.parseDouble(new DecimalFormat("##.##").format(exp_PST_YTO_section));

		Assert.assertEquals(act_PST_YTO_section, exp_PST_YTO_section,
				"Incorrect PST value is displayed in YTO section in Review Cart page");

		String act_YTO_total_is = YTO_section_Total_ReviewCart_page().getText().trim();
		act_YTO_total_is = delete_US_or_Canada_dollar_for_the_value(act_YTO_total_is);
		double act_YTO_total = Double.parseDouble(act_YTO_total_is);

		double exp_YTO_total = exp_YTO_subTotal + exp_GST_YTO_section + exp_PST_YTO_section;
		exp_YTO_total = Double.parseDouble(new DecimalFormat("##.##").format(exp_YTO_total));

		Assert.assertEquals(act_YTO_total, exp_YTO_total, "Incorrect YTO Total value is displayed in Review Cart page");

		String act_CART_Total_is = CART_TOTAL_ReviewCart_page().getText().trim();
		act_CART_Total_is = delete_US_or_Canada_dollar_for_the_value(act_CART_Total_is);
		double act_CART_Total = Double.parseDouble(act_CART_Total_is);

		double exp_CART_Total = exp_YTO_total;

		Assert.assertEquals(act_CART_Total, exp_CART_Total,
				"Incorrect CART Total value is displayed in Review Cart page");

	}

	@Override
	public void validation_of_multiple_YTO_items_in_ReviewCart_page_and_totals_GST_QST() {
		int stateTaxGST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxGST");
		double stateTaxQST = TestBaseProvider.getTestBase().getTestData().getDouble("stateTaxQST");
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		double item1_price = item1_price_in_YTO_section_in_ReviewCart_page();
		double item2_price = item2_price_in_YTO_section_in_ReviewCart_page();
		double exp_YTO_subTotal = item1_price + item2_price;
		exp_YTO_subTotal = Double.parseDouble(new DecimalFormat("##.##").format(exp_YTO_subTotal));

		String act_YTO_subTotal_is = YTO_section_subtotal_ReviewCart_page().getText().trim();
		act_YTO_subTotal_is = delete_US_or_Canada_dollar_for_the_value(act_YTO_subTotal_is);
		double act_YTO_subTotal = Double.parseDouble(act_YTO_subTotal_is);

		Assert.assertEquals(act_YTO_subTotal, exp_YTO_subTotal,
				"Incorrect YTO subtotal value is displayed in Review Cart page");

		double act_GST_YTO_section = GST_YTO_section_ReviewCart_page();
		double act_QST_YTO_section = QST_YTO_section_ReviewCart_page();

		double exp_GST_YTO_section = (double) (exp_YTO_subTotal * stateTaxGST) / 100;
		exp_GST_YTO_section = Double.parseDouble(new DecimalFormat("##.##").format(exp_GST_YTO_section));

		Assert.assertEquals(act_GST_YTO_section, exp_GST_YTO_section,
				"Incorrect GST value is displayed in YTO section in Review Cart page");

		double exp_QST_YTO_section = (double) (exp_YTO_subTotal * stateTaxQST) / 100;
		exp_QST_YTO_section = Double.parseDouble(new DecimalFormat("##.##").format(exp_QST_YTO_section));

		Assert.assertEquals(act_QST_YTO_section, exp_QST_YTO_section,
				"Incorrect QST value is displayed in YTO section in Review Cart page");

		String act_YTO_total_is = YTO_section_Total_ReviewCart_page().getText().trim();
		act_YTO_total_is = delete_US_or_Canada_dollar_for_the_value(act_YTO_total_is);
		double act_YTO_total = Double.parseDouble(act_YTO_total_is);

		double exp_YTO_total = exp_YTO_subTotal + exp_GST_YTO_section + exp_QST_YTO_section;
		exp_YTO_total = Double.parseDouble(new DecimalFormat("##.##").format(exp_YTO_total));

		Assert.assertEquals(act_YTO_total, exp_YTO_total, "Incorrect YTO Total value is displayed in Review Cart page");

		String act_CART_Total_is = CART_TOTAL_ReviewCart_page().getText().trim();
		act_CART_Total_is = delete_US_or_Canada_dollar_for_the_value(act_CART_Total_is);
		double act_CART_Total = Double.parseDouble(act_CART_Total_is);

		double exp_CART_Total = exp_YTO_total;

		Assert.assertEquals(act_CART_Total, exp_CART_Total,
				"Incorrect CART Total value is displayed in Review Cart page");

	}

	@Override
	public void validation_of_multiple_YTO_items_in_ReviewCart_page_and_totals_HST() {
		double stateTaxHST = TestBaseProvider.getTestBase().getTestData().getDouble("stateTaxHST");
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		double item1_price = item1_price_in_YTO_section_in_ReviewCart_page();
		double item2_price = item2_price_in_YTO_section_in_ReviewCart_page();
		double exp_YTO_subTotal = item1_price + item2_price;
		exp_YTO_subTotal = Double.parseDouble(new DecimalFormat("##.##").format(exp_YTO_subTotal));

		String act_YTO_subTotal_is = YTO_section_subtotal_ReviewCart_page().getText().trim();
		act_YTO_subTotal_is = delete_US_or_Canada_dollar_for_the_value(act_YTO_subTotal_is);
		double act_YTO_subTotal = Double.parseDouble(act_YTO_subTotal_is);

		Assert.assertEquals(act_YTO_subTotal, exp_YTO_subTotal,
				"Incorrect YTO subtotal value is displayed in Review Cart page");

		double act_HST_YTO_section = HST_YTO_section_ReviewCart_page();

		double exp_HST_YTO_section = (double) (exp_YTO_subTotal * stateTaxHST) / 100;
		exp_HST_YTO_section = Double.parseDouble(new DecimalFormat("##.##").format(exp_HST_YTO_section));

		Assert.assertEquals(act_HST_YTO_section, exp_HST_YTO_section,
				"Incorrect HST value is displayed in YTO section in Review Cart page");

		String act_YTO_total_is = YTO_section_Total_ReviewCart_page().getText().trim();
		act_YTO_total_is = delete_US_or_Canada_dollar_for_the_value(act_YTO_total_is);
		double act_YTO_total = Double.parseDouble(act_YTO_total_is);

		double exp_YTO_total = exp_YTO_subTotal + exp_HST_YTO_section;
		exp_YTO_total = Double.parseDouble(new DecimalFormat("##.##").format(exp_YTO_total));

		Assert.assertEquals(act_YTO_total, exp_YTO_total, "Incorrect YTO Total value is displayed in Review Cart page");

		String act_CART_Total_is = CART_TOTAL_ReviewCart_page().getText().trim();
		act_CART_Total_is = delete_US_or_Canada_dollar_for_the_value(act_CART_Total_is);
		double act_CART_Total = Double.parseDouble(act_CART_Total_is);

		double exp_CART_Total = exp_YTO_total;

		Assert.assertEquals(act_CART_Total, exp_CART_Total,
				"Incorrect CART Total value is displayed in Review Cart page");

	}

	@Override
	public void validation_of_multiple_YTO_items_in_ReviewCart_page_and_totals_GST() {
		double stateTaxGST = TestBaseProvider.getTestBase().getTestData().getDouble("stateTaxGST");
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		double item1_price = item1_price_in_YTO_section_in_ReviewCart_page();
		double item2_price = item2_price_in_YTO_section_in_ReviewCart_page();
		double exp_YTO_subTotal = item1_price + item2_price;
		exp_YTO_subTotal = Double.parseDouble(new DecimalFormat("##.##").format(exp_YTO_subTotal));

		String act_YTO_subTotal_is = YTO_section_subtotal_ReviewCart_page().getText().trim();
		act_YTO_subTotal_is = delete_US_or_Canada_dollar_for_the_value(act_YTO_subTotal_is);
		double act_YTO_subTotal = Double.parseDouble(act_YTO_subTotal_is);

		Assert.assertEquals(act_YTO_subTotal, exp_YTO_subTotal,
				"Incorrect YTO subtotal value is displayed in Review Cart page");

		double act_GST_YTO_section = GST_YTO_section_ReviewCart_page();

		double exp_GST_YTO_section = (double) (exp_YTO_subTotal * stateTaxGST) / 100;
		exp_GST_YTO_section = Double.parseDouble(new DecimalFormat("##.##").format(exp_GST_YTO_section));

		Assert.assertEquals(act_GST_YTO_section, exp_GST_YTO_section,
				"Incorrect GST value is displayed in YTO section in Review Cart page");

		String act_YTO_total_is = YTO_section_Total_ReviewCart_page().getText().trim();
		act_YTO_total_is = delete_US_or_Canada_dollar_for_the_value(act_YTO_total_is);
		double act_YTO_total = Double.parseDouble(act_YTO_total_is);

		double exp_YTO_total = exp_YTO_subTotal + exp_GST_YTO_section;
		exp_YTO_total = Double.parseDouble(new DecimalFormat("##.##").format(exp_YTO_total));

		Assert.assertEquals(act_YTO_total, exp_YTO_total, "Incorrect YTO Total value is displayed in Review Cart page");

		String act_CART_Total_is = CART_TOTAL_ReviewCart_page().getText().trim();
		act_CART_Total_is = delete_US_or_Canada_dollar_for_the_value(act_CART_Total_is);
		double act_CART_Total = Double.parseDouble(act_CART_Total_is);

		double exp_CART_Total = exp_YTO_total;

		Assert.assertEquals(act_CART_Total, exp_CART_Total,
				"Incorrect CART Total value is displayed in Review Cart page");

	}

	@Override
	public void No_tax_validation_of_multiple_YTO_items_in_ReviewCart_page_and_totals_GST_QST() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		double item1_price = item1_price_in_YTO_section_in_ReviewCart_page();
		double item2_price = item2_price_in_YTO_section_in_ReviewCart_page();
		double exp_YTO_subTotal = item1_price + item2_price;
		exp_YTO_subTotal = Double.parseDouble(new DecimalFormat("##.##").format(exp_YTO_subTotal));

		String act_YTO_subTotal_is = YTO_section_subtotal_ReviewCart_page().getText().trim();
		act_YTO_subTotal_is = delete_US_or_Canada_dollar_for_the_value(act_YTO_subTotal_is);
		double act_YTO_subTotal = Double.parseDouble(act_YTO_subTotal_is);

		Assert.assertEquals(act_YTO_subTotal, exp_YTO_subTotal,
				"Incorrect YTO subtotal value is displayed in Review Cart page");

		double act_GST_YTO_section = GST_YTO_section_ReviewCart_page();
		double act_QST_YTO_section = QST_YTO_section_ReviewCart_page();

		double exp_GST_YTO_section = 0;

		Assert.assertEquals(act_GST_YTO_section, exp_GST_YTO_section,
				"GST value is displayed in YTO section in Review Cart page");

		double exp_QST_YTO_section = 0;

		Assert.assertEquals(act_QST_YTO_section, exp_QST_YTO_section,
				"QST value is displayed in YTO section in Review Cart page");

		String act_YTO_total_is = YTO_section_Total_ReviewCart_page().getText().trim();
		act_YTO_total_is = delete_US_or_Canada_dollar_for_the_value(act_YTO_total_is);
		double act_YTO_total = Double.parseDouble(act_YTO_total_is);

		double exp_YTO_total = exp_YTO_subTotal + exp_GST_YTO_section + exp_QST_YTO_section;
		exp_YTO_total = Double.parseDouble(new DecimalFormat("##.##").format(exp_YTO_total));

		Assert.assertEquals(act_YTO_total, exp_YTO_total, "Incorrect YTO Total value is displayed in Review Cart page");

		String act_CART_Total_is = CART_TOTAL_ReviewCart_page().getText().trim();
		act_CART_Total_is = delete_US_or_Canada_dollar_for_the_value(act_CART_Total_is);
		double act_CART_Total = Double.parseDouble(act_CART_Total_is);

		double exp_CART_Total = exp_YTO_total;

		Assert.assertEquals(act_CART_Total, exp_CART_Total,
				"Incorrect CART Total value is displayed in Review Cart page");

	}

	@Override
	public void No_tax_validation_of_multiple_YTO_items_in_ReviewCart_page_and_totals_GST_PST() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		double item1_price = item1_price_in_YTO_section_in_ReviewCart_page();
		double item2_price = item2_price_in_YTO_section_in_ReviewCart_page();
		double exp_YTO_subTotal = item1_price + item2_price;
		exp_YTO_subTotal = Double.parseDouble(new DecimalFormat("##.##").format(exp_YTO_subTotal));

		String act_YTO_subTotal_is = YTO_section_subtotal_ReviewCart_page().getText().trim();
		act_YTO_subTotal_is = delete_US_or_Canada_dollar_for_the_value(act_YTO_subTotal_is);
		double act_YTO_subTotal = Double.parseDouble(act_YTO_subTotal_is);

		Assert.assertEquals(act_YTO_subTotal, exp_YTO_subTotal,
				"Incorrect YTO subtotal value is displayed in Review Cart page");

		double act_GST_YTO_section = GST_YTO_section_ReviewCart_page();
		double act_PST_YTO_section = PST_YTO_section_ReviewCart_page();

		double exp_GST_YTO_section = 0;

		Assert.assertEquals(act_GST_YTO_section, exp_GST_YTO_section,
				"GST value is displayed in YTO section in Review Cart page");

		double exp_PST_YTO_section = 0;

		Assert.assertEquals(act_PST_YTO_section, exp_PST_YTO_section,
				"PST value is displayed in YTO section in Review Cart page");

		String act_YTO_total_is = YTO_section_Total_ReviewCart_page().getText().trim();
		act_YTO_total_is = delete_US_or_Canada_dollar_for_the_value(act_YTO_total_is);
		double act_YTO_total = Double.parseDouble(act_YTO_total_is);

		double exp_YTO_total = exp_YTO_subTotal + exp_GST_YTO_section + exp_PST_YTO_section;
		exp_YTO_total = Double.parseDouble(new DecimalFormat("##.##").format(exp_YTO_total));

		Assert.assertEquals(act_YTO_total, exp_YTO_total, "Incorrect YTO Total value is displayed in Review Cart page");

		String act_CART_Total_is = CART_TOTAL_ReviewCart_page().getText().trim();
		act_CART_Total_is = delete_US_or_Canada_dollar_for_the_value(act_CART_Total_is);
		double act_CART_Total = Double.parseDouble(act_CART_Total_is);

		double exp_CART_Total = exp_YTO_total;

		Assert.assertEquals(act_CART_Total, exp_CART_Total,
				"Incorrect CART Total value is displayed in Review Cart page");

	}

	@Override
	public void No_tax_validation_of_multiple_YTO_items_in_ReviewCart_page_and_totals_HST() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		double item1_price = item1_price_in_YTO_section_in_ReviewCart_page();
		double item2_price = item2_price_in_YTO_section_in_ReviewCart_page();
		double exp_YTO_subTotal = item1_price + item2_price;
		exp_YTO_subTotal = Double.parseDouble(new DecimalFormat("##.##").format(exp_YTO_subTotal));

		String act_YTO_subTotal_is = YTO_section_subtotal_ReviewCart_page().getText().trim();
		act_YTO_subTotal_is = delete_US_or_Canada_dollar_for_the_value(act_YTO_subTotal_is);
		double act_YTO_subTotal = Double.parseDouble(act_YTO_subTotal_is);
		Assert.assertEquals(act_YTO_subTotal, exp_YTO_subTotal,
				"Incorrect YTO subtotal value is displayed in Review Cart page");

		double act_HST_YTO_section = HST_YTO_section_ReviewCart_page();
		double exp_HST_YTO_section = 0;
		Assert.assertEquals(act_HST_YTO_section, exp_HST_YTO_section,
				"HST value is displayed in YTO section in Review Cart page");

		String act_YTO_total_is = YTO_section_Total_ReviewCart_page().getText().trim();
		act_YTO_total_is = delete_US_or_Canada_dollar_for_the_value(act_YTO_total_is);
		double act_YTO_total = Double.parseDouble(act_YTO_total_is);

		double exp_YTO_total = exp_YTO_subTotal + exp_HST_YTO_section;
		exp_YTO_total = Double.parseDouble(new DecimalFormat("##.##").format(exp_YTO_total));
		Assert.assertEquals(act_YTO_total, exp_YTO_total, "Incorrect YTO Total value is displayed in Review Cart page");

		String act_CART_Total_is = CART_TOTAL_ReviewCart_page().getText().trim();
		act_CART_Total_is = delete_US_or_Canada_dollar_for_the_value(act_CART_Total_is);
		double act_CART_Total = Double.parseDouble(act_CART_Total_is);

		double exp_CART_Total = exp_YTO_total;

		Assert.assertEquals(act_CART_Total, exp_CART_Total,
				"Incorrect CART Total value is displayed in Review Cart page");

	}

	@Override
	public void No_tax_validation_of_multiple_YTO_items_in_ReviewCart_page_and_totals_GST() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		double item1_price = item1_price_in_YTO_section_in_ReviewCart_page();
		double item2_price = item2_price_in_YTO_section_in_ReviewCart_page();
		double exp_YTO_subTotal = item1_price + item2_price;
		exp_YTO_subTotal = Double.parseDouble(new DecimalFormat("##.##").format(exp_YTO_subTotal));

		String act_YTO_subTotal_is = YTO_section_subtotal_ReviewCart_page().getText().trim();
		act_YTO_subTotal_is = delete_US_or_Canada_dollar_for_the_value(act_YTO_subTotal_is);
		double act_YTO_subTotal = Double.parseDouble(act_YTO_subTotal_is);
		Assert.assertEquals(act_YTO_subTotal, exp_YTO_subTotal,
				"Incorrect YTO subtotal value is displayed in Review Cart page");

		double act_GST_YTO_section = GST_YTO_section_ReviewCart_page();
		double exp_GST_YTO_section = 0;
		Assert.assertEquals(act_GST_YTO_section, exp_GST_YTO_section,
				"GST value is displayed in YTO section in Review Cart page");

		String act_YTO_total_is = YTO_section_Total_ReviewCart_page().getText().trim();
		act_YTO_total_is = delete_US_or_Canada_dollar_for_the_value(act_YTO_total_is);
		double act_YTO_total = Double.parseDouble(act_YTO_total_is);

		double exp_YTO_total = exp_YTO_subTotal + exp_GST_YTO_section;
		exp_YTO_total = Double.parseDouble(new DecimalFormat("##.##").format(exp_YTO_total));
		Assert.assertEquals(act_YTO_total, exp_YTO_total, "Incorrect YTO Total value is displayed in Review Cart page");

		String act_CART_Total_is = CART_TOTAL_ReviewCart_page().getText().trim();
		act_CART_Total_is = delete_US_or_Canada_dollar_for_the_value(act_CART_Total_is);
		double act_CART_Total = Double.parseDouble(act_CART_Total_is);

		double exp_CART_Total = exp_YTO_total;

		Assert.assertEquals(act_CART_Total, exp_CART_Total,
				"Incorrect CART Total value is displayed in Review Cart page");

	}

	@Override
	public void teacher_adds_TE_items_to_cart_by_Search() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		fld_Search_home().click();
		fld_Search_home().clear();
		fld_Search_home().sendKeys(ConstantUtils.TE_item1);
		PauseUtil.pause(1000);
		button_search_homePage().click();
		PauseUtil.waitForAjaxToComplete(2500);
		btn_ADD_TO_CART_search_results_page().click();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		btn_Continue_Shopping_in_popup_search_results_page().click();
		PauseUtil.pause(3000);
		fld_Search_home().click();
		fld_Search_home().clear();
		fld_Search_home().sendKeys(ConstantUtils.TE_item2);
		PauseUtil.pause(1000);
		button_search_homePage().click();
		PauseUtil.waitForAjaxToComplete(2500);
		btn_ADD_TO_CART_search_results_page().click();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		btn_Continue_Shopping_in_popup_search_results_page().click();
	}

	@Override
	public void teacher_clicks_on_mini_ReviewCart_btn() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);

		btn_mini_ReviewCart().click();
	}

	@Override
	public void verify_TE_section_displayed_in_ReviewCart_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		try {
			section_YTO_ReviewCart_page().isDisplayed();
			String act_text = section_TE_ReviewCart_page().getText().trim();
			String exp_text = "TEACHER EXCLUSIVES | DOES NOT EARN YOU REWARDS!";

			Assert.assertEquals(act_text, exp_text, "Incorrect TE header text is displayed in Review Cart page");
		} catch (Exception e) {
			Assert.fail("TE section is not displayed in Review Cart page");
		}
	}

	@Override
	public void validation_of_multiple_TE_items_in_ReviewCart_page_and_totals_GST_PST() {
		int stateTaxGST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxGST");
		double stateTaxPST = TestBaseProvider.getTestBase().getTestData().getDouble("stateTaxPST");
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		double item1_price = item1_price_in_TE_section_in_ReviewCart_page();
		double item2_price = item2_price_in_TE_section_in_ReviewCart_page();
		double exp_TE_subTotal = item1_price + item2_price;
		exp_TE_subTotal = Double.parseDouble(new DecimalFormat("##.##").format(exp_TE_subTotal));

		String act_TE_subTotal_is = TE_section_subtotal_ReviewCart_page().getText().trim();
		act_TE_subTotal_is = delete_US_or_Canada_dollar_for_the_value(act_TE_subTotal_is);
		double act_TE_subTotal = Double.parseDouble(act_TE_subTotal_is);

		Assert.assertEquals(act_TE_subTotal, exp_TE_subTotal,
				"Incorrect TE subtotal value is displayed in Review Cart page");

		double act_GST_TE_section = GST_TE_section_ReviewCart_page();
		double act_PST_TE_section = PST_TE_section_ReviewCart_page();

		double exp_GST_TE_section = (double) (exp_TE_subTotal * stateTaxGST) / 100;
		exp_GST_TE_section = Double.parseDouble(new DecimalFormat("##.##").format(exp_GST_TE_section));

		Assert.assertEquals(act_GST_TE_section, exp_GST_TE_section,
				"Incorrect GST value is displayed in TE section in Review Cart page");

		double exp_PST_TE_section = (double) (exp_TE_subTotal * stateTaxPST) / 100;
		exp_PST_TE_section = Double.parseDouble(new DecimalFormat("##.##").format(exp_PST_TE_section));

		Assert.assertEquals(act_PST_TE_section, exp_PST_TE_section,
				"Incorrect PST value is displayed in TE section in Review Cart page");

		String act_TE_total_is = TE_section_Total_ReviewCart_page().getText().trim();
		act_TE_total_is = delete_US_or_Canada_dollar_for_the_value(act_TE_total_is);
		double act_TE_total = Double.parseDouble(act_TE_total_is);

		double exp_TE_total = exp_TE_subTotal + exp_GST_TE_section + exp_PST_TE_section;
		exp_TE_total = Double.parseDouble(new DecimalFormat("##.##").format(exp_TE_total));

		Assert.assertEquals(act_TE_total, exp_TE_total, "Incorrect TE Total value is displayed in Review Cart page");

		String act_CART_Total_is = CART_TOTAL_ReviewCart_page().getText().trim();
		act_CART_Total_is = delete_US_or_Canada_dollar_for_the_value(act_CART_Total_is);
		double act_CART_Total = Double.parseDouble(act_CART_Total_is);

		double exp_CART_Total = exp_TE_total;

		Assert.assertEquals(act_CART_Total, exp_CART_Total,
				"Incorrect CART Total value is displayed in Review Cart page");

	}

	@Override
	public void validation_of_multiple_TE_items_in_ReviewCart_page_and_totals_GST_QST() {
		int stateTaxGST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxGST");
		double stateTaxQST = TestBaseProvider.getTestBase().getTestData().getDouble("stateTaxQST");
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		double item1_price = item1_price_in_TE_section_in_ReviewCart_page();
		double item2_price = item2_price_in_TE_section_in_ReviewCart_page();
		double exp_TE_subTotal = item1_price + item2_price;
		exp_TE_subTotal = Double.parseDouble(new DecimalFormat("##.##").format(exp_TE_subTotal));

		String act_TE_subTotal_is = TE_section_subtotal_ReviewCart_page().getText().trim();
		act_TE_subTotal_is = delete_US_or_Canada_dollar_for_the_value(act_TE_subTotal_is);
		double act_TE_subTotal = Double.parseDouble(act_TE_subTotal_is);

		Assert.assertEquals(act_TE_subTotal, exp_TE_subTotal,
				"Incorrect TE subtotal value is displayed in Review Cart page");

		double act_GST_TE_section = GST_TE_section_ReviewCart_page();
		double act_QST_TE_section = QST_TE_section_ReviewCart_page();

		double exp_GST_TE_section = (double) (exp_TE_subTotal * stateTaxGST) / 100;
		exp_GST_TE_section = Double.parseDouble(new DecimalFormat("##.##").format(exp_GST_TE_section));

		Assert.assertEquals(act_GST_TE_section, exp_GST_TE_section,
				"Incorrect GST value is displayed in TE section in Review Cart page");

		double exp_QST_TE_section = (double) (exp_TE_subTotal * stateTaxQST) / 100;
		exp_QST_TE_section = Double.parseDouble(new DecimalFormat("##.##").format(exp_QST_TE_section));

		Assert.assertEquals(act_QST_TE_section, exp_QST_TE_section,
				"Incorrect QST value is displayed in TE section in Review Cart page");

		String act_TE_total_is = TE_section_Total_ReviewCart_page().getText().trim();
		act_TE_total_is = delete_US_or_Canada_dollar_for_the_value(act_TE_total_is);
		double act_TE_total = Double.parseDouble(act_TE_total_is);

		double exp_TE_total = exp_TE_subTotal + exp_GST_TE_section + exp_QST_TE_section;
		exp_TE_total = Double.parseDouble(new DecimalFormat("##.##").format(exp_TE_total));

		Assert.assertEquals(act_TE_total, exp_TE_total, "Incorrect TE Total value is displayed in Review Cart page");

		String act_CART_Total_is = CART_TOTAL_ReviewCart_page().getText().trim();
		act_CART_Total_is = delete_US_or_Canada_dollar_for_the_value(act_CART_Total_is);
		double act_CART_Total = Double.parseDouble(act_CART_Total_is);

		double exp_CART_Total = exp_TE_total;

		Assert.assertEquals(act_CART_Total, exp_CART_Total,
				"Incorrect CART Total value is displayed in Review Cart page");

	}

	@Override
	public void validation_of_multiple_TE_items_in_ReviewCart_page_and_totals_HST() {
		double stateTaxHST = TestBaseProvider.getTestBase().getTestData().getDouble("stateTaxHST");
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		double item1_price = item1_price_in_TE_section_in_ReviewCart_page();
		double item2_price = item2_price_in_TE_section_in_ReviewCart_page();
		double exp_TE_subTotal = item1_price + item2_price;
		exp_TE_subTotal = Double.parseDouble(new DecimalFormat("##.##").format(exp_TE_subTotal));

		String act_TE_subTotal_is = TE_section_subtotal_ReviewCart_page().getText().trim();
		act_TE_subTotal_is = delete_US_or_Canada_dollar_for_the_value(act_TE_subTotal_is);
		double act_TE_subTotal = Double.parseDouble(act_TE_subTotal_is);

		Assert.assertEquals(act_TE_subTotal, exp_TE_subTotal,
				"Incorrect TE subtotal value is displayed in Review Cart page");

		double act_HST_TE_section = HST_TE_section_ReviewCart_page();

		double exp_HST_TE_section = (double) (exp_TE_subTotal * stateTaxHST) / 100;
		exp_HST_TE_section = Double.parseDouble(new DecimalFormat("##.##").format(exp_HST_TE_section));

		Assert.assertEquals(act_HST_TE_section, exp_HST_TE_section,
				"Incorrect HST value is displayed in TE section in Review Cart page");

		String act_TE_total_is = TE_section_Total_ReviewCart_page().getText().trim();
		act_TE_total_is = delete_US_or_Canada_dollar_for_the_value(act_TE_total_is);
		double act_TE_total = Double.parseDouble(act_TE_total_is);

		double exp_TE_total = exp_TE_subTotal + exp_HST_TE_section;
		exp_TE_total = Double.parseDouble(new DecimalFormat("##.##").format(exp_TE_total));

		Assert.assertEquals(act_TE_total, exp_TE_total, "Incorrect TE Total value is displayed in Review Cart page");

		String act_CART_Total_is = CART_TOTAL_ReviewCart_page().getText().trim();
		act_CART_Total_is = delete_US_or_Canada_dollar_for_the_value(act_CART_Total_is);
		double act_CART_Total = Double.parseDouble(act_CART_Total_is);

		double exp_CART_Total = exp_TE_total;

		Assert.assertEquals(act_CART_Total, exp_CART_Total,
				"Incorrect CART Total value is displayed in Review Cart page");

	}

	@Override
	public void validation_of_multiple_TE_items_in_ReviewCart_page_and_totals_GST() {
		double stateTaxGST = TestBaseProvider.getTestBase().getTestData().getDouble("stateTaxGST");
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		double item1_price = item1_price_in_TE_section_in_ReviewCart_page();
		double item2_price = item2_price_in_TE_section_in_ReviewCart_page();
		double exp_TE_subTotal = item1_price + item2_price;
		exp_TE_subTotal = Double.parseDouble(new DecimalFormat("##.##").format(exp_TE_subTotal));

		String act_TE_subTotal_is = TE_section_subtotal_ReviewCart_page().getText().trim();
		act_TE_subTotal_is = delete_US_or_Canada_dollar_for_the_value(act_TE_subTotal_is);
		double act_TE_subTotal = Double.parseDouble(act_TE_subTotal_is);

		Assert.assertEquals(act_TE_subTotal, exp_TE_subTotal,
				"Incorrect TE subtotal value is displayed in Review Cart page");

		double act_GST_TE_section = GST_TE_section_ReviewCart_page();

		double exp_GST_TE_section = (double) (exp_TE_subTotal * stateTaxGST) / 100;
		exp_GST_TE_section = Double.parseDouble(new DecimalFormat("##.##").format(exp_GST_TE_section));

		Assert.assertEquals(act_GST_TE_section, exp_GST_TE_section,
				"Incorrect GST value is displayed in TE section in Review Cart page");

		String act_TE_total_is = TE_section_Total_ReviewCart_page().getText().trim();
		act_TE_total_is = delete_US_or_Canada_dollar_for_the_value(act_TE_total_is);
		double act_TE_total = Double.parseDouble(act_TE_total_is);

		double exp_TE_total = exp_TE_subTotal + exp_GST_TE_section;
		exp_TE_total = Double.parseDouble(new DecimalFormat("##.##").format(exp_TE_total));

		Assert.assertEquals(act_TE_total, exp_TE_total, "Incorrect TE Total value is displayed in Review Cart page");

		String act_CART_Total_is = CART_TOTAL_ReviewCart_page().getText().trim();
		act_CART_Total_is = delete_US_or_Canada_dollar_for_the_value(act_CART_Total_is);
		double act_CART_Total = Double.parseDouble(act_CART_Total_is);

		double exp_CART_Total = exp_TE_total;

		Assert.assertEquals(act_CART_Total, exp_CART_Total,
				"Incorrect CART Total value is displayed in Review Cart page");

	}

	@Override
	public void No_tax_validation_of_multiple_TE_items_in_ReviewCart_page_and_totals_GST_QST() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		double item1_price = item1_price_in_TE_section_in_ReviewCart_page();
		double item2_price = item2_price_in_TE_section_in_ReviewCart_page();
		double exp_TE_subTotal = item1_price + item2_price;
		exp_TE_subTotal = Double.parseDouble(new DecimalFormat("##.##").format(exp_TE_subTotal));

		String act_TE_subTotal_is = TE_section_subtotal_ReviewCart_page().getText().trim();
		act_TE_subTotal_is = delete_US_or_Canada_dollar_for_the_value(act_TE_subTotal_is);
		double act_TE_subTotal = Double.parseDouble(act_TE_subTotal_is);

		Assert.assertEquals(act_TE_subTotal, exp_TE_subTotal,
				"Incorrect TE subtotal value is displayed in Review Cart page");

		double act_GST_TE_section = GST_TE_section_ReviewCart_page();
		double act_QST_TE_section = QST_TE_section_ReviewCart_page();

		double exp_GST_TE_section = 0;

		Assert.assertEquals(act_GST_TE_section, exp_GST_TE_section,
				"GST value is displayed in TE section in Review Cart page");

		double exp_QST_TE_section = 0;

		Assert.assertEquals(act_QST_TE_section, exp_QST_TE_section,
				"QST value is displayed in TE section in Review Cart page");

		String act_TE_total_is = TE_section_Total_ReviewCart_page().getText().trim();
		act_TE_total_is = delete_US_or_Canada_dollar_for_the_value(act_TE_total_is);
		double act_TE_total = Double.parseDouble(act_TE_total_is);

		double exp_TE_total = exp_TE_subTotal + exp_GST_TE_section + exp_QST_TE_section;
		exp_TE_total = Double.parseDouble(new DecimalFormat("##.##").format(exp_TE_total));

		Assert.assertEquals(act_TE_total, exp_TE_total, "Incorrect TE Total value is displayed in Review Cart page");

		String act_CART_Total_is = CART_TOTAL_ReviewCart_page().getText().trim();
		act_CART_Total_is = delete_US_or_Canada_dollar_for_the_value(act_CART_Total_is);
		double act_CART_Total = Double.parseDouble(act_CART_Total_is);

		double exp_CART_Total = exp_TE_total;

		Assert.assertEquals(act_CART_Total, exp_CART_Total,
				"Incorrect CART Total value is displayed in Review Cart page");

	}

	@Override
	public void No_tax_validation_of_multiple_TE_items_in_ReviewCart_page_and_totals_GST_PST() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		double item1_price = item1_price_in_TE_section_in_ReviewCart_page();
		double item2_price = item2_price_in_TE_section_in_ReviewCart_page();
		double exp_TE_subTotal = item1_price + item2_price;
		exp_TE_subTotal = Double.parseDouble(new DecimalFormat("##.##").format(exp_TE_subTotal));

		String act_TE_subTotal_is = TE_section_subtotal_ReviewCart_page().getText().trim();
		act_TE_subTotal_is = delete_US_or_Canada_dollar_for_the_value(act_TE_subTotal_is);
		double act_TE_subTotal = Double.parseDouble(act_TE_subTotal_is);

		Assert.assertEquals(act_TE_subTotal, exp_TE_subTotal,
				"Incorrect TE subtotal value is displayed in Review Cart page");

		double act_GST_TE_section = GST_TE_section_ReviewCart_page();
		double act_PST_TE_section = PST_TE_section_ReviewCart_page();

		double exp_GST_TE_section = 0;

		Assert.assertEquals(act_GST_TE_section, exp_GST_TE_section,
				"GST value is displayed in TE section in Review Cart page");

		double exp_PST_TE_section = 0;

		Assert.assertEquals(act_PST_TE_section, exp_PST_TE_section,
				"PST value is displayed in TE section in Review Cart page");

		String act_TE_total_is = TE_section_Total_ReviewCart_page().getText().trim();
		act_TE_total_is = delete_US_or_Canada_dollar_for_the_value(act_TE_total_is);
		double act_TE_total = Double.parseDouble(act_TE_total_is);

		double exp_TE_total = exp_TE_subTotal + exp_GST_TE_section + exp_PST_TE_section;
		exp_TE_total = Double.parseDouble(new DecimalFormat("##.##").format(exp_TE_total));

		Assert.assertEquals(act_TE_total, exp_TE_total, "Incorrect TE Total value is displayed in Review Cart page");

		String act_CART_Total_is = CART_TOTAL_ReviewCart_page().getText().trim();
		act_CART_Total_is = delete_US_or_Canada_dollar_for_the_value(act_CART_Total_is);
		double act_CART_Total = Double.parseDouble(act_CART_Total_is);

		double exp_CART_Total = exp_TE_total;

		Assert.assertEquals(act_CART_Total, exp_CART_Total,
				"Incorrect CART Total value is displayed in Review Cart page");

	}

	@Override
	public void No_tax_validation_of_multiple_TE_items_in_ReviewCart_page_and_totals_HST() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		double item1_price = item1_price_in_TE_section_in_ReviewCart_page();
		double item2_price = item2_price_in_TE_section_in_ReviewCart_page();
		double exp_TE_subTotal = item1_price + item2_price;
		exp_TE_subTotal = Double.parseDouble(new DecimalFormat("##.##").format(exp_TE_subTotal));

		String act_TE_subTotal_is = TE_section_subtotal_ReviewCart_page().getText().trim();
		act_TE_subTotal_is = delete_US_or_Canada_dollar_for_the_value(act_TE_subTotal_is);
		double act_TE_subTotal = Double.parseDouble(act_TE_subTotal_is);
		Assert.assertEquals(act_TE_subTotal, exp_TE_subTotal,
				"Incorrect TE subtotal value is displayed in Review Cart page");

		double act_HST_TE_section = HST_TE_section_ReviewCart_page();
		double exp_HST_TE_section = 0;
		Assert.assertEquals(act_HST_TE_section, exp_HST_TE_section,
				"HST value is displayed in TE section in Review Cart page");

		String act_TE_total_is = TE_section_Total_ReviewCart_page().getText().trim();
		act_TE_total_is = delete_US_or_Canada_dollar_for_the_value(act_TE_total_is);
		double act_TE_total = Double.parseDouble(act_TE_total_is);

		double exp_TE_total = exp_TE_subTotal + exp_HST_TE_section;
		exp_TE_total = Double.parseDouble(new DecimalFormat("##.##").format(exp_TE_total));
		Assert.assertEquals(act_TE_total, exp_TE_total, "Incorrect TE Total value is displayed in Review Cart page");

		String act_CART_Total_is = CART_TOTAL_ReviewCart_page().getText().trim();
		act_CART_Total_is = delete_US_or_Canada_dollar_for_the_value(act_CART_Total_is);
		double act_CART_Total = Double.parseDouble(act_CART_Total_is);

		double exp_CART_Total = exp_TE_total;

		Assert.assertEquals(act_CART_Total, exp_CART_Total,
				"Incorrect CART Total value is displayed in Review Cart page");

	}

	@Override
	public void No_tax_validation_of_multiple_TE_items_in_ReviewCart_page_and_totals_GST() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		double item1_price = item1_price_in_TE_section_in_ReviewCart_page();
		double item2_price = item2_price_in_TE_section_in_ReviewCart_page();
		double exp_TE_subTotal = item1_price + item2_price;
		exp_TE_subTotal = Double.parseDouble(new DecimalFormat("##.##").format(exp_TE_subTotal));

		String act_TE_subTotal_is = TE_section_subtotal_ReviewCart_page().getText().trim();
		act_TE_subTotal_is = delete_US_or_Canada_dollar_for_the_value(act_TE_subTotal_is);
		double act_TE_subTotal = Double.parseDouble(act_TE_subTotal_is);
		Assert.assertEquals(act_TE_subTotal, exp_TE_subTotal,
				"Incorrect TE subtotal value is displayed in Review Cart page");

		double act_GST_TE_section = GST_TE_section_ReviewCart_page();
		double exp_GST_TE_section = 0;
		Assert.assertEquals(act_GST_TE_section, exp_GST_TE_section,
				"GST value is displayed in TE section in Review Cart page");

		String act_TE_total_is = TE_section_Total_ReviewCart_page().getText().trim();
		act_TE_total_is = delete_US_or_Canada_dollar_for_the_value(act_TE_total_is);
		double act_TE_total = Double.parseDouble(act_TE_total_is);

		double exp_TE_total = exp_TE_subTotal + exp_GST_TE_section;
		exp_TE_total = Double.parseDouble(new DecimalFormat("##.##").format(exp_TE_total));
		Assert.assertEquals(act_TE_total, exp_TE_total, "Incorrect TE Total value is displayed in Review Cart page");

		String act_CART_Total_is = CART_TOTAL_ReviewCart_page().getText().trim();
		act_CART_Total_is = delete_US_or_Canada_dollar_for_the_value(act_CART_Total_is);
		double act_CART_Total = Double.parseDouble(act_CART_Total_is);

		double exp_CART_Total = exp_TE_total;

		Assert.assertEquals(act_CART_Total, exp_CART_Total,
				"Incorrect CART Total value is displayed in Review Cart page");

	}

	@Override
	public void teacher_verify_YOU_ARE_EARNING_REWARDS_ON_fld_displayed_ReviewCart_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		try {
			fld_YOU_ARE_EARNING_REWARDS_ON_ReviewCart_page().isDisplayed();
			String act_text = fld_YOU_ARE_EARNING_REWARDS_ON_ReviewCart_page().getText().trim();
			String exp_text = "YOU ARE EARNING REWARDS ON";

			Assert.assertEquals(act_text, exp_text, "Incorrect text is displayed for YOU ARE EARNING REWARDS ON");
		} catch (Exception e) {
			Assert.fail("YOU ARE EARNING REWARDS ON field is not displayed in Review cart page");
		}
	}

	@Override
	public void validation_of_SFO_YTO_Totals_ReviewCart_page_GST_PST() {
		int stateTaxGST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxGST");
		double stateTaxPST = TestBaseProvider.getTestBase().getTestData().getDouble("stateTaxPST");
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		double item1_price = item1_price_in_SFO_section_table1_in_ReviewCart_page();
		double exp_SFO_table1_subTotal = item1_price;
		String act_SFO_table1_subTotal_is = SFO_subtotal_table1_ReviewCart_page().getText().trim();
		act_SFO_table1_subTotal_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table1_subTotal_is);
		double act_SFO_table1_subTotal = Double.parseDouble(act_SFO_table1_subTotal_is);

		Assert.assertEquals(act_SFO_table1_subTotal, exp_SFO_table1_subTotal,
				"Incorrect Student subtotal value is displayed in Table1 Review Cart page");

		double act_GST_SFO_Table1 = GST_SFO_Table1_ReviewCart_page();
		double act_PST_SFO_Table1 = PST_SFO_Table1_ReviewCart_page();

		double exp_GST_SFO_Table1 = (double) (exp_SFO_table1_subTotal * stateTaxGST) / 100;
		exp_GST_SFO_Table1 = Double.parseDouble(new DecimalFormat("##.##").format(exp_GST_SFO_Table1));

		Assert.assertEquals(act_GST_SFO_Table1, exp_GST_SFO_Table1,
				"Incorrect GST value is displayed in SFO Table1 Review Cart page");

		double exp_PST_SFO_Table1 = (double) (exp_SFO_table1_subTotal * stateTaxPST) / 100;
		exp_PST_SFO_Table1 = Double.parseDouble(new DecimalFormat("##.##").format(exp_PST_SFO_Table1));

		Assert.assertEquals(act_PST_SFO_Table1, exp_PST_SFO_Table1,
				"Incorrect PST value is displayed in SFO Table1 Review Cart page");

		String act_SFO_table1_total_is = SFO_total_table1_ReviewCart_page().getText().trim();
		act_SFO_table1_total_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table1_total_is);
		double act_SFO_table1_total = Double.parseDouble(act_SFO_table1_total_is);

		double exp_SFO_table1_total = exp_SFO_table1_subTotal + exp_GST_SFO_Table1 + exp_PST_SFO_Table1;
		exp_SFO_table1_total = Double.parseDouble(new DecimalFormat("##.##").format(exp_SFO_table1_total));

		Assert.assertEquals(act_SFO_table1_total, exp_SFO_table1_total,
				"Incorrect SFO Table1 Total value is displayed in Review Cart page");

		String act_SFO_table1_Total_is = SFO_TOTAL_ReviewCart_page().getText().trim();
		act_SFO_table1_Total_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table1_Total_is);
		double act_SFO_table1_Total = Double.parseDouble(act_SFO_table1_Total_is);

		Assert.assertEquals(act_SFO_table1_Total, exp_SFO_table1_total,
				"Incorrect SFO Total value is displayed in Review Cart page");

		double item_1_price = item1_price_in_YTO_section_in_ReviewCart_page();
		double item2_price = item2_price_in_YTO_section_in_ReviewCart_page();
		double exp_YTO_subTotal = item_1_price + item2_price;
		exp_YTO_subTotal = Double.parseDouble(new DecimalFormat("##.##").format(exp_YTO_subTotal));

		String act_YTO_subTotal_is = YTO_section_subtotal_ReviewCart_page().getText().trim();
		act_YTO_subTotal_is = delete_US_or_Canada_dollar_for_the_value(act_YTO_subTotal_is);
		double act_YTO_subTotal = Double.parseDouble(act_YTO_subTotal_is);

		Assert.assertEquals(act_YTO_subTotal, exp_YTO_subTotal,
				"Incorrect YTO subtotal value is displayed in Review Cart page");

		double act_GST_YTO_section = GST_YTO_section_ReviewCart_page();
		double act_PST_YTO_section = PST_YTO_section_ReviewCart_page();

		double exp_GST_YTO_section = (double) (exp_YTO_subTotal * stateTaxGST) / 100;
		exp_GST_YTO_section = Double.parseDouble(new DecimalFormat("##.##").format(exp_GST_YTO_section));

		Assert.assertEquals(act_GST_YTO_section, exp_GST_YTO_section,
				"Incorrect GST value is displayed in YTO section in Review Cart page");

		double exp_PST_YTO_section = (double) (exp_YTO_subTotal * stateTaxPST) / 100;
		exp_PST_YTO_section = Double.parseDouble(new DecimalFormat("##.##").format(exp_PST_YTO_section));

		Assert.assertEquals(act_PST_YTO_section, exp_PST_YTO_section,
				"Incorrect PST value is displayed in YTO section in Review Cart page");

		String act_YTO_total_is = YTO_section_Total_ReviewCart_page().getText().trim();
		act_YTO_total_is = delete_US_or_Canada_dollar_for_the_value(act_YTO_total_is);
		double act_YTO_total = Double.parseDouble(act_YTO_total_is);

		double exp_YTO_total = exp_YTO_subTotal + exp_GST_YTO_section + exp_PST_YTO_section;
		exp_YTO_total = Double.parseDouble(new DecimalFormat("##.##").format(exp_YTO_total));

		Assert.assertEquals(act_YTO_total, exp_YTO_total, "Incorrect YTO Total value is displayed in Review Cart page");

		String act_You_are_earning_val = fld_val_YOU_ARE_EARNING_REWARDS_ON_ReviewCart_page().getText().trim();
		act_You_are_earning_val = delete_US_or_Canada_dollar_for_the_value(act_You_are_earning_val);
		double act_You_are_earning_Rewards_on = Double.parseDouble(act_You_are_earning_val);

		double exp_You_are_earning_Rewards_on = exp_SFO_table1_subTotal + exp_YTO_subTotal;
		exp_You_are_earning_Rewards_on = Double
				.parseDouble(new DecimalFormat("##.##").format(exp_You_are_earning_Rewards_on));

		Assert.assertEquals(act_You_are_earning_Rewards_on, exp_You_are_earning_Rewards_on,
				"Incorrect YOU ARE EARNING REWARDS ON value is displayed in Review Cart page");

		String act_CART_Total_is = CART_TOTAL_ReviewCart_page().getText().trim();
		act_CART_Total_is = delete_US_or_Canada_dollar_for_the_value(act_CART_Total_is);
		double act_CART_Total = Double.parseDouble(act_CART_Total_is);

		double exp_CART_Total = exp_SFO_table1_total + exp_YTO_total;
		exp_CART_Total = Double.parseDouble(new DecimalFormat("##.##").format(exp_CART_Total));

		Assert.assertEquals(act_CART_Total, exp_CART_Total,
				"Incorrect CART Total value is displayed in Review Cart page");

	}

	@Override
	public void validation_of_SFO_YTO_Totals_ReviewCart_page_GST_QST() {
		int stateTaxGST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxGST");
		double stateTaxQST = TestBaseProvider.getTestBase().getTestData().getDouble("stateTaxQST");
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		double item1_price = item1_price_in_SFO_section_table1_in_ReviewCart_page();
		double exp_SFO_table1_subTotal = item1_price;
		String act_SFO_table1_subTotal_is = SFO_subtotal_table1_ReviewCart_page().getText().trim();
		act_SFO_table1_subTotal_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table1_subTotal_is);
		double act_SFO_table1_subTotal = Double.parseDouble(act_SFO_table1_subTotal_is);

		Assert.assertEquals(act_SFO_table1_subTotal, exp_SFO_table1_subTotal,
				"Incorrect Student subtotal value is displayed in Table1 Review Cart page");

		double act_GST_SFO_Table1 = GST_SFO_Table1_ReviewCart_page();
		double act_QST_SFO_Table1 = QST_SFO_Table1_ReviewCart_page();

		double exp_GST_SFO_Table1 = (double) (exp_SFO_table1_subTotal * stateTaxGST) / 100;
		exp_GST_SFO_Table1 = Double.parseDouble(new DecimalFormat("##.##").format(exp_GST_SFO_Table1));

		Assert.assertEquals(act_GST_SFO_Table1, exp_GST_SFO_Table1,
				"Incorrect GST value is displayed in SFO Table1 Review Cart page");

		double exp_QST_SFO_Table1 = (double) (exp_SFO_table1_subTotal * stateTaxQST) / 100;
		exp_QST_SFO_Table1 = Double.parseDouble(new DecimalFormat("##.##").format(exp_QST_SFO_Table1));

		Assert.assertEquals(act_QST_SFO_Table1, exp_QST_SFO_Table1,
				"Incorrect QST value is displayed in SFO Table1 Review Cart page");

		String act_SFO_table1_total_is = SFO_total_table1_ReviewCart_page().getText().trim();
		act_SFO_table1_total_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table1_total_is);
		double act_SFO_table1_total = Double.parseDouble(act_SFO_table1_total_is);

		double exp_SFO_table1_total = exp_SFO_table1_subTotal + exp_GST_SFO_Table1 + exp_QST_SFO_Table1;
		exp_SFO_table1_total = Double.parseDouble(new DecimalFormat("##.##").format(exp_SFO_table1_total));

		Assert.assertEquals(act_SFO_table1_total, exp_SFO_table1_total,
				"Incorrect SFO Table1 Total value is displayed in Review Cart page");

		String act_SFO_table1_Total_is = SFO_TOTAL_ReviewCart_page().getText().trim();
		act_SFO_table1_Total_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table1_Total_is);
		double act_SFO_table1_Total = Double.parseDouble(act_SFO_table1_Total_is);

		Assert.assertEquals(act_SFO_table1_Total, exp_SFO_table1_total,
				"Incorrect SFO Total value is displayed in Review Cart page");

		double item_1_price = item1_price_in_YTO_section_in_ReviewCart_page();
		double item2_price = item2_price_in_YTO_section_in_ReviewCart_page();
		double exp_YTO_subTotal = item_1_price + item2_price;
		exp_YTO_subTotal = Double.parseDouble(new DecimalFormat("##.##").format(exp_YTO_subTotal));

		String act_YTO_subTotal_is = YTO_section_subtotal_ReviewCart_page().getText().trim();
		act_YTO_subTotal_is = delete_US_or_Canada_dollar_for_the_value(act_YTO_subTotal_is);
		double act_YTO_subTotal = Double.parseDouble(act_YTO_subTotal_is);

		Assert.assertEquals(act_YTO_subTotal, exp_YTO_subTotal,
				"Incorrect YTO subtotal value is displayed in Review Cart page");

		double act_GST_YTO_section = GST_YTO_section_ReviewCart_page();
		double act_QST_YTO_section = QST_YTO_section_ReviewCart_page();

		double exp_GST_YTO_section = (double) (exp_YTO_subTotal * stateTaxGST) / 100;
		exp_GST_YTO_section = Double.parseDouble(new DecimalFormat("##.##").format(exp_GST_YTO_section));

		Assert.assertEquals(act_GST_YTO_section, exp_GST_YTO_section,
				"Incorrect GST value is displayed in YTO section in Review Cart page");

		double exp_QST_YTO_section = (double) (exp_YTO_subTotal * stateTaxQST) / 100;
		exp_QST_YTO_section = Double.parseDouble(new DecimalFormat("##.##").format(exp_QST_YTO_section));

		Assert.assertEquals(act_QST_YTO_section, exp_QST_YTO_section,
				"Incorrect QST value is displayed in YTO section in Review Cart page");

		String act_YTO_total_is = YTO_section_Total_ReviewCart_page().getText().trim();
		act_YTO_total_is = delete_US_or_Canada_dollar_for_the_value(act_YTO_total_is);
		double act_YTO_total = Double.parseDouble(act_YTO_total_is);

		double exp_YTO_total = exp_YTO_subTotal + exp_GST_YTO_section + exp_QST_YTO_section;
		exp_YTO_total = Double.parseDouble(new DecimalFormat("##.##").format(exp_YTO_total));

		Assert.assertEquals(act_YTO_total, exp_YTO_total, "Incorrect YTO Total value is displayed in Review Cart page");

		String act_You_are_earning_val = fld_val_YOU_ARE_EARNING_REWARDS_ON_ReviewCart_page().getText().trim();
		act_You_are_earning_val = delete_US_or_Canada_dollar_for_the_value(act_You_are_earning_val);
		double act_You_are_earning_Rewards_on = Double.parseDouble(act_You_are_earning_val);

		double exp_You_are_earning_Rewards_on = exp_SFO_table1_subTotal + exp_YTO_subTotal;
		exp_You_are_earning_Rewards_on = Double
				.parseDouble(new DecimalFormat("##.##").format(exp_You_are_earning_Rewards_on));

		Assert.assertEquals(act_You_are_earning_Rewards_on, exp_You_are_earning_Rewards_on,
				"Incorrect YOU ARE EARNING REWARDS ON value is displayed in Review Cart page");

		String act_CART_Total_is = CART_TOTAL_ReviewCart_page().getText().trim();
		act_CART_Total_is = delete_US_or_Canada_dollar_for_the_value(act_CART_Total_is);
		double act_CART_Total = Double.parseDouble(act_CART_Total_is);

		double exp_CART_Total = exp_SFO_table1_total + exp_YTO_total;
		exp_CART_Total = Double.parseDouble(new DecimalFormat("##.##").format(exp_CART_Total));

		Assert.assertEquals(act_CART_Total, exp_CART_Total,
				"Incorrect CART Total value is displayed in Review Cart page");

	}

	@Override
	public void validation_of_SFO_YTO_Totals_ReviewCart_page_HST() {
		double stateTaxHST = TestBaseProvider.getTestBase().getTestData().getDouble("stateTaxHST");
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		double item1_price = item1_price_in_SFO_section_table1_in_ReviewCart_page();
		double exp_SFO_table1_subTotal = item1_price;
		String act_SFO_table1_subTotal_is = SFO_subtotal_table1_ReviewCart_page().getText().trim();
		act_SFO_table1_subTotal_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table1_subTotal_is);
		double act_SFO_table1_subTotal = Double.parseDouble(act_SFO_table1_subTotal_is);

		Assert.assertEquals(act_SFO_table1_subTotal, exp_SFO_table1_subTotal,
				"Incorrect Student subtotal value is displayed in Table1 Review Cart page");

		double act_HST_SFO_Table1 = HST_SFO_Table1_ReviewCart_page();

		double exp_HST_SFO_Table1 = (double) (exp_SFO_table1_subTotal * stateTaxHST) / 100;
		exp_HST_SFO_Table1 = Double.parseDouble(new DecimalFormat("##.##").format(exp_HST_SFO_Table1));

		Assert.assertEquals(act_HST_SFO_Table1, exp_HST_SFO_Table1,
				"Incorrect HST value is displayed in SFO Table1 Review Cart page");

		String act_SFO_table1_total_is = SFO_total_table1_ReviewCart_page().getText().trim();
		act_SFO_table1_total_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table1_total_is);
		double act_SFO_table1_total = Double.parseDouble(act_SFO_table1_total_is);

		double exp_SFO_table1_total = exp_SFO_table1_subTotal + exp_HST_SFO_Table1;
		exp_SFO_table1_total = Double.parseDouble(new DecimalFormat("##.##").format(exp_SFO_table1_total));

		Assert.assertEquals(act_SFO_table1_total, exp_SFO_table1_total,
				"Incorrect SFO Table1 Total value is displayed in Review Cart page");

		String act_SFO_table1_Total_is = SFO_TOTAL_ReviewCart_page().getText().trim();
		act_SFO_table1_Total_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table1_Total_is);
		double act_SFO_table1_Total = Double.parseDouble(act_SFO_table1_Total_is);

		Assert.assertEquals(act_SFO_table1_Total, exp_SFO_table1_total,
				"Incorrect SFO Total value is displayed in Review Cart page");

		double item_1_price = item1_price_in_YTO_section_in_ReviewCart_page();
		double item2_price = item2_price_in_YTO_section_in_ReviewCart_page();
		double exp_YTO_subTotal = item_1_price + item2_price;
		exp_YTO_subTotal = Double.parseDouble(new DecimalFormat("##.##").format(exp_YTO_subTotal));

		String act_YTO_subTotal_is = YTO_section_subtotal_ReviewCart_page().getText().trim();
		act_YTO_subTotal_is = delete_US_or_Canada_dollar_for_the_value(act_YTO_subTotal_is);
		double act_YTO_subTotal = Double.parseDouble(act_YTO_subTotal_is);

		Assert.assertEquals(act_YTO_subTotal, exp_YTO_subTotal,
				"Incorrect YTO subtotal value is displayed in Review Cart page");

		double act_HST_YTO_section = HST_YTO_section_ReviewCart_page();

		double exp_HST_YTO_section = (double) (exp_YTO_subTotal * stateTaxHST) / 100;
		exp_HST_YTO_section = Double.parseDouble(new DecimalFormat("##.##").format(exp_HST_YTO_section));

		Assert.assertEquals(act_HST_YTO_section, exp_HST_YTO_section,
				"Incorrect HST value is displayed in YTO section in Review Cart page");

		String act_YTO_total_is = YTO_section_Total_ReviewCart_page().getText().trim();
		act_YTO_total_is = delete_US_or_Canada_dollar_for_the_value(act_YTO_total_is);
		double act_YTO_total = Double.parseDouble(act_YTO_total_is);

		double exp_YTO_total = exp_YTO_subTotal + exp_HST_YTO_section;
		exp_YTO_total = Double.parseDouble(new DecimalFormat("##.##").format(exp_YTO_total));

		Assert.assertEquals(act_YTO_total, exp_YTO_total, "Incorrect YTO Total value is displayed in Review Cart page");

		String act_You_are_earning_val = fld_val_YOU_ARE_EARNING_REWARDS_ON_ReviewCart_page().getText().trim();
		act_You_are_earning_val = delete_US_or_Canada_dollar_for_the_value(act_You_are_earning_val);
		double act_You_are_earning_Rewards_on = Double.parseDouble(act_You_are_earning_val);

		double exp_You_are_earning_Rewards_on = exp_SFO_table1_subTotal + exp_YTO_subTotal;
		exp_You_are_earning_Rewards_on = Double
				.parseDouble(new DecimalFormat("##.##").format(exp_You_are_earning_Rewards_on));

		Assert.assertEquals(act_You_are_earning_Rewards_on, exp_You_are_earning_Rewards_on,
				"Incorrect YOU ARE EARNING REWARDS ON value is displayed in Review Cart page");

		String act_CART_Total_is = CART_TOTAL_ReviewCart_page().getText().trim();
		act_CART_Total_is = delete_US_or_Canada_dollar_for_the_value(act_CART_Total_is);
		double act_CART_Total = Double.parseDouble(act_CART_Total_is);

		double exp_CART_Total = exp_SFO_table1_total + exp_YTO_total;
		exp_CART_Total = Double.parseDouble(new DecimalFormat("##.##").format(exp_CART_Total));

		Assert.assertEquals(act_CART_Total, exp_CART_Total,
				"Incorrect CART Total value is displayed in Review Cart page");

	}

	@Override
	public void validation_of_SFO_YTO_Totals_ReviewCart_page_GST() {
		double stateTaxGST = TestBaseProvider.getTestBase().getTestData().getDouble("stateTaxGST");
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		double item1_price = item1_price_in_SFO_section_table1_in_ReviewCart_page();
		double exp_SFO_table1_subTotal = item1_price;
		String act_SFO_table1_subTotal_is = SFO_subtotal_table1_ReviewCart_page().getText().trim();
		act_SFO_table1_subTotal_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table1_subTotal_is);
		double act_SFO_table1_subTotal = Double.parseDouble(act_SFO_table1_subTotal_is);

		Assert.assertEquals(act_SFO_table1_subTotal, exp_SFO_table1_subTotal,
				"Incorrect Student subtotal value is displayed in Table1 Review Cart page");

		double act_GST_SFO_Table1 = GST_SFO_Table1_ReviewCart_page();

		double exp_GST_SFO_Table1 = (double) (exp_SFO_table1_subTotal * stateTaxGST) / 100;
		exp_GST_SFO_Table1 = Double.parseDouble(new DecimalFormat("##.##").format(exp_GST_SFO_Table1));

		Assert.assertEquals(act_GST_SFO_Table1, exp_GST_SFO_Table1,
				"Incorrect GST value is displayed in SFO Table1 Review Cart page");

		String act_SFO_table1_total_is = SFO_total_table1_ReviewCart_page().getText().trim();
		act_SFO_table1_total_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table1_total_is);
		double act_SFO_table1_total = Double.parseDouble(act_SFO_table1_total_is);

		double exp_SFO_table1_total = exp_SFO_table1_subTotal + exp_GST_SFO_Table1;
		exp_SFO_table1_total = Double.parseDouble(new DecimalFormat("##.##").format(exp_SFO_table1_total));

		Assert.assertEquals(act_SFO_table1_total, exp_SFO_table1_total,
				"Incorrect SFO Table1 Total value is displayed in Review Cart page");

		String act_SFO_table1_Total_is = SFO_TOTAL_ReviewCart_page().getText().trim();
		act_SFO_table1_Total_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table1_Total_is);
		double act_SFO_table1_Total = Double.parseDouble(act_SFO_table1_Total_is);

		Assert.assertEquals(act_SFO_table1_Total, exp_SFO_table1_total,
				"Incorrect SFO Total value is displayed in Review Cart page");

		double item_1_price = item1_price_in_YTO_section_in_ReviewCart_page();
		double item2_price = item2_price_in_YTO_section_in_ReviewCart_page();
		double exp_YTO_subTotal = item_1_price + item2_price;
		exp_YTO_subTotal = Double.parseDouble(new DecimalFormat("##.##").format(exp_YTO_subTotal));

		String act_YTO_subTotal_is = YTO_section_subtotal_ReviewCart_page().getText().trim();
		act_YTO_subTotal_is = delete_US_or_Canada_dollar_for_the_value(act_YTO_subTotal_is);
		double act_YTO_subTotal = Double.parseDouble(act_YTO_subTotal_is);

		Assert.assertEquals(act_YTO_subTotal, exp_YTO_subTotal,
				"Incorrect YTO subtotal value is displayed in Review Cart page");

		double act_GST_YTO_section = GST_YTO_section_ReviewCart_page();

		double exp_GST_YTO_section = (double) (exp_YTO_subTotal * stateTaxGST) / 100;
		exp_GST_YTO_section = Double.parseDouble(new DecimalFormat("##.##").format(exp_GST_YTO_section));

		Assert.assertEquals(act_GST_YTO_section, exp_GST_YTO_section,
				"Incorrect GST value is displayed in YTO section in Review Cart page");

		String act_YTO_total_is = YTO_section_Total_ReviewCart_page().getText().trim();
		act_YTO_total_is = delete_US_or_Canada_dollar_for_the_value(act_YTO_total_is);
		double act_YTO_total = Double.parseDouble(act_YTO_total_is);

		double exp_YTO_total = exp_YTO_subTotal + exp_GST_YTO_section;
		exp_YTO_total = Double.parseDouble(new DecimalFormat("##.##").format(exp_YTO_total));

		Assert.assertEquals(act_YTO_total, exp_YTO_total, "Incorrect YTO Total value is displayed in Review Cart page");

		String act_You_are_earning_val = fld_val_YOU_ARE_EARNING_REWARDS_ON_ReviewCart_page().getText().trim();
		act_You_are_earning_val = delete_US_or_Canada_dollar_for_the_value(act_You_are_earning_val);
		double act_You_are_earning_Rewards_on = Double.parseDouble(act_You_are_earning_val);

		double exp_You_are_earning_Rewards_on = exp_SFO_table1_subTotal + exp_YTO_subTotal;
		exp_You_are_earning_Rewards_on = Double
				.parseDouble(new DecimalFormat("##.##").format(exp_You_are_earning_Rewards_on));

		Assert.assertEquals(act_You_are_earning_Rewards_on, exp_You_are_earning_Rewards_on,
				"Incorrect YOU ARE EARNING REWARDS ON value is displayed in Review Cart page");

		String act_CART_Total_is = CART_TOTAL_ReviewCart_page().getText().trim();
		act_CART_Total_is = delete_US_or_Canada_dollar_for_the_value(act_CART_Total_is);
		double act_CART_Total = Double.parseDouble(act_CART_Total_is);

		double exp_CART_Total = exp_SFO_table1_total + exp_YTO_total;
		exp_CART_Total = Double.parseDouble(new DecimalFormat("##.##").format(exp_CART_Total));

		Assert.assertEquals(act_CART_Total, exp_CART_Total,
				"Incorrect CART Total value is displayed in Review Cart page");

	}

	@Override
	public void validation_of_SFO_YTO_TE_Totals_ReviewCart_page_GST_PST() {
		int stateTaxGST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxGST");
		double stateTaxPST = TestBaseProvider.getTestBase().getTestData().getDouble("stateTaxPST");
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		double item1_price = item1_price_in_SFO_section_table1_in_ReviewCart_page();
		double exp_SFO_table1_subTotal = item1_price;
		String act_SFO_table1_subTotal_is = SFO_subtotal_table1_ReviewCart_page().getText().trim();
		act_SFO_table1_subTotal_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table1_subTotal_is);
		double act_SFO_table1_subTotal = Double.parseDouble(act_SFO_table1_subTotal_is);

		Assert.assertEquals(act_SFO_table1_subTotal, exp_SFO_table1_subTotal,
				"Incorrect Student subtotal value is displayed in Table1 Review Cart page");

		double act_GST_SFO_Table1 = GST_SFO_Table1_ReviewCart_page();
		double act_PST_SFO_Table1 = PST_SFO_Table1_ReviewCart_page();

		double exp_GST_SFO_Table1 = (double) (exp_SFO_table1_subTotal * stateTaxGST) / 100;
		exp_GST_SFO_Table1 = Double.parseDouble(new DecimalFormat("##.##").format(exp_GST_SFO_Table1));

		Assert.assertEquals(act_GST_SFO_Table1, exp_GST_SFO_Table1,
				"Incorrect GST value is displayed in SFO Table1 Review Cart page");

		double exp_PST_SFO_Table1 = (double) (exp_SFO_table1_subTotal * stateTaxPST) / 100;
		exp_PST_SFO_Table1 = Double.parseDouble(new DecimalFormat("##.##").format(exp_PST_SFO_Table1));

		Assert.assertEquals(act_PST_SFO_Table1, exp_PST_SFO_Table1,
				"Incorrect PST value is displayed in SFO Table1 Review Cart page");

		String act_SFO_table1_total_is = SFO_total_table1_ReviewCart_page().getText().trim();
		act_SFO_table1_total_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table1_total_is);
		double act_SFO_table1_total = Double.parseDouble(act_SFO_table1_total_is);

		double exp_SFO_table1_total = exp_SFO_table1_subTotal + exp_GST_SFO_Table1 + exp_PST_SFO_Table1;
		exp_SFO_table1_total = Double.parseDouble(new DecimalFormat("##.##").format(exp_SFO_table1_total));

		Assert.assertEquals(act_SFO_table1_total, exp_SFO_table1_total,
				"Incorrect SFO Table1 Total value is displayed in Review Cart page");

		String act_SFO_table1_Total_is = SFO_TOTAL_ReviewCart_page().getText().trim();
		act_SFO_table1_Total_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table1_Total_is);
		double act_SFO_table1_Total = Double.parseDouble(act_SFO_table1_Total_is);

		Assert.assertEquals(act_SFO_table1_Total, exp_SFO_table1_total,
				"Incorrect SFO Total value is displayed in Review Cart page");

		double item_1_price = item1_price_in_YTO_section_in_ReviewCart_page();
		double item2_price = item2_price_in_YTO_section_in_ReviewCart_page();
		double exp_YTO_subTotal = item_1_price + item2_price;
		exp_YTO_subTotal = Double.parseDouble(new DecimalFormat("##.##").format(exp_YTO_subTotal));

		String act_YTO_subTotal_is = YTO_section_subtotal_ReviewCart_page().getText().trim();
		act_YTO_subTotal_is = delete_US_or_Canada_dollar_for_the_value(act_YTO_subTotal_is);
		double act_YTO_subTotal = Double.parseDouble(act_YTO_subTotal_is);

		Assert.assertEquals(act_YTO_subTotal, exp_YTO_subTotal,
				"Incorrect YTO subtotal value is displayed in Review Cart page");

		double act_GST_YTO_section = GST_YTO_section_ReviewCart_page();
		double act_PST_YTO_section = PST_YTO_section_ReviewCart_page();

		double exp_GST_YTO_section = (double) (exp_YTO_subTotal * stateTaxGST) / 100;
		exp_GST_YTO_section = Double.parseDouble(new DecimalFormat("##.##").format(exp_GST_YTO_section));

		Assert.assertEquals(act_GST_YTO_section, exp_GST_YTO_section,
				"Incorrect GST value is displayed in YTO section in Review Cart page");

		double exp_PST_YTO_section = (double) (exp_YTO_subTotal * stateTaxPST) / 100;
		exp_PST_YTO_section = Double.parseDouble(new DecimalFormat("##.##").format(exp_PST_YTO_section));

		Assert.assertEquals(act_PST_YTO_section, exp_PST_YTO_section,
				"Incorrect PST value is displayed in YTO section in Review Cart page");

		String act_YTO_total_is = YTO_section_Total_ReviewCart_page().getText().trim();
		act_YTO_total_is = delete_US_or_Canada_dollar_for_the_value(act_YTO_total_is);
		double act_YTO_total = Double.parseDouble(act_YTO_total_is);

		double exp_YTO_total = exp_YTO_subTotal + exp_GST_YTO_section + exp_PST_YTO_section;
		exp_YTO_total = Double.parseDouble(new DecimalFormat("##.##").format(exp_YTO_total));

		Assert.assertEquals(act_YTO_total, exp_YTO_total, "Incorrect YTO Total value is displayed in Review Cart page");

		String act_You_are_earning_val = fld_val_YOU_ARE_EARNING_REWARDS_ON_ReviewCart_page().getText().trim();
		act_You_are_earning_val = delete_US_or_Canada_dollar_for_the_value(act_You_are_earning_val);
		double act_You_are_earning_Rewards_on = Double.parseDouble(act_You_are_earning_val);

		double exp_You_are_earning_Rewards_on = exp_SFO_table1_subTotal + exp_YTO_subTotal;
		exp_You_are_earning_Rewards_on = Double
				.parseDouble(new DecimalFormat("##.##").format(exp_You_are_earning_Rewards_on));

		Assert.assertEquals(act_You_are_earning_Rewards_on, exp_You_are_earning_Rewards_on,
				"Incorrect YOU ARE EARNING REWARDS ON value is displayed in Review Cart page");

		double item_1price = item1_price_in_TE_section_in_ReviewCart_page();
		double item_2price = item2_price_in_TE_section_in_ReviewCart_page();
		double exp_TE_subTotal = item_1price + item_2price;
		exp_TE_subTotal = Double.parseDouble(new DecimalFormat("##.##").format(exp_TE_subTotal));

		String act_TE_subTotal_is = TE_section_subtotal_ReviewCart_page().getText().trim();
		act_TE_subTotal_is = delete_US_or_Canada_dollar_for_the_value(act_TE_subTotal_is);
		double act_TE_subTotal = Double.parseDouble(act_TE_subTotal_is);

		Assert.assertEquals(act_TE_subTotal, exp_TE_subTotal,
				"Incorrect TE subtotal value is displayed in Review Cart page");

		double act_GST_TE_section = GST_TE_section_ReviewCart_page();
		double act_PST_TE_section = PST_TE_section_ReviewCart_page();

		double exp_GST_TE_section = (double) (exp_TE_subTotal * stateTaxGST) / 100;
		exp_GST_TE_section = Double.parseDouble(new DecimalFormat("##.##").format(exp_GST_TE_section));

		Assert.assertEquals(act_GST_TE_section, exp_GST_TE_section,
				"Incorrect GST value is displayed in TE section in Review Cart page");

		double exp_PST_TE_section = (double) (exp_TE_subTotal * stateTaxPST) / 100;
		exp_PST_TE_section = Double.parseDouble(new DecimalFormat("##.##").format(exp_PST_TE_section));

		Assert.assertEquals(act_PST_TE_section, exp_PST_TE_section,
				"Incorrect PST value is displayed in TE section in Review Cart page");

		String act_TE_total_is = TE_section_Total_ReviewCart_page().getText().trim();
		act_TE_total_is = delete_US_or_Canada_dollar_for_the_value(act_TE_total_is);
		double act_TE_total = Double.parseDouble(act_TE_total_is);

		double exp_TE_total = exp_TE_subTotal + exp_GST_TE_section + exp_PST_TE_section;
		exp_TE_total = Double.parseDouble(new DecimalFormat("##.##").format(exp_TE_total));

		Assert.assertEquals(act_TE_total, exp_TE_total, "Incorrect TE Total value is displayed in Review Cart page");

		String act_CART_Total_is = CART_TOTAL_ReviewCart_page().getText().trim();
		act_CART_Total_is = delete_US_or_Canada_dollar_for_the_value(act_CART_Total_is);
		double act_CART_Total = Double.parseDouble(act_CART_Total_is);

		double exp_CART_Total = exp_SFO_table1_total + exp_YTO_total + exp_TE_total;
		exp_CART_Total = Double.parseDouble(new DecimalFormat("##.##").format(exp_CART_Total));

		Assert.assertEquals(act_CART_Total, exp_CART_Total,
				"Incorrect CART Total value is displayed in Review Cart page");

	}

	@Override
	public void validation_of_SFO_YTO_TE_Totals_ReviewCart_page_GST_QST() {
		int stateTaxGST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxGST");
		double stateTaxQST = TestBaseProvider.getTestBase().getTestData().getDouble("stateTaxQST");
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		double item1_price = item1_price_in_SFO_section_table1_in_ReviewCart_page();
		double exp_SFO_table1_subTotal = item1_price;
		String act_SFO_table1_subTotal_is = SFO_subtotal_table1_ReviewCart_page().getText().trim();
		act_SFO_table1_subTotal_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table1_subTotal_is);
		double act_SFO_table1_subTotal = Double.parseDouble(act_SFO_table1_subTotal_is);

		Assert.assertEquals(act_SFO_table1_subTotal, exp_SFO_table1_subTotal,
				"Incorrect Student subtotal value is displayed in Table1 Review Cart page");

		double act_GST_SFO_Table1 = GST_SFO_Table1_ReviewCart_page();
		double act_QST_SFO_Table1 = QST_SFO_Table1_ReviewCart_page();

		double exp_GST_SFO_Table1 = (double) (exp_SFO_table1_subTotal * stateTaxGST) / 100;
		exp_GST_SFO_Table1 = Double.parseDouble(new DecimalFormat("##.##").format(exp_GST_SFO_Table1));

		Assert.assertEquals(act_GST_SFO_Table1, exp_GST_SFO_Table1,
				"Incorrect GST value is displayed in SFO Table1 Review Cart page");

		double exp_QST_SFO_Table1 = (double) (exp_SFO_table1_subTotal * stateTaxQST) / 100;
		exp_QST_SFO_Table1 = Double.parseDouble(new DecimalFormat("##.##").format(exp_QST_SFO_Table1));

		Assert.assertEquals(act_QST_SFO_Table1, exp_QST_SFO_Table1,
				"Incorrect QST value is displayed in SFO Table1 Review Cart page");

		String act_SFO_table1_total_is = SFO_total_table1_ReviewCart_page().getText().trim();
		act_SFO_table1_total_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table1_total_is);
		double act_SFO_table1_total = Double.parseDouble(act_SFO_table1_total_is);

		double exp_SFO_table1_total = exp_SFO_table1_subTotal + exp_GST_SFO_Table1 + exp_QST_SFO_Table1;
		exp_SFO_table1_total = Double.parseDouble(new DecimalFormat("##.##").format(exp_SFO_table1_total));

		Assert.assertEquals(act_SFO_table1_total, exp_SFO_table1_total,
				"Incorrect SFO Table1 Total value is displayed in Review Cart page");

		String act_SFO_table1_Total_is = SFO_TOTAL_ReviewCart_page().getText().trim();
		act_SFO_table1_Total_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table1_Total_is);
		double act_SFO_table1_Total = Double.parseDouble(act_SFO_table1_Total_is);

		Assert.assertEquals(act_SFO_table1_Total, exp_SFO_table1_total,
				"Incorrect SFO Total value is displayed in Review Cart page");

		double item_1_price = item1_price_in_YTO_section_in_ReviewCart_page();
		double item2_price = item2_price_in_YTO_section_in_ReviewCart_page();
		double exp_YTO_subTotal = item_1_price + item2_price;
		exp_YTO_subTotal = Double.parseDouble(new DecimalFormat("##.##").format(exp_YTO_subTotal));

		String act_YTO_subTotal_is = YTO_section_subtotal_ReviewCart_page().getText().trim();
		act_YTO_subTotal_is = delete_US_or_Canada_dollar_for_the_value(act_YTO_subTotal_is);
		double act_YTO_subTotal = Double.parseDouble(act_YTO_subTotal_is);

		Assert.assertEquals(act_YTO_subTotal, exp_YTO_subTotal,
				"Incorrect YTO subtotal value is displayed in Review Cart page");

		double act_GST_YTO_section = GST_YTO_section_ReviewCart_page();
		double act_QST_YTO_section = QST_YTO_section_ReviewCart_page();

		double exp_GST_YTO_section = (double) (exp_YTO_subTotal * stateTaxGST) / 100;
		exp_GST_YTO_section = Double.parseDouble(new DecimalFormat("##.##").format(exp_GST_YTO_section));

		Assert.assertEquals(act_GST_YTO_section, exp_GST_YTO_section,
				"Incorrect GST value is displayed in YTO section in Review Cart page");

		double exp_QST_YTO_section = (double) (exp_YTO_subTotal * stateTaxQST) / 100;
		exp_QST_YTO_section = Double.parseDouble(new DecimalFormat("##.##").format(exp_QST_YTO_section));

		Assert.assertEquals(act_QST_YTO_section, exp_QST_YTO_section,
				"Incorrect QST value is displayed in YTO section in Review Cart page");

		String act_YTO_total_is = YTO_section_Total_ReviewCart_page().getText().trim();
		act_YTO_total_is = delete_US_or_Canada_dollar_for_the_value(act_YTO_total_is);
		double act_YTO_total = Double.parseDouble(act_YTO_total_is);

		double exp_YTO_total = exp_YTO_subTotal + exp_GST_YTO_section + exp_QST_YTO_section;
		exp_YTO_total = Double.parseDouble(new DecimalFormat("##.##").format(exp_YTO_total));

		Assert.assertEquals(act_YTO_total, exp_YTO_total, "Incorrect YTO Total value is displayed in Review Cart page");

		String act_You_are_earning_val = fld_val_YOU_ARE_EARNING_REWARDS_ON_ReviewCart_page().getText().trim();
		act_You_are_earning_val = delete_US_or_Canada_dollar_for_the_value(act_You_are_earning_val);
		double act_You_are_earning_Rewards_on = Double.parseDouble(act_You_are_earning_val);

		double exp_You_are_earning_Rewards_on = exp_SFO_table1_subTotal + exp_YTO_subTotal;
		exp_You_are_earning_Rewards_on = Double
				.parseDouble(new DecimalFormat("##.##").format(exp_You_are_earning_Rewards_on));

		Assert.assertEquals(act_You_are_earning_Rewards_on, exp_You_are_earning_Rewards_on,
				"Incorrect YOU ARE EARNING REWARDS ON value is displayed in Review Cart page");

		double item_1price = item1_price_in_TE_section_in_ReviewCart_page();
		double item_2price = item2_price_in_TE_section_in_ReviewCart_page();
		double exp_TE_subTotal = item_1price + item_2price;
		exp_TE_subTotal = Double.parseDouble(new DecimalFormat("##.##").format(exp_TE_subTotal));

		String act_TE_subTotal_is = TE_section_subtotal_ReviewCart_page().getText().trim();
		act_TE_subTotal_is = delete_US_or_Canada_dollar_for_the_value(act_TE_subTotal_is);
		double act_TE_subTotal = Double.parseDouble(act_TE_subTotal_is);

		Assert.assertEquals(act_TE_subTotal, exp_TE_subTotal,
				"Incorrect TE subtotal value is displayed in Review Cart page");

		double act_GST_TE_section = GST_TE_section_ReviewCart_page();
		double act_QST_TE_section = QST_TE_section_ReviewCart_page();

		double exp_GST_TE_section = (double) (exp_TE_subTotal * stateTaxGST) / 100;
		exp_GST_TE_section = Double.parseDouble(new DecimalFormat("##.##").format(exp_GST_TE_section));

		Assert.assertEquals(act_GST_TE_section, exp_GST_TE_section,
				"Incorrect GST value is displayed in TE section in Review Cart page");

		double exp_QST_TE_section = (double) (exp_TE_subTotal * stateTaxQST) / 100;
		exp_QST_TE_section = Double.parseDouble(new DecimalFormat("##.##").format(exp_QST_TE_section));

		Assert.assertEquals(act_QST_TE_section, exp_QST_TE_section,
				"Incorrect QST value is displayed in TE section in Review Cart page");

		String act_TE_total_is = TE_section_Total_ReviewCart_page().getText().trim();
		act_TE_total_is = delete_US_or_Canada_dollar_for_the_value(act_TE_total_is);
		double act_TE_total = Double.parseDouble(act_TE_total_is);

		double exp_TE_total = exp_TE_subTotal + exp_GST_TE_section + exp_QST_TE_section;
		exp_TE_total = Double.parseDouble(new DecimalFormat("##.##").format(exp_TE_total));

		Assert.assertEquals(act_TE_total, exp_TE_total, "Incorrect TE Total value is displayed in Review Cart page");

		String act_CART_Total_is = CART_TOTAL_ReviewCart_page().getText().trim();
		act_CART_Total_is = delete_US_or_Canada_dollar_for_the_value(act_CART_Total_is);
		double act_CART_Total = Double.parseDouble(act_CART_Total_is);

		double exp_CART_Total = exp_SFO_table1_total + exp_YTO_total + exp_TE_total;
		exp_CART_Total = Double.parseDouble(new DecimalFormat("##.##").format(exp_CART_Total));

		Assert.assertEquals(act_CART_Total, exp_CART_Total,
				"Incorrect CART Total value is displayed in Review Cart page");

	}

	@Override
	public void validation_of_SFO_YTO_TE_Totals_ReviewCart_page_HST() {
		double stateTaxHST = TestBaseProvider.getTestBase().getTestData().getDouble("stateTaxHST");
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		double item1_price = item1_price_in_SFO_section_table1_in_ReviewCart_page();
		double exp_SFO_table1_subTotal = item1_price;
		String act_SFO_table1_subTotal_is = SFO_subtotal_table1_ReviewCart_page().getText().trim();
		act_SFO_table1_subTotal_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table1_subTotal_is);
		double act_SFO_table1_subTotal = Double.parseDouble(act_SFO_table1_subTotal_is);

		Assert.assertEquals(act_SFO_table1_subTotal, exp_SFO_table1_subTotal,
				"Incorrect Student subtotal value is displayed in Table1 Review Cart page");

		double act_HST_SFO_Table1 = HST_SFO_Table1_ReviewCart_page();

		double exp_HST_SFO_Table1 = (double) (exp_SFO_table1_subTotal * stateTaxHST) / 100;
		exp_HST_SFO_Table1 = Double.parseDouble(new DecimalFormat("##.##").format(exp_HST_SFO_Table1));

		Assert.assertEquals(act_HST_SFO_Table1, exp_HST_SFO_Table1,
				"Incorrect HST value is displayed in SFO Table1 Review Cart page");

		String act_SFO_table1_total_is = SFO_total_table1_ReviewCart_page().getText().trim();
		act_SFO_table1_total_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table1_total_is);
		double act_SFO_table1_total = Double.parseDouble(act_SFO_table1_total_is);

		double exp_SFO_table1_total = exp_SFO_table1_subTotal + exp_HST_SFO_Table1;
		exp_SFO_table1_total = Double.parseDouble(new DecimalFormat("##.##").format(exp_SFO_table1_total));

		Assert.assertEquals(act_SFO_table1_total, exp_SFO_table1_total,
				"Incorrect SFO Table1 Total value is displayed in Review Cart page");

		String act_SFO_table1_Total_is = SFO_TOTAL_ReviewCart_page().getText().trim();
		act_SFO_table1_Total_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table1_Total_is);
		double act_SFO_table1_Total = Double.parseDouble(act_SFO_table1_Total_is);

		Assert.assertEquals(act_SFO_table1_Total, exp_SFO_table1_total,
				"Incorrect SFO Total value is displayed in Review Cart page");

		double item_1_price = item1_price_in_YTO_section_in_ReviewCart_page();
		double item2_price = item2_price_in_YTO_section_in_ReviewCart_page();
		double exp_YTO_subTotal = item_1_price + item2_price;
		exp_YTO_subTotal = Double.parseDouble(new DecimalFormat("##.##").format(exp_YTO_subTotal));

		String act_YTO_subTotal_is = YTO_section_subtotal_ReviewCart_page().getText().trim();
		act_YTO_subTotal_is = delete_US_or_Canada_dollar_for_the_value(act_YTO_subTotal_is);
		double act_YTO_subTotal = Double.parseDouble(act_YTO_subTotal_is);

		Assert.assertEquals(act_YTO_subTotal, exp_YTO_subTotal,
				"Incorrect YTO subtotal value is displayed in Review Cart page");

		double act_HST_YTO_section = HST_YTO_section_ReviewCart_page();

		double exp_HST_YTO_section = (double) (exp_YTO_subTotal * stateTaxHST) / 100;
		exp_HST_YTO_section = Double.parseDouble(new DecimalFormat("##.##").format(exp_HST_YTO_section));

		Assert.assertEquals(act_HST_YTO_section, exp_HST_YTO_section,
				"Incorrect HST value is displayed in YTO section in Review Cart page");

		String act_YTO_total_is = YTO_section_Total_ReviewCart_page().getText().trim();
		act_YTO_total_is = delete_US_or_Canada_dollar_for_the_value(act_YTO_total_is);
		double act_YTO_total = Double.parseDouble(act_YTO_total_is);

		double exp_YTO_total = exp_YTO_subTotal + exp_HST_YTO_section;
		exp_YTO_total = Double.parseDouble(new DecimalFormat("##.##").format(exp_YTO_total));

		Assert.assertEquals(act_YTO_total, exp_YTO_total, "Incorrect YTO Total value is displayed in Review Cart page");

		String act_You_are_earning_val = fld_val_YOU_ARE_EARNING_REWARDS_ON_ReviewCart_page().getText().trim();
		act_You_are_earning_val = delete_US_or_Canada_dollar_for_the_value(act_You_are_earning_val);
		double act_You_are_earning_Rewards_on = Double.parseDouble(act_You_are_earning_val);

		double exp_You_are_earning_Rewards_on = exp_SFO_table1_subTotal + exp_YTO_subTotal;
		exp_You_are_earning_Rewards_on = Double
				.parseDouble(new DecimalFormat("##.##").format(exp_You_are_earning_Rewards_on));

		Assert.assertEquals(act_You_are_earning_Rewards_on, exp_You_are_earning_Rewards_on,
				"Incorrect YOU ARE EARNING REWARDS ON value is displayed in Review Cart page");

		double item_1price = item1_price_in_TE_section_in_ReviewCart_page();
		double item_2price = item2_price_in_TE_section_in_ReviewCart_page();
		double exp_TE_subTotal = item_1price + item_2price;
		exp_TE_subTotal = Double.parseDouble(new DecimalFormat("##.##").format(exp_TE_subTotal));

		String act_TE_subTotal_is = TE_section_subtotal_ReviewCart_page().getText().trim();
		act_TE_subTotal_is = delete_US_or_Canada_dollar_for_the_value(act_TE_subTotal_is);
		double act_TE_subTotal = Double.parseDouble(act_TE_subTotal_is);

		Assert.assertEquals(act_TE_subTotal, exp_TE_subTotal,
				"Incorrect TE subtotal value is displayed in Review Cart page");

		double act_HST_TE_section = HST_TE_section_ReviewCart_page();

		double exp_HST_TE_section = (double) (exp_TE_subTotal * stateTaxHST) / 100;
		exp_HST_TE_section = Double.parseDouble(new DecimalFormat("##.##").format(exp_HST_TE_section));

		Assert.assertEquals(act_HST_TE_section, exp_HST_TE_section,
				"Incorrect HST value is displayed in TE section in Review Cart page");

		String act_TE_total_is = TE_section_Total_ReviewCart_page().getText().trim();
		act_TE_total_is = delete_US_or_Canada_dollar_for_the_value(act_TE_total_is);
		double act_TE_total = Double.parseDouble(act_TE_total_is);

		double exp_TE_total = exp_TE_subTotal + exp_HST_TE_section;
		exp_TE_total = Double.parseDouble(new DecimalFormat("##.##").format(exp_TE_total));

		Assert.assertEquals(act_TE_total, exp_TE_total, "Incorrect TE Total value is displayed in Review Cart page");

		String act_CART_Total_is = CART_TOTAL_ReviewCart_page().getText().trim();
		act_CART_Total_is = delete_US_or_Canada_dollar_for_the_value(act_CART_Total_is);
		double act_CART_Total = Double.parseDouble(act_CART_Total_is);

		double exp_CART_Total = exp_SFO_table1_total + exp_YTO_total + exp_TE_total;
		exp_CART_Total = Double.parseDouble(new DecimalFormat("##.##").format(exp_CART_Total));

		Assert.assertEquals(act_CART_Total, exp_CART_Total,
				"Incorrect CART Total value is displayed in Review Cart page");

	}

	@Override
	public void validation_of_SFO_YTO_TE_Totals_ReviewCart_page_GST() {
		double stateTaxGST = TestBaseProvider.getTestBase().getTestData().getDouble("stateTaxGST");
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		double item1_price = item1_price_in_SFO_section_table1_in_ReviewCart_page();
		double exp_SFO_table1_subTotal = item1_price;
		String act_SFO_table1_subTotal_is = SFO_subtotal_table1_ReviewCart_page().getText().trim();
		act_SFO_table1_subTotal_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table1_subTotal_is);
		double act_SFO_table1_subTotal = Double.parseDouble(act_SFO_table1_subTotal_is);

		Assert.assertEquals(act_SFO_table1_subTotal, exp_SFO_table1_subTotal,
				"Incorrect Student subtotal value is displayed in Table1 Review Cart page");

		double act_GST_SFO_Table1 = GST_SFO_Table1_ReviewCart_page();

		double exp_GST_SFO_Table1 = (double) (exp_SFO_table1_subTotal * stateTaxGST) / 100;
		exp_GST_SFO_Table1 = Double.parseDouble(new DecimalFormat("##.##").format(exp_GST_SFO_Table1));

		Assert.assertEquals(act_GST_SFO_Table1, exp_GST_SFO_Table1,
				"Incorrect GST value is displayed in SFO Table1 Review Cart page");

		String act_SFO_table1_total_is = SFO_total_table1_ReviewCart_page().getText().trim();
		act_SFO_table1_total_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table1_total_is);
		double act_SFO_table1_total = Double.parseDouble(act_SFO_table1_total_is);

		double exp_SFO_table1_total = exp_SFO_table1_subTotal + exp_GST_SFO_Table1;
		exp_SFO_table1_total = Double.parseDouble(new DecimalFormat("##.##").format(exp_SFO_table1_total));

		Assert.assertEquals(act_SFO_table1_total, exp_SFO_table1_total,
				"Incorrect SFO Table1 Total value is displayed in Review Cart page");

		String act_SFO_table1_Total_is = SFO_TOTAL_ReviewCart_page().getText().trim();
		act_SFO_table1_Total_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table1_Total_is);
		double act_SFO_table1_Total = Double.parseDouble(act_SFO_table1_Total_is);

		Assert.assertEquals(act_SFO_table1_Total, exp_SFO_table1_total,
				"Incorrect SFO Total value is displayed in Review Cart page");

		double item_1_price = item1_price_in_YTO_section_in_ReviewCart_page();
		double item2_price = item2_price_in_YTO_section_in_ReviewCart_page();
		double exp_YTO_subTotal = item_1_price + item2_price;
		exp_YTO_subTotal = Double.parseDouble(new DecimalFormat("##.##").format(exp_YTO_subTotal));

		String act_YTO_subTotal_is = YTO_section_subtotal_ReviewCart_page().getText().trim();
		act_YTO_subTotal_is = delete_US_or_Canada_dollar_for_the_value(act_YTO_subTotal_is);
		double act_YTO_subTotal = Double.parseDouble(act_YTO_subTotal_is);

		Assert.assertEquals(act_YTO_subTotal, exp_YTO_subTotal,
				"Incorrect YTO subtotal value is displayed in Review Cart page");

		double act_GST_YTO_section = GST_YTO_section_ReviewCart_page();

		double exp_GST_YTO_section = (double) (exp_YTO_subTotal * stateTaxGST) / 100;
		exp_GST_YTO_section = Double.parseDouble(new DecimalFormat("##.##").format(exp_GST_YTO_section));

		Assert.assertEquals(act_GST_YTO_section, exp_GST_YTO_section,
				"Incorrect GST value is displayed in YTO section in Review Cart page");

		String act_YTO_total_is = YTO_section_Total_ReviewCart_page().getText().trim();
		act_YTO_total_is = delete_US_or_Canada_dollar_for_the_value(act_YTO_total_is);
		double act_YTO_total = Double.parseDouble(act_YTO_total_is);

		double exp_YTO_total = exp_YTO_subTotal + exp_GST_YTO_section;
		exp_YTO_total = Double.parseDouble(new DecimalFormat("##.##").format(exp_YTO_total));

		Assert.assertEquals(act_YTO_total, exp_YTO_total, "Incorrect YTO Total value is displayed in Review Cart page");

		String act_You_are_earning_val = fld_val_YOU_ARE_EARNING_REWARDS_ON_ReviewCart_page().getText().trim();
		act_You_are_earning_val = delete_US_or_Canada_dollar_for_the_value(act_You_are_earning_val);
		double act_You_are_earning_Rewards_on = Double.parseDouble(act_You_are_earning_val);

		double exp_You_are_earning_Rewards_on = exp_SFO_table1_subTotal + exp_YTO_subTotal;
		exp_You_are_earning_Rewards_on = Double
				.parseDouble(new DecimalFormat("##.##").format(exp_You_are_earning_Rewards_on));

		Assert.assertEquals(act_You_are_earning_Rewards_on, exp_You_are_earning_Rewards_on,
				"Incorrect YOU ARE EARNING REWARDS ON value is displayed in Review Cart page");

		double item_1price = item1_price_in_TE_section_in_ReviewCart_page();
		double item_2price = item2_price_in_TE_section_in_ReviewCart_page();
		double exp_TE_subTotal = item_1price + item_2price;
		exp_TE_subTotal = Double.parseDouble(new DecimalFormat("##.##").format(exp_TE_subTotal));

		String act_TE_subTotal_is = TE_section_subtotal_ReviewCart_page().getText().trim();
		act_TE_subTotal_is = delete_US_or_Canada_dollar_for_the_value(act_TE_subTotal_is);
		double act_TE_subTotal = Double.parseDouble(act_TE_subTotal_is);

		Assert.assertEquals(act_TE_subTotal, exp_TE_subTotal,
				"Incorrect TE subtotal value is displayed in Review Cart page");

		double act_GST_TE_section = GST_TE_section_ReviewCart_page();

		double exp_GST_TE_section = (double) (exp_TE_subTotal * stateTaxGST) / 100;
		exp_GST_TE_section = Double.parseDouble(new DecimalFormat("##.##").format(exp_GST_TE_section));

		Assert.assertEquals(act_GST_TE_section, exp_GST_TE_section,
				"Incorrect GST value is displayed in TE section in Review Cart page");

		String act_TE_total_is = TE_section_Total_ReviewCart_page().getText().trim();
		act_TE_total_is = delete_US_or_Canada_dollar_for_the_value(act_TE_total_is);
		double act_TE_total = Double.parseDouble(act_TE_total_is);

		double exp_TE_total = exp_TE_subTotal + exp_GST_TE_section;
		exp_TE_total = Double.parseDouble(new DecimalFormat("##.##").format(exp_TE_total));

		Assert.assertEquals(act_TE_total, exp_TE_total, "Incorrect TE Total value is displayed in Review Cart page");

		String act_CART_Total_is = CART_TOTAL_ReviewCart_page().getText().trim();
		act_CART_Total_is = delete_US_or_Canada_dollar_for_the_value(act_CART_Total_is);
		double act_CART_Total = Double.parseDouble(act_CART_Total_is);

		double exp_CART_Total = exp_SFO_table1_total + exp_YTO_total + exp_TE_total;
		exp_CART_Total = Double.parseDouble(new DecimalFormat("##.##").format(exp_CART_Total));

		Assert.assertEquals(act_CART_Total, exp_CART_Total,
				"Incorrect CART Total value is displayed in Review Cart page");
	}

	@Override
	public void teacher_apply_a_FreePick_item_for_single_student_in_SFO_section() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);
		
		if (lst_fld_Applied_SFO_coupon_SFO_section().size()!=0) {
			System.out.println("SFO applied coupon is displayed");
			btn_close_SFO_coupon_SFO_section().click();
			PauseUtil.pause(1000);
			YES_to_delete_item1_reviewcart().click();
			PauseUtil.waitForAjaxToComplete(2500);
			PauseUtil.pause(2000);
		} else {
			System.out.println("No SFO applied coupon displayed");
		}
		
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);
		link_Apply_FreePick_coupon_SFO_section().click();
		PauseUtil.waitForAjaxToComplete(2000);
		fld_Student_name_FreePick_popup_SFO().click();
		fld_Student_name_FreePick_popup_SFO().clear();
		fld_Student_name_FreePick_popup_SFO().sendKeys(ConstantUtils.SFO_Student_name1);
		PauseUtil.pause(1000);
		fld_Coupon_FreePick_popup_SFO().click();
		fld_Coupon_FreePick_popup_SFO().clear();
		fld_Coupon_FreePick_popup_SFO().sendKeys(ConstantUtils.SFO_FREEPICK_coupon1);
		PauseUtil.pause(1000);
		btn_APPLY_FreePick_popup_SFO().click();
	}
	
	@Override
	public void teacher_applies_freepick_item_for_single_student_in_sfo_section() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);
		link_Apply_FreePick_coupon_SFO_section().click();
		PauseUtil.waitForAjaxToComplete(2000);
		fld_Student_name_FreePick_popup_SFO().click();
		fld_Student_name_FreePick_popup_SFO().clear();
		fld_Student_name_FreePick_popup_SFO().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("studentname"));
		PauseUtil.pause(1000);
		fld_Coupon_FreePick_popup_SFO().click();
		fld_Coupon_FreePick_popup_SFO().clear();
		fld_Coupon_FreePick_popup_SFO().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("sfocoupon"));
		PauseUtil.pause(1000);
		btn_APPLY_FreePick_popup_SFO().click();

	}

	@Override
	public void teacher_apply_a_FreePick_item_2_for_single_student_in_SFO_section() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		link_Apply_FreePick_coupon_SFO_section().click();
		PauseUtil.waitForAjaxToComplete(2000);
		fld_Student_name_FreePick_popup_SFO().click();
		fld_Student_name_FreePick_popup_SFO().clear();
		fld_Student_name_FreePick_popup_SFO().sendKeys(ConstantUtils.SFO_Student_name2);
		PauseUtil.pause(1000);
		fld_Coupon_FreePick_popup_SFO().click();
		fld_Coupon_FreePick_popup_SFO().clear();
		fld_Coupon_FreePick_popup_SFO().sendKeys(ConstantUtils.SFO_FREEPICK_coupon2);
		PauseUtil.pause(1000);
		btn_APPLY_FreePick_popup_SFO().click();

	}

	@Override
	public void teacher_search_and_select_a_FreePick_item_from_the_list_SFO_section() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		fld_Search_FreePick_popup_SFO().click();
		fld_Search_FreePick_popup_SFO().clear();
		fld_Search_FreePick_popup_SFO().sendKeys(ConstantUtils.FreePick_item1);
		PauseUtil.pause(1000);
		icon_Search_FreePick_popup_SFO().click();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);
		first_item_in_FreePick_popup_item_list_SFO().click();
		PauseUtil.pause(1000);
		btn_CONFIRM_APPLY_FreePick_popup_SFO().click();
	}
	
	
	
	@Override
	public void teacher_search_select_freePick_item_from_the_list_sfo_section() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);
		fld_Search_FreePick_popup_SFO().click();
		fld_Search_FreePick_popup_SFO().clear();
		fld_Search_FreePick_popup_SFO().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("freepickitem"));
		PauseUtil.pause(1000);
		icon_Search_FreePick_popup_SFO().click();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);
		first_item_in_FreePick_popup_item_list_SFO().click();
		PauseUtil.pause(1000);
		btn_CONFIRM_APPLY_FreePick_popup_SFO().click();
	}

	@Override
	public void validation_of_single_SFO_FreePick_item_added_for_one_student_totals_GST_PST() {
		int stateTaxGST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxGST");
		double stateTaxPST = TestBaseProvider.getTestBase().getTestData().getDouble("stateTaxPST");
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		double exp_SFO_table1_subTotal = 0;
		String act_SFO_table1_subTotal_is = SFO_subtotal_table1_ReviewCart_page().getText().trim();
		act_SFO_table1_subTotal_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table1_subTotal_is);
		double act_SFO_table1_subTotal = Double.parseDouble(act_SFO_table1_subTotal_is);

		Assert.assertEquals(act_SFO_table1_subTotal, exp_SFO_table1_subTotal,
				"Incorrect Student subtotal value is displayed in Table1 Review Cart page");

		double act_GST_SFO_Table1 = GST_SFO_Table1_ReviewCart_page();
		double act_PST_SFO_Table1 = PST_SFO_Table1_ReviewCart_page();

		double exp_GST_SFO_Table1 = (double) (exp_SFO_table1_subTotal * stateTaxGST) / 100;
		exp_GST_SFO_Table1 = Double.parseDouble(new DecimalFormat("##.##").format(exp_GST_SFO_Table1));

		Assert.assertEquals(act_GST_SFO_Table1, exp_GST_SFO_Table1,
				"Incorrect GST value is displayed in SFO Table1 Review Cart page");

		double exp_PST_SFO_Table1 = (double) (exp_SFO_table1_subTotal * stateTaxPST) / 100;
		exp_PST_SFO_Table1 = Double.parseDouble(new DecimalFormat("##.##").format(exp_PST_SFO_Table1));

		Assert.assertEquals(act_PST_SFO_Table1, exp_PST_SFO_Table1,
				"Incorrect PST value is displayed in SFO Table1 Review Cart page");

		String act_SFO_table1_total_is = SFO_total_table1_ReviewCart_page().getText().trim();
		act_SFO_table1_total_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table1_total_is);
		double act_SFO_table1_total = Double.parseDouble(act_SFO_table1_total_is);

		double exp_SFO_table1_total = exp_SFO_table1_subTotal + exp_GST_SFO_Table1 + exp_PST_SFO_Table1;
		exp_SFO_table1_total = Double.parseDouble(new DecimalFormat("##.##").format(exp_SFO_table1_total));

		Assert.assertEquals(act_SFO_table1_total, exp_SFO_table1_total,
				"Incorrect SFO Table1 Total value is displayed in Review Cart page");

		String act_SFO_table1_Total_is = SFO_TOTAL_ReviewCart_page().getText().trim();
		act_SFO_table1_Total_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table1_Total_is);
		double act_SFO_table1_Total = Double.parseDouble(act_SFO_table1_Total_is);

		Assert.assertEquals(act_SFO_table1_Total, exp_SFO_table1_total,
				"Incorrect SFO Total value is displayed in Review Cart page");

		String act_CART_Total_is = CART_TOTAL_ReviewCart_page().getText().trim();
		act_CART_Total_is = delete_US_or_Canada_dollar_for_the_value(act_CART_Total_is);
		double act_CART_Total = Double.parseDouble(act_CART_Total_is);

		double exp_CART_Total = exp_SFO_table1_total;

		Assert.assertEquals(act_CART_Total, exp_CART_Total,
				"Incorrect CART Total value is displayed in Review Cart page");

	}

	@Override
	public void validation_of_multiple_SFO_FreePick_items_added_for_multiple_students_totals_GST_PST() {
		int stateTaxGST = TestBaseProvider.getTestBase().getTestData().getInt("stateTaxGST");
		double stateTaxPST = TestBaseProvider.getTestBase().getTestData().getDouble("stateTaxPST");
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		double exp_SFO_table1_subTotal = 0;
		String act_SFO_table1_subTotal_is = SFO_subtotal_table1_ReviewCart_page().getText().trim();
		act_SFO_table1_subTotal_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table1_subTotal_is);
		double act_SFO_table1_subTotal = Double.parseDouble(act_SFO_table1_subTotal_is);

		Assert.assertEquals(act_SFO_table1_subTotal, exp_SFO_table1_subTotal,
				"Incorrect Student1 subtotal value is displayed in Table1 Review Cart page");

		double act_GST_SFO_Table1 = GST_SFO_Table1_ReviewCart_page();
		double act_PST_SFO_Table1 = PST_SFO_Table1_ReviewCart_page();

		double exp_GST_SFO_Table1 = (double) (exp_SFO_table1_subTotal * stateTaxGST) / 100;
		exp_GST_SFO_Table1 = Double.parseDouble(new DecimalFormat("##.##").format(exp_GST_SFO_Table1));

		Assert.assertEquals(act_GST_SFO_Table1, exp_GST_SFO_Table1,
				"Incorrect GST value is displayed in SFO Table1 Review Cart page");

		double exp_PST_SFO_Table1 = (double) (exp_SFO_table1_subTotal * stateTaxPST) / 100;
		exp_PST_SFO_Table1 = Double.parseDouble(new DecimalFormat("##.##").format(exp_PST_SFO_Table1));

		Assert.assertEquals(act_PST_SFO_Table1, exp_PST_SFO_Table1,
				"Incorrect PST value is displayed in SFO Table1 Review Cart page");

		String act_SFO_table1_total_is = SFO_total_table1_ReviewCart_page().getText().trim();
		act_SFO_table1_total_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table1_total_is);
		double act_SFO_table1_total = Double.parseDouble(act_SFO_table1_total_is);

		double exp_SFO_table1_total = exp_SFO_table1_subTotal + exp_GST_SFO_Table1 + exp_PST_SFO_Table1;
		exp_SFO_table1_total = Double.parseDouble(new DecimalFormat("##.##").format(exp_SFO_table1_total));

		Assert.assertEquals(act_SFO_table1_total, exp_SFO_table1_total,
				"Incorrect SFO Table1 Total value is displayed in Review Cart page");

		//////////////////////

		double exp_SFO_table2_subTotal = 0;
		String act_SFO_table2_subTotal_is = SFO_subtotal_table2_ReviewCart_page().getText().trim();
		act_SFO_table2_subTotal_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table2_subTotal_is);
		double act_SFO_table2_subTotal = Double.parseDouble(act_SFO_table2_subTotal_is);

		Assert.assertEquals(act_SFO_table2_subTotal, exp_SFO_table2_subTotal,
				"Incorrect Student2 subtotal value is displayed in Table2 Review Cart page");

		double act_GST_SFO_Table2 = GST_SFO_Table2_ReviewCart_page();
		double act_PST_SFO_Table2 = PST_SFO_Table2_ReviewCart_page();

		double exp_GST_SFO_Table2 = (double) (exp_SFO_table2_subTotal * stateTaxGST) / 100;
		exp_GST_SFO_Table2 = Double.parseDouble(new DecimalFormat("##.##").format(exp_GST_SFO_Table2));

		Assert.assertEquals(act_GST_SFO_Table2, exp_GST_SFO_Table2,
				"Incorrect GST value is displayed in SFO Table2 Review Cart page");

		double exp_PST_SFO_Table2 = (double) (exp_SFO_table2_subTotal * stateTaxPST) / 100;
		exp_PST_SFO_Table2 = Double.parseDouble(new DecimalFormat("##.##").format(exp_PST_SFO_Table2));

		Assert.assertEquals(act_PST_SFO_Table2, exp_PST_SFO_Table2,
				"Incorrect PST value is displayed in SFO Table2 Review Cart page");

		String act_SFO_table2_total_is = SFO_total_table2_ReviewCart_page().getText().trim();
		act_SFO_table2_total_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_table2_total_is);
		double act_SFO_table2_total = Double.parseDouble(act_SFO_table2_total_is);

		double exp_SFO_table2_total = exp_SFO_table2_subTotal + exp_GST_SFO_Table2 + exp_PST_SFO_Table2;
		exp_SFO_table2_total = Double.parseDouble(new DecimalFormat("##.##").format(exp_SFO_table2_total));

		Assert.assertEquals(act_SFO_table2_total, exp_SFO_table2_total,
				"Incorrect SFO Table2 Total value is displayed in Review Cart page");

		String act_SFO_Total_is = SFO_TOTAL_ReviewCart_page().getText().trim();
		act_SFO_Total_is = delete_US_or_Canada_dollar_for_the_value(act_SFO_Total_is);
		double act_SFO_Total = Double.parseDouble(act_SFO_Total_is);

		double exp_SFO_Total = exp_SFO_table1_total + exp_SFO_table2_total;
		exp_SFO_Total = Double.parseDouble(new DecimalFormat("##.##").format(exp_SFO_Total));

		Assert.assertEquals(act_SFO_Total, exp_SFO_Total, "Incorrect SFO Total value is displayed in Review Cart page");

		String act_CART_Total_is = CART_TOTAL_ReviewCart_page().getText().trim();
		act_CART_Total_is = delete_US_or_Canada_dollar_for_the_value(act_CART_Total_is);
		double act_CART_Total = Double.parseDouble(act_CART_Total_is);

		double exp_CART_Total = exp_SFO_Total;

		Assert.assertEquals(act_CART_Total, exp_CART_Total,
				"Incorrect CART Total value is displayed in Review Cart page");

	}

	@Override
	public void teacher_adds_SFO_item_for_Free_Shipping() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		fld_Student_name_SFO().click();
		fld_Student_name_SFO().clear();
		fld_Student_name_SFO().sendKeys(ConstantUtils.SFO_Student_name1);
		PauseUtil.pause(1000);
		fld_Student_Item_SFO().click();
		fld_Student_Item_SFO().clear();
		fld_Student_Item_SFO().sendKeys(ConstantUtils.SFO_Free_item1);
		PauseUtil.pause(2000);
		btn_ADD_SFO().click();
	}

	@Override
	public void teacher_adds_SFO_item_for_Paid_Shipping() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		fld_Student_name_SFO().click();
		fld_Student_name_SFO().clear();
		fld_Student_name_SFO().sendKeys(ConstantUtils.SFO_Student_name1);
		PauseUtil.pause(1000);
		fld_Student_Item_SFO().click();
		fld_Student_Item_SFO().clear();
		fld_Student_Item_SFO().sendKeys(ConstantUtils.SFO_Paid_item1);
		PauseUtil.pause(2000);
		btn_ADD_SFO().click();
		PauseUtil.pause(2000);
		fld_Student_Item_SFO().sendKeys(Keys.F5);
		PauseUtil.pause(6000);
	}

	@Override
	public void teacher_adds_YTO_item_for_Free_Shipping() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(4000);
		fld_Student_Item_SFO().click();
		fld_Student_Item_SFO().clear();
		fld_Student_Item_SFO().sendKeys(ConstantUtils.YTO_Free_item1);
		PauseUtil.pause(2000);
		btn_ADD_SFO().click();
	}

	@Override
	public void teacher_adds_YTO_item_for_Free_ManualShipping() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(4000);
		fld_Student_Item_SFO().click();
		fld_Student_Item_SFO().clear();
		fld_Student_Item_SFO().sendKeys(ConstantUtils.YTO_ManualShiping_item1);
		PauseUtil.pause(2000);
		btn_ADD_SFO().click();
	}

	@Override
	public void teacher_adds_TeacherExclusive_item_for_Free_ManualShipping() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(4000);
		fld_Student_Item_SFO().click();
		fld_Student_Item_SFO().clear();
		fld_Student_Item_SFO().sendKeys(ConstantUtils.TeacherExclusive_ManualShiping_item1);
		PauseUtil.pause(2000);
		btn_ADD_SFO().click();
	}

	@Override
	public void teacher_adds_YTO_item_for_Paid_ManualShipping() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(4000);
		fld_Student_Item_SFO().click();
		fld_Student_Item_SFO().clear();
		fld_Student_Item_SFO().sendKeys(ConstantUtils.YTO_PaidManualShiping_item1);
		PauseUtil.pause(2000);
		btn_ADD_SFO().click();
	}

	@Override
	public void teacher_adds_YTO_item_NotMinimum() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(4000);
		fld_Student_Item_SFO().click();
		fld_Student_Item_SFO().clear();
		fld_Student_Item_SFO().sendKeys(ConstantUtils.YTO_Paid_item1);
		PauseUtil.pause(2000);
		btn_ADD_SFO().click();
		PauseUtil.pause(2000);
		WaitUtils.waitForDisplayed(fld_Student_Item_QTY());
		fld_Student_Item_QTY().click();
		fld_Student_Item_QTY().clear();
		fld_Student_Item_QTY().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("itemQty"));
	}

	@Override
	public void teacher_adds_YTO_item_for_Free_Shipping_WithItemNumber() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(4000);
		fld_Student_Item_SFO().click();
		fld_Student_Item_SFO().clear();
		fld_Student_Item_SFO().sendKeys(ConstantUtils.YTO_Free_item1);
		PauseUtil.pause(2000);
		btn_ADD_SFO().click();
		PauseUtil.pause(4000);
		WaitUtils.waitForDisplayed(fld_Student_Item_QTY());
		fld_Student_Item_QTY().click();
		fld_Student_Item_QTY().clear();
		fld_Student_Item_QTY().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("itemQty"));
	}

	@Override
	public void teacher_adds_YTO_item_for_Paid_Shipping() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(4000);
		fld_Student_Item_SFO().click();
		fld_Student_Item_SFO().clear();
		fld_Student_Item_SFO().sendKeys(ConstantUtils.YTO_Paid_item1);
		PauseUtil.pause(2000);
		btn_ADD_SFO().click();
	}

	@Override
	public void teacher_adds_TE_item_for_Free_Shipping() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		fld_Search_home().click();
		fld_Search_home().clear();
		fld_Search_home().sendKeys(ConstantUtils.TE_Free_item1);
		PauseUtil.pause(1000);
		button_search_homePage().click();
		PauseUtil.waitForAjaxToComplete(2500);
		btn_ADD_TO_CART_search_results_page().click();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		btn_Continue_Shopping_in_popup_search_results_page().click();
	}

	@Override
	public void teacher_adds_TE_item_for_Paid_Shipping() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		fld_Search_home().click();
		fld_Search_home().clear();
		fld_Search_home().sendKeys(ConstantUtils.TE_Paid_item1);
		PauseUtil.pause(1000);
		button_search_homePage().click();
		PauseUtil.waitForAjaxToComplete(2500);
		btn_ADD_TO_CART_search_results_page().click();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		btn_Continue_Shopping_in_popup_search_results_page().click();
	}

	@Override
	public void teacher_adds_multiple_YTO_items_to_the_cart_for_free_shipping() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(4000);
		fld_Student_Item_SFO().click();
		fld_Student_Item_SFO().clear();
		fld_Student_Item_SFO().sendKeys(ConstantUtils.YTO_item3);
		PauseUtil.pause(2000);
		btn_ADD_SFO().click();

		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(5000);
		fld_Student_Item_SFO().click();
		fld_Student_Item_SFO().clear();
		fld_Student_Item_SFO().sendKeys(ConstantUtils.YTO_item4);
		PauseUtil.pause(2000);
		btn_ADD_SFO().click();
	}

	@Override
	public void teacher_adds_multiple_YTO_items_to_cart() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(4000);
		fld_Student_Item_SFO().click();
		fld_Student_Item_SFO().clear();
		fld_Student_Item_SFO().sendKeys(ConstantUtils.YTO_ITEM1);
		PauseUtil.pause(2000);
		btn_ADD_SFO().click();
		
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(5000);
		fld_Student_Item_SFO().click();
		fld_Student_Item_SFO().clear();
		fld_Student_Item_SFO().sendKeys(ConstantUtils.YTO_ITEM2);
		PauseUtil.pause(2000);
		btn_ADD_SFO().click();
	}



    @Override
    public void teacher_adds_multiple_YTO_items_to_cart_for_BonusFlat_tier1() {
        PauseUtil.waitForAjaxToComplete(2500);
        PauseUtil.pause(4000);
        TeachersHomePage tchhome = new TeachersHomePage();
//        tchhome.getteacherhomesfoytotab().click();
        PauseUtil.waitForAjaxToComplete(2500);
        PauseUtil.pause(4000);
        fld_Student_Item_SFO().click();
        fld_Student_Item_SFO().clear();
        fld_Student_Item_SFO().sendKeys(ConstantUtils.YTO_ITEM3);
        PauseUtil.pause(2000);
        btn_ADD_SFO().click();

        PauseUtil.waitForAjaxToComplete(2500);
        PauseUtil.pause(5000);
        fld_Student_Item_SFO().click();
        fld_Student_Item_SFO().clear();
        fld_Student_Item_SFO().sendKeys(ConstantUtils.YTO_ITEM4);
        PauseUtil.pause(1000);
        btn_ADD_SFO().click();
    }


    @Override
	public void teacher_adds_multiple_YTO_items() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(4000);
		fld_Student_Item_SFO().click();
		fld_Student_Item_SFO().clear();
		fld_Student_Item_SFO().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("itemName"));
		PauseUtil.pause(2000);
		btn_ADD_SFO().click();

		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(5000);
		fld_Student_Item_SFO().click();
		fld_Student_Item_SFO().clear();
		fld_Student_Item_SFO().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("itemName2"));
		PauseUtil.pause(1000);
		btn_ADD_SFO().click();
		PauseUtil.pause(4000);
		getytotableitemnumberheader().click();
		PauseUtil.pause(4000);
		getytotableitemnumberheader().click();
		PauseUtil.pause(5000);
	}
    
    @Override
	public void teacher_adds_teacherresourceitems_in_ytosection() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(4000);
		fld_Student_Item_SFO().click();
		fld_Student_Item_SFO().clear();
		fld_Student_Item_SFO().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("itemName"));
		PauseUtil.pause(2000);
		btn_ADD_SFO().click();

		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(5000);
		fld_Student_Item_SFO().click();
		fld_Student_Item_SFO().clear();
		fld_Student_Item_SFO().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("itemName2"));
		PauseUtil.pause(2000);
		btn_ADD_SFO().click();
		PauseUtil.pause(4000);
		getytotableitemnumberheader().click();
		PauseUtil.pause(4000);
		getytotableitemnumberheader().click();
		PauseUtil.pause(5000);
	}
    
    @Override
	public void teacher_adds_teacherresourceitems_in_sfosection() {
    	PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);
		fld_Student_name_SFO().click();
		fld_Student_name_SFO().clear();
		fld_Student_name_SFO().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("studentname"));
		PauseUtil.pause(2000);
		fld_Student_Item_SFO().click();
		fld_Student_Item_SFO().clear();
		fld_Student_Item_SFO().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("itemName"));
		PauseUtil.pause(2000);
		btn_ADD_SFO().click();
		PauseUtil.pause(6000);
	}

    @Override
    public void sfopage_delete_SFOcoupon() {
               if(geticonDeletesfocoupon().size()>0) {
                geticonDeletesfocoupon().get(0).click();
                SCHUtils.waitForElementToBeDisplayed(getbuttonyesconfirmDelete(),2000);
                getbuttonyesconfirmDelete().click();
            }
    }


    @Override
    public void sfopage_delete_all() {
        PauseUtil.pause(1000);
        List<WebElement> allicon = getDeleteinsfoSection();
        System.out.println("check delete>>>>>>>>>>");
        for(WebElement var:allicon){
            System.out.println("delete inside the loop");
            //var.click();
            SCHUtils.clickUsingJavaScript(var);
            getbuttonyesconfirmDelete().click();
        }

    }

    @Override
    public void doremoveSFOYTOitems() {
        PauseUtil.pause(1000);
        List<WebElement> allicon = getReviewCartdeleteIcons();
        for(WebElement var:allicon){
            System.out.println("delete inside the loop");
            try {
                SCHUtils.waitForElementToBeClickable(var,2000);
                var.click();
            } catch (Exception e) {
                e.printStackTrace();
                List<WebElement> element = getReviewCartdeleteIcons();
                element.get(0).click();

            }
            getbuttonyesconfirmDelete().click();
        }

    }


    @Override
	public void teacher_adds_classroomtitleitems_in_ytosection() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(4000);
		fld_Student_Item_SFO().click();
		fld_Student_Item_SFO().clear();
		fld_Student_Item_SFO().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("itemName3"));
		PauseUtil.pause(2000);
		btn_ADD_SFO().click();

		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(5000);
		fld_Student_Item_SFO().click();
		fld_Student_Item_SFO().clear();
		fld_Student_Item_SFO().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("itemName4"));
		PauseUtil.pause(1000);
		btn_ADD_SFO().click();
		PauseUtil.pause(4000);
		getytotableitemnumberheader().click();
		PauseUtil.pause(4000);
		getytotableitemnumberheader().click();
		PauseUtil.pause(5000);
	}

	@Override
	public void teacher_adds_multiple_YTO_TeacherExclusives_items_to_the_cart_for_manualshipping_coupon() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(4000);
		fld_Student_Item_SFO().click();
		fld_Student_Item_SFO().clear();
		fld_Student_Item_SFO().sendKeys(ConstantUtils.YTO_Paid_item2);
		PauseUtil.pause(1000);
		btn_ADD_SFO().click();

		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(4000);
		fld_Student_Item_SFO().click();
		fld_Student_Item_SFO().clear();
		fld_Student_Item_SFO().sendKeys(ConstantUtils.TeacherExclusive_ManualShiping_item2);
		PauseUtil.pause(1000);
		btn_ADD_SFO().click();
	}
	
	@Override
	public void teacher_add_multiple_teacherExclusive_items_to_cart(){
		
		TeachersHomePage teach_homepage = new TeachersHomePage();
		StudentFlyerOrdersPage stud_page = new StudentFlyerOrdersPage();
		PCOD_LoginPage pcod_logpage = new PCOD_LoginPage();
		pcod_logpage.pcod_entervalue_textfield(teach_homepage.getTxtTeacherHomeSearch(),
                TestBaseProvider.getTestBase().getTestData().getString("itemName"));
        pcod_logpage.pcod_click_element(teach_homepage.getbtnTeacherHomeSearch());
pcod_logpage.pcod_click_element(stud_page.getteacherSearchQuantityAddBtn());
pcod_logpage.pcod_entervalue_textfield(teach_homepage.getTxtTeacherHomeSearch(),
        TestBaseProvider.getTestBase().getTestData().getString("itemName2"));
pcod_logpage.pcod_click_element(teach_homepage.getbtnTeacherHomeSearch());
pcod_logpage.pcod_click_element(stud_page.getteacherSearchQuantityAddBtn());
pcod_logpage.pcod_click_element(stud_page.getteacherSearchCheckOut());	
	}
	
	
	
	@Override
	public void navigate_from_reviewcartpage_rewardsandredemptionspage(){
		
		ICartPage cartPage = getFactory().getICartPage();
        CartPage crtpge = new CartPage();
		cartPage.clickProceedToCheckoutBtn();
		PauseUtil.pause(2500);
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete();
		SCHUtils.waitForLoaderToDismiss();
		if (SCHUtils.isPresent(crtpge.getbtntopBonuspointModelProceedToCheckout())) {
			SCHUtils.clickUsingJavaScript(crtpge.getbtntopBonuspointModelProceedToCheckout());
			PauseUtil.pause(1000);
			SCHUtils.waitForLoaderToDismiss();
			PauseUtil.waitForAjaxToComplete();
		}		
	}
	
	
	@Override
	public void navigate_from_paymentpage_to_confirmsubmitpage(){
		ICheckoutPage checkoutPage = getFactory().getICheckoutPage();
        checkoutPage.unCheckPOP();
	        PauseUtil.pause(3000);
	        WaitUtils.waitForEnabled(shippingAndPaymentPage.getDrpPaymentMethod());

		SCHUtils.selectOptionsByVisibleText(shippingAndPaymentPage.getDrpPaymentMethod(),
				ConstantUtils.CHECKPAYMENTMETHOD);
		PauseUtil.pause(3000);
        
        WaitUtils.waitForEnabled(shippingAndPaymentPage.getBtnContinueCheckout());
		SCHUtils.clickUsingJavaScript(shippingAndPaymentPage.getBtnContinueCheckout());
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2500);
		
		
	}
	
	
	@Override
	public void navigate_from_confirmsubmitpage_to_confirmationpage(){
		
		ConfirmAndSubmitOrder confirmAndSubmitOrderPage =
                getFactory().getICheckoutPage().getConfirmAndSubmitOrderSection();
        String pcoolordersubmit = TestBaseProvider.getTestBase().getTestData()
                .getString("pcoolordersubmit");
        if (pcoolordersubmit == null) {
            WaitUtils.waitForEnabled(confirmAndSubmitOrderPage.getBtnSubmitOrder());
            SCHUtils.clickUsingJavaScript(confirmAndSubmitOrderPage.getBtnSubmitOrder());
        }
        PauseUtil.pause(1000);
        SCHUtils.waitForLoaderToDismiss();
        PauseUtil.waitForAjaxToComplete();
        String orderRefNum = confirmAndSubmitOrderPage.getorderrefnoConfirmationpage().getText().trim();

        TestBaseProvider.getTestBase().getContext()
                .setProperty("testexecution.confirmationpage.orderrefno", orderRefNum);
		
	}

	@Override
	public void navigate_from_reviewcartpage_confirmandsubmitpage(){
		
		ICartPage cartPage = getFactory().getICartPage();
        CartPage crtpge = new CartPage();
		cartPage.clickProceedToCheckoutBtn();
		PauseUtil.pause(2500);
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete();
		SCHUtils.waitForLoaderToDismiss();
		if (SCHUtils.isPresent(crtpge.getbtntopBonuspointModelProceedToCheckout())) {
			SCHUtils.clickUsingJavaScript(crtpge.getbtntopBonuspointModelProceedToCheckout());
			PauseUtil.pause(1000);
			SCHUtils.waitForLoaderToDismiss();
			PauseUtil.waitForAjaxToComplete();
		}
		RewardsAndCoupons rewardsAndCoupons =
				getFactory().getICheckoutPage().getRewardsAndCouponsSection();
		PauseUtil.pause(2000);
		/*for(int i=0;i<=3;i++){
			if(rewardsAndCoupons.chkBtnSkip().size()!=0)
			{
		
			System.out.println(" rewardsAndCoupons.getBtnSkip() ==========> "
					+ SCHUtils.isPresent(rewardsAndCoupons.getBtnSkip()));
			SCHUtils.clickUsingJavaScript(rewardsAndCoupons.getBtnSkip());
			PauseUtil.waitForAjaxToComplete();
			}}*/
		System.out.println(" rewardsAndCoupons.getBtnContinueCheckout() ==========> "
				+ SCHUtils.isPresent(rewardsAndCoupons.getBtnContinueCheckout()));
		SCHUtils.scrollToView(rewardsAndCoupons.getBtnContinueCheckout());
		// SCHUtils.clickUsingJavaScript(rewardsAndCoupons.getBtnContinueCheckout());
		SCHUtils.clickUsingJavaScript(rewardsAndCoupons.getBtnContinueCheckout());
		// rewardsAndCoupons.getBtnContinueCheckout().click();
		PauseUtil.pause(1000);
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete();
		
		ICheckoutPage checkoutPage = getFactory().getICheckoutPage();
        checkoutPage.unCheckPOP();
	        PauseUtil.pause(3000);
	        if(shippingAndPaymentPage.chkDrpPaymentMethod().size()!=0){
	        WaitUtils.waitForEnabled(shippingAndPaymentPage.getDrpPaymentMethod());

		SCHUtils.selectOptionsByVisibleText(shippingAndPaymentPage.getDrpPaymentMethod(),
				ConstantUtils.CHECKPAYMENTMETHOD);
		PauseUtil.pause(3000);
	        }
        WaitUtils.waitForEnabled(shippingAndPaymentPage.getBtnContinueCheckout());
		SCHUtils.clickUsingJavaScript(shippingAndPaymentPage.getBtnContinueCheckout());
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2500);
		
	}
	
	
	@Override
	public void navigate_from_rewardspage_confirmandsubmitpage(){
        
		RewardsAndCoupons rewardsAndCoupons =
				getFactory().getICheckoutPage().getRewardsAndCouponsSection();
		PauseUtil.pause(2000);
		System.out.println(" rewardsAndCoupons.getBtnContinueCheckout() ==========> "
				+ SCHUtils.isPresent(rewardsAndCoupons.getBtnContinueCheckout()));
		SCHUtils.scrollToView(rewardsAndCoupons.getBtnContinueCheckout());
		SCHUtils.clickUsingJavaScript(rewardsAndCoupons.getBtnContinueCheckout());
		PauseUtil.pause(1000);
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete();
		
		ICheckoutPage checkoutPage = getFactory().getICheckoutPage();
        checkoutPage.unCheckPOP();
	        PauseUtil.pause(3000);
	        if(shippingAndPaymentPage.chkDrpPaymentMethod().size()!=0){
	        WaitUtils.waitForEnabled(shippingAndPaymentPage.getDrpPaymentMethod());

		SCHUtils.selectOptionsByVisibleText(shippingAndPaymentPage.getDrpPaymentMethod(),
				ConstantUtils.CHECKPAYMENTMETHOD);
		PauseUtil.pause(3000);
	        }
        WaitUtils.waitForEnabled(shippingAndPaymentPage.getBtnContinueCheckout());
		SCHUtils.clickUsingJavaScript(shippingAndPaymentPage.getBtnContinueCheckout());
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2500);
		
	}
	
	
	@Override
	public void navigate_from_reviewcartpage_to_paymentpage(){
		
		ICartPage cartPage = getFactory().getICartPage();
        CartPage crtpge = new CartPage();
		cartPage.clickProceedToCheckoutBtn();
		PauseUtil.pause(2500);
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete();
		SCHUtils.waitForLoaderToDismiss();
		if (SCHUtils.isPresent(crtpge.getbtntopBonuspointModelProceedToCheckout())) {
			SCHUtils.clickUsingJavaScript(crtpge.getbtntopBonuspointModelProceedToCheckout());
			PauseUtil.pause(1000);
			SCHUtils.waitForLoaderToDismiss();
			PauseUtil.waitForAjaxToComplete();
		}
		RewardsAndCoupons rewardsAndCoupons =
				getFactory().getICheckoutPage().getRewardsAndCouponsSection();
		PauseUtil.pause(2000);
		System.out.println(" rewardsAndCoupons.getBtnContinueCheckout() ==========> "
				+ SCHUtils.isPresent(rewardsAndCoupons.getBtnContinueCheckout()));
		SCHUtils.scrollToView(rewardsAndCoupons.getBtnContinueCheckout());
		SCHUtils.clickUsingJavaScript(rewardsAndCoupons.getBtnContinueCheckout());
		PauseUtil.pause(1000);
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete();
		PauseUtil.pause(2500);
		
	}
	
	@Override
	public void click_btn_continuecheckout_inpaymentpage(){
		WaitUtils.waitForEnabled(shippingAndPaymentPage.getBtnContinueCheckout());
 		SCHUtils.clickUsingJavaScript(shippingAndPaymentPage.getBtnContinueCheckout());
 		SCHUtils.waitForLoaderToDismiss();
 		PauseUtil.waitForAjaxToComplete(2500);
 		PauseUtil.pause(2500);	
	}

	@Override
	public void teacher_adds_single_YTO_item() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		fld_Student_Item_SFO().click();
		fld_Student_Item_SFO().clear();
		fld_Student_Item_SFO().sendKeys(ConstantUtils.SFO_item1);
		PauseUtil.pause(2000);
		btn_ADD_SFO().click();
		PauseUtil.pause(2000);
	}
	
	@Override
	public void teacher_adds_single_YTO_item_from_xml() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		fld_Student_Item_SFO().click();
		fld_Student_Item_SFO().clear();
		fld_Student_Item_SFO().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("freepickitem"));
		PauseUtil.pause(2000);
		btn_ADD_SFO().click();
		PauseUtil.pause(2000);
	}
	//################################################ SCSCOD-7359 ######################################################
    @Override
    public void teacher_applies_teacher_only_coupon_SFO_page(){
    	PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);
		
		fld_Coupon_FreePick_popup_SFO().click();
		fld_Coupon_FreePick_popup_SFO().clear();
		fld_Coupon_FreePick_popup_SFO().sendKeys(ConstantUtils.SFO_TeacherOnlyCoupon);
    }
    
    @Override
	public void teacher_applies_student_only_coupon_SFO_page(){
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);
		
		fld_Coupon_FreePick_popup_SFO().click();
		fld_Coupon_FreePick_popup_SFO().clear();
		fld_Coupon_FreePick_popup_SFO().sendKeys(ConstantUtils.SFO_StudentOnlyCoupon);
	}
	
	@Override
	public void no_error_message_is_displayed_SFO_page(){
		Boolean sfo_error_message_is_not_displayed = get_sfo_invliadItemNO_error().isDisplayed();
		
		Assert.assertFalse(sfo_error_message_is_not_displayed, "Error message is displayed");
	}
	
	//################################################ SCSCOD-7359 ######################################################
	@Override
	public void CSR_adds_YTO_items_to_the_cart(){
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		
		String fld1_flyer_code_val = fld1_FlyerCode_in_OrderEntryPage().getAttribute("value");
		
		if( !(fld1_flyer_code_val.equals("")) ){
			fld2_FlyerCode_in_OrderEntryPage().click();
			fld2_FlyerCode_in_OrderEntryPage().clear();
			fld2_FlyerCode_in_OrderEntryPage().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("FlyerCode2"));
			
			frm2_Item_Num_field1_in_OrderEntryPage().click();
			frm2_Item_Num_field1_in_OrderEntryPage().clear();
			frm2_Item_Num_field1_in_OrderEntryPage().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("FC2ItemNum"));
			
			PauseUtil.pause(1000);
			
			frm2_Paid_QTY_field1_in_OrderEntryPage().click();
			frm2_Paid_QTY_field1_in_OrderEntryPage().clear();
			frm2_Paid_QTY_field1_in_OrderEntryPage().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("FC2ItemQty"));
		} else {
			CSR_adds_mul_Teacher_cat_items_to_cart_OrderEntryPage();
		}
		
	}
	
	@Override
	public void CSR_adds_Teacher_Exclusive_items_to_the_cart(){
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		
		String fld1_flyer_code_val = fld1_FlyerCode_in_OrderEntryPage().getAttribute("value");
		
		if( !(fld1_flyer_code_val.equals("")) ){
			fld2_FlyerCode_in_OrderEntryPage().click();
			fld2_FlyerCode_in_OrderEntryPage().clear();
			fld2_FlyerCode_in_OrderEntryPage().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("FlyerCode2"));
			
			frm2_Item_Num_field1_in_OrderEntryPage().click();
			frm2_Item_Num_field1_in_OrderEntryPage().clear();
			frm2_Item_Num_field1_in_OrderEntryPage().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("FC2ItemNum"));
			
			PauseUtil.pause(1000);
			
			frm2_Paid_QTY_field1_in_OrderEntryPage().click();
			frm2_Paid_QTY_field1_in_OrderEntryPage().clear();
			frm2_Paid_QTY_field1_in_OrderEntryPage().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("FC2ItemQty"));
		} else {
			CSR_adds_mul_Teacher_cat_items_to_cart_OrderEntryPage();
		}
	}
	
	//################################################ SCSCOD-7359 ######################################################
	
	@Override
	public double navigate_from_reviewcartpage_rewardsandredemptionspage_get_SFO_Total_val(){
		
		ICartPage cartPage = getFactory().getICartPage();
        CartPage crtpge = new CartPage();
		cartPage.clickProceedToCheckoutBtn();
		PauseUtil.pause(2500);
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete();
		SCHUtils.waitForLoaderToDismiss();
		if (SCHUtils.isPresent(crtpge.getbtntopBonuspointModelProceedToCheckout())) {
			SCHUtils.clickUsingJavaScript(crtpge.getbtntopBonuspointModelProceedToCheckout());
			PauseUtil.pause(1000);
			SCHUtils.waitForLoaderToDismiss();
			PauseUtil.waitForAjaxToComplete();
		}	
		CheckoutPage_2 chkpage_2 = new CheckoutPage_2();
		double Total_SFO_val=chkpage_2.SFO_Total_Rewards_Page();
		return Total_SFO_val;
	}
	
	@Override
	public double navigate_from_reviewcartpage_rewardsandredemptionspage_get_YTO_Total_val(){
		
		ICartPage cartPage = getFactory().getICartPage();
        CartPage crtpge = new CartPage();
		cartPage.clickProceedToCheckoutBtn();
		PauseUtil.pause(2500);
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete();
		SCHUtils.waitForLoaderToDismiss();
		if (SCHUtils.isPresent(crtpge.getbtntopBonuspointModelProceedToCheckout())) {
			SCHUtils.clickUsingJavaScript(crtpge.getbtntopBonuspointModelProceedToCheckout());
			PauseUtil.pause(1000);
			SCHUtils.waitForLoaderToDismiss();
			PauseUtil.waitForAjaxToComplete();
		}	
		CheckoutPage_2 chkpage_2 = new CheckoutPage_2();
		double Total_YTO_val=chkpage_2.YTO_Total_Rewards_Page();
		return Total_YTO_val;
	}
	
	@Override
	public void Teacher_adds_multiple_YTO_items_to_cart() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(4000);
		fld_Student_Item_SFO().click();
		fld_Student_Item_SFO().clear();
		fld_Student_Item_SFO().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("yto_Item1"));
		PauseUtil.pause(2000);
		btn_ADD_SFO().click();

		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(5000);
		fld_Student_Item_SFO().click();
		fld_Student_Item_SFO().clear();
		fld_Student_Item_SFO().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("yto_Item2"));
		PauseUtil.pause(1000);
		btn_ADD_SFO().click();
		PauseUtil.pause(4000);
		/*getytotableitemnumberheader().click();
		PauseUtil.pause(4000);
		getytotableitemnumberheader().click();
		PauseUtil.pause(5000);*/
		/*
		Actions actions = new Actions(TestBaseProvider.getTestBase().getDriver());
		actions.keyDown(Keys.CONTROL).sendKeys(Keys.F5).perform();*/
		//fld_Student_Item_SFO().sendKeys(Keys.F5);
		//PauseUtil.pause(5000);
	}
	
	//######################################################## DWCAPCOD-103 ##################################################################
	@FindBy(locator = "dw.studentflyerorder.teacher.reviewcart.SOO.section")
	private WebElement tcod_reviewcart_SOO_section;
	
	@FindBy(locator = "dw.studentflyerorder.teacher.reviewcart.SOO.minus.icon")
	private WebElement tcod_reviewcart_SOO_minus_icon;
	
	@FindBy(locator = "dw.studentflyerorder.teacher.reviewcart.SOO.plus.icon")
	private WebElement tcod_reviewcart_SOO_plus_icon;
	
	@FindBy(locator = "dw.studentflyerorder.teacher.reviewcart.SOO.child1.name")
	private WebElement tcod_reviewcart_SOO_child1_name;
	
	@FindBy(locator = "dw.studentflyerorder.teacher.reviewcart.SOO.child1.itemNumber")
	private List<WebElement> tcod_reviewcart_SOO_child1_itemNumber;
	
	@FindBy(locator = "dw.studentflyerorder.teacher.reviewcart.SOO.child1.itemTitle")
	private List<WebElement> tcod_reviewcart_SOO_child1_itemTitle;
	
	@FindBy(locator = "dw.studentflyerorder.teacher.reviewcart.SOO.child1.itemFlyer")
	private List<WebElement> tcod_reviewcart_SOO_child1_itemFlyer;
	
	@FindBy(locator = "dw.studentflyerorder.teacher.reviewcart.SOO.child1.itemPrice")
	private List<WebElement> tcod_reviewcart_SOO_child1_itemPrice;
	
	@FindBy(locator = "dw.studentflyerorder.teacher.reviewcart.SOO.child1.itemQuantity")
	private List<WebElement> tcod_reviewcart_SOO_child1_itemQuantity;
	
	@FindBy(locator = "dw.studentflyerorder.teacher.reviewcart.SOO.child1.subTotal")
	private WebElement tcod_reviewcart_SOO_child1_subTotal;
	
	@FindBy(locator = "dw.studentflyerorder.teacher.reviewcart.SOO.child1.GST.tax")
	private WebElement tcod_reviewcart_SOO_child1_GST_tax;
	
	@FindBy(locator = "dw.studentflyerorder.teacher.reviewcart.SOO.child1.PST.tax")
	private WebElement tcod_reviewcart_SOO_child1_PST_tax;
	
	@FindBy(locator = "dw.studentflyerorder.teacher.reviewcart.SOO.child1.overallTotal")
	private WebElement tcod_reviewcart_SOO_child1_overallTotal;
	
	@FindBy(locator = "dw.studentflyerorder.teacher.reviewcart.SOO.child1.dateplaced")
	private WebElement tcod_reviewcart_SOO_child1_datePlaced;
	
	@FindBy(locator = "dw.studentflyerorder.teacher.reviewcart.SOO.child1.QST.tax")
	private WebElement tcod_reviewcart_SOO_child1_QST_tax;
	
	@FindBy(locator = "dw.studentflyerorder.teacher.reviewcart.SOO.child1.HST.tax")
	private WebElement tcod_reviewcart_SOO_child1_HST_tax;
	
	@FindBy(locator = "dw.studentflyerorder.teacher.reviewcart.SOO.child2.name")
	private WebElement tcod_reviewcart_SOO_child2_name;
	
	@FindBy(locator = "dw.studentflyerorder.teacher.reviewcart.SOO.child2.itemNumber")
	private List<WebElement> tcod_reviewcart_SOO_child2_itemNumber;
	
	@FindBy(locator = "dw.studentflyerorder.teacher.reviewcart.SOO.child2.itemTitle")
	private List<WebElement> tcod_reviewcart_SOO_child2_itemTitle;
	
	@FindBy(locator = "dw.studentflyerorder.teacher.reviewcart.SOO.child2.itemFlyer")
	private List<WebElement> tcod_reviewcart_SOO_child2_itemFlyer;
	
	@FindBy(locator = "dw.studentflyerorder.teacher.reviewcart.SOO.child2.itemPrice")
	private List<WebElement> tcod_reviewcart_SOO_child2_itemPrice;
	
	@FindBy(locator = "dw.studentflyerorder.teacher.reviewcart.SOO.child2.itemQuantity")
	private List<WebElement> tcod_reviewcart_SOO_child2_itemQuantity;
	
	@FindBy(locator = "dw.studentflyerorder.teacher.reviewcart.SOO.child2.subTotal")
	private WebElement tcod_reviewcart_SOO_child2_subTotal;
	
	@FindBy(locator = "dw.studentflyerorder.teacher.reviewcart.SOO.child2.GST.tax")
	private WebElement tcod_reviewcart_SOO_child2_GST_tax;
	
	@FindBy(locator = "dw.studentflyerorder.teacher.reviewcart.SOO.child2.PST.tax")
	private WebElement tcod_reviewcart_SOO_child2_PST_tax;
	
	@FindBy(locator = "dw.studentflyerorder.teacher.reviewcart.SOO.child2.overallTotal")
	private WebElement tcod_reviewcart_SOO_child2_overallTotal;
	
	@FindBy(locator = "dw.studentflyerorder.teacher.reviewcart.SOO.child2.dateplaced")
	private WebElement tcod_reviewcart_SOO_child2_datePlaced;
	
	@FindBy(locator = "dw.studentflyerorder.teacher.reviewcart.SOO.child2.QST.tax")
	private WebElement tcod_reviewcart_SOO_child2_QST_tax;
	
	@FindBy(locator = "dw.studentflyerorder.teacher.reviewcart.SOO.child2.HST.tax")
	private WebElement tcod_reviewcart_SOO_child2_HST_tax;
	
	@FindBy(locator = "dw.studentflyerorder.teacher.reviewcart.SOO.noordermsg")
	private WebElement tcod_reviewcart_SOO_noOrderMsg;
	
	@FindBy(locator = "dw.studentflyerorder.teacher.reviewcart.SOO.culmulativeTotal")
	private WebElement tcod_reviewcart_SOO_cumulativeTotal;
	
	@FindBy(locator = "dw.studentflyerorder.teacher.reviewcart.SOO.children.orders.list")
	private List<WebElement> tcod_reviewcart_SOO_children_order_list;
	
	public List<WebElement> getSOOChildrenOrderList(){
		return tcod_reviewcart_SOO_children_order_list;
	}
	
	public WebElement getReviewCartSOOChildQSTTax(int childNumber){
		int childrenOrderListNum = getSOOChildrenOrderList().size();
		
		if(childrenOrderListNum == 1)
			return tcod_reviewcart_SOO_child1_QST_tax;
		else{
			switch(childNumber){
				case 2:
					return tcod_reviewcart_SOO_child2_QST_tax;
				default:
					return tcod_reviewcart_SOO_child1_QST_tax;
			}
		}
		
	}
	
	public WebElement getReviewCartSOOChildHSTTax(int childNumber){
		int childrenOrderListNum = getSOOChildrenOrderList().size();
		
		if(childrenOrderListNum == 1)
			return tcod_reviewcart_SOO_child1_HST_tax;
		else{
			switch(childNumber){
				case 2:
					return tcod_reviewcart_SOO_child2_HST_tax;
				default:
					return tcod_reviewcart_SOO_child1_HST_tax;
			}
		}
	}
	
	public WebElement getReviewCartSOONoOrderMsg(){
		return tcod_reviewcart_SOO_noOrderMsg;
	}
	
	public WebElement getReviewCartSOODatePlaced(int childNumber){
		int childrenOrderListNum = getSOOChildrenOrderList().size();
		
		if(childrenOrderListNum == 1)
			return tcod_reviewcart_SOO_child1_datePlaced;
		else{
			switch(childNumber){
				case 2:
					return tcod_reviewcart_SOO_child2_datePlaced;
				default:
					return tcod_reviewcart_SOO_child1_datePlaced;
			}
		}
	}
	
	public WebElement getReviewCartSOOCumulativeTotal(){
		return tcod_reviewcart_SOO_cumulativeTotal;
	}
	
	public WebElement getReviewCartSOOChildOverTotal(int childNumber){
		int childrenOrderListNum = getSOOChildrenOrderList().size();
		
		if(childrenOrderListNum == 1)
			return tcod_reviewcart_SOO_child1_overallTotal;
		else{
			switch(childNumber){
				case 2:
					return tcod_reviewcart_SOO_child2_overallTotal;
				default:
					return tcod_reviewcart_SOO_child1_overallTotal;
			}
		}
	}
	
	public WebElement getReviewCartSOOChildPSTTax(int childNumber){
		int childrenOrderListNum = getSOOChildrenOrderList().size();
		
		if(childrenOrderListNum == 1)
			return tcod_reviewcart_SOO_child1_PST_tax;
		else{
			switch(childNumber){
				case 2:
					return tcod_reviewcart_SOO_child2_PST_tax;
				default:
					return tcod_reviewcart_SOO_child1_PST_tax;
			}
		}
	}
	
	public WebElement getReviewCartSOOChildGSTTax(int childNumber){
		int childrenOrderListNum = getSOOChildrenOrderList().size();
		
		if(childrenOrderListNum == 1)
			return tcod_reviewcart_SOO_child1_GST_tax;
		else{
			switch(childNumber){
				case 2:
					return tcod_reviewcart_SOO_child2_GST_tax;
				default:
					return tcod_reviewcart_SOO_child1_GST_tax;
			}
		}
	}
	
	public WebElement getReviewCartSOOChildsubTotal(int childNumber){
		int childrenOrderListNum = getSOOChildrenOrderList().size();
		
		if(childrenOrderListNum == 1)
			return tcod_reviewcart_SOO_child1_subTotal;
		else{
			switch(childNumber){
				case 2:
					return tcod_reviewcart_SOO_child2_subTotal;
				default:
					return tcod_reviewcart_SOO_child1_subTotal;
			}
		}
	}
	
	public WebElement getReviewCartSOOChildName(int childNumber){
		int childrenOrderListNum = getSOOChildrenOrderList().size();
		
		if(childrenOrderListNum == 1)
			return tcod_reviewcart_SOO_child1_name;
		else{
			switch(childNumber){
				case 2:
					return tcod_reviewcart_SOO_child2_name;
				default:
					return tcod_reviewcart_SOO_child1_name;
			}
		}
	}
	
	public List<WebElement> getReviewCartSOOChildItemNumber(int childNumber){
		int childrenOrderListNum = getSOOChildrenOrderList().size();
		
		if(childrenOrderListNum == 1)
			return tcod_reviewcart_SOO_child1_itemNumber;
		else{
			switch(childNumber){
				case 2:
					return tcod_reviewcart_SOO_child2_itemNumber;
				default:
					return tcod_reviewcart_SOO_child1_itemNumber;
			}
		}
	}
	
	public List<WebElement> getReviewCartSOOChildItemTitle(int childNumber){
		int childrenOrderListNum = getSOOChildrenOrderList().size();
		
		if(childrenOrderListNum == 1)
			return tcod_reviewcart_SOO_child1_itemTitle;
		else{
			switch(childNumber){
				case 2:
					return tcod_reviewcart_SOO_child2_itemTitle;
				default:
					return tcod_reviewcart_SOO_child1_itemTitle;
			}
		}
	}
	
	public List<WebElement> getReviewCartSOOChildItemFlyer(int childNumber){
		int childrenOrderListNum = getSOOChildrenOrderList().size();
		
		if(childrenOrderListNum == 1)
			return tcod_reviewcart_SOO_child1_itemFlyer;
		else{
			switch(childNumber){
				case 2:
					return tcod_reviewcart_SOO_child2_itemFlyer;
				default:
					return tcod_reviewcart_SOO_child1_itemFlyer;
			}
		}
	}
	
	public List<WebElement> getReviewCartSOOChildItemPrice(int childNumber){
		int childrenOrderListNum = getSOOChildrenOrderList().size();
		
		if(childrenOrderListNum == 1)
			return tcod_reviewcart_SOO_child1_itemPrice;
		else{
			switch(childNumber){
				case 2:
					return tcod_reviewcart_SOO_child2_itemPrice;
				default:
					return tcod_reviewcart_SOO_child1_itemPrice;
			}
		}
	}
	
	public List<WebElement> getReviewCartSOOChildItemQuantity(int childNumber){
		int childrenOrderListNum = getSOOChildrenOrderList().size();
		
		if(childrenOrderListNum == 1)
			return tcod_reviewcart_SOO_child1_itemQuantity;
		else{
			switch(childNumber){
				case 2:
					return tcod_reviewcart_SOO_child2_itemQuantity;
				default:
					return tcod_reviewcart_SOO_child1_itemQuantity;
			}
		}
	}
	
	public WebElement getReviewCartSOOSection(){
		return tcod_reviewcart_SOO_section;
	}
	
	public WebElement getReviewCartSOOMinusIcon(){
		return tcod_reviewcart_SOO_minus_icon;
	}
	
	public WebElement getReviewCartSOOPlusIcon(){
		return tcod_reviewcart_SOO_plus_icon;
	}
	
	public double subTotal_SOO(int numItems, List<WebElement> itemPriceLst, List<WebElement> itemQtyLst){
		double subTotal_sum_TCOD = 0.0;
		
		for(int i = 0; i < numItems; i++){
			
			double itemPrice = (itemPriceLst.get(i).getText().equals("FREE") ? 0.0 : SCHUtils.convertDollarsToDouble(itemPriceLst.get(i), 1));
			double itemQty = SCHUtils.convertDollarsToDouble(itemQtyLst.get(i), 0);
			
			subTotal_sum_TCOD += itemPrice * itemQty;
		}
		
		return subTotal_sum_TCOD;
	}
	
	public double GST_SOO(int numItems, List<WebElement> itemPriceLst, List<WebElement> itemQtyLst){
		double GST_tax_perc = Double.parseDouble(TestBaseProvider.getTestBase().getTestData().getString("stateGST"));
		double GSTTotal_TCOD = 0.0;
		
		for(int i = 0; i < numItems; i++){
			double itemPrice = (itemPriceLst.get(i).getText().equals("FREE") ? 0.0 : SCHUtils.convertDollarsToDouble(itemPriceLst.get(i), 1));
			double itemQty = SCHUtils.convertDollarsToDouble(itemQtyLst.get(i), 0);

			GSTTotal_TCOD += itemPrice * itemQty * GST_tax_perc;
		}
		
		return GSTTotal_TCOD;
	}
	
	public double PST_SOO(int numItems, List<WebElement> itemPriceLst, List<WebElement> itemQtyLst){
		double PST_tax_perc = Double.parseDouble(TestBaseProvider.getTestBase().getTestData().getString("statePST"));
		double PSTTotal_TCOD = 0.0;
		
		for(int i = 0; i < numItems; i++){
			double itemPrice = (itemPriceLst.get(i).getText().equals("FREE") ? 0.0 : SCHUtils.convertDollarsToDouble(itemPriceLst.get(i), 1));
			double itemQty = SCHUtils.convertDollarsToDouble(itemQtyLst.get(i), 0);
			
			PSTTotal_TCOD += itemPrice * itemQty * PST_tax_perc;
		}
		
		return PSTTotal_TCOD;
	}
	
	public double HST_SOO(int numItems, List<WebElement> itemPriceLst, List<WebElement> itemQtyLst){
		double HST_tax_perc = Double.parseDouble(TestBaseProvider.getTestBase().getTestData().getString("stateHST"));
		double HSTTotal_TCOD = 0.0;
		
		for(int i = 0; i < numItems; i++){
			double itemPrice = (itemPriceLst.get(i).getText().equals("FREE") ? 0.0 : SCHUtils.convertDollarsToDouble(itemPriceLst.get(i), 1));
			double itemQty = SCHUtils.convertDollarsToDouble(itemQtyLst.get(i), 0);
			
			HSTTotal_TCOD += itemPrice * itemQty * HST_tax_perc;
		}
		
		return HSTTotal_TCOD;
	}
	
	public double QST_SOO(int numItems, List<WebElement> itemPriceLst, List<WebElement> itemQtyLst){
		double QST_tax_perc = Double.parseDouble(TestBaseProvider.getTestBase().getTestData().getString("stateQST"));
		double QSTTotal_TCOD = 0.0;
		
		for(int i = 0; i < numItems; i++){
			double itemPrice = (itemPriceLst.get(i).getText().equals("FREE") ? 0.0 : SCHUtils.convertDollarsToDouble(itemPriceLst.get(i), 1));
			double itemQty = SCHUtils.convertDollarsToDouble(itemQtyLst.get(i), 0);
			
			QSTTotal_TCOD += itemPrice * itemQty * QST_tax_perc;
		}
		
		return QSTTotal_TCOD;
	}
	
	@Override
	public void tcod_select_minus_sign_SOO_section_reviewCart(){
		getReviewCartSOOMinusIcon().click();
	}
	
	@Override
	public void tcod_SOO_section_not_displayed_reviewCart(){
		String act_display_style = getReviewCartSOOSection().getAttribute("style").replaceAll(";", "");
		String exp_display_style = "display: none";
				
		Assert.assertEquals(act_display_style, exp_display_style, "The SOO section is still displaying");
	}
	
	
	@Override
	public void tcod_minus_sign_changed_to_plus_sign_SOO_section_reviewCart(){
		try{
			getReviewCartSOOPlusIcon().isDisplayed();
			System.out.println("+ sign is showing on the SOO blue header");
		} catch (Exception e){
			Assert.fail("+ sign is not showing on the SOO blue header");
		}
	}
	
	@Override
	public void tcod_select_plus_sign_SOO_section_reviewCart(){
		getReviewCartSOOPlusIcon().click();
	}
	
	@Override
	public void tcod_SOO_section_displayed_reviewCart(){
		String act_display_style = getReviewCartSOOSection().getAttribute("style").replaceAll(";", "");
		String exp_display_style = "display: block";
				
		Assert.assertEquals(act_display_style, exp_display_style, "The SOO section is not displaying");
	}

	@Override
	public void tcod_plus_sign_changed_to_minus_sign_SOO_section_reviewCart(){
		try{
			getReviewCartSOOMinusIcon().isDisplayed();
			System.out.println("- sign is showing on the SOO blue header");
		} catch (Exception e){
			Assert.fail("- sign is not showing on the SOO blue header");
		}
	}
	
	@Override
	public void tcod_verify_itemNumber_reviewCart_SOO(int childNumber){
		
		for (int i = 0; i < getReviewCartSOOChildItemNumber(childNumber).size(); i++){
			
			String act_result = getReviewCartSOOChildItemNumber(childNumber).get(i).getText().trim();
			String exp_result = TestBaseProvider.getTestBase().getTestData().getString("itemNumber" + (i + 1) + "child" + childNumber);
			
			Assert.assertEquals(act_result, exp_result, "The item" + (i + 1) + " number for child" + childNumber + " is not correct");
			System.out.println("The itemNumber for child" + childNumber + " is correct :" + act_result);
		}
		
	}

	@Override
	public void tcod_verify_itemTitle_reviewCart_SOO(int childNumber){
		
		for (int i = 0; i < getReviewCartSOOChildItemTitle(childNumber).size(); i++){
			
			String act_result = getReviewCartSOOChildItemTitle(childNumber).get(i).getText().trim();
			String exp_result = TestBaseProvider.getTestBase().getTestData().getString("itemTitle" + (i + 1) + "child" + childNumber);
			
			Assert.assertEquals(act_result, exp_result, "The item" + (i + 1) + " title for child" + childNumber + " is not correct");
			System.out.println("The itemTitle for child" + childNumber + " is correct :" + act_result);
		}
		
	}

	@Override
	public void tcod_verify_itemFlyer_reviewCart_SOO(int childNumber){
		
		for (int i = 0; i < getReviewCartSOOChildItemFlyer(childNumber).size(); i++){
			
			String act_result = getReviewCartSOOChildItemFlyer(childNumber).get(i).getText().trim();
			String exp_result = TestBaseProvider.getTestBase().getTestData().getString("itemFlyer" + (i + 1) + "child" + childNumber);
			
			Assert.assertEquals(act_result, exp_result, "The item" + (i + 1) + " flyer for child" + childNumber + " is not correct");
			System.out.println("The itemFlyer for child" + childNumber + " is correct :" + act_result);
		}
		
	}

	@Override
	public void tcod_verify_itemPrice_reviewCart_SOO(int childNumber){
		
		for (int i = 0; i < getReviewCartSOOChildItemPrice(childNumber).size(); i++){
			
			String act_result = getReviewCartSOOChildItemPrice(childNumber).get(i).getText().trim();
				if(!act_result.equals("FREE")){act_result = act_result.substring(1);}
			
			String exp_result = TestBaseProvider.getTestBase().getTestData().getString("itemPrice" + (i + 1) + "child" + childNumber);
			
			Assert.assertEquals(act_result, exp_result, "The item" + (i + 1) + " price for child" + childNumber + " is not correct");
			System.out.println("The itemPrice for child" + childNumber + " is correct :" + act_result);
		}
		
	}

	@Override
	public void tcod_verify_itemQuantity_reviewCart_SOO(int childNumber){
		
		for (int i = 0; i < getReviewCartSOOChildItemQuantity(childNumber).size(); i++){
			
			String act_result = getReviewCartSOOChildItemQuantity(childNumber).get(i).getText().trim();
			String exp_result = TestBaseProvider.getTestBase().getTestData().getString("itemQuantity" + (i + 1) + "child" + childNumber);
			
			Assert.assertEquals(act_result, exp_result, "The item" + (i + 1) + " quantity for child" + childNumber + " is not correct");
			System.out.println("The itemQuantity for child" + childNumber + " is correct :" + act_result);
		}

	}
	
	@Override
	public void tcod_verify_subTotal_reviewCart_SOO(int childNumber){
		String act_subTotal = getReviewCartSOOChildsubTotal(childNumber).getText().trim().substring(1);
		
		String exp_subTotal_TCOD = "";
		
		double subTotal_sum_TCOD = subTotal_SOO(getReviewCartSOOChildItemPrice(childNumber).size(), getReviewCartSOOChildItemPrice(childNumber), getReviewCartSOOChildItemQuantity(childNumber));
		
		DecimalFormat df = new DecimalFormat("##0.00");
		exp_subTotal_TCOD = df.format(subTotal_sum_TCOD);
		
		System.out.println("\n<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Actual SubTotal: $" + act_subTotal);
		System.out.println("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Expected SubTotal from the prices of each item on TCOD: $" + exp_subTotal_TCOD);
		
		Assert.assertEquals(act_subTotal, exp_subTotal_TCOD, "The subtotal on the SOO page on TCOD does not match total price amount for all the items for child" + childNumber);
		
	}
	
	@Override
	public void tcod_verify_GST_tax_total_reviewCart_SOO(int childNumber){
		double GSTTotal_TCOD = GST_SOO(getReviewCartSOOChildItemPrice(childNumber).size(), getReviewCartSOOChildItemPrice(childNumber), getReviewCartSOOChildItemQuantity(childNumber));
		
		String act_GST_tax_total = getReviewCartSOOChildGSTTax(childNumber).getText().trim().substring(1);
		
		DecimalFormat df = new DecimalFormat("##0.00");
		String exp_GST_tax_total = df.format(GSTTotal_TCOD);
		
		System.out.println("\n<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Actual GST Tax Total: $" + act_GST_tax_total);
		System.out.println("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Expected GST Tax Total: $" + exp_GST_tax_total);
		
		Assert.assertEquals(act_GST_tax_total, exp_GST_tax_total, "The GST Tax Total on the SOO page on TCOD does not match total GST tax amount for all the items for child" + childNumber);
	}
	
	@Override
	public void tcod_verify_PST_tax_total_reviewCart_SOO(int childNumber){
		double PSTTotal_TCOD = PST_SOO(getReviewCartSOOChildItemPrice(childNumber).size(), getReviewCartSOOChildItemPrice(childNumber), getReviewCartSOOChildItemQuantity(childNumber));
		
		String act_PST_tax_total = getReviewCartSOOChildPSTTax(childNumber).getText().trim().substring(1);
		
		DecimalFormat df = new DecimalFormat("##0.00");
		String exp_PST_tax_total = df.format(PSTTotal_TCOD);
		
		System.out.println("\n<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Actual PST Tax Total: $" + act_PST_tax_total);
		System.out.println("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Expected PST Tax Total: $" + exp_PST_tax_total);
		
		Assert.assertEquals(act_PST_tax_total, exp_PST_tax_total, "The PST Tax Total on the SOO page on TCOD does not match total PST tax amount for all the items for child" + childNumber);
	}

	@Override
	public void tcod_verify_overall_total_GST_PST_reviewCart_SOO(int childNumber){
		double PSTTotal_TCOD = PST_SOO(getReviewCartSOOChildItemPrice(childNumber).size(), getReviewCartSOOChildItemPrice(childNumber), getReviewCartSOOChildItemQuantity(childNumber));
		double GSTTotal_TCOD = GST_SOO(getReviewCartSOOChildItemPrice(childNumber).size(), getReviewCartSOOChildItemPrice(childNumber), getReviewCartSOOChildItemQuantity(childNumber));
		double subTotal_sum_TCOD = subTotal_SOO(getReviewCartSOOChildItemPrice(childNumber).size(), getReviewCartSOOChildItemPrice(childNumber), getReviewCartSOOChildItemQuantity(childNumber));
		
		double overallTotal_TCOD = PSTTotal_TCOD + GSTTotal_TCOD + subTotal_sum_TCOD;
		
		String act_overall_total = getReviewCartSOOChildOverTotal(childNumber).getText().trim().substring(1);
		
		DecimalFormat df = new DecimalFormat("##0.00");
		String exp_overall_total = df.format(overallTotal_TCOD);
		
		System.out.println("\n<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Actual Overall Total: $" + act_overall_total);
		System.out.println("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Expected Overall Total: $" + exp_overall_total);
		
		Assert.assertEquals(act_overall_total, exp_overall_total, "The Overall Total on the SOO page on TCOD does not match Overall total for all the items for child" + childNumber);
		
		TestBaseProvider.getTestBase().getContext().setProperty("testexecution.cumulative_SOO_total", (
				TestBaseProvider.getTestBase().getContext().getDouble("testexecution.cumulative_SOO_total") + overallTotal_TCOD));
		
	}

	@Override
	public void tcod_verify_cumulative_total_reviewCart_SOO(){
		String act_cumulative_total = getReviewCartSOOCumulativeTotal().getText().trim().substring(1);
		
		DecimalFormat df = new DecimalFormat("##0.00");
		String exp_cumulative_total = df.format(TestBaseProvider.getTestBase().getContext().getDouble("testexecution.cumulative_SOO_total"));
		
		System.out.println("\n<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Actual Cumulative SOO Total: $" + act_cumulative_total);
		System.out.println("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Expected Cumulative SOO Total: $" + exp_cumulative_total);
		
		Assert.assertEquals(act_cumulative_total, exp_cumulative_total, "The Cumulative Total on the SOO page is not correct");
	}

	@Override
	public void tcod_verify_placed_date_reviewCart_SOO(int childNumber){
		String act_date_placed = getReviewCartSOODatePlaced(childNumber).getText();
		String exp_date_placed = TestBaseProvider.getTestBase().getContext().getProperty("testexecution.reviewcart.SOO.child1.dateplaced").toString();
		
		Assert.assertEquals(act_date_placed, exp_date_placed, "The date placed is not correct for child" + childNumber);
	}

	@Override
	public void tcod_verify_no_order_msg_reviewCart_SOO(int childNumber){
		String act_msg = getReviewCartSOONoOrderMsg().getText();
		String exp_msg = ConstantUtils.NOORDERMSG;
		
		Assert.assertEquals(act_msg, exp_msg, "The message displayed is not correct for child" + childNumber);
	}
	
	@Override
	public void tcod_verify_no_order_msg_reviewCart_SOO(){
		String act_msg = getReviewCartSOONoOrderMsg().getText();
		String exp_msg = ConstantUtils.NOORDERMSG;
		
		Assert.assertEquals(act_msg, exp_msg, "The message displayed is not correct");
	}
	
	@Override
	public void tcod_verify_HST_tax_total_reviewCart_SOO(int childNumber){
		double HSTTotal_TCOD = HST_SOO(getReviewCartSOOChildItemPrice(childNumber).size(), getReviewCartSOOChildItemPrice(childNumber), getReviewCartSOOChildItemQuantity(childNumber));
		
		String act_HST_tax_total = getReviewCartSOOChildHSTTax(childNumber).getText().trim().substring(1);
		
		DecimalFormat df = new DecimalFormat("##0.00");
		String exp_HST_tax_total = df.format(HSTTotal_TCOD);
		
		System.out.println("\n<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Actual HST Tax Total: $" + act_HST_tax_total);
		System.out.println("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Expected HST Tax Total: $" + exp_HST_tax_total);
		
		Assert.assertEquals(act_HST_tax_total, exp_HST_tax_total, "The HST Tax Total on the SOO page on TCOD does not match total HST tax amount for all the items for child" + childNumber);
	}

	@Override
	public void tcod_verify_overall_total_HST_reviewCart_SOO(int childNumber){
		double HSTTotal_TCOD = HST_SOO(getReviewCartSOOChildItemPrice(childNumber).size(), getReviewCartSOOChildItemPrice(childNumber), getReviewCartSOOChildItemQuantity(childNumber));
		double subTotal_sum_TCOD = subTotal_SOO(getReviewCartSOOChildItemPrice(childNumber).size(), getReviewCartSOOChildItemPrice(childNumber), getReviewCartSOOChildItemQuantity(childNumber));
		
		double overallTotal_TCOD = HSTTotal_TCOD + subTotal_sum_TCOD;
		
		String act_overall_total = getReviewCartSOOChildOverTotal(childNumber).getText().trim().substring(1);
		
		DecimalFormat df = new DecimalFormat("##0.00");
		String exp_overall_total = df.format(overallTotal_TCOD);
		
		System.out.println("\n<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Actual Overall Total: $" + act_overall_total);
		System.out.println("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Expected Overall Total: $" + exp_overall_total);
		
		Assert.assertEquals(act_overall_total, exp_overall_total, "The Overall Total on the SOO page on TCOD does not match Overall total for all the items for child" + childNumber);
		
		TestBaseProvider.getTestBase().getContext().setProperty("testexecution.cumulative_SOO_total", (
				TestBaseProvider.getTestBase().getContext().getDouble("testexecution.cumulative_SOO_total") + overallTotal_TCOD));
	}
	
	@Override
	public void tcod_verify_overall_total_GST_reviewCart_SOO(int childNumber){
		double GSTTotal_TCOD = GST_SOO(getReviewCartSOOChildItemPrice(childNumber).size(), getReviewCartSOOChildItemPrice(childNumber), getReviewCartSOOChildItemQuantity(childNumber));
		double subTotal_sum_TCOD = subTotal_SOO(getReviewCartSOOChildItemPrice(childNumber).size(), getReviewCartSOOChildItemPrice(childNumber), getReviewCartSOOChildItemQuantity(childNumber));
		
		double overallTotal_TCOD = GSTTotal_TCOD + subTotal_sum_TCOD;
		
		String act_overall_total = getReviewCartSOOChildOverTotal(childNumber).getText().trim().substring(1);
		
		DecimalFormat df = new DecimalFormat("##0.00");
		String exp_overall_total = df.format(overallTotal_TCOD);
		
		System.out.println("\n<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Actual Overall Total: $" + act_overall_total);
		System.out.println("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Expected Overall Total: $" + exp_overall_total);
		
		Assert.assertEquals(act_overall_total, exp_overall_total, "The Overall Total on the SOO page on TCOD does not match Overall total for all the items for child" + childNumber);
		
		TestBaseProvider.getTestBase().getContext().setProperty("testexecution.cumulative_SOO_total", (
				TestBaseProvider.getTestBase().getContext().getDouble("testexecution.cumulative_SOO_total") + overallTotal_TCOD));
	}
	
	@Override
	public void tcod_verify_QST_tax_total_reviewCart_SOO(int childNumber){
		double QSTTotal_TCOD = QST_SOO(getReviewCartSOOChildItemPrice(childNumber).size(), getReviewCartSOOChildItemPrice(childNumber), getReviewCartSOOChildItemQuantity(childNumber));
		
		String act_QST_tax_total = getReviewCartSOOChildQSTTax(childNumber).getText().trim().substring(1);
		
		DecimalFormat df = new DecimalFormat("##0.00");
		String exp_QST_tax_total = df.format(QSTTotal_TCOD);
		
		System.out.println("\n<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Actual QST Tax Total: $" + act_QST_tax_total);
		System.out.println("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Expected QST Tax Total: $" + exp_QST_tax_total);
		
		Assert.assertEquals(act_QST_tax_total, exp_QST_tax_total, "The QST Tax Total on the SOO page on TCOD does not match total QST tax amount for all the items for child" + childNumber);
	}

	@Override
	public void tcod_verify_overall_total_GST_QST_reviewCart_SOO(int childNumber){
		double QSTTotal_TCOD = QST_SOO(getReviewCartSOOChildItemPrice(childNumber).size(), getReviewCartSOOChildItemPrice(childNumber), getReviewCartSOOChildItemQuantity(childNumber));
		double GSTTotal_TCOD = GST_SOO(getReviewCartSOOChildItemPrice(childNumber).size(), getReviewCartSOOChildItemPrice(childNumber), getReviewCartSOOChildItemQuantity(childNumber));
		double subTotal_sum_TCOD = subTotal_SOO(getReviewCartSOOChildItemPrice(childNumber).size(), getReviewCartSOOChildItemPrice(childNumber), getReviewCartSOOChildItemQuantity(childNumber));
		
		double overallTotal_TCOD = QSTTotal_TCOD + GSTTotal_TCOD + subTotal_sum_TCOD;
		
		String act_overall_total = getReviewCartSOOChildOverTotal(childNumber).getText().trim().substring(1);
		
		DecimalFormat df = new DecimalFormat("##0.00");
		String exp_overall_total = df.format(overallTotal_TCOD);
		
		System.out.println("\n<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Actual Overall Total: $" + act_overall_total);
		System.out.println("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Expected Overall Total: $" + exp_overall_total);
		
		Assert.assertEquals(act_overall_total, exp_overall_total, "The Overall Total on the SOO page on TCOD does not match Overall total for all the items for child" + childNumber);
		
		TestBaseProvider.getTestBase().getContext().setProperty("testexecution.cumulative_SOO_total", (
				TestBaseProvider.getTestBase().getContext().getDouble("testexecution.cumulative_SOO_total") + overallTotal_TCOD));
	}

	//######################################################## DWCAPCOD-103 ##################################################################
	
	@Override
	public void teacher_select_first_FreePick_item_from_the_list_SFO_section() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);
		first_item_in_FreePick_popup_item_list_SFO().click();
		PauseUtil.pause(1000);
		//btn_CONFIRM_APPLY_FreePick_popup_SFO().click();
	}
	
	@Override
	public void verify_SFO_section_Apply_Button_State_Disable() {

		if(appget_sfomodal_applybutton_state().isEnabled()){
		    Assert.fail("Apply button is Enabled by default");
		}
		else {
			System.out.println("Apply button is in disable state");
		}
	}
	
	
	@Override
	public void verify_ADD_button_state_disable_SFO_section() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);
		
		if (btn_ADD_SFO().isEnabled()) {
			Assert.fail("ADD button is enabled");
		} else {
			System.out.println("ADD button is disabled");
		}
	}
	
	@Override
	public void verify_Student_name_popup_displayed_SFO_section() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);
		
		try {
			popup_sfo_message_infopopup_studentName().isDisplayed();
			System.out.println("Message popup for Student name is displayed");
		} catch (Exception e) {
			Assert.fail("Message popup for Student name is not displayed");
		}
	}
	
	@Override
	public void verify_Student_name_popup_not_displayed_SFO_section() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);
		
		try {
			popup_sfo_message_infopopup_studentName().isDisplayed();
			Assert.fail("Message popup for Student name is displayed");
		} catch (Exception e) {
			System.out.println("Message popup for Student name is not displayed");
		}
	}

	@Override
	public void sfo_teacher_enters_studentName_itemNo() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);
		getsfo_page_studentname().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("sName1"));
		getsfo_page_itemNo().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("itemNo1"));

	}
	
	@Override
	public void verify_ADD_button_state_enable_SFO_section() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);
		
		if (btn_ADD_SFO().isEnabled()) {
			System.out.println("ADD button is enabled");
		} else {
			Assert.fail("ADD button is not enabled");
		}
	}
	
	@Override
	public void verifySOOTitle() {
		String title = getTabSOOlbl().getText();
		if(!title.contains(TestBaseProvider.getTestBase().getTestData().getString("SOOTitle"))){
			Assert.fail("SOO tile is not correct");
		}
	}
	
	@Override
	public void verifyYTOTitle() {
		String title = getTabYTO().getText();
		if(!title.contains(TestBaseProvider.getTestBase().getTestData().getString("YTOTitle"))){
			Assert.fail("YTO tile is not correct");
		}
	}
	
	@Override
	public void verifySFOTitle() {
		String title = getTabSFO().getText();
		if(!title.contains(TestBaseProvider.getTestBase().getTestData().getString("SFOTitle"))){
			Assert.fail("SFO tile is not correct");
		}
	}
	
	@Override
	public void clickOnSOOFromHomePage() {
		PauseUtil.pause(2000);
		SCHUtils.waitForLoaderToDismiss();
		SCHUtils.WaitForAjax();
		SCHUtils.mouseHoverOnElement(loginPage.gethomepage_globalmenu_enterorders());
		PauseUtil.pause(1000);
		getlistteacherenterordersoo().click();
		PauseUtil.pause(2000);
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete();
	}
	
	@Override
	public void clickOnYTOFromHomePage() {
		PauseUtil.pause(2000);
		SCHUtils.waitForLoaderToDismiss();
		SCHUtils.WaitForAjax();
		SCHUtils.mouseHoverOnElement(loginPage.gethomepage_globalmenu_enterorders());
		PauseUtil.pause(1000);
		getlistteacherenterorderyto().click();
		PauseUtil.pause(2000);
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete();
	}
	
	@Override
	public void clickOnSFOFromHomePage() {
		PauseUtil.pause(2000);
		SCHUtils.waitForLoaderToDismiss();
		SCHUtils.WaitForAjax();
		SCHUtils.mouseHoverOnElement(loginPage.gethomepage_globalmenu_enterorders());
		PauseUtil.pause(1000);
		getlistteacherenterordersfo().click();
		PauseUtil.pause(2000);
		SCHUtils.waitForLoaderToDismiss();
		PauseUtil.waitForAjaxToComplete();
	}
	
	@Then("^error message is displayed for Item number filed$")
    public void error_message_is_displayed_for_item_number_filed() throws Throwable {
		String getfromappValue = get_sfo_invliadItemNO_error().getText();
		if (!getTestBase().getContext().getProperty(ConstantUtils.INVLAID_SFO_ITEM_ERROR).equals(getfromappValue)) {
			Assert.fail("Incorrect Item number Error Message is displayed");
		}
	}
	
	@Override
	public void verify_search_bar_displays_TCODHomepgae(){
		fld_Search_home().isDisplayed();
		System.out.println("Search bar is displayed");
	}
	
	@FindBy(locator = "dw.studentflyerorder.teacher.enterorders.SOO.page")
	private WebElement tcod_enterorders_SOO_page;
	
	@FindBy(locator = "dw.studentflyerorder.teacher.enterorders.SOO.hyperlink")
	private WebElement tcod_enterorders_SOO_hyperlink;
	
	public WebElement getTCODSOOpage(){
		return tcod_enterorders_SOO_page;
	}
	
	public WebElement getTCODSOOhyperlink(){
		return tcod_enterorders_SOO_hyperlink;
	}
	
	@Override
	public void clickSOOhyperlink(){
		PauseUtil.pause(4000);
		getTCODSOOhyperlink().click();
	}
	
	@Override
	public void CSR_verify_error_msg_diaplayed_for_Account_Number_fld_in_PaymentPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);
		
		try {
			Account_Number_error_invalid_PaymentPage().isDisplayed();
			System.out.println("Error message is displayed when CSR enters invalid AC num");
		} catch (Exception e) {
			Assert.fail("Error message is not displayed when CSR enters invalid AC num");
		}
	}
	
	@Override
	public void CSR_verify_error_msg_diaplayed_for_Board_School_Number_fld_in_PaymentPage() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		try {
			Board_School_Number_error_msg_PaymentPage().isDisplayed();
			System.out.println("Error message is displayed for the Board/School Number field");
		} catch (Exception e) {
			Assert.fail("Error message is not displayed for the Board/School Number field");
		}
	}
	
	@Override
	public void teacher_select_second_FreePick_item_from_the_list_SFO_section() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);
		second_item_in_FreePick_popup_item_list_SFO().click();
		PauseUtil.pause(1000);
	}

	@Override
	public void verifySOOpagedisplayed(){
		PauseUtil.pause(2000);
		try{
			getTCODSOOpage().isDisplayed();
			System.out.println("SOO page is displayed");
		}catch(Exception e){
			Assert.fail("SOO page is not displayed");
			e.printStackTrace();
		}
	}
	
	@Override
	public void verify_TCOD_Review_Cart_displays(){
		try {
			review_cart_page().isDisplayed();
			System.out.println("The review cart page is displayed");
		} catch (Exception e) {
			Assert.fail("The review cart page is not displayed");
		}
	}
	
	@Override
	public void verify_TCOD_SOO_section_displays(){
		try{
			getReviewCartSOOSection().isDisplayed();
			System.out.println("SOO section is displayed on Review Cart");
		} catch(Exception e){
			Assert.fail("SOO section is not displayed on Review Cart");
		}
	}
	
	@Override
	public void verify_error_msg_displayed_for_invalid_SFO_coupon_in_modal_window() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		try {
			appget_sfomodal_couponcode_errorMsg().isDisplayed();
			System.out.println("Error message is displayed for SFO coupon fld");
		} catch (Exception e) {
			Assert.fail("Error message is not displayed for SFO coupon fld");
		}
	}
	
	@Override
	public void CSR_verify_SOO_notification_not_displayed_ReviewCart_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		
		try {
			fld_SOO_notification_ReviewCart().isDisplayed();
			Assert.fail("SOO notification message is displayed in Review Cart page");
		} catch (Exception e) {
			System.out.println("SOO notification message is not displayed in Review Cart page");
		}
	}
	
	@Override
	public void CSR_verify_SOO_notification_displayed_ReviewCart_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		
		try {
			fld_SOO_notification_ReviewCart().isDisplayed();
			System.out.println("SOO notification message is displayed in Review Cart page");
			
		} catch (Exception e) {
			Assert.fail("SOO notification message is not displayed in Review Cart page");
		}
	}
	
	@Override
	public void CSR_verify_SOO_orders_chkbox_not_selected_ReviewCart_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		
		String act_val=chkBox_selection_status_SOO_items_ReviewCart().getAttribute("value");
		String exp_val="true";
		
		Assert.assertEquals(act_val, exp_val, "SOO orders check box is selected by default");
	}
	
	@Override
	public void CSR_verify_SOO_orders_chkbox_is_selected_ReviewCart_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		
		String act_val=chkBox_selection_status_SOO_items_ReviewCart().getAttribute("value");
		String exp_val="false";
		
		Assert.assertEquals(act_val, exp_val, "SOO orders check box is not selected");
	}
	
	@Override
	public void CSR_verify_SOO_items_list_not_displayed_ReviewCart_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		
		try {
			section_SOO_items_list_ReviewCart().isDisplayed();
			Assert.fail("SOO orders list is displayed in Review Cart page");
		} catch (Exception e) {
			System.out.println("SOO orders list is not displayed in Review Cart page");
		}
	}
	
	@Override
	public void CSR_verify_SOO_items_list_is_displayed_ReviewCart_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		
		try {
			section_SOO_items_list_ReviewCart().isDisplayed();
			System.out.println("SOO orders list is displayed in Review Cart page");
		} catch (Exception e) {
			Assert.fail("SOO orders list is not displayed in Review Cart page");
		}
	}
	
	@Override
	public void CSR_selects_SOO_Include_Orders_chkbox_ReviewCart_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		
		String act_val=chkBox_selection_status_SOO_items_ReviewCart().getAttribute("value");
		String exp_val="true";
		
		if (act_val.equalsIgnoreCase(exp_val)) {
			chkBox_SOO_items_ReviewCart().click();	
		} else {
			Assert.fail("SOO_Include_Orders_chkbox is already selected");
		}
	}
	
	@Override
	public void CSR_unselect_SOO_Include_Orders_chkbox_ReviewCart_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		
		String act_val=chkBox_selection_status_SOO_items_ReviewCart().getAttribute("value");
		String exp_val="false";
		
		if (act_val.equalsIgnoreCase(exp_val)) {
			chkBox_SOO_items_ReviewCart().click();
		} else {
			Assert.fail("SOO_Include_Orders_chkbox is already selected");
		}
	}

	public void placeItems_GlobalSearch(String numItems) {
		int numItemsVal = Integer.parseInt(numItems);
		
		PauseUtil.waitForAjaxToComplete(1000);
		TeachersHomePage tchhomepage = new TeachersHomePage();

		if (tchhomepage.chkTutorial_DontShowAgain_Link().size() != 0) {
			SCHUtils.clickUsingJavaScript(tchhomepage.getTutorial_DontShowAgain_Link());
			PauseUtil.pause(3000);
		}

		if (tchhomepage.chkBtnEnterOrderClosePopup().size() != 0) {
			SCHUtils.clickUsingJavaScript(tchhomepage.getBtnEnterOrderClosePopup());
			PauseUtil.pause(3000);
		}

		PauseUtil.pause(1500);
		for(int i = 1; i <= numItemsVal; i++){
			SCHUtils.isPresent(getteacherHomeSearchTextField());
			getteacherHomeSearchTextField().click();
			getteacherHomeSearchTextField().clear();
			System.out.println("<<<<<<<<<<<<<<<" + TestBaseProvider.getTestBase().getTestData().getString("itemNum"+i));
			getteacherHomeSearchTextField().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("itemNum"+i));
			getteacherHomeSearchBtn().click();
			// waitForPageToload();
			PauseUtil.waitForAjaxToComplete(2500);
			if (chkteacherHomeMiniCartItemSize().size() != 0) {
	
				SCHUtils.mouseHoverOnElement(getLstShopByCollectionItemList());
				SCHUtils.clickUsingJavaScript(getLstQuickViewBtn());
				// waitForPageToload();
				PauseUtil.waitForAjaxToComplete(2500);
			}
	
			getteacherSearchQuantityField().click();
			getteacherSearchQuantityField().clear();
			getteacherSearchQuantityField().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("itemQty"+i));
			getteacherSearchQuantityAddBtn().click();
			// waitForPageToload();
			PauseUtil.waitForAjaxToComplete(2500);
			getteacherSearchContinueShopping().click();
		}
	
	}
	
	public void placeItems_GlobalSearch_and_assign_to_child(String numItems, int childNumber) {
		int numItemsVal = Integer.parseInt(numItems);
		TeachersHomePage tchhomepage = new TeachersHomePage();
		PCOD_ReviewCartPage pcod_reviewpage = new PCOD_ReviewCartPage();
		PauseUtil.waitForAjaxToComplete(1000);
		
		if (tchhomepage.chkTutorial_DontShowAgain_Link().size() != 0) {
			SCHUtils.clickUsingJavaScript(tchhomepage.getTutorial_DontShowAgain_Link());
			PauseUtil.pause(3000);
		}

		if (tchhomepage.chkBtnEnterOrderClosePopup().size() != 0) {
			SCHUtils.clickUsingJavaScript(tchhomepage.getBtnEnterOrderClosePopup());
			PauseUtil.pause(3000);
		}

		PauseUtil.pause(1500);
		for(int i = 1; i <= numItemsVal; i++){
			SCHUtils.isPresent(getteacherHomeSearchTextField());
			getteacherHomeSearchTextField().click();
			getteacherHomeSearchTextField().clear();
			System.out.println("<<<<<<<<<<<<<<<" + TestBaseProvider.getTestBase().getTestData().getString("child" + childNumber + "itemNum"+i));
			getteacherHomeSearchTextField().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("child" + childNumber + "itemNum"+i));
			getteacherHomeSearchBtn().click();
			// waitForPageToload();
			PauseUtil.waitForAjaxToComplete(2500);
			if (chkteacherHomeMiniCartItemSize().size() != 0) {
	
				SCHUtils.mouseHoverOnElement(getLstShopByCollectionItemList());
				SCHUtils.clickUsingJavaScript(getLstQuickViewBtn());
				// waitForPageToload();
				PauseUtil.waitForAjaxToComplete(2500);
			}
	
			getteacherSearchQuantityField().click();
			getteacherSearchQuantityField().clear();
			getteacherSearchQuantityField().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("child" + childNumber  + "itemQty"+i));
			getteacherSearchQuantityAddBtn().click();
			// waitForPageToload();
			PauseUtil.waitForAjaxToComplete(2500);
			getteacherSearchCheckOut().click();
			
			PauseUtil.waitForAjaxToComplete(2500);
			pcod_reviewpage.pcod_assign_last_item_to_specific_child(childNumber);
		}
	}
	
	public void placeItem_GlobalSearch_and_assign_to_child(String itemNum, String itemQty, String childname) {
		
		TeachersHomePage tchhomepage = new TeachersHomePage();
		PCOD_ReviewCartPage pcod_reviewpage = new PCOD_ReviewCartPage();
		PauseUtil.waitForAjaxToComplete(1000);
		
		if (tchhomepage.chkTutorial_DontShowAgain_Link().size() != 0) {
			SCHUtils.clickUsingJavaScript(tchhomepage.getTutorial_DontShowAgain_Link());
			PauseUtil.pause(3000);
		}

		if (tchhomepage.chkBtnEnterOrderClosePopup().size() != 0) {
			SCHUtils.clickUsingJavaScript(tchhomepage.getBtnEnterOrderClosePopup());
			PauseUtil.pause(3000);
		}

		PauseUtil.pause(1500);
		
		SCHUtils.isPresent(getteacherHomeSearchTextField());
		getteacherHomeSearchTextField().click();
		getteacherHomeSearchTextField().clear();
		System.out.println("<<<<<<<<<<<<<<<" + itemNum);
		getteacherHomeSearchTextField().sendKeys(itemNum);
		getteacherHomeSearchBtn().click();
		// waitForPageToload();
		PauseUtil.waitForAjaxToComplete(2500);
		if (chkteacherHomeMiniCartItemSize().size() != 0) {

			SCHUtils.mouseHoverOnElement(getLstShopByCollectionItemList());
			SCHUtils.clickUsingJavaScript(getLstQuickViewBtn());
			// waitForPageToload();
			PauseUtil.waitForAjaxToComplete(2500);
		}

		getteacherSearchQuantityField().click();
		getteacherSearchQuantityField().clear();
		getteacherSearchQuantityField().sendKeys(itemQty);
		getteacherSearchQuantityAddBtn().click();
		// waitForPageToload();
		PauseUtil.waitForAjaxToComplete(2500);
		getteacherSearchCheckOut().click();
		
		PauseUtil.waitForAjaxToComplete(2500);
		pcod_reviewpage.pcod_assign_item_to_specific_child(childname);
	}
	
	@Override
	public void verify_items_count_in_minicart(){
		TeachersHomePage teacherhomepage = new TeachersHomePage();
		
		String exp_sooitems_totalcount1 = TestBaseProvider.getTestBase().getContext()
                .getProperty("testexecution.soototalitemcount").toString();
		int exp_sooitems_totalcount = Integer.parseInt(exp_sooitems_totalcount1);
		String exp_sfoitems_totalcount1 = TestBaseProvider.getTestBase().getContext()
                .getProperty("testexecution.sfototalitemcount").toString();
		int exp_sfoitems_totalcount = Integer.parseInt(exp_sfoitems_totalcount1);
		String exp_sfofreepickitems_totalcount1 = TestBaseProvider.getTestBase().getContext()
                .getProperty("testexecution.sfofreepicktotalitemcount").toString();
		int exp_sfofreepickitems_totalcount = Integer.parseInt(exp_sfofreepickitems_totalcount1);
		String exp_ytoitems_totalcount1 = TestBaseProvider.getTestBase().getContext()
                .getProperty("testexecution.ytototalitemcount").toString();
		int exp_ytoitems_totalcount = Integer.parseInt(exp_ytoitems_totalcount1);
		String exp_teitems_totalcount1 = TestBaseProvider.getTestBase().getContext()
                .getProperty("testexecution.tetotalitemcount").toString();
		int exp_teitems_totalcount = Integer.parseInt(exp_teitems_totalcount1);
		
		int exp_total_itemcount = (exp_sooitems_totalcount+exp_sfoitems_totalcount+exp_sfofreepickitems_totalcount+
				exp_ytoitems_totalcount+exp_teitems_totalcount)-exp_teitems_totalcount;
		String act_total_itemcount1 = teacherhomepage.btn_mini_reviewCart().getText().trim();
		int act_total_itemcount = Integer.parseInt(act_total_itemcount1);
		Assert.assertEquals(act_total_itemcount, exp_total_itemcount,"Items count in mini cart is not correct");
		
	}

	@Override
	public void teacher_verify_SFO_page_displayed() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		
		try {
			fld_Student_name_SFO().isDisplayed();
			System.out.println("SFO page is displayed");
		} catch (Exception e) {
			Assert.fail("SFO page is not displayed");
		}
	}
	
	@Override
	public void teacher_verify_SFO_FreePick_item_info() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		
		String act_text=fld_SFO_page_FreePick_item1().getText().trim();
		String exp_text=TestBaseProvider.getTestBase().getTestData().getString("couponsearch");
		
		Assert.assertEquals(act_text, exp_text, "Incorrect SFO FreePick item info displayed in SFO page");
	}
	
	@Override
	public void teacher_clicks_on_HOME_button() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		
		SCHUtils.clickUsingJavaScript(btn_HOME());
	}
	
	@Override
	public void update_YTO_item_Qty_ReviewCart_page(String updated_itemQty) {
		PauseUtil.waitForAjaxToComplete(2000);
		PauseUtil.pause(2000);
		
		fld_Qty_YTO_item1_ReviewCart_page().click();
		fld_Qty_YTO_item1_ReviewCart_page().sendKeys(updated_itemQty);
		fld_Qty_YTO_item1_ReviewCart_page().sendKeys(Keys.TAB);
		PauseUtil.waitForAjaxToComplete(2000);
		PauseUtil.pause(2000);
	}
	
	@Override
	public void teacher_adds_YTO_item_With_ItemNumber() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(4000);
		fld_Student_Item_SFO().click();
		fld_Student_Item_SFO().clear();
		fld_Student_Item_SFO().sendKeys(ConstantUtils.YTO_item1);
		PauseUtil.pause(2000);
		btn_ADD_SFO().click();
		PauseUtil.pause(4000);
		WaitUtils.waitForDisplayed(fld_Student_Item_QTY());
		fld_Student_Item_QTY().click();
		fld_Student_Item_QTY().clear();
		fld_Student_Item_QTY().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("itemQty"));
	}
	
	public void validate_teitem_errormessage_insfopage() {
		String appData = get_sfo_invliadItemNO_error().getText();
		if (!appData.equals(ConstantUtils.INVLAIDTEITEMERRMSGINSFOPAGE)) {
			Assert.fail("TE items are accepting in SFO page");
		}
	}

	public void pcod_search_item_on_Homepage() {
		SCHUtils.isPresent(getteacherHomeSearchTextField());
		getteacherHomeSearchTextField().click();
		getteacherHomeSearchTextField().clear();
		
		System.out.println("<<<<<<<<<<<<<<<" + TestBaseProvider.getTestBase().getTestData().getString("searchTerm"));
		getteacherHomeSearchTextField().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("searchTerm"));
		
		getteacherHomeSearchBtn().click();
	}
	
	
	@Override
	public void teacher_navigates_to_paymentpage_from_reviewcartpage() {
		CartPage cartpage = new CartPage();
		TeachersHomePage teacherhomepage = new TeachersHomePage();
		ICheckoutPage_2 checkoutPage = getFactory().getICheckoutPage_2();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		//if it is in home page, it will click on review cart icon
		if(loginPage.sizeEnter_ClassRoom_Order().size()!=0){
			teacherhomepage.btn_mini_reviewCart().click();
			PauseUtil.waitForAjaxToComplete(2500);
			PauseUtil.pause(2500);
		}
		if(cartpage.sizebtnReviewCart().size()!=0){
			cartpage.btnReviewCart().click();
			PauseUtil.pause(2500);
			}
		cartpage.store_all_information_from_reviewcart_page("SOO");
		cartpage.store_all_information_from_reviewcart_page("SFO");
		cartpage.store_all_information_from_reviewcart_page("YTO");
		cartpage.store_all_information_from_reviewcart_page("TE");
		
		if(size_btn_Continue_checkout_ReviewCart_page().size()!=0){
		btn_Continue_checkout_ReviewCart_page().click();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		btn_Proceed_to_checkout_Promotion_popup().click();
		PauseUtil.pause(2000);
		}
		else{
		cartpage.getLnkRedeemCoupons().click();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		}
        checkoutPage.teacher_clicks_on_ContinueCheckout_Rewards_page();
	}

    public List <WebElement> geticonDeletesfocoupon() {
        return iconDeletesfocoupon;
    }

    public WebElement getbuttonyesconfirmDelete() {
        return buttonyesconfirmDelete;
    }

    public List <WebElement> getDeleteinsfoSection() {
        return sfosectiondeleteicon;
    }

    public List <WebElement> getReviewCartdeleteIcons() {
        return alldeleteiconsreviewcartExcepctSOO;
    }


    @FindBy(locator = "dw.sfopage.deletecoupon.icon")
    private List<WebElement> iconDeletesfocoupon;

    @FindBy(locator = "dw.sfocoupondelete.yes")
    private WebElement buttonyesconfirmDelete;

    @FindBy(locator="dw.sfopage.emptyitems")
    private List<WebElement> sfosectiondeleteicon;

    @FindBy(locator="dw.recviewcart.iconemptyitems.exceptSOO")
    private List<WebElement> alldeleteiconsreviewcartExcepctSOO;
    
    @Override
	public void teacher_adds_single_TE_item_to_cart_by_Search() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);

		fld_Search_home().click();
		fld_Search_home().clear();
		fld_Search_home().sendKeys(ConstantUtils.TE_item1);
		PauseUtil.pause(1000);
		button_search_homePage().click();
		PauseUtil.waitForAjaxToComplete(2500);
		btn_ADD_TO_CART_search_results_page().click();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		btn_Continue_Shopping_in_popup_search_results_page().click();
	}
    
	public void CSR_enters_the_Ac_Num2_and_select_in_Search_Results() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(3000);

		fld_Ac_Num_LocateAccountPage().click();
		fld_Ac_Num_LocateAccountPage().clear();
		PauseUtil.pause(1000);
		fld_Ac_Num_LocateAccountPage().sendKeys(TestBaseProvider.getTestBase().getTestData().getString("AcNum2"));
		// fld_Ac_Num_LocateAccountPage().sendKeys("5539377");
		PauseUtil.pause(1000);
		fld_Ac_Num_LocateAccountPage().sendKeys(Keys.TAB);
		hdr_LocateCustomerAccountBy_LocateAccountPage().click();
		PauseUtil.pause(3000);

		WebDriver driver = TestBaseProvider.getTestBase().getDriver();
		WebDriverWait wait = new WebDriverWait(driver, 60);
		WebElement element1 = wait.until(ExpectedConditions.elementToBeClickable(Btn_Search_LocateAccountPage()));
		element1.click();

		// Btn_Search_LocateAccountPage().click();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		fld_Teacher_Name_in_SearchResults().click();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		if (list_popUp_btn_Close_Introduction_To_CSR().size() != 0) {
			popUp_btn_Close_Introduction_To_CSR().click();
			System.out.println("Introduction to CSR popUp is displayed and clicked on close button");
		} else {
			System.out.println("Introduction to CSR popUp is not displayed");
		}

	}

	@Override
	public void CSR_unchecks_SOO_order_section_Review_Cart() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		
		boolean isSOOSectionSelected = chkBox_SOO_items_ReviewCart().isSelected();
		
		if (!isSOOSectionSelected) {
			System.out.println("The SOO orders are excluded since it is not selected.");
		} else {
			System.out.println("The SOO orders are included in order. deselecting SOO section...");
			chkBox_SOO_items_ReviewCart().click();
		}
		
	}
	
	@Override
	public void csr_unselect_soo_includeorders_chkbox_reviewcart_page() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		
		boolean act_val=chkBox_selection_status_SOO_items_ReviewCart().isSelected();
		
		if (act_val==true) {
			chkBox_SOO_items_ReviewCart().click();
			PauseUtil.pause(2500);
		} else {
			System.out.println("SOO_Include_Orders_chkbox is already unselected");
		}
	}
	
	@Override
	public void parenet_delete_all_items_in_ReviewCart() {
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1500);
		while (deleteitemreviewcartlist().size()>0) {
			PauseUtil.pause(2000);

			System.out.println("delete list size is : "+deleteitemreviewcartlist().size());

			WaitUtils.waitForDisplayed(delete_item1_reviewcart());
			delete_item1_reviewcart().click();
			WaitUtils.waitForDisplayed(YES_to_delete_item1_reviewcart());
			YES_to_delete_item1_reviewcart().click();

			PauseUtil.waitForAjaxToComplete(2500);
			PauseUtil.pause(2000);

			try {
				delete_item1_reviewcart().isDisplayed();
			} catch (Exception e) {
				System.out.println("################Review Cart list is empty");
				icon_HOME_Parent_site().click();
				PauseUtil.waitForAjaxToComplete(2500);
				PauseUtil.pause(1000);
				break;
			}
		} 
	}
	
	public String delete_US_or_Canada_popdollar_for_the_value(String val) {
		String val1 = val.substring(0, 2);
		String val2 = val.substring(val.length() - 2);

		if (val1.equals("-$")) {
			val = val.substring(2).trim();
		} else if (val1.equals("-") && val2.equals("c$")) {
			val = val.substring(1).trim();
			val = val.substring(0, val.length() - 2).trim();
		} else {
			Assert.fail("Value doesn't have any price tag symbol");
		}
		return val;

	}

	@Override
	public void applySFOFreePickCoupon() {
		// Clicking on apply SFO coupon link
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		
		if (lst_fld_Applied_SFO_coupon_SFO_section().size()!=0) {
			System.out.println("SFO applied coupon is displayed");
			btn_close_SFO_coupon_SFO_section().click();
			PauseUtil.pause(1000);
			YES_to_delete_item1_reviewcart().click();
			PauseUtil.waitForAjaxToComplete(2500);
			PauseUtil.pause(2000);
		} else {
			System.out.println("No SFO applied coupon displayed");
		}
		
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
	    SCHUtils.waitForElementToBeClickable(getlink_sfoApplycpn(),2000);
		getlink_sfoApplycpn().click();
		
		// Entering student name and coupon and clicking on apply
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(1000);
		getinputbox_sfocoupon_sname().clear();
		getinputbox_sfocoupon_sname().sendKeys(TestBaseProvider.getTestBase().getTestData()
				.getString("sname1"));
		PauseUtil.pause(1000);
		appgettext_sfocoupon_couponfield_text().clear();
		appgettext_sfocoupon_couponfield_text().sendKeys(
				TestBaseProvider.getTestBase().getTestData().getString("sfofreepick"));
		PauseUtil.pause(1000);
		click_sfo_coupon_ApplyButton_State();
		
		//Search for item using item number from SFO Free Pick modal and clicking on apply
		teacher_search_select_freePick_item_from_the_list_sfo_section();
	}
	
	
	@Override
	public void teacher_navigates_to_paymentpage_from_reviewcartpage_selects_newcard() throws AWTException {
		CartPage cartpage = new CartPage();
		TeachersHomePage teacherhomepage = new TeachersHomePage();
		ICheckoutPage_2 checkoutPage = getFactory().getICheckoutPage_2();
		ICheckoutPage checkoutPage1 = getFactory().getICheckoutPage();
		ShippingAndPayment shippingAndPaymentPage =
    			getFactory().getICheckoutPage().getShippingAndPaymentSection();
		PCOD_ShippingAndPaymentPage pcod_shippage = new PCOD_ShippingAndPaymentPage();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		//if it is in home page, it will click on review cart icon
		if(loginPage.sizeEnter_ClassRoom_Order().size()!=0){
			teacherhomepage.btn_mini_reviewCart().click();
			PauseUtil.waitForAjaxToComplete(2500);
			PauseUtil.pause(2500);
		}
		if(cartpage.sizebtnReviewCart().size()!=0){
			cartpage.btnReviewCart().click();
			PauseUtil.pause(2500);
			}
		cartpage.store_all_information_from_reviewcart_page("SOO");
		cartpage.store_all_information_from_reviewcart_page("SFO");
		cartpage.store_all_information_from_reviewcart_page("YTO");
		cartpage.store_all_information_from_reviewcart_page("TE");
		
		if(size_btn_Continue_checkout_ReviewCart_page().size()!=0){
		btn_Continue_checkout_ReviewCart_page().click();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		btn_Proceed_to_checkout_Promotion_popup().click();
		PauseUtil.pause(2000);
		}
		else{
		cartpage.getLnkRedeemCoupons().click();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		}
        checkoutPage.teacher_clicks_on_ContinueCheckout_Rewards_page();
        checkoutPage1.unCheckPOP();
        PauseUtil.pause(3000);
        WaitUtils.waitForEnabled(shippingAndPaymentPage.getDrpPaymentMethod());
    	SCHUtils.selectOptionsByVisibleText(shippingAndPaymentPage.getDrpPaymentMethod(),
    			ConstantUtils.CREDITCARD);
    	PauseUtil.pause(3000);
    	WaitUtils.waitForEnabled(shippingAndPaymentPage.drpSelectaCard());
    	SCHUtils.selectOptionsByVisibleText(shippingAndPaymentPage.drpSelectaCard(),
    			ConstantUtils.ADDNEWCARD);
    	PauseUtil.pause(3000);
    	pcod_shippage.pcod_addNewCreditCard(TestBaseProvider.getTestBase().getTestData());  
        WaitUtils.waitForEnabled(shippingAndPaymentPage.getBtnContinueCheckout());
	}
	
	@Override
	public void teacher_navigates_to_paymentpage_from_reviewcartpage_selects_savedcard() throws AWTException {
		CartPage cartpage = new CartPage();
		TeachersHomePage teacherhomepage = new TeachersHomePage();
		ICheckoutPage_2 checkoutPage = getFactory().getICheckoutPage_2();
		ICheckoutPage checkoutPage1 = getFactory().getICheckoutPage();
		ShippingAndPayment shippingAndPaymentPage =
    			getFactory().getICheckoutPage().getShippingAndPaymentSection();
		PCOD_ShippingAndPaymentPage pcod_shippage = new PCOD_ShippingAndPaymentPage();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		//if it is in home page, it will click on review cart icon
		if(loginPage.sizeEnter_ClassRoom_Order().size()!=0){
			teacherhomepage.btn_mini_reviewCart().click();
			PauseUtil.waitForAjaxToComplete(2500);
			PauseUtil.pause(2500);
		}
		if(cartpage.sizebtnReviewCart().size()!=0){
			cartpage.btnReviewCart().click();
			PauseUtil.pause(2500);
			}
		cartpage.store_all_information_from_reviewcart_page("SOO");
		cartpage.store_all_information_from_reviewcart_page("SFO");
		cartpage.store_all_information_from_reviewcart_page("YTO");
		cartpage.store_all_information_from_reviewcart_page("TE");
		
		if(size_btn_Continue_checkout_ReviewCart_page().size()!=0){
		btn_Continue_checkout_ReviewCart_page().click();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		btn_Proceed_to_checkout_Promotion_popup().click();
		PauseUtil.pause(2000);
		}
		else{
		cartpage.getLnkRedeemCoupons().click();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		}
        checkoutPage.teacher_clicks_on_ContinueCheckout_Rewards_page();
        checkoutPage1.unCheckPOP();
        PauseUtil.pause(3000);
        WaitUtils.waitForEnabled(shippingAndPaymentPage.getDrpPaymentMethod());
        SCHUtils.selectOptionsByVisibleText(shippingAndPaymentPage.getDrpPaymentMethod(),
                ConstantUtils.CREDITCARD);
        PauseUtil.pause(3000);
        WaitUtils.waitForEnabled(shippingAndPaymentPage.drpSelectaCard());
        SCHUtils.selectOptionsByVisibleText(shippingAndPaymentPage.drpSelectaCard(),
        		TestBaseProvider.getTestBase().getTestData().getString("savedcard"));
        PauseUtil.pause(3000);
        String cardvalue = pcod_shippage.getcreditcarddropdownpayment().getText();
        String digits = cardvalue.substring(cardvalue.length()-4);
        System.out.println("last four digits is :"+digits);
        TestBaseProvider.getTestBase().getContext()
		.setProperty("testexecution.paymentpage.fourdigits.creditcard", digits);
        WaitUtils.waitForEnabled(shippingAndPaymentPage.getBtnContinueCheckout());
	}
	
	
	
	@Override
	public void teacher_navigates_to_paymentpage_from_reviewcartpage_selects_combination_cheque_card() throws AWTException {
		CartPage cartpage = new CartPage();
		TeachersHomePage teacherhomepage = new TeachersHomePage();
		ICheckoutPage_2 checkoutPage = getFactory().getICheckoutPage_2();
		ICheckoutPage checkoutPage1 = getFactory().getICheckoutPage();
		ShippingAndPayment shippingAndPaymentPage =
    			getFactory().getICheckoutPage().getShippingAndPaymentSection();
		PCOD_ShippingAndPaymentPage pcod_shippage = new PCOD_ShippingAndPaymentPage();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		//if it is in home page, it will click on review cart icon
		if(loginPage.sizeEnter_ClassRoom_Order().size()!=0){
			teacherhomepage.btn_mini_reviewCart().click();
			PauseUtil.waitForAjaxToComplete(2500);
			PauseUtil.pause(2500);
		}
		if(cartpage.sizebtnReviewCart().size()!=0){
			cartpage.btnReviewCart().click();
			PauseUtil.pause(2500);
			}
		cartpage.store_all_information_from_reviewcart_page("SOO");
		cartpage.store_all_information_from_reviewcart_page("SFO");
		cartpage.store_all_information_from_reviewcart_page("YTO");
		cartpage.store_all_information_from_reviewcart_page("TE");
		
		if(size_btn_Continue_checkout_ReviewCart_page().size()!=0){
		btn_Continue_checkout_ReviewCart_page().click();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		btn_Proceed_to_checkout_Promotion_popup().click();
		PauseUtil.pause(2000);
		}
		else{
		cartpage.getLnkRedeemCoupons().click();
		PauseUtil.waitForAjaxToComplete(2500);
		PauseUtil.pause(2000);
		}
        checkoutPage.teacher_clicks_on_ContinueCheckout_Rewards_page();
        checkoutPage1.unCheckPOP();
        PauseUtil.pause(3000);
        WaitUtils.waitForEnabled(shippingAndPaymentPage.getDrpPaymentMethod());

	SCHUtils.selectOptionsByVisibleText(shippingAndPaymentPage.getDrpPaymentMethod(),
			ConstantUtils.CCANDCHECKPAYMENTMETHOD);
	PauseUtil.pause(3000);
	WaitUtils.waitForEnabled(shippingAndPaymentPage.drpSelectaCard());
	PauseUtil.pause(3000);
	SCHUtils.selectOptionsByVisibleText(shippingAndPaymentPage.drpSelectaCard(),
			TestBaseProvider.getTestBase().getTestData().getString("savedcard"));
	PauseUtil.pause(3000);
	checkoutPage1.fillCCAndCheckAmount_PaymentPage();
    WaitUtils.waitForEnabled(shippingAndPaymentPage.getBtnContinueCheckout());
	}

}
